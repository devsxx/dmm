/*!
 * jQuery i18n plugin
 * @requires jQuery v1.1 or later
 *
 * See https://github.com/recurser/jquery-i18n
 *
 * Licensed under the MIT license.
 *
 * Version: 1.1.1 (Sun, 05 Jan 2014 05:26:50 GMT)
 */
(function($) {
  /**
   * i18n provides a mechanism for translating strings using a jscript dictionary.
   *
   */

  var __slice = Array.prototype.slice;

  /*
   * i18n property list
   */
  var i18n = {

  	dict: null,

    /**
     * load()
     *
     * Load translations.
     *
     * @param  property_list i18n_dict : The dictionary to use for translation.
     */
  	load: function(i18n_dict) {
      if (this.dict !== null) {
        $.extend(this.dict, i18n_dict);
      } else {
        this.dict = i18n_dict;
      }
  	},

    /**
     * _()
     *
     * Looks the given string up in the dictionary and returns the translation if
     * one exists. If a translation is not found, returns the original word.
     *
     * @param  string str           : The string to translate.
     * @param  property_list params.. : params for using printf() on the string.
     *
     * @return string               : Translated word.
     */
  	_: function (str) {
      dict = this.dict;
  		if (dict && dict.hasOwnProperty(str)) {
  			str = dict[str];
  		}
      args = __slice.call(arguments);
      args[0] = str;
  		// Substitute any params.
  		return this.printf.apply(this, args);
  	},

    /*
     * printf()
     *
     * Substitutes %s with parameters given in list. %%s is used to escape %s.
     *
     * @param  string str    : String to perform printf on.
     * @param  string args   : Array of arguments for printf.
     *
     * @return string result : Substituted string
     */
  	printf: function(str, args) {
  		if (arguments.length < 2) return str;
      args = $.isArray(args) ? args : __slice.call(arguments, 1);
      return str.replace(/([^%]|^)%(?:(\d+)\$)?s/g, function(p0, p, position) {
        if (position) {
          return p + args[parseInt(position)-1];
        }
        return p + args.shift();
      }).replace(/%%s/g, '%s');
  	}

  };

  /*
   * _t()
   *
   * Allows you to translate a jQuery selector.
   *
   * eg $('h1')._t('some text')
   *
   * @param  string str           : The string to translate .
   * @param  property_list params : Params for using printf() on the string.
   *
   * @return element              : Chained and translated element(s).
  */
  $.fn._t = function(str, params) {
    return $(this).html(i18n._.apply(i18n, arguments));
  };

  $.i18n = i18n;
})(jQuery);

define("jquery.i18n", function(){});

/**
 * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.10',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
        	
        	//console.log(name);
        	// comment below line to disable load text file based on templated.
        	
        	var template = masterConfig.template;
        	
        	// 
        	name = name.replace(/(\w+)\/tpl\/([^\.]+)\.(html)/,'template/:template/$1/$2.html');
        	name = name.replace(':template', template);
        	
        	// console.log(name);
        	
            var modName, ext, temp,
                strip = false,
                index = name.indexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1, name.length);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file.indexOf('\uFEFF') === 0) {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                errback(e);
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if(status == 404){
                    	// not found error
                    	callback('base view is not found.');
                    }else
                    if (status > 399 && status < 600) {
                    	
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes,
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});

define(

	'json',[
		"text"
	],

	function (text) {

		var parseJSON = JSON && JSON.parse ? JSON.parse : function (val) {
			return eval("(" + val + ")"); //quick and dirty
		};

		return {

			load : function (name, req, load, config) {

				if (!config.isBuild) {
					req(["text!" + name], function (val) {
						load(parseJSON(val));
					});
				}

				else {
					load("");
				}
			},

			loadFromFileSystem : function (plugin, name) {

				var fs = nodeRequire("fs");
				var file = require.toUrl(name);
				var val = fs.readFileSync(file).toString();

				val = 'define("' + plugin + '!' + name  + '", function () {\nreturn ' + val + ';\n});\n';

				return val;
			},

			write: function (pluginName, moduleName, write) {
				write(this.loadFromFileSystem(pluginName, moduleName));
			}

		};
	}
);

define("json!language/mmr.json", function () {
return {
	"confirm": "Confirm",
	"ok": "Ok",
	"cancel": "မလုိေတာ့ဘူး",
	"no_activities_found": "လႈပ္ရွားမႈမ်ား မရွိပါ။",
	"no_more_activities": "အသစ္ မရွိပါ။",
	"do_you_want_to_log_out_of_application": "ထြက္ရန္",
	"s_create_new_event": "%s ပြဲတခု ဖန္တီးမယ္",
	"s_joined_the_event_s": "%s ပြဲထဲ ပါ၀င္မယ္t %s",
	"is_now_friend_with": "သူငယ္ခ်င္းႏွင့္ အတူ",
	"are_you_sure_to_delete_this_playlist_note_this_action_cannot_rollback": "ဖ်က္မယ္",
	"the_image_has_been_selected": " ပံုေရြးျပီးပါျပီ ",
	"are_you_sure_to_delete_this_photo_note_this_action_cannot_rollback": " ဖ်က္မယ္ ",
	"do_you_want_to_delete_this_photo": " ဖ်က္မယ္ ",
	"photo_deleted_successfully": " ပံုဖ်က္ျပီးပါျပီ ",
	"do_you_want_to_make_this_photo_your_profile_photo": " သင့္ ပရုိင္ဖိုင္အျဖစ္ထားမလား",
	"set_as_profile_photo_successfully": " ပရုိင္ဖိုင္ တင္ျပီးပါျပီ ",
	"please_provide_title_for_your_photo": "ပံုေခါင္းစဥ္ ေရြးပါ",
	"save": "သိမ္းမယ္",
	"saving": "သိမ္းမယ္...",
	"edit_photo_successfully": "ဓာတ္ပံု ျပင္ျပီး",
	"keywords": "Keywords...",
	"s_shared_s_s_s": "%s မ်ွေ၀သည္ %s\'s %s",
	"s_has_added_a_new_profile_photo": "%s ပရုိင္ဖိုင္ အသစ္တင္ျပီး",
	"username_can_not_be_empty": " အမည္ ျဖည့္ရန္",
	"email_can_not_be_null": "အီးေမးလ္ ျဖည့္ရန္!",
	"email_is_not_valid": " အီးေမးလ္ အားခြင့္မျပဳပါ ",
	"password_can_not_be_empty": " လွ်ဳိ႕၀ွက္ကုတ္ ျဖည့္ပါ",
	"password_does_not_match": "လွ်ဳိ႕၀ွက္ကုတ္္ ၂ခုမကိုက္ညီပါ",
	"you_must_agree_to_the_terms_of_service_to_continue": " သေဘာတူပါသည္။ ",
	"can_not_load_data_from_server": "Can not load data from server",
	"uploading_0_please_wait": "တင္ျပီး 0\%, ေစာင့္ပါ ...",
	"can_not_upload_file_s_please_try_again_later": " ေနာက္တၾကိမ္ ၾကိဳးစားပါ။ ",
	"uploading_s_please_wait": "တင္ျပီး %s\%, ေစာင့္ပါ",
	"can_not_get_data_from_server": "Can not get data from server",
	"more": "ဆက္ၾကည့္မယ္",
	"less": "ေခါက္ထားမယ္",
	"s_commented_on_video_s": "%s ဗြီဒီယိုမွာ မွတ္ခ်က္ေပးထားပါသည္။ %s",
             "s_post_new_video_s": "%s ဗြီဒီယို သစ္တင္ထားပါသည္။ %s",
	"please_insert_url": "URL ထည့္ပါ။",
	"link_is_not_valid": "Link is not valid",
	"please_choose_video_type": "ဗြီဒီယို အမ်ိဳးအစားေရြးပါ။",		
	"link_is_not_valid_youtube_video": "Link is not valid YouTube video",
	"link_is_not_valid_vimeo_video": "Link is not valid Vimeo video",
	"are_you_sure_to_delete_this_video": " ဖ်က္မယ္ ",
	"video_title_is_required": " ဗြီဒီယို ေခါင္းစဥ္လုိအပ္သည္။ ",
	"story": "ပံုျပင္",
	"stories": "ပံုျပင္မ်ား",
	"check_in": "Check-in",
	"location_is_not_found": " တည္ေနရာ မေတြ.ပါ။ ",
	"loading": "ခဏေစာင့္ပါ။",
	"insert_url": "URL ထည့္ပါ",
	"video_url": " ဗြီဒီယို URL",
	"post": "တင္မယ္။",
	"update_status": "ပို.စ္တင္ရန္",
	"what_s_on_your_mind": " ဘာေျပာခ်င္ေနလဲ...",
	"delete_this_post": "ဖ်က္မယ္",	
	"report_this_post": "ဒီပို.စ္ကို တုိင္ၾကားမယ္",
	"like_this": "ႏွစ္သက္သည္။",
	"delete": " ဖ်က္မယ္ ",
	"comment_here": "မွတ္ခ်က္ ေရးမယ္။",
	"connection_lost": "Connection Lost",
	"tap_to_retry": "Tap to Retry",
	"pullup_to_load_more": "Pullup to load more",
	"release_to_load": "Release to load",
	"you_do_not_have_permission_to_view_this_private_page": " စာမ်က္ႏွာ ၾကည့္ခြင့္မရွိပါ။",
	"private_page": " ကိုယ္ပိုင္ စာမ်က္ႏွာ ",
	"news_feed": " အသစ္မ်ား",
	"friends": "သူငယ္ခ်င္းမ်ား",
	"videos": "ဗြီဒီယိုမ်ား",
	"albums": "အယ္လ္ဘမ္မ်ား",
	"music": "သီခ်င္းမ်ား",
	"events": "ပြဲမ်ား",
	"mails": "အီးေမးမ်ား",
	"sign_out": " ထြက္မယ္ ",
	"at": "၌",
	"event_name": "ပြဲအမည္",
	"description": "ေဖာ္ျပခ်က္",
	"start_time": "စတင္ခ်ိန္",
	"end_time": "ကုန္ဆံုးခ်ိန္",
	"host": "Host",
	"location": "တည္ေနရာ",
	"main_photo": "အဓိက ဓာတ္ပံု",
	"browse": "Browse",
	"select_category": "အမ်ိဳးအစား  ေ႐ြးခ်ယ္မယ္",
	"privacy": "ကိုယ္ေရးကိုယ္တာ",
	"comment_privacy": "Comment Privacy",
	"add_event": "ပြဲတခုထည့္မယ္",
	"event_activity": "ပြဲလႈပ္ရွားမႈ",
	"info": "သတင္း",
	"activity": "လႈပ္ရွားမႈ",
	"photos": "ဓာတ္ပံုမ်ား",
	"hosted_by": "တင္ဆက္သူ",
	"going": "သြားမယ္",
	"maybe": "ျဖစ္ႏိုင္စရာ",
	"event_photos": "ပြဲ ဓာတ္ပံုမ်ား",
	"edit_event": "ပြဲ ကိုျပန္လည္ျပင္ဆင္မယ္",
	"soon": "မၾကာမီ",
	"past": "ၿပီးခဲ့ေသာ",
	"my": "ကၽြႏု္ပ္-၏",
	"invite": "ဖိတ္သည္။",
	"invite_friends": "သူငယ္ခ်င္းမ်ားကို ဖိတ္သည္။",
	"you_have_no_friends_you_can_invite": "ဖိတ္စရာ သူငယ္ခ်င္းမရွိပါ။",
	"mark_all": "အားလံုးကို မွတ္သားမယ္",
	"unmark_all": "မွတ္သားထားတာအားလံုးကို ဖယ္မယ္",
	"request_invite": "ဖိတ္ေခၚဖုိ. ေတာင္းဆုိမယ္",
	"cancel_invite_request": "ဖိတ္ေခၚဖုိ. ေတာင္းဆုိထားတာကို ဖ်က္သိမ္းမယ္",
	"join": "ဆက္သြယ္မယ္",
	"attending": "တက္ေရာက္ေနသည္",
	"decline": "ျငင္းပယ္သည္",
	"leave": "ထြက္ခြာသည္",
	"search_events": "ပြဲ႐ွာေဖြမယ္",
	"all_categories": "အမ်ိဳးအစား အားလံုး",
	"recently_created": "မၾကာမီက ဖန္တီးထားေသာ",
	"most_popular": "လူူႀကိဳက္အမ်ားဆံုး",
	"search": "႐ွာေဖြမယ္",
	"edit": "ျပင္ဆင္မယ္",
	"delete": "ဖ်က္မယ္",
	"share": "မွ်ေ၀မယ္",
	"has_sent_a_friend_request": "သူငယ္ခ်င္းအျဖစ္ေတာင္းဆုိမွူပို.ျပီးပါျပီ",
	"accept": " လက္ခံမယ္",
	"deny": "ျငင္းမယ္",
	"no_friends_found": "သူငယ္ခ်င္းမေတြ.ပါ",
	"request_sent": "္ေတာင္းဆုိမွူပို.ျပီးပါျပီ",
	"add_friend": "သူငယ္ခ်င္းအျဖစ္ ထည့္ျပီးပါျပီ",
	"send_a_message": "စာတုိ ပို.မယ္",
	"search_friend": "သူငယ္ခ်င္း ႐ွာေဖြမယ္",
	"and": "ႏွင့္",
	"liked_this": "ႏွစ္သက္သည္။",
	"people_who_liked_this": "ႏွစ္သက္သူမ်ား",
	"reply": "ေျဖၾကားမယ္",
	"loading": "ခဏေစာင့္ပါ",
	"between": "အၾကား",
	"you": "သင္",
	"inbox": "Inbox",
	"sent": "ပို.မယ္",
	"no_messages_found": "စာတုိ မရွိပါ",
	"search_your_messages": "သင္၏ စာတုိမ်ား ရွာမယ္",
	"remove": "ဖယ္႐ွားမယ္",
	"to": "သို႔",
	"new_message": "စာတုိ အသစ္",
	"see_all": "အားလံုး ၾကည့္မယ္",
	"send": "ပို႕မယ္",
	"compose": "ေရးသားမယ္",
	"reply_message": "အေၾကာင္းျပန္မယ္...",
	"uploaded_by": "တင္သူ",
	"all_music": "သီခ်င္းအားလံုး",
	"my_music": "ကုိယ္ပိုင္ သီခ်င္း",
	"by": " | ",
	"search_albums": "အယ္လ္ဘမ္ ရွာမယ္",
	"no_new_notification": "အသိေပးခ်က္ မရွိပါ",
	"mark_all_as_read": "အားလံုးကိုဖတ္ျပီးသားလုိ.မွတ္မယ္",
	"view_priviacy": "ကိုယ္ေရးဖိုင္ ၾကည့္မယ္",
	"edit_album": "အယ္လ္ဘမ္ ျပင္မယ္",
	"create_album": "အယ္လ္ဘမ္ ဖန္တီးမယ္",
	"recent": "မၾကာမီက",
	"popular": "လူႀကိဳက္မ်ားေသာ",
	"report_this_photo": "ဒီဓာတ္ပံုကို တုိင္ၾကားမယ္",
	"title": "ေခါင္းစဥ္",
	"type": "အမ်ိဳးအစား",
	"spam": "Spam",
	"abuse": "Abuse",
	"inappropriate_content": "မသင့္ေတာ္ ေသာ အရာ",
	"licensed_material": "Licensed Material",
	"other": "တျခား",
	"report": "တုိင္ၾကားမယ္",
	"start_time": "စတင္ခ်ိန္",
	"write_something_about_this_post": "ဒီပုိ.စ္မွာ တခုခုေရးမယ္",
	"personal_information": " ကိုယ္ေရး အခ်က္အလက္ ",
	"first_name": "အမည္",
	"last_name": "အမည္",
	"select_gender": "လိင္",
	"male": "အမ်ိဳးသား",
	"female": "အမ်ိဳးသမီး",
	"birthday": "ေမြးေန.",
	"contact_information": "ဆက္သြယ္ရန္ လိပ္စာ",
	"website": "Website",
	"about_me": "ကိုယ္ေရးအက်ဥ္း",
	"personal_info": "ကိုယ္ေရး အခ်က္အလက္",
	"edit_my_photo": "ဓာတ္ပံု ျပဳျပင္မယ္",
	"edit_personal_info": "ကိုယ္ေရး အခ်က္အလက္ ျပင္မယ္",
	"you_do_not_have_permission_to_view_this_private_page": "သီးသန္.စာမ်က္ႏွာျဖစ္၍  ၾကည့္ခြင့္မရပါ။",
	"term_service": "စည္းကမ္းခ်က္",
	"about": "အေၾကာင္းအရာ",
	"about_uppercase": "အေၾကာင္းအရာ",
	"photo_uppercase": "ဓာတ္ပံု",
	"friend_uppercase": "သူငယ္ခ်င္း",
	"about_me": "ကိုယ္ေရးအက်ဥ္း",
	"contact_information": "ဆက္သြယ္ရန္ လိပ္စာ",
	"forgot_password": "လွ်ဳိ႕၀ွက္ကုတ္ ေမ့ေနတယ္",
	"an_email_with_instruction_will_be_sent_to_your_email_below_to_reset_password": "လွ်ဳိ႕၀ွက္ကုတ္ အသစ္ႏွင့္ အသံုးျပဳပံု အီးေမးလ္အား သင့္အီးေမးလ္ထံပို.ပါမည္။ ",
	"your_email": "သင့္ အီးေမးလ္",
	"email_address": "အီးေမးလ္ လိပ္စာ",
	"password": "လွ်ဳိ႕၀ွက္ကုတ္",
	"sign_in": "၀င္ရန္",
	"sign_up": "အေကာင့္သစ္ဖြင့္ရန္",
	"signing_in": "၀င္ရန္...",
	"forgot_password": "လွ်ဳိ႕၀ွက္ကုတ္ ေမ့ေနတယ္",
	"next": "ေနာက္",
	"create_account": "အေကာင့္သစ္ ဖြင့္ရန္",
	"username": "အသံုးျပဳသူ အမည္",
	"email": "အီးေမးလ္",
	"confirm_password": "လွ်ဳိ႕၀ွက္ကုတ္ကို အတည္ျပဳမယ္",
	"read_and_aggree_with": "  မ်ားကိုလုိက္နာပါမည္။",
	"personal_information": "ကိုယ္ပိုင္ အခ်က္အလက္",
	"upload_avatar": "ပံုတင္မယ္",
	"un_friend": "သူငယ္ခ်င္းအျဖစ္က ရပ္စဲမယ္",
	"un_block": "ပိတ္ဆို႔မွု မွရပ္စဲမယ္",
	"block": "ဖယ္ရွားမယ္",
	"upload_video": "ဗီြဒီယို တင္မယ္",
	"video_title": "ဗီြဒီယို ေခါင္းစဥ္",
	"tag_keywords": "ပူးတြဲမယ္",
	"categories": "အမ်ိဳးအစားမ်ား",
	"comment_privacy": "မွတ္ခ်က္",
	"from_device": "စက္မွတဆင့္",
	"from_url": "URL မွတဆင့္",
	"the_video_you_are_looking_for_has_not_been_processed_yet": "The video you are looking for has not been processed yet",
	"edit_video": "ဗြီဒီယို ျပင္ဆင္မယ္",
	"all_videos": "ဗြီဒီယို အားလံုး",
	"my_videos": "ကိုယ္ပိုင္ ဗီြဒီယို",
	"search_video": "ဗီြဒီယို ရွာမယ္",
	"most_recent": "Most Recent",
	"most_viewed": "အၾကည့္ အမ်ားဆံုး",
	"highest_rated": "အျမင့္ဆံုး ခန္.မွန္းခ်က္",
	"edit_this_video": "ဗီြဒီယိုကို ျပင္ဆင္မယ္",
	"delete_this_video": "ဗီြဒီယိုကို ဖ်က္မယ္",
	"report_this_video": "ဗီြဒီယိုကို  တုိင္ၾကားမယ္",
	"forum": "ဖိုရမ္",
	"comment": "မွတ္ခ်က္",
	"no_forums_found": "ဖိုရမ္ မေတြ.ပါ",
	"no_more_forums": " ေနာက္ထပ္ ဖိုရမ္ မေတြ.ပါ",
	"topic": "အေၾကာင္းအရာ",
	"topics": "အေၾကာင္းအရာမ်ား",
	"post_lowercase": "post",
	"posts_lowercase": "posts",
	"no_topics_found": "အေၾကာင္းအရာမ်ား မေတြ.ပါ",
	"no_more_topics": "ေနာက္ထပ္ အေၾကာင္းအရာမ်ား မေတြ.ပါ",
	"topic_capitalize": "အေၾကာင္းအရာမ်ား",
	"no_posts_found": "ပို.စ္ မ်ားမေတြ.ပါ",
	"no_more_posts": "ေနာက္ထပ္ ပို.စ္ မ်ားမေတြ.ပါ",
	"watch_topic": "အေၾကာင္းအရာမ်ား ၾကည့္မယ္",
	"stop_watching": "ၾကည့္႐ႈျခင္း ရပ္တန္.မယ္",
	"post_topic": "Post Topic",
	"content": "ပါဝင္ေသာ အရာ",
	"send_me_notifications_when_other_members_reply_to_this_topic": " အျခားအဖြဲ.၀င္မ်ား ျပန္ၾကားေသာအခါ အသိေပးမယ္။ ",
	"content_cannot_be_empty": "အေၾကာင္းအရာ သည္ဗလာျဖစ္မေနသင့္ပါ။",
	"title_cannot_be_empty": "ေခါင္းစဥ္သည္ ဗလာျဖစ္မေနသင့္ပါ။",
	"please_enter_title_no_more_than_64_characters": "Please enter Title no more than 64 characters",
	"this_post_has_a_photo_attached_do_you_want_to_delete_it": "This post has a photo attached. Do you want to delete it?",
	"edit_post_capitalize": "ပို.စ္ ျပင္မယ္",
	"said": "said",
	"edit_post": "ပို.စ္ ျပင္မယ္",
	"delete_post": "ပို.စ္ ဖ်က္မယ္",
	"quote_post": "ပို.စ္ ကိုးကားမယ္",
	"report_this_post": "ဒီပို.စ္ကို တုိင္ၾကားမယ္",
	"post_topic": "ပို.စ္ အေၾကာင္းအရာ ",
	"last_post": "ေနာက္ဆံုး ပို.စ္",
	"post_reply": "ပို.စ္ ကို ျပန္ၾကားမယ္",
	"s_posted_a_s_in_the_forum_s": "%s posted a %s in the forum %s",
	"s_replied_to_a_s_in_the_forum_s": "%s replied to a %s in the forum %s",
	"not_attending": "မတက္ေရာက္ပါ",
	"guest_list": "ဧည့္သည္ စာရင္း",
	"no_guests_found": "ဧည့္သည္ မရွိပါ.",
	"password_must_be_longer_than_6": "လွ်ဳိ႕၀ွက္ကုတ္ သည္ ၆လံုးထက္ပိုရွည္ရပါမည္။",
	"state_province":"ျပည္နယ္/ေဒသ",
	"edit_profile":"ပရိုဖိုင္ျပင္ရန္",
	"select":"ေရြးရန္",
	"city":"ၿမိဳ႕ေတာ္",
	"date_of_birth":"ေမြးရက္",
	"gender":"လိင္",
	"about_me":"ကိုယ္ေရးအက်ဥ္း",
	"edit_cover":"မ်က္ႏွာဖံုး ဓာတ္ပံုျပင္မယ္",
	"ABOUT_1":"အေၾကာင္းအရာ",
	"PHOTO_1":"ဓာတ္ပံု",
	"FRIEND_1":"သူငယ္ခ်င္း",
	"relationship":"ပက္သက္မွႈ",
	"fullname":"အမည္",
	"edit_info":"ကိုယ္ေရးဖိုင္ျပင္မယ္",
	"Edit Avatar":"ဓာတ္ပံုျပင္မယ္",
	"edit_cover":"မ်က္ႏွာဖံုး ဓာတ္ပံုျပင္မယ္",
	"remove_dislike":"မႏွစ္သက္တာေတြ ဖယ္ရွားမယ္",
	"dislike":"မႏွစ္သက္ပါ",
	"video_from_device": "ဗီြဒီယိုဖိုင္ကို စက္မွတဆင့္",
	"Poll":"မဲဆႏၵ",
	"add_new_blog":"ဘေလာ့တခု တင္မယ္",
	"public":"အမ်ားႏွင့္စပ္ဆိုင္ေသာ။",
	"personal":"ကိုယ္ပိုုင္",
	"status":"အေနအထား",
	"publish":"အမ်ားျမင္ေအာင္တင္မယ္",
	"draft":"သိမ္းထားမယ္",
	"view_privacy":"ကိုယ္ေရးအခ်က္အလက္ေတြၾကည့္မယ္",
	"comment_privacy":"မွတ္ခ်က္ေပးမယ္",
	"attachments":"ပူးတြဲတင္ရန္",
	"public_categories":"အမ်ိဳးအစားမ်ား",
	"personal_categories":"ကိုယ္ပိုင္ အမ်ိဳးအစား",
	"no_categories_added":"အမ်ိဳးအစားထပ္မထည့္ပါ",
	"this_blog_is_pending_an_Admins_approval":"စီမံသူ ခြင့္ျပဳခ်က္ေစာင့္ရပါမယ္",
	"edit_blog":"ျပင္ဆင္မယ္",
	"insert_image":"ပံုထည့္ရန္",
	"no_blogs_found":"ဘေလာ့မရွိပါ",
	"all_blogs":"ဘေလာ့မ်ား",
	"my_blogs":"ကိုယ္ပိုင္ ဘေလာ့မ်ား",
	"approved":"ခြင့္ျပဳသည္",
	"pending":"ေစာင့္ဆုိင္းေနသည္",
	"latest":"လတ္တေလာ",
	"most_liked":"ႏွစ္သက္မွု အမ်ားဆံုး",
	"most_discussed":"ေဆြးေႏြးမွု အမ်ားဆံုး",
	"no_contact_found":"ဆက္သြယ္ရန္ မေတြ.ပါ",
	"search_friend":"သူငယ္ခ်င္းရွာရန္",
	"your_message":"သင္၏ စာတုိ",
	"page":"စာမ်က္ႏွာ",
	"disliked_this":"မၾကိဳက္ပါ",
	"people_who_disliked_this":"People who disliked this",
	"ceate_event":"ပြဲတခုဖန္တီးမယ္",
	"starting_date":"စတင္မည့္ေန.",
	"ending_date":"ျပီးဆံုးမည့္ေန.",
	"category":"အမ်ိဳးအစား",
	"main_photo":"အဓိက ဓာတ္ပံု",
	"i_attending":"တက္ေရာက္ေနသည္",
	"i_may_attend": "တက္ေရာက္ႏုိင္သည္",
	"i_not_attending":"မတက္ေရာက္ပါ",
	"event_invites":"ပြဲဖိတ္ၾကားမွုမ်ား",
	"more":"ေနာက္ထပ္",
	"inbox":"လက္ခံစာ",
	"sent_msg":"ပို.စာ",
	"re":"ထပ္မံ၍",
	"subject":"အေၾကာင္းအရာ",
	"message":"စာတုိ",
	"my_songs":"ကုိယ္ပိုင္သီခ်င္းမ်ား",
	"no_albums_found":"အယ္လ္ဘမ္ မေတြ.ပါ",
	"my_albums":"ကိုယ္ပိုင္ အယ္လ္ဘမ္",
	"created":"ဖန္တီးထားေသာ",
	"report_this_album":"ဒီအယ္လ္ဘမ္ကို တုိင္ၾကားမယ္",
	"search_songs":"သီခ်င္းရွာရန္",
	"genres":"အႏုပညာ အမ်ိဳးအစားမ်ား",
	"create_new_page":"စာမ်က္ႏွာအသစ္ ဖန္တီးရန္",
	"select_a_category":"အမ်ိဳးအစားေရြးရန္",
	"name":"အမည္",
	"information":"အခ်က္အလက္",
	"page_activity":"လႈပ္ရွားမႈမ်ား",
	"liked":"ႏွစ္သက္သည္။",
	"all_songs":"သီခ်င္းအားလံုး",
	"all_albums":"အယ္လ္ဘမ္မ်ား",
	"add_albums":"အယ္လ္ဘမ္ထည့္ရန္",
	"view_albums":"အယ္လ္ဘမ္ၾကည့္ရန္",
	"view_photos":"ဓာတ္ပံုၾကည့္ရန္",
	"cover_photo":"မ်က္ႏွာဖံုး ဓာတ္ပံု",
	"no_pages_found":"စာမ်က္ႏွာမ်ားမရွိပါ",
	"all_pages":"စာမ်က္ႏွာမ်ား",
	"my_pages":"ကိုယ္ပိုင္စာမ်က္ႏွာ",
	"invite_members":"အဖြဲ.၀င္မ်ားကို ဖိတ္ေခၚမယ္",
	"search_pages":"စာမ်က္ႏွာရွာရန္",
	"album_name":"အယ္လ္ဘမ္ အမည္",
	"album_priviacy":"အယ္လ္ဘမ္ စည္းမ်ဥ္း",
	"take_photo":"ဓာတ္ပံုရိုက္မယ္",
	"select_from_gallery":"အယ္လ္ဘမ္မွယူရန္",
	"edit_photo":"ဓာတ္ပံု ျပင္ရန္",
	"delete_photo":"ဓာတ္ပံု ဖ်က္ရန္",
	"make_profile_photo":"ပရိုဖိုင္ပံုလုပ္ရန္",
	"my_photos":"ကိုယ္ပိုင္ဓာတ္ပံုမ်ား",
	"search_photos":"ဓာတ္ပံု ရွာရန္",
	"share_on_your_wall":"သင့္စာမ်က္ႏွာေပၚ မ်ွေ၀မယ္",
	"share_via_social":"သင့္ ဆုိရွယ္အေကာင့္မွာ မ်ွေ၀မယ္",
	"source":"မူလ",
	"select_type":"အမ်ိဳးအစားေရြးရန္",
	"file_upload":"ဖုိင္တင္ရန္",
	"video_is_being_processed":"ဗီြဒီယို  အလုပ္ လုပ္ေနပါတယ္",
	"be_the_first_of_your_friends_to_ like_this":"ပထမဆံုးႏွစ္သက္သူျဖစ္လိမ့္မည္။",
	"shared_a_few_photos":"ဓာတ္ပံုတင္ထားသည္။",
	"shared_a_photo":"ဓာတ္ပံုတင္ထားသည္။",
	"shared_a_link":"လင့္တခု မွ်ေ၀မယ္",
	"shared_a_song":"သီခ်င္းတပုဒ္ မွ်ေ၀မယ္",
	"shared_s":"shared %s\'s %s",
	"edit_avatar":"ကိုယ္စားျပဳပံု ျပင္မယ္",
	"activity_points": "ပိြဳင့္မ်ား",
	"songs":"သီခ်င္းမ်ား",
	"ago":" ခန္.က ",
	"created1":" တင္ထားသည္ ",
	"likes":"ႏွစ္သက္သည္",
	"like":"ႏွစ္သက္သည္",
	"blogs":"မွတ္သားစရာမ်ား",
	"loading...":"ခဏေစာင့္ပါ",


};
});


define("json!language/mmr_custom.json", function () {
return {
	"foo": "Phuu"
};
});

define('utils/plugin/i18n',[
	'jquery.i18n', 
	'json!language/mmr.json', 
	'json!language/mmr_custom.json'
], function(jquery_i18n, _default, custom) {

	$.i18n.load(_default, 'mmr');
	$.i18n.load(custom,'mmr');

	return $.i18n;
})
;
//! moment.js
//! version : 2.5.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {

    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = "2.5.1",
        global = this,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for language config files
        languages = {},

        // moment internal properties
        momentProperties = {
            _isAMomentObject: null,
            _i : null,
            _f : null,
            _l : null,
            _strict : null,
            _isUTC : null,
            _offset : null,  // optional. Combine with _isUTC
            _pf : null,
            _lang : null  // optional
        },

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports && typeof require !== 'undefined'),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.lang().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.lang().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.lang().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.lang().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.lang().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.lang().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Language() {

    }

    // Moment prototype object
    function Moment(config) {
        checkOverflow(config);
        extend(this, config);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            years * 12;

        this._data = {};

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty("toString")) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty("valueOf")) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function cloneMoment(m) {
        var result = {}, i;
        for (i in m) {
            if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
                result[i] = m[i];
            }
        }

        return result;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    // helper function for _.addTime and _.subtractTime
    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months,
            minutes,
            hours;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        // store the minutes and hours so we can restore them
        if (days || months) {
            minutes = mom.minute();
            hours = mom.hour();
        }
        if (days) {
            mom.date(mom.date() + days * isAdding);
        }
        if (months) {
            mom.month(mom.month() + months * isAdding);
        }
        if (milliseconds && !ignoreUpdateOffset) {
            moment.updateOffset(mom);
        }
        // restore the minutes and hours after possibly changing dst
        if (days || months) {
            mom.minute(minutes);
            mom.hour(hours);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return  Object.prototype.toString.call(input) === '[object Date]' ||
                input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment.fn._lang[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment.fn._lang, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLanguage(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Languages
    ************************************/


    extend(Language.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : "h:mm A",
            L : "MM/DD/YYYY",
            LL : "MMMM D YYYY",
            LLL : "MMMM D YYYY LT",
            LLLL : "dddd, MMMM D YYYY LT"
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : "in %s",
            past : "%s",
            s : "စကၠန္႔ အနည္းငယ္ခန္႔က ",
            m : "တစ္မိနစ္ ခန္႔က",
            mm : "%d မိနစ္ ခန္႔က",
            h : "တစ္နာရီ ခန္႔က",
            hh : "%d နာရီ ခန္႔က",
            d : "တစ္ရက္ ခန္႔က",
            dd : "%d ရက္ ခန္႔က",
            M : "တစ္လ  ခန္႔က",
            MM : "%d လ ခန္႔က",
            y : "တစ္ႏွစ္ ခန္႔က",
            yy : "%d ႏွစ္ ခန္႔က"
        },		
        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },
        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace("%d", number);
        },
        _ordinal : "%d",

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    // Loads a language definition into the `languages` cache.  The function
    // takes a key and optionally values.  If not in the browser and no values
    // are provided, it will load the language file module.  As a convenience,
    // this function also returns the language values.
    function loadLang(key, values) {
        values.abbr = key;
        if (!languages[key]) {
            languages[key] = new Language();
        }
        languages[key].set(values);
        return languages[key];
    }

    // Remove a language from the `languages` cache. Mostly useful in tests.
    function unloadLang(key) {
        delete languages[key];
    }

    // Determines which language definition to use and returns it.
    //
    // With no parameters, it will return the global language.  If you
    // pass in a language key, such as 'en', it will return the
    // definition for 'en', so long as 'en' has already been loaded using
    // moment.lang.
    function getLangDefinition(key) {
        var i = 0, j, lang, next, split,
            get = function (k) {
                if (!languages[k] && hasModule) {
                    try {
                        require('./lang/' + k);
                    } catch (e) { }
                }
                return languages[k];
            };

        if (!key) {
            return moment.fn._lang;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            lang = get(key);
            if (lang) {
                return lang;
            }
            key = [key];
        }

        //pick the language from the array
        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        while (i < key.length) {
            split = normalizeLanguage(key[i]).split('-');
            j = split.length;
            next = normalizeLanguage(key[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                lang = get(split.slice(0, j).join('-'));
                if (lang) {
                    return lang;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return moment.fn._lang;
    }

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = "";
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {

        if (!m.isValid()) {
            return m.lang().invalidDate();
        }

        format = expandFormat(format, m.lang());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, lang) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return lang.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) { return parseTokenOneDigit; }
            /* falls through */
        case 'SS':
            if (strict) { return parseTokenTwoDigits; }
            /* falls through */
        case 'SSS':
            if (strict) { return parseTokenThreeDigits; }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return getLangDefinition(config._l)._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || "";
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = getLangDefinition(config._l).monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = getLangDefinition(config._l).isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'dd':
        case 'ddd':
        case 'dddd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gg':
        case 'gggg':
        case 'GG':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = input;
            }
            break;
        }
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate,
            yearToUse, fixYear, w, temp, lang, weekday, week;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            fixYear = function (val) {
                var int_val = parseInt(val, 10);
                return val ?
                  (val.length < 3 ? (int_val > 68 ? 1900 + int_val : 2000 + int_val) : int_val) :
                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);
            };

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);
            }
            else {
                lang = getLangDefinition(config._l);
                weekday = w.d != null ?  parseWeekday(w.d, lang) :
                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);

                week = parseInt(w.w, 10) || 1;

                //if we're parsing 'd', then the low day numbers may be next week
                if (w.d != null && weekday < lang._week.dow) {
                    week++;
                }

                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);
            }

            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid
        input[HOUR] += toInt((config._tzm || 0) / 60);
        input[MINUTE] += toInt((config._tzm || 0) % 60);

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var lang = getLangDefinition(config._l),
            string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = extend({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function makeDateFromString(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || " ");
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += "Z";
            }
            makeDateFromStringAndFormat(config);
        }
        else {
            config._d = new Date(string);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched = aspNetJsonRegex.exec(input);

        if (input === undefined) {
            config._d = new Date();
        } else if (matched) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else {
            config._d = new Date(input);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, language) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = language.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(milliseconds, withoutSuffix, lang) {
        var seconds = round(Math.abs(milliseconds) / 1000),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < 45 && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < 45 && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < 22 && ['hh', hours] ||
                days === 1 && ['d'] ||
                days <= 25 && ['dd', days] ||
                days <= 45 && ['M'] ||
                days < 345 && ['MM', round(days / 30)] ||
                years === 1 && ['y'] || ['yy', years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        args[4] = lang;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        if (input === null) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = getLangDefinition().preparse(input);
        }

        if (moment.isMoment(input)) {
            config = cloneMoment(input);

            config._d = new Date(+input._d);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = lang;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    // creating with utc
    moment.utc = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = lang;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
            ret._lang = input._lang;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    moment.lang = function (key, values) {
        var r;
        if (!key) {
            return moment.fn._lang._abbr;
        }
        if (values) {
            loadLang(normalizeLanguage(key), values);
        } else if (values === null) {
            unloadLang(key);
            key = 'en';
        } else if (!languages[key]) {
            getLangDefinition(key);
        }
        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
        return r._abbr;
    };

    // returns language data
    moment.langData = function (key) {
        if (key && key._lang && key._lang._abbr) {
            key = key._lang._abbr;
        }
        return getLangDefinition(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function (input) {
        return moment(input).parseZone();
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {

            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function () {
            return this.zone(0);
        },

        local : function () {
            this.zone(0);
            this._isUTC = false;
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.lang().postformat(output);
        },

        add : function (input, val) {
            var dur;
            // switch args to support add('s', 1) and add(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this;
        },

        subtract : function (input, val) {
            var dur;
            // switch args to support subtract('s', 1) and subtract(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, -1);
            return this;
        },

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function () {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var sod = makeAs(moment(), this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.lang().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.lang());
                return this.add({ d : input - day });
            } else {
                return day;
            }
        },

        month : function (input) {
            var utc = this._isUTC ? 'UTC' : '',
                dayOfMonth;

            if (input != null) {
                if (typeof input === 'string') {
                    input = this.lang().monthsParse(input);
                    if (typeof input !== 'number') {
                        return this;
                    }
                }

                dayOfMonth = this.date();
                this.date(1);
                this._d['set' + utc + 'Month'](input);
                this.date(Math.min(dayOfMonth, this.daysInMonth()));

                moment.updateOffset(this);
                return this;
            } else {
                return this._d['get' + utc + 'Month']();
            }
        },

        startOf: function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: function (other) {
            other = moment.apply(null, arguments);
            return other < this ? this : other;
        },

        max: function (other) {
            other = moment.apply(null, arguments);
            return other > this ? this : other;
        },

        zone : function (input) {
            var offset = this._offset || 0;
            if (input != null) {
                if (typeof input === "string") {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                this._offset = input;
                this._isUTC = true;
                if (offset !== input) {
                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? "UTC" : "";
        },

        zoneName : function () {
            return this._isUTC ? "Coordinated Universal Time" : "";
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
        },

        quarter : function () {
            return Math.ceil((this.month() + 1.0) / 3.0);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return input == null ? year : this.add("y", (input - year));
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add("y", (input - year));
        },

        week : function (input) {
            var week = this.lang().week(this);
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
            return input == null ? weekday : this.add("d", input - weekday);
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a language key, it will set the language for this
        // instance.  Otherwise, it will return the language configuration
        // variables for this instance.
        lang : function (key) {
            if (key === undefined) {
                return this._lang;
            } else {
                this._lang = getLangDefinition(key);
                return this;
            }
        }
    });

    // helper for adding shortcuts
    function makeGetterAndSetter(name, key) {
        moment.fn[name] = moment.fn[name + 's'] = function (input) {
            var utc = this._isUTC ? 'UTC' : '';
            if (input != null) {
                this._d['set' + utc + key](input);
                moment.updateOffset(this);
                return this;
            } else {
                return this._d['get' + utc + key]();
            }
        };
    }

    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)
    for (i = 0; i < proxyGettersAndSetters.length; i ++) {
        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);
    }

    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')
    makeGetterAndSetter('year', 'FullYear');

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);
            data.days = days % 30;

            months += absRound(days / 30);
            data.months = months % 12;

            years = absRound(months / 12);
            data.years = years;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var difference = +this,
                output = relativeTime(difference, !withSuffix, this.lang());

            if (withSuffix) {
                output = this.lang().pastFuture(difference, output);
            }

            return this.lang().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            units = normalizeUnits(units);
            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
        },

        lang : moment.fn.lang,

        toIsoString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn['as' + name] = function () {
            return +this / factor;
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase());
        }
    }

    makeDurationAsGetter('Weeks', 6048e5);
    moment.duration.fn.asMonths = function () {
        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
    };


    /************************************
        Default Lang
    ************************************/


    // Set default language, other languages will inherit from English.
    moment.lang('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LANGUAGES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(deprecate) {
        var warned = false, local_moment = moment;
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        // here, `this` means `window` in the browser, or `global` on the server
        // add `moment` as a global object via a string identifier,
        // for Closure Compiler "advanced" mode
        if (deprecate) {
            global.moment = function () {
                if (!warned && console && console.warn) {
                    warned = true;
                    console.warn(
                            "Accessing Moment through the global scope is " +
                            "deprecated, and will be removed in an upcoming " +
                            "release.");
                }
                return local_moment.apply(null, arguments);
            };
            extend(global.moment, local_moment);
        } else {
            global['moment'] = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
        makeGlobal(true);
    } else if (typeof define === "function" && define.amd) {
        define("moment", ['require','exports','module'],function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal !== true) {
                // If user provided noGlobal, he is aware of global
                makeGlobal(module.config().noGlobal === undefined);
            }

            return moment;
        });
    } else {
        makeGlobal();
    }
}).call(this);

/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define('numeral',[], function () {
            return numeral;
        });
    }
}).call(this);

//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.2'

!function(root, String){
  

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  // Helper for toBoolean
  function boolMatch(s, matchers) {
    var i, matcher, down = s.toLowerCase();
    matchers = [].concat(matchers);
    for (i = 0; i < matchers.length; i += 1) {
      matcher = matchers[i];
      if (!matcher) continue;
      if (matcher.test && matcher.test(s)) return true;
      if (matcher.toLowerCase() === down) return true;
    }
  }

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    amp: '&',
    apos: "'"
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;
  reversedEscapeChars["'"] = '#39';

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;

      str = String(str);
      substr = String(substr);

      var count = 0,
        pos = 0,
        length = substr.length;

      while (true) {
        pos = str.indexOf(substr, pos);
        if (pos === -1) break;
        count++;
        pos += length;
      }

      return count;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      str  = String(str).toLowerCase();
      return str.replace(/(?:^|\s|-)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : ""; });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/[\W_]/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (!str) return 0;
      str = _s.trim(str);
      if (!str.match(/^-?\d+(?:\.\d+)?$/)) return NaN;
      return parseNumber(parseNumber(str).toFixed(~~decimals));
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = typeof tsep == 'string' ? tsep : ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', ';
      lastSeparator = lastSeparator || ' and ';
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź",
          to    = "aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str, quoteChar) {
      return _s.surround(str, quoteChar || '"');
    },

    unquote: function(str, quoteChar) {
      quoteChar = quoteChar || '"';
      if (str[0] === quoteChar && str[str.length-1] === quoteChar)
        return str.slice(1,str.length-1);
      else return str;
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    naturalCmp: function(str1, str2){
      if (str1 == str2) return 0;
      if (!str1) return -1;
      if (!str2) return 1;

      var cmpRegex = /(\.\d+)|(\d+)|(\D+)/g,
        tokens1 = String(str1).toLowerCase().match(cmpRegex),
        tokens2 = String(str2).toLowerCase().match(cmpRegex),
        count = Math.min(tokens1.length, tokens2.length);

      for(var i = 0; i < count; i++) {
        var a = tokens1[i], b = tokens2[i];

        if (a !== b){
          var num1 = parseInt(a, 10);
          if (!isNaN(num1)){
            var num2 = parseInt(b, 10);
            if (!isNaN(num2) && num1 - num2)
              return num1 - num2;
          }
          return a < b ? -1 : 1;
        }
      }

      if (tokens1.length === tokens2.length)
        return tokens1.length - tokens2.length;

      return str1 < str2 ? -1 : 1;
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    },

    toBoolean: function(str, trueValues, falseValues) {
      if (typeof str === "number") str = "" + str;
      if (typeof str !== "string") return !!str;
      str = _s.trim(str);
      if (boolMatch(str, trueValues || ["true", "1"])) return true;
      if (boolMatch(str, falseValues || ["false", "0"])) return false;
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;
  _s.toBool   = _s.toBoolean;

  // Exporting

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports)
      module.exports = _s;

    exports._s = _s;
  }

  // Register as a named module with AMD.
  if (typeof define === 'function' && define.amd)
    define('underscore.string', [], function(){ return _s; });


  // Integrate with Underscore.js if defined
  // or create our own underscore object.
  root._ = root._ || {};
  root._.string = root._.str = _s;
}(this, String);

/*jsl:option explicit*/
/*jsl:declare document*/
/*
This class is used to cut the string which is having html tags. 
It does not count the html tags, it just count the string inside tags and keeps
the tags as it is.

ex: If the string is "welcome to <b>JS World</b> <br> JS is bla". and If we want to cut the string of 12 charaters then output will be "welcome to <b>JS</b>". 

Here while cutting the string it keeps the tags for the cutting string and skip the rest and without distorbing the div structure.

USAGE:
 var obj = new cutString("welcome to <b>JS World</b> <br> JS is",12);
 var newCutString = obj.cut();
*/

define('cutstring',[],function(){
	
	function CutString(string,limit){
	    // temparary node to parse the html tags in the string
	    this.tempDiv = document.createElement('div');
	    this.tempDiv.id = "TempNodeForTest";
	    this.tempDiv.innerHTML = string;
	    // while parsing text no of characters parsed
	    this.charCount = 0;
	    this.limit = limit;
	
	}
	CutString.prototype.cut = function(){
	    var newDiv = document.createElement('div');
	    this.searchEnd(this.tempDiv, newDiv);
	    return newDiv.innerHTML;
	};
	
	CutString.prototype.searchEnd = function(parseDiv, newParent){
	    var ele;
	    var newEle;
	    for(var j=0; j< parseDiv.childNodes.length; j++){
		ele = parseDiv.childNodes[j];
		// not text node
		if(ele.nodeType != 3){
		    newEle = ele.cloneNode(true);
		    newParent.appendChild(newEle);
		    if(ele.childNodes.length === 0)
			continue;
		    newEle.innerHTML = '';
		    var res = this.searchEnd(ele,newEle);
		    if(res)
			return res;
		    else{
			continue;
		    }
		}
	
		// the limit of the char count reached
		if(ele.nodeValue.length + this.charCount >= this.limit){
		    newEle = ele.cloneNode(true);
		    newEle.nodeValue = ele.nodeValue.substr(0, this.limit - this.charCount);
		    newParent.appendChild(newEle);
		    return true;
		}
		newEle = ele.cloneNode(true);
		newParent.appendChild(newEle);
		this.charCount += ele.nodeValue.length;
	    }
	    return false;
	};
	
	function cutHtmlString($string, $limit){
	    return new CutString($string,$limit).cut();
	}
	
	return cutHtmlString;
});
define('utils/plugin/str',[
    'underscore.string',
    'cutstring',
], function(STR) {

    STR.cutHtml = require('cutstring');

    STR.reEscapeHTML = function(str) {

        return _.string.escapeHTML(str).replace(/&amp;/gi, '&');
    }

    STR.shorten = function(str, max, flag) {

        var strippedStr = _.string.unescapeHTML(STR.stripTags(str));

        var len = strippedStr.length;

        if (len <= max) {
            return flag ? str : _.string.reEscapeHTML(strippedStr);
        }

        if (!flag) {
            return _.string.reEscapeHTML(STR.truncate(strippedStr, max, '...'));
        }

        return '<span class="shorten-text-less">' + _.string.reEscapeHTML(strippedStr.substring(0, max)) + ' ...</span>' + '<a class="shorten-link-more" rel="shorten"> ' + _t('more') + ' </a>' + '<span class="shorten-text-more hide">' + str + '</span>' + '<a class="shorten-link-less hide" rel="shorten"> ' + _t('less') + ' </a>';
    }

    STR.shortenHtml = function(str, max, flag) {

        var len = STR.stripTags(str).length;

        if (len <= max) {
            return str;
        }

        if (!flag) {
            return STR.cutHtml(str, max);
        }

        var less = str.substring(0, max);
        var more = str.substring(max);

        var result = '<span class="shorten-text-less">' + STR.cutHtml(str, max) + ' ...</span>' + '<a class="shorten-link-more" rel="shorten"> ' + _t('more') + ' </a>' + '<span class="shorten-text-more hide">' + str + '</span>' + '<a class="shorten-link-less hide" rel="shorten"> ' + _t('less') + ' </a>';

        return result;
    }

    return STR;
});
define('attachment/model/attachment-photo',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'attachment_id',
        defaults: {
            sModelType: 'image'
        },
        getPhotoUrl: function() {
            return this.get('photo_url') || '';
        }
    });
});

define('text!attachment/tpl/attachment-photo-detail.html',[],function () { return '<div class="content content-background content-photo-detail swiper-container" id="content">\n\t<div id="photo_zoom" style="line-height: <%=(Math.max(window.screen.height / window.devicePixelRatio, window.innerHeight) - 50) + \'px\'%>;">\n\t    <img class="lazy" src="<%=item.getPhotoUrl()%>" style="width:100%;"/>\n\t</div>\n</div>\n<div class="btn-close-photo-detail" id="close_btn"></div>';});

define('attachment/view/attachment-photo-detail',[
    'text!attachment/tpl/attachment-photo-detail.html'
], function(text) {
    return Backbone.View.extend({
        region: {
            wrapper: '#main-bottom',
            scroller: '#content-bottom'
        },
        template: _.template(text),
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            this.$scroller = this.$el.find(this.region.scroller);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.enableZoom();

            utils.observer.trigger('bottom:open');
        },
        enableZoom: function() {

            var inScroll = this.$el.find('#photo_zoom').get(0);

            this.oZoom = new iScroll(inScroll, {
                hideScrollbar: true,
                hScrollbar: false,
                vScrollbar: false,
                zoom: true,
                // Since the images are inside of the swiper slide it
                // got a huge left offset, but the offset isn't really
                // part of the page/image since the page is completely
                // shown within the viewable area of the viewport. So
                // simply remove the wrapperOffsetLeft from the
                // calculation and be happy.
                //
                // touchstart: When pinch-zooming
                // touchend: When double-tap zooming
                onZoomStart: function(e) {
                    if (e.type === 'touchstart') {
                        this.originX = Math.abs(e.touches[0].pageX + e.touches[1].pageX) / 2 - this.x;
                    } else if (e.type === 'touchend') {
                        this.wrapperOffsetLeft = 0;
                    }
                }
            });
        },
        events: {
            'click #close_btn': 'closeView'
        },
        closeView: function() {
            utils.observer.trigger('bottom:close');
        }
    });
});
/**
 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
 *
 * @version 0.6.12
 * @codingstandard ftlabs-jsv2
 * @copyright The Financial Times Limited [All Rights Reserved]
 * @license MIT License (see LICENSE.txt)
 */

/*jslint browser:true, node:true*/
/*global define, Event, Node*/


/**
 * Instantiate fast-clicking listeners on the specificed layer.
 *
 * @constructor
 * @param {Element} layer The layer to listen on
 */
function FastClick(layer) {
	
	var oldOnClick, self = this;


	/**
	 * Whether a click is currently being tracked.
	 *
	 * @type boolean
	 */
	this.trackingClick = false;


	/**
	 * Timestamp for when when click tracking started.
	 *
	 * @type number
	 */
	this.trackingClickStart = 0;


	/**
	 * The element being tracked for a click.
	 *
	 * @type EventTarget
	 */
	this.targetElement = null;


	/**
	 * X-coordinate of touch start event.
	 *
	 * @type number
	 */
	this.touchStartX = 0;


	/**
	 * Y-coordinate of touch start event.
	 *
	 * @type number
	 */
	this.touchStartY = 0;


	/**
	 * ID of the last touch, retrieved from Touch.identifier.
	 *
	 * @type number
	 */
	this.lastTouchIdentifier = 0;


	/**
	 * Touchmove boundary, beyond which a click will be cancelled.
	 *
	 * @type number
	 */
	this.touchBoundary = 10;


	/**
	 * The FastClick layer.
	 *
	 * @type Element
	 */
	this.layer = layer;

	if (!layer || !layer.nodeType) {
		throw new TypeError('Layer must be a document node');
	}

	/** @type function() */
	this.onClick = function() { return FastClick.prototype.onClick.apply(self, arguments); };

	/** @type function() */
	this.onMouse = function() { return FastClick.prototype.onMouse.apply(self, arguments); };

	/** @type function() */
	this.onTouchStart = function() { return FastClick.prototype.onTouchStart.apply(self, arguments); };

	/** @type function() */
	this.onTouchMove = function() { return FastClick.prototype.onTouchMove.apply(self, arguments); };

	/** @type function() */
	this.onTouchEnd = function() { return FastClick.prototype.onTouchEnd.apply(self, arguments); };

	/** @type function() */
	this.onTouchCancel = function() { return FastClick.prototype.onTouchCancel.apply(self, arguments); };

	if (FastClick.notNeeded(layer)) {
		return;
	}

	// Set up event handlers as required
	if (this.deviceIsAndroid) {
		layer.addEventListener('mouseover', this.onMouse, true);
		layer.addEventListener('mousedown', this.onMouse, true);
		layer.addEventListener('mouseup', this.onMouse, true);
	}

	layer.addEventListener('click', this.onClick, true);
	layer.addEventListener('touchstart', this.onTouchStart, false);
	layer.addEventListener('touchmove', this.onTouchMove, false);
	layer.addEventListener('touchend', this.onTouchEnd, false);
	layer.addEventListener('touchcancel', this.onTouchCancel, false);

	// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
	// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
	// layer when they are cancelled.
	if (!Event.prototype.stopImmediatePropagation) {
		layer.removeEventListener = function(type, callback, capture) {
			var rmv = Node.prototype.removeEventListener;
			if (type === 'click') {
				rmv.call(layer, type, callback.hijacked || callback, capture);
			} else {
				rmv.call(layer, type, callback, capture);
			}
		};

		layer.addEventListener = function(type, callback, capture) {
			var adv = Node.prototype.addEventListener;
			if (type === 'click') {
				adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
					if (!event.propagationStopped) {
						callback(event);
					}
				}), capture);
			} else {
				adv.call(layer, type, callback, capture);
			}
		};
	}

	// If a handler is already declared in the element's onclick attribute, it will be fired before
	// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
	// adding it as listener.
	if (typeof layer.onclick === 'function') {

		// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
		// - the old one won't work if passed to addEventListener directly.
		oldOnClick = layer.onclick;
		layer.addEventListener('click', function(event) {
			oldOnClick(event);
		}, false);
		layer.onclick = null;
	}
}


/**
 * Android requires exceptions.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0;


/**
 * iOS requires exceptions.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent);


/**
 * iOS 4 requires an exception for select elements.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOS4 = FastClick.prototype.deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


/**
 * iOS 6.0(+?) requires the target element to be manually derived
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOSWithBadTarget = FastClick.prototype.deviceIsIOS && (/OS ([6-9]|\d{2})_\d/).test(navigator.userAgent);


/**
 * Determine whether a given element requires a native click.
 *
 * @param {EventTarget|Element} target Target DOM element
 * @returns {boolean} Returns true if the element needs a native click
 */
FastClick.prototype.needsClick = function(target) {
	
	switch (target.nodeName.toLowerCase()) {

	// Don't send a synthetic click to disabled inputs (issue #62)
	case 'button':
	case 'select':
	case 'textarea':
		if (target.disabled) {
			return true;
		}

		break;
	case 'input':
		// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
		if ((this.deviceIsIOS && target.type === 'file') || target.disabled) {
			return true;
		}

		break;
	case 'label':
	case 'video':
		return true;
	}

	return (/\bneedsclick\b/).test(target.className);
};


/**
 * Determine whether a given element requires a call to focus to simulate click into element.
 *
 * @param {EventTarget|Element} target Target DOM element
 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
 */
FastClick.prototype.needsFocus = function(target) {
	
	switch (target.nodeName.toLowerCase()) {
	case 'textarea':
		return true;
	case 'select':
		return !this.deviceIsAndroid;
	case 'input':
		switch (target.type) {
		case 'button':
		case 'checkbox':
		case 'file':
		case 'image':
		case 'radio':
		case 'submit':
			return false;
		}

		// No point in attempting to focus disabled inputs
		return !target.disabled && !target.readOnly;
	default:
		return (/\bneedsfocus\b/).test(target.className);
	}
};


/**
 * Send a click event to the specified element.
 *
 * @param {EventTarget|Element} targetElement
 * @param {Event} event
 */
FastClick.prototype.sendClick = function(targetElement, event) {
	
	var clickEvent, touch;

	// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
	if (document.activeElement && document.activeElement !== targetElement) {
		document.activeElement.blur();
	}

	touch = event.changedTouches[0];

	// Synthesise a click event, with an extra attribute so it can be tracked
	clickEvent = document.createEvent('MouseEvents');
	clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
	clickEvent.forwardedTouchEvent = true;
	targetElement.dispatchEvent(clickEvent);
};

FastClick.prototype.determineEventType = function(targetElement) {
	

	//Issue #159: Android Chrome Select Box does not open with a synthetic click event
	if (this.deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
		return 'mousedown';
	}

	return 'click';
};


/**
 * @param {EventTarget|Element} targetElement
 */
FastClick.prototype.focus = function(targetElement) {
	
	var length;

	// Issue #160: on iOS 7, some input elements (e.g. date datetime) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
	if (this.deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time') {
		length = targetElement.value.length;
		targetElement.setSelectionRange(length, length);
	} else {
		targetElement.focus();
	}
};


/**
 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
 *
 * @param {EventTarget|Element} targetElement
 */
FastClick.prototype.updateScrollParent = function(targetElement) {
	
	var scrollParent, parentElement;

	scrollParent = targetElement.fastClickScrollParent;

	// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
	// target element was moved to another parent.
	if (!scrollParent || !scrollParent.contains(targetElement)) {
		parentElement = targetElement;
		do {
			if (parentElement.scrollHeight > parentElement.offsetHeight) {
				scrollParent = parentElement;
				targetElement.fastClickScrollParent = parentElement;
				break;
			}

			parentElement = parentElement.parentElement;
		} while (parentElement);
	}

	// Always update the scroll top tracker if possible.
	if (scrollParent) {
		scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
	}
};


/**
 * @param {EventTarget} targetElement
 * @returns {Element|EventTarget}
 */
FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
	

	// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
	if (eventTarget.nodeType === Node.TEXT_NODE) {
		return eventTarget.parentNode;
	}

	return eventTarget;
};


/**
 * On touch start, record the position and scroll offset.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchStart = function(event) {
	
	var targetElement, touch, selection;

	// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
	if (event.targetTouches.length > 1) {
		return true;
	}
	
	/** 
	 * ignore element has class "needsclick" and its childs
	 * @author AnNT
	 */
	if ($(event.target).closest('.needsclick').length > 0) {
		return true;
	}

	/** 
	 * ignore select element
	 * @author MinhTA
	 */
	if ($(event.target).is('select')) {
		return true;
	}
	
	targetElement = this.getTargetElementFromEventTarget(event.target);
	touch = event.targetTouches[0];

	if (this.deviceIsIOS) {

		// Only trusted events will deselect text on iOS (issue #49)
		selection = window.getSelection();
		if (selection.rangeCount && !selection.isCollapsed) {
			return true;
		}

		if (!this.deviceIsIOS4) {

			// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
			// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
			// with the same identifier as the touch event that previously triggered the click that triggered the alert.
			// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
			// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
			if (touch.identifier === this.lastTouchIdentifier) {
				event.preventDefault();
				return false;
			}

			this.lastTouchIdentifier = touch.identifier;

			// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
			// 1) the user does a fling scroll on the scrollable layer
			// 2) the user stops the fling scroll with another tap
			// then the event.target of the last 'touchend' event will be the element that was under the user's finger
			// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
			// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
			this.updateScrollParent(targetElement);
		}
	}

	this.trackingClick = true;
	this.trackingClickStart = event.timeStamp;
	this.targetElement = targetElement;

	this.touchStartX = touch.pageX;
	this.touchStartY = touch.pageY;

	// Prevent phantom clicks on fast double-tap (issue #36)
	if ((event.timeStamp - this.lastClickTime) < 200) {
		event.preventDefault();
	}

	return true;
};


/**
 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.touchHasMoved = function(event) {
	
	var touch = event.changedTouches[0], boundary = this.touchBoundary;

	if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
		return true;
	}

	return false;
};


/**
 * Update the last position.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchMove = function(event) {
	
	if (!this.trackingClick) {
		return true;
	}

	// If the touch has moved, cancel the click tracking
	if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
		this.trackingClick = false;
		this.targetElement = null;
	}

	return true;
};


/**
 * Attempt to find the labelled control for the given label element.
 *
 * @param {EventTarget|HTMLLabelElement} labelElement
 * @returns {Element|null}
 */
FastClick.prototype.findControl = function(labelElement) {
	

	// Fast path for newer browsers supporting the HTML5 control attribute
	if (labelElement.control !== undefined) {
		return labelElement.control;
	}

	// All browsers under test that support touch events also support the HTML5 htmlFor attribute
	if (labelElement.htmlFor) {
		return document.getElementById(labelElement.htmlFor);
	}

	// If no for attribute exists, attempt to retrieve the first labellable descendant element
	// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
	return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
};


/**
 * On touch end, determine whether to send a click event at once.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchEnd = function(event) {
	
	var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

	if (!this.trackingClick) {
		return true;
	}

	// Prevent phantom clicks on fast double-tap (issue #36)
	if ((event.timeStamp - this.lastClickTime) < 200) {
		this.cancelNextClick = true;
		return true;
	}

	// Reset to prevent wrong click cancel on input (issue #156).
	this.cancelNextClick = false;

	this.lastClickTime = event.timeStamp;

	trackingClickStart = this.trackingClickStart;
	this.trackingClick = false;
	this.trackingClickStart = 0;

	// On some iOS devices, the targetElement supplied with the event is invalid if the layer
	// is performing a transition or scroll, and has to be re-detected manually. Note that
	// for this to function correctly, it must be called *after* the event target is checked!
	// See issue #57; also filed as rdar://13048589 .
	if (this.deviceIsIOSWithBadTarget) {
		touch = event.changedTouches[0];

		// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
		targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
		targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
	}

	targetTagName = targetElement.tagName.toLowerCase();
	if (targetTagName === 'label') {
		forElement = this.findControl(targetElement);
		if (forElement) {
			this.focus(targetElement);
			if (this.deviceIsAndroid) {
				return false;
			}

			targetElement = forElement;
		}
	} else if (this.needsFocus(targetElement)) {

		// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
		// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
		if ((event.timeStamp - trackingClickStart) > 100 || (this.deviceIsIOS && window.top !== window && targetTagName === 'input')) {
			this.targetElement = null;
			return false;
		}

		this.focus(targetElement);
		this.sendClick(targetElement, event);

		// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
		if (!this.deviceIsIOS4 || targetTagName !== 'select') {
			this.targetElement = null;
			event.preventDefault();
		}

		return false;
	}

	if (this.deviceIsIOS && !this.deviceIsIOS4) {

		// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
		// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
		scrollParent = targetElement.fastClickScrollParent;
		if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
			return true;
		}
	}

	// Prevent the actual click from going though - unless the target node is marked as requiring
	// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
	if (!this.needsClick(targetElement)) {
		event.preventDefault();
		this.sendClick(targetElement, event);
	}

	return false;
};


/**
 * On touch cancel, stop tracking the click.
 *
 * @returns {void}
 */
FastClick.prototype.onTouchCancel = function() {
	
	this.trackingClick = false;
	this.targetElement = null;
};


/**
 * Determine mouse events which should be permitted.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onMouse = function(event) {
	

	// If a target element was never set (because a touch event was never fired) allow the event
	if (!this.targetElement) {
		return true;
	}

	if (event.forwardedTouchEvent) {
		return true;
	}

	// Programmatically generated events targeting a specific element should be permitted
	if (!event.cancelable) {
		return true;
	}

	// Derive and check the target element to see whether the mouse event needs to be permitted;
	// unless explicitly enabled, prevent non-touch click events from triggering actions,
	// to prevent ghost/doubleclicks.
	if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

		// Prevent any user-added listeners declared on FastClick element from being fired.
		if (event.stopImmediatePropagation) {
			event.stopImmediatePropagation();
		} else {

			// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			event.propagationStopped = true;
		}

		// Cancel the event
		event.stopPropagation();
		event.preventDefault();

		return false;
	}

	// If the mouse event is permitted, return true for the action to go through.
	return true;
};


/**
 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
 * an actual click which should be permitted.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onClick = function(event) {
	
	var permitted;

	// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
	if (this.trackingClick) {
		this.targetElement = null;
		this.trackingClick = false;
		return true;
	}

	// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
	if (event.target.type === 'submit' && event.detail === 0) {
		return true;
	}

	permitted = this.onMouse(event);

	// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
	if (!permitted) {
		this.targetElement = null;
	}

	// If clicks are permitted, return true for the action to go through.
	return permitted;
};


/**
 * Remove all FastClick's event listeners.
 *
 * @returns {void}
 */
FastClick.prototype.destroy = function() {
	
	var layer = this.layer;

	if (this.deviceIsAndroid) {
		layer.removeEventListener('mouseover', this.onMouse, true);
		layer.removeEventListener('mousedown', this.onMouse, true);
		layer.removeEventListener('mouseup', this.onMouse, true);
	}

	layer.removeEventListener('click', this.onClick, true);
	layer.removeEventListener('touchstart', this.onTouchStart, false);
	layer.removeEventListener('touchmove', this.onTouchMove, false);
	layer.removeEventListener('touchend', this.onTouchEnd, false);
	layer.removeEventListener('touchcancel', this.onTouchCancel, false);
};


/**
 * Check whether FastClick is needed.
 *
 * @param {Element} layer The layer to listen on
 */
FastClick.notNeeded = function(layer) {
	
	var metaViewport;
	var chromeVersion;

	// Devices that don't support touch don't need FastClick
	if (typeof window.ontouchstart === 'undefined') {
		return true;
	}

	// Chrome version - zero for other browsers
	chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

	if (chromeVersion) {

		if (FastClick.prototype.deviceIsAndroid) {
			metaViewport = document.querySelector('meta[name=viewport]');
			
			if (metaViewport) {
				// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
				if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
					return true;
				}
				// Chrome 32 and above with width=device-width or less don't need FastClick
				if (chromeVersion > 31 && window.innerWidth <= window.screen.width) {
					return true;
				}
			}

		// Chrome desktop doesn't need FastClick (issue #15)
		} else {
			return true;
		}
	}

	// IE10 with -ms-touch-action: none, which disables double-tap-to-zoom (issue #97)
	if (layer.style.msTouchAction === 'none') {
		return true;
	}

	return false;
};


/**
 * Factory method for creating a FastClick object
 *
 * @param {Element} layer The layer to listen on
 */
FastClick.attach = function(layer) {
	
	return new FastClick(layer);
};


if (typeof define !== 'undefined' && define.amd) {

	// AMD. Register as an anonymous module.
	define('fastclick',[],function() {
		
		return FastClick;
	});
} else if (typeof module !== 'undefined' && module.exports) {
	module.exports = FastClick.attach;
	module.exports.FastClick = FastClick;
} else {
	window.FastClick = FastClick;
}
;
define('utils/plugin/observer',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-photo-detail',
    'fastclick'
], function(PhotoModel, PhotoDetailView, Fastclick) {

    var observer = {};

    _.extend(observer, Backbone.Events);

    ('ontouchstart' in window) && FastClick.attach(document.body);

    $(document.body).on('click', '[clickable="true"]', function(evt) {

        var ele = $(this),
            key = 'click',
            name = ele.data(key);

        if (!name) {
            return;
        }

        observer.trigger(name, ele, evt);

        evt.preventDefault();
    });

    $(document).on('click', '[rel="delegate"]', function(evt) {

        if (!evt) {
            return false;
        }

        evt.preventDefault();

        $el = $(evt.currentTarget);

        var id = $el.attr('id') || '';

        if (!id) {
            return false;
        }

        var parts = id.split('-');

        var delegateEventName = parts.shift();
        var delegateElementId = parts.join('-');
        var data = $el.data();
        data.id = id;

        $('#' + delegateElementId).trigger(delegateEventName, data);

    }).on('click', '[rel="link"]', function(evt) {

        if (!evt) {
            return false;
        }

        var $target = $(evt.target),
            rel = $target.attr('rel') || 'link';

        if (rel != 'link') {
            return false;
        }

        // find closest relative item
        if ($target.closest('.prevent').length || $target.hasClass('prevent')) {
            return false;
        }

        if ($target.get(0).tagName == 'A') {
            var url = $target.attr('href');
            if (url) {
                window.location.href = url;
            }
            return false;
        }

        var $el = $(evt.currentTarget);
        var url = $el.data('url');

        if (url) {
            window.location.href = url;
        }
    }).on('click', '[rel="externallink"]', function(evt) {

        if (!evt) {
            return false;
        }

        var $target = $(evt.target),
            rel = $target.attr('rel') || 'externallink';

        if (rel != 'externallink') {
            return false;
        }

        // find closest relative item
        if ($target.closest('.prevent').length || $target.hasClass('prevent')) {
            return false;
        }

        if ($target.get(0).tagName == 'A') {
            var url = $target.attr('href');
            if (url) {
                return window.location.href = url;
            }
        }

        var $el = $(evt.currentTarget);
        var url = $el.data('url');

        if (url) {
            window.open(url, '_blank', 'location=yes');
        }
    }).on('click', '[rel="shorten"]', function(evt) {

        if (!evt) {
            return false;
        }

        var $ele = $(evt.currentTarget),
            $parent = $ele.parent();

        $parent.find('.shorten-link-less').toggleClass('hide');
        $parent.find('.shorten-link-more').toggleClass('hide');
        $parent.find('.shorten-text-less').toggleClass('hide');
        $parent.find('.shorten-text-more').toggleClass('hide');

        // correct scroller.
        $parent.closest('.content').trigger('refresh');

        evt.preventDefault();
    }).on('click', '[rel="photodetail"]', function(evt) {

        if (!evt) {
            return false;
        }

        var $ele = $(evt.currentTarget);
        var item = new PhotoModel({
            photo_url: $ele.data('photourl')
        });

        new PhotoDetailView({
            model: item
        }).render().inject();
    });

    return observer;
});
define('utils/plugin/blockui',[
	'utils/plugin/observer'
],function(observer){
	
	function BlockUI(){
		this.isShown = false;
		this.$el  =  $('#blockui');
		this.$stage    = $('#blockui-stage');
		this.$content  = $('#blockui-content');
		
		this.show = function(content){
			if(true  == this.isShown)
			{
				return this.isShown = true;
			}
			
			if(!content){
				content  = '';
			}
			
			this.$stage[content?'removeClass':'addClass']('hide');
			
			this.$content.html(content);
			
			this.isShown =  true;
			
			
			$(document.body).addClass('blockui-open');
			
			this.$el.addClass('open');
			
			return this;
		}
		
		
		this.content = function(content){
			
			this.$stage[content?'removeClass':'addClass']('hide');
			
			this.$content.html(content);
			return this;
		}
		
		this.hide = function(){
			if(false == this.isShown)
			{
				return this.isShown = false;
			}
			
			this.isShown = false;
			
			
			this.$el.removeClass('open');
			
			this.$content.html(' ');
			
			$(document.body).removeClass('blockui-open');
		}
	}
	
	var _blockui = new BlockUI;
	
	observer.on('blockui',function(){
		_blockui.show();
	})
	.on('releaseui',function(){
		_blockui.hide();
	})
	
	return _blockui;
});

define('utils/plugin/api',[],function(){
	var _defaults = {
		cache: false,
		dataType: 'json',
		type: 'POST',
		timeout: 30e3,
		data: {},
		beforeSend: function(){}
	}
	return {
		setup: function(option){
			var headers = $.extend({
				token: null
			}, option);
			
			$.ajaxSetup({headers: headers});
		},
		cometPost: function(api, data, settings){
			
			data = $.extend(data, {user_id: Backbone.iUserId});
			
			settings  = $.extend({},_defaults,{type:'POST', data: data}, settings);

            utils.debug.log('POST: ' + api + ' DATA: ', data);
	
            return $.ajax(constants.cometApiUrl + api, settings)
                // .then(function(response, status, xhr){
                    // if(response.error_code){
                        // return $.Deferred().reject(response);
                    // }
                    // return response;
                // },function(xhr, status, errorThrow){
                    // return $.Deferred().reject({
                        // error_code: 503, 
                        // error_message: status
                    // });
                // })
                .fail(this._handleFail)
                .done(!Debug || this._printResponse); // do not print if it is not debug
		},
		post: function(api, data, settings){
			
			settings  = $.extend({},_defaults,{type:'POST', data: data}, settings);

            utils.debug.log('POST: ' + api + ' DATA: ', data);
	
            return $.ajax(constants.apiUrl + api, settings)
                // .then(function(response, status, xhr){
                    // if(response.error_code){
                        // return $.Deferred().reject(response);
                    // }
                    // return response;
                // },function(xhr, status, errorThrow){
                    // return $.Deferred().reject({
                        // error_code: 503, 
                        // error_message: status
                    // });
                // })
                .fail(this._handleFail)
                .done(!Debug || this._printResponse); // do not print if it is not debug
		},
		get: function(api, data, settings){
			var url =  constants.apiUrl + api;
				
			settings  = $.extend({}, _defaults,{type:'GET', data: data}, settings);
			
			utils.debug.log('GET: ' + api + ' \nDATA: ', data); 
	
            return $.ajax.apply(null, [constants.apiUrl + api, settings])
                // .then(function(response, status, xhr){
                    // if(response.error_code){
                        // return $.Deferred().reject(response);
                    // }
                    // return response;
                // },function(xhr, status, errorThrow){
                    // return $.Deferred().reject({
                        // error_code: 503, 
                        // error_message: status
                    // });
                // })
                .fail(this._handleFail)
                .done(!Debug || this._printResponse); // do not print if it is not debug
		},
		test: function(api, data, settings){
			var url =  constants.testUrl + api;
			
			settings  = $.extend({}, _defaults,{type:'GET',data: data}, settings);
			
			return $.ajax.apply(null, [constants.apiUrl + api, settings])
				// .then(function(response, status, xhr){
					// if(response.error_code){
						// return $.Deferred().reject(response);
					// }
					// return response;
				// },function(xhr, status, errorThrow){
					// return $.Deferred().reject({
						// error_code: 503, 
						// error_message: status
					// });
				// })
				.fail(this._handleFail)
				.done(!Debug || this._printResponse); // do not print if it is not debug	
		},
		uploadVideo: function(api, videoSrc, params) {
            var self     = this
              , deffered = $.Deferred() 
              , path     = videoSrc
              , filename = path.split('/').pop()
              , mimeType = "video/quicktime"
              , options  = new FileUploadOptions()
              , ft       = new FileTransfer();

            if (constants.platform == 'android') {
                filename = path.match(/\/([^\/]+)$/)[1]  + '.mp4';
                mimeType = "video/mp4";
            }

            var params = $.extend({
                token: constants.token,
                sTitle: filename,
                search: 1
            }, params);
            //params.iSubjectId = iSubjectId;
            
            options.fileKey = "video";
            options.fileName    = filename;
            options.mimeType = mimeType;
            options.chunkedMode = false;
            options.params      = params;
            options.headers = {token: constants.token};
       		
       		utils.observer.trigger('blockui');
            utils.blockui.content(_t('Uploading 0\%, please wait ...'));

            ft.upload(
                path,
                encodeURI(constants.apiUrl + api),
                function(result) {
                    utils.observer.trigger('releaseui');
                	var data = $.parseJSON(result.response);
                    deffered.resolve(data);
                },
                function(error) { // fail
                    utils.observer.trigger('releaseui');
                    utils.modal.alert(_t('Can not upload file(s). Please try again later.'));
                    deffered.reject(error);
                },
                options
            );

            var percent_upload_file = 0;
            ft.onprogress = function (progressEvent) {
                if (progressEvent.lengthComputable) {
                    percent_upload_file = (progressEvent.loaded * 100) / progressEvent.total;
                    utils.blockui.content(_t('Uploading %s\%, please wait', parseInt(percent_upload_file, 10)));
                }
                deffered.progress(progressEvent);
            };

            return deffered.promise();
        },
        uploadImage: function(api, imgSrc, params) {
            var self     = this
              , deffered = $.Deferred() 
              , path     = imgSrc
              , filename = ''
              , options  = new FileUploadOptions()
              , ft       = new FileTransfer();

            if(path.match(/[^\/]+.jpg$/g)){
                filename = path.match(/[^\/]+.jpg$/ig)[0];
            }else if (path.match(/id=(\w|\-)+/)){
                filename = path.match(/id=(\w|\-)+/)[0].replace('id=','')+'.jpg';
            }

            if(filename == '' && constants.platform == 'android') {
                filename = path.match(/\/([^\/]+)$/)[1]  + '.jpg'; // match the last component in list of /fdsaf/fdsaf/21321 
            }

            var params = $.extend({
                token: constants.token,
                iAlbumId: 0,
                sTitle: filename
            }, params);
            //params.iSubjectId = iSubjectId;
            
            options.fileKey     = "image";
            options.fileName    = filename;
            options.mimeType    = "image/jpeg";
            options.chunkedMode = false;
            options.params      = params;
            
            utils.observer.trigger('blockui');
            utils.blockui.content(_t('Uploading 0\%, please wait ...'));
            // $('#block_message').html('Uploading (<span id="upload_percent">0</span>%). Please wait...');


			utils.debug.log('uploading image to URL: ' + api + ' \n Params: ', params); 

            ft.upload(
                path,
                encodeURI(constants.apiUrl + api),
                function(result) { //success
                    utils.observer.trigger('releaseui');
                    var data = $.parseJSON(result.response);
                    deffered.resolve(data);
                },
                function(error) { // fail
                    utils.observer.trigger('releaseui');
                    utils.modal.alert(_t('Can not upload file(s). Please try again later.'));
                    console.log('Error upload file :' + JSON.stringify(error));
                    deffered.reject(error);
                },
                options
            );

            var percent_upload_file = 0;
            ft.onprogress = function (progressEvent) {
                if (progressEvent.lengthComputable) {
                    percent_upload_file = (progressEvent.loaded * 100) / progressEvent.total;
                    // $('#upload_percent').html(parseInt(percent_upload_file));
                    utils.blockui.content(_t('Uploading %s\%, please wait', parseInt(percent_upload_file, 10)));
                }
                deffered.progress(progressEvent);
            };

            return deffered.promise();
        },
        //private 
		_handleFail: function(xhr, statusText, jqXHR) {
			
			if(statusText && statusText == 'abort') return ; // user canceled request
			
			utils.modal.toast(_t('Can not get data from server'));
            utils.debug.log('FAILED: ', statusText, jqXHR);
       },
        _printResponse: function(data, status, jqXHR) {
            utils.debug.log('RESPONSE: ', data);
        }
	}
});

define('utils/plugin/setting',[
    'utils/plugin/api',
    'utils/plugin/observer'
], function(api, observer) {

    var Settings = Backbone.Model.extend({
        defaults: {
            like_allow_dislike: true,
            mfox_limit_photo_to_scroll: 3,
            user_date_of_birth_start: 1900,
            user_date_of_birth_end: 1997,
            cometchat_enabled: false,
            chat_enabled: false
        },
        cached: false,

        fetchData: function() {

            api.get('core/settings', {}, {
                context: this,
                async: false
            })
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (data.error_code) {
                // do nothing
            } else {
                this.set(data);
                localStorage.setItem('settings', JSON.stringify(data));
            }
        },
        fetchDataFail: function() {

        },
        initialize: function() {
            var self = this;
            observer.on('app:init user:login', function() {
                        //Caching << Nay                         
                        self.cached = localStorage.getItem('settings');
                            if (self.cached) {
                                self.cached = JSON.parse(self.cached);
                                self.set(self.cached);
                            }else {
                                 self.fetchData();   
                            }


                    });


        }
    });

    // check to reload setting utils.
    var settings = new Settings({});


    return settings;
});
define('utils/plugin/debug',[],function(){
	
	if(Debug){
		return {
			log: function(){
				console.log.apply(console, arguments);
			},
			info: function(){
				console.info.apply(console, arguments);
			},
			error: function(){
				console.error.apply(console, arguments);
			},
			warn: function(){
				console.warn.apply(console, arguments);
			}
		}
	}
	
	var empty = function(){}
	
	return {
		log: empty,
		info: empty,
		error: empty
	}
});

define('utils/plugin/support',[],function(){
	return {
		nativeScroll: false
	}
});

define('utils/plugin/livetime',[],function(){
	
	return  {
	    translate: function (sec) {
	        if (sec < 60) {
	            return "Seconds ago";
	        }
	
	        if (sec < 3600) {
	            var main = parseInt(sec / 60, 10);
	            return main + " minute ago";
	        }
	
	        if (sec < 86400) {
	            var main = parseInt(sec / 3600, 10);
	            return main + " hours ago";
	        }
	
	        if (sec < 2592000) {
	            var main = parseInt(sec / 86400, 10);
	            return main + " days ago";
	        }
	
	        if (sec < 946080000) {
	            var main = parseInt(sec / 2592000, 10);
	            return main + " months ago";
	        }
	
	        var main = parseInt(sec / 946080000, 10);
	        return main + " year ago";
	
	    },
	    update: function () {
	        var now = parseInt((new Date()).getTime() / 1000);
	
	        $('.livetimestamp').each(function (index, ele) {
	            var utime = parseInt($(this).data('utime'), 10);
	            var sec = now - utime;
	            if (isNaN(sec) || sec < 0) {
	                return;
	            }
	
	            $(this).html($Livetime.translate(sec));
	        });
	    },
	    convert: function(timestamp){
	    	var now = parseInt((new Date()).getTime() / 1000);
	    	var utime = parseInt(timestamp, 10);
	    	var sec = now - utime;
            if (isNaN(sec)) {
                return '';
            }
            
            return this.translate(sec);
	    }
	}
});

define('utils/plugin/router',[],function(){
	
	var Router  = Backbone.Router.extend({
		//we need to implement silent routing on some pages.  << Nay 
		constructor: function (options){

      				this.on("all", this.storeRoute);
      				this.session = [];
		},
		storeRoute: function (){
			if(this.session.length > 0){

					 var lastRoute = this.session[this.session.length - 1];

					  if(lastRoute != Backbone.history.fragment){ // looks like we made duplicates somewhere - dirty fix :D << Nay 

					  	return this.session.push(Backbone.history.fragment);
					  } 
			}else {

				 return this.session.push(Backbone.history.fragment);
			}
			
		},
		previous: function () {
			if (this.session.length > 1) {

		        return this.navigate(this.session[this.session.length - 2], false);
		      }
		},
		// array unique values << Nay 
        onlyUnique: function (value, index, self) { 
                return self.indexOf(value) === index;
        },
        getUniqueRoutes: function (){
        	    return this.session.filter( this.onlyUnique );
        }
	});
		
	
	return new Router;
});


define('utils/plugin/helper',[],function() {
    return {
        checkToAddHttpIntoLinkIfNeccessary: function(str) {
            if (!str.match(/^[a-zA-Z]{1,5}:\/\//)) {
                str = 'http://' + str;
            }

            return str;
        },
        shorten: function(sString, iLength, sPad) {
            if (!sString) {
                return '';
            }

            if (sString.length > iLength) {
                sString = sString.substr(0, iLength) + sPad;
            }

            return sString;
        },
        parseExternalLink: function(str) {

            var patt = /<a([^>]+)href\s*="([^"]*)"([^>]*)>/ig;

            return str.replace(patt, '<a$1rel="externallink" data-url="$2"$3>');
        },
        getObjPropByPatt: function(object, pattern) {

            for (var key in object) {
                if (pattern.test(key)) {
                    return object[key];
                }
            }

            return false;
        },
        getSubCategories: function(aCategory, iParentId) {

            var aSub = [];

            for (var i in aCategory) {
                if (aCategory[i].category_id == iParentId) {
                    return aCategory[i].sub;
                } else {
                    aSub = this.getSubCategories(aCategory[i].sub, iParentId);
                    if (aSub.length > 0) {
                        return aSub;
                    }
                }
            }

            return aSub;
        },
        getSubCategoriesHtml: function(aCategory, iParentId, aSelected) {

            aSelected = aSelected || [];

            var aSub = this.getSubCategories(aCategory, iParentId);

            if (aSub.length == 0 || !iParentId) {
                return '';
            }

            var selected = 0;

            var html = '<select class="control-full listing-form-category">';

            html += '<option value="">' + _t('Select Sub-Category') + '</option>';

            _.each(aSub, function(sub) {

                html += '<option value="' + sub.category_id + '"';

                if (aSelected.indexOf(sub.category_id) > -1) {
                    html += ' selected="selected"';
                    selected = sub.category_id;
                }

                html += '>' + sub.name + '</option>';
            });

            html += '</select>';

            html += '<div class="listing-form-category-subs-holder">' + this.getSubCategoriesHtml(aCategory, selected, aSelected) + '</div>';

            return html;
        }
    };
});
define('utils/plugin/attachment',[],function(){
	
	function Attachment(){
		this.proxy  = {}
	}
	
	Attachment.prototype.add = function(type, proxy)
	{
		if(typeof type == 'string'){
			this.proxy[type] = proxy;	
		}else if(typeof type == 'object'){
			for(var i =0; i<type.length; ++i){
				this.proxy[type[i]] = proxy;
			}
		}
	}
	
	Attachment.prototype.translate = function(type)
	{
		if(this.proxy.hasOwnProperty(type))
		{
			return this.proxy[type];
		}
		
		return false;
	}
	
	return new Attachment();
});

define('utils/plugin/headline',[],function(){
	
	var Headline = function(){
		this.proxy = {};
	}
	
	Headline.prototype.add = function(type, proxy){
		if(typeof type == 'string'){
			this.proxy[type] = proxy;	
		}else if(typeof type == 'object'){
			for(var i =0; i<type.length; ++i){
				this.proxy[type[i]] = proxy;
			}
		}
		
	}
	
	Headline.prototype.translate = function(feed)
	{
		var type = feed.getActionType();
		
		if(this.proxy.hasOwnProperty(type)){
			return this.proxy[type](feed);
		}
		
		return this._default(feed);
	}
	
	Headline.prototype._default = function(feed){
		// return feed.getPosterLink();
		return ''; //minhTA, in Fox, it should be empty by default
	}
	
	return new Headline();
});

define('utils/plugin/request-proxy',[],function(){
	
	function ProxyView(){
		this.proxy  = {}
	}
	
	ProxyView.prototype.add = function(type, proxy)
	{
		if(typeof type == 'string'){
			this.proxy[type] = proxy;	
		}else if(typeof type == 'object'){
			for(var i =0; i<type.length; ++i){
				this.proxy[type[i]] = proxy;
			}
		}
	}
	
	ProxyView.prototype.get = function(item)
	{	
		var type = item.getRequestType();
		if(this.proxy.hasOwnProperty(type))
		{
			return this.proxy[type];
		}
		return false;
	}
	
	return new ProxyView
});

define('utils/plugin/modal',[],function(){
	
	var Modal = function(){
		this.toast = function(){
			console.info.apply(console, arguments);
		}
		this.alert  =  function(){
			window.alert.apply(window, arguments);
		}
		
		this.confirm = function(str, cb, title, labels){
            cb(window.confirm(str) ? 1 : 2); //cordova 3.3 change index from 1 NOT 0
		}
		
		this.promt = function(){
			return window.promt.apply(window, promt)
		}
	}
	
	var modal = new Modal;
	
	document.addEventListener('deviceready',function(){
		modal.alert = function(){
			return navigator.notification.alert.apply(navigator.notification, arguments);
		}
// 		
		modal.confirm = function(){
			return navigator.notification.confirm.apply(navigator.notitication, arguments);
		}
		
		modal.promt = function(){
			return navigator.notification.promt.apply(navigator.notification, arguments);
		}
		
		modal.toast = function(){
			return window.plugins.toast.showShortBottom.apply(window.plugins.toast,arguments);
		}
	});
	
	return modal;
});

define('utils/plugin/layout',[
	'utils/plugin/observer',
],function(observer){
	var container = $(document.body)
	, lastBeeber = ''
	, sidebarIsShown = false
	, bottomIsShown = false;
	
	observer.on('sidebar:open', function() {
		container.addClass('sidebar-open');
		sidebarIsShown = true;
	}).on('sidebar:close', function() {
		container.removeClass('sidebar-open');
		sidebarIsShown = false;
	}).on('sidebar:pre_show', function() {
		if (lastBeeber) {
			lastBeeber.close();
			lastBeeber = false;
		}
	}).on('beeber:after_close', function() {
		lastBeeber = false;
	}).on('beeber:before_open', function(beeber) {
		if (lastBeeber) {
			lastBeeber.close();
		}
		lastBeeber = beeber;
	}).on('router:changed', function() {
		if (lastBeeber) {
			lastBeeber.close();
			lastBeeber = false;
		}
		if(sidebarIsShown){
			$(document.body).removeClass('sidebar-open');
			sidebarIsShown = false;
		}
		if(bottomIsShown){
			$(document.body).removeClass('bottom-open');
			bottomIsShown = false;
		}
	})
	.on('bottom:open', function() {
		bottomIsShown = true;
		$(document.body).addClass('bottom-open');
	}).on('bottom:close', function() {
		bottomIsShown =  false;
		$(document.body).removeClass('bottom-open');
	}); 
	
	return {
		bottomIsShown: function(){return bottomIsShown;}
	}
});

define('utils/plugin/validator',[],function(){
	
	return {
		isUrl: function(string){
			var re = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i;
			return re.test(string);
		},
		isEmail: function(string){
			var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
   			 return re.test(string);
		},
		isEmpty: function(string){
			return string == undefined || string.trim() == '';
		},
		isNotEmpty: function(string){
			return string != undefined && string.trim() != '';
		},
		isVimeoVideoUrl: function(string){
			var re = /\/\/(www\.)?vimeo.com\/(\d+)($|\/)/i;
			return re.test(string);
		},
		isYoutubeVideoUrl: function(string){
			var re = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/i;
			return re.test(string);
		},
		isLoggedIn: function(){   // check user loggedin or not (this is not very reliable though) << Nay
			return (localStorage.getItem("viewer") && localStorage.getItem("viewer").length);
		}
	}
});

/*===================================================================================================================
 * @name: bPopup
 * @type: jQuery
 * @author: (c) Bjoern Klinggaard - @bklinggaard
 * @demo: http://dinbror.dk/bpopup
 * @version: 0.9.4
 * @requires jQuery 1.4.3
 *==================================================================================================================*/
;(function($) {
	
	
    $.fn.bPopup = function(options, callback) {
        
    if ($.isFunction(options)) {
            callback 		= options;
            options 		= null;
        }

		// OPTIONS
        var o 				= $.extend({}, $.fn.bPopup.defaults, options);
        
		// HIDE SCROLLBAR?  
        if (!o.scrollBar)
            $('html').css('overflow', 'hidden');
        
		// VARIABLES	
        var $popup 			= this
          , d 				= $(document)
          , w 				= window
		  , $w				= $(w)
          , wH				= windowHeight()
		  , wW				= windowWidth()
          , prefix			= '__b-popup'
		  , isIOS6X			= (/OS 6(_\d)+/i).test(navigator.userAgent) // Used for a temporary fix for ios6 timer bug when using zoom/scroll 
          , buffer			= 200
		  , popups			= 0
          , id
          , inside
          , fixedVPos
          , fixedHPos
          , fixedPosStyle
		  , vPos
          , hPos
		  , height
		  , width
		  , debounce
		;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // PUBLIC FUNCTION - call it: $(element).bPopup().close();
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
        $popup.close = function() {
            o = this.data('bPopup');
			id = prefix +$w.data('bPopup') + '__';
            close();
        };

        return $popup.each(function() {
            if ($(this).data('bPopup')) return; //POPUP already exists?
            init();
        });

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // HELPER FUNCTIONS - PRIVATE
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        function init() {
            triggerCall(o.onOpen);
			popups = ($w.data('bPopup') || 0) + 1, id = prefix + popups + '__',fixedVPos = o.position[1] !== 'auto', fixedHPos = o.position[0] !== 'auto', fixedPosStyle = o.positionStyle === 'fixed', height = $popup.outerHeight(true), width = $popup.outerWidth(true);
            o.loadUrl ? createContent() : open();
        };
		
		function createContent() {
            o.contentContainer = $(o.contentContainer || $popup);
            switch (o.content) {
                case ('iframe'):
					var iframe = $('<iframe class="b-iframe" ' + o.iframeAttr +'></iframe>');
					iframe.appendTo(o.contentContainer);
					height = $popup.outerHeight(true);
					width = $popup.outerWidth(true);
					open();
					iframe.attr('src', o.loadUrl); // setting iframe src after open due IE9 bug
					triggerCall(o.loadCallback);
                    break;
				case ('image'):
					open();
					$('<img />')
						.load(function() {
						    triggerCall(o.loadCallback);
							recenter($(this));
					    }).attr('src', o.loadUrl).hide().appendTo(o.contentContainer);
					break;
                default:
					open();
					$('<div class="b-ajax-wrapper"></div>')
                    	.load(o.loadUrl, o.loadData, function(){
						    triggerCall(o.loadCallback);
							recenter($(this));
						}).hide().appendTo(o.contentContainer);
                    break;
            }
        };

		function open(){
			// MODAL OVERLAY
            if (o.modal) {
                $('<div class="b-modal '+id+'"></div>')
                .css({backgroundColor: o.modalColor, position: 'fixed', top: 0, right:0, bottom:0, left: 0, opacity: 0, zIndex: o.zIndex + popups})
                .appendTo(o.appendTo)
                .fadeTo(o.speed, o.opacity, 'linear');
            }
			
			// POPUP
			calPosition();
            $popup
				.data('bPopup', o).data('id',id)
				.css({ 
					  'left': o.transition == 'slideIn' || o.transition == 'slideBack' ? (o.transition == 'slideBack' ? d.scrollLeft() + wW : (hPos + width) *-1) : getLeftPos(!(!o.follow[0] && fixedHPos || fixedPosStyle))
					, 'position': o.positionStyle || 'absolute'
					, 'top': o.transition == 'slideDown' || o.transition == 'slideUp' ? (o.transition == 'slideUp' ? d.scrollTop() + wH : vPos + height * -1) : getTopPos(!(!o.follow[1] && fixedVPos || fixedPosStyle))
					, 'z-index': o.zIndex + popups + 1 
				}).each(function() {
            		if(o.appending) {
                		$(this).appendTo(o.appendTo);
            		}
        		});
			doTransition(true);	
		};
		
        function close() {
            if(!o){
            	return;
            }
            if ( o.modal) {
                $('.b-modal.'+$popup.data('id'))
	                .fadeTo(o.speed, 0, function() {
	                    $(this).remove();
	                });
            }
			// Clean up
			unbindEvents();	
			// Close trasition
            doTransition();
            
			return false; // Prevent default
        };
		
		//Eksperimental
		function recenter(content){
			var _width = content.width(), _height = content.height(), css = {};
			o.contentContainer.css({height:_height,width:_width});
			
			if (_height >= $popup.height()){
				css.height = $popup.height();
			}
			if(_width >= $popup.width()){
				css.width = $popup.width();
			}
			height = $popup.outerHeight(true)
			, width = $popup.outerWidth(true);
				
			calPosition();
			o.contentContainer.css({height:'auto',width:'auto'});		
			
			css.left = getLeftPos(!(!o.follow[0] && fixedHPos || fixedPosStyle)),
			css.top = getTopPos(!(!o.follow[1] && fixedVPos || fixedPosStyle));
			
			$popup
				.animate(
					css
					, 250
					, function() { 
						content.show();
						inside = insideWindow();
					}
				);
		};
		
        function bindEvents() {
            $w.data('bPopup', popups);
			$popup.delegate('.bClose, .' + o.closeClass, 'click.'+id, close); // legacy, still supporting the close class bClose
            
            if (o.modalClose) {
                $('.b-modal.'+id).css('cursor', 'pointer').bind('click', close);
            }
			
			// Temporary disabling scroll/resize events on devices with IOS6+
			// due to a bug where events are dropped after pinch to zoom
            if (!isIOS6X && (o.follow[0] || o.follow[1])) {
               $w.bind('scroll.'+id, function() {
                	if(inside){
                    	$popup
                        	.dequeue()
                            .animate({ 'left': o.follow[0] ? getLeftPos(!fixedPosStyle) : 'auto', 'top': o.follow[1] ? getTopPos(!fixedPosStyle) : 'auto' }, o.followSpeed, o.followEasing);
					 }  
            	}).bind('resize.'+id, function() {
		            wH = windowHeight();
		  		    wW = windowWidth();
					inside = insideWindow();
                   	if(inside){
						clearTimeout(debounce);
						debounce = setTimeout(function(){
							calPosition();
							$popup
	                           	.dequeue()
	                           	.each(function() {
	                               	if(fixedPosStyle) {
	                                	$(this).css({ 'left': hPos, 'top': vPos });
	                               	}
	                               	else {
	                                   	$(this).animate({ 'left': o.follow[0] ? getLeftPos(true) : 'auto', 'top': o.follow[1] ? getTopPos(true) : 'auto' }, o.followSpeed, o.followEasing);
	                               	}
	                           	});
						}, 50);					
                   	}
                });
            }
            if (o.escClose) {
                d.bind('keydown.'+id, function(e) {
                    if (e.which == 27) {  //escape
                        close();
                    }
                });
            }
        };
		
        function unbindEvents() {
            if(!o){
            	return ;
            }
            
            if (!o.scrollBar) {
                $('html').css('overflow', 'auto');
            }
            $('.b-modal.'+id).unbind('click');
            d.unbind('keydown.'+id);
            $w.unbind('.'+id).data('bPopup', ($w.data('bPopup')-1 > 0) ? $w.data('bPopup')-1 : null);
            $popup.undelegate('.bClose, .' + o.closeClass, 'click.'+id, close).data('bPopup', null);
        };
		
		function doTransition(open) {
			switch (open ? o.transition : o.transitionClose || o.transition) {
			   case "slideIn":
				   	animate({
				   		left: open ? getLeftPos(!(!o.follow[0] && fixedHPos || fixedPosStyle)) : d.scrollLeft() - (width || $popup.outerWidth(true)) - buffer
				   	});
			      	break;
			   case "slideBack":
				   	animate({
				   		left: open ? getLeftPos(!(!o.follow[0] && fixedHPos || fixedPosStyle)) : d.scrollLeft() + wW + buffer
				   	});
			      	break;
			   case "slideDown":
				   	animate({
				   		top: open ? getTopPos(!(!o.follow[1] && fixedVPos || fixedPosStyle)) : d.scrollTop() - (height || $popup.outerHeight(true)) - buffer
				   	});
			      	break;
		   		case "slideUp":
					animate({
						top: open ? getTopPos(!(!o.follow[1] && fixedVPos || fixedPosStyle)) : d.scrollTop() + wH + buffer
					});
		      	  	break;
			   default:
			   	  	//Hardtyping 1 and 0 to ensure opacity 1 and not 0.9999998
				  	$popup.stop().fadeTo(o.speed, open ? 1 : 0, function(){onCompleteCallback(open);});
			}
			
			function animate(css){
			  	$popup
					.css({display: 'block',opacity: 1})
					.animate(css, o.speed, o.easing, function(){ onCompleteCallback(open); });
			};
		};
		
		
		function onCompleteCallback(open){
			if(open){
				bindEvents();
	            triggerCall(callback);
				if(o.autoClose){
					setTimeout(close, o.autoClose);
				}
			} else {
				$popup.hide();
				triggerCall(o.onClose);
				if (o.loadUrl) {
                    o.contentContainer.empty();
					$popup.css({height: 'auto', width: 'auto'});
                }		
			}
		};
		
		function getLeftPos(includeScroll){
			return includeScroll ? hPos + d.scrollLeft() : hPos;
		};
		
		function getTopPos(includeScroll){
			return includeScroll ? vPos + d.scrollTop() : vPos;
		};
		
		function triggerCall(func) {
			$.isFunction(func) && func.call($popup);
		};
		
       	function calPosition(){
			vPos 		= fixedVPos ? o.position[1] : Math.max(0, ((wH- $popup.outerHeight(true)) / 2) - o.amsl)
			, hPos 		= fixedHPos ? o.position[0] : (wW - $popup.outerWidth(true)) / 2
			, inside 	= insideWindow();
		};
		
        function insideWindow(){
            return wH > $popup.outerHeight(true) && wW > $popup.outerWidth(true);
        };
		
		function windowHeight(){
			return w.innerHeight || $w.height();
		};
		
		function windowWidth(){
			return w.innerWidth || $w.width();
		};
    };

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// DEFAULT VALUES
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
    $.fn.bPopup.defaults = {
          amsl: 			50
        , appending: 		true
        , appendTo: 		'body'
		, autoClose:		false
        , closeClass: 		'b-close'
        , content: 			'ajax' // ajax, iframe or image
        , contentContainer: false
		, easing: 			'swing'
        , escClose: 		true
        , follow: 			[true, true] // x, y
		, followEasing: 	'swing'
        , followSpeed: 		500
		, iframeAttr: 		'scrolling="no" frameborder="0"'
		, loadCallback: 	false
		, loadData: 		false
        , loadUrl: 			false
        , modal: 			true
        , modalClose: 		true
        , modalColor: 		'#000'
        , onClose: 			false
        , onOpen: 			false
        , opacity: 			0.7
        , position: 		['auto', 'auto'] // x, y,
        , positionStyle: 	'absolute'// absolute or fixed
        , scrollBar: 		true
		, speed: 			250 // open & close speed
		, transition:		'fadeIn' //transitions: fadeIn, slideDown, slideIn
		, transitionClose:	false
        , zIndex: 			1030 // popup gets z-index 9999, modal overlay 9998
    };
})(jQuery);

define("bpopup", function(){});

define('utils/plugin/history',[],function() {

    var UtilHistory = function() {

        this._data = new Array();

        this._maxLength = 3;

        this._rootUrl = constants.home;

        this._lastUrl = null;

        this._popupIsShown = false;

        this._bottomIsShown = false;

        this.setPopupIsShown = function(flag) {
            this._popupIsShown = flag;
        }

        this.setBottomIsShown = function(flag) {
            this._bottomIsShown = flag;
        }

        this.clear = function() {
            this._data = new Array();
            this._lastUrl = null;
            return this;
        }

        this.getCurrentUrl = function() {
            var ptr = url = window.location.href.match(/(#.*)$/i);
            if (ptr) {
                return ptr.pop();
            };
            return this._data.pop();
        }

        this.rebuild = function(args) {
            if (arguments.length) {
                args.push(this.getCurrentUrl());
                this._data = args;
            } else {
                this._data = new Array(this.getCurrentUrl());
            }
            return this;
        }

        this.back = function() {

            this._lastUrl = '';
            var url = this._data.pop();

            if (url == this.getCurrentUrl()) {
                url = this._data.pop();
            };

            if (url) {
                window.location.href = url;
            } else {
                window.location.href = this._rootUrl;
            }
            return this;
        }

        this.go = function(seek) {
            var len = history._data.length,
                index = len - 1 + seek;

            if (index < 0 || index >= len) {
                return;
            }

            window.location.href = this._data[index];
        }

        this.goRoot = function() {
            window.location.href = this._rootUrl;
        }

        this.push = function(bIsRoot, url) {
            bIsRoot = bIsRoot || false;

            url = url || this.getCurrentUrl();

            if (bIsRoot) {
                utils.debug.log('change history root: ', url);
                this._rootUrl = url;
                this._data = [];
                return;
            }

            if (this._lastUrl != url) {
                if (this._data.length == this._maxLength) {
                    this._data.shift();
                }

                utils.debug.log('push to history: ', url);
                this._data.push(this._lastUrl = url);
            }
            return this;
        }
    }

    var _history = new UtilHistory();

    $(document).on('click', '[rel="back"]', function() {

        if (utils.layout.bottomIsShown()) {
            return utils.observer.trigger('bottom:close');
        }

        _history.back();
    });

    document.addEventListener("backbutton", function() {
        // lost connection
        if (Backbone.history.fragment == 'lost-connection') {
            return;
        }

        // is blocking UI?
        if (utils.blockui.isShown) {
            return;
        }

        if (utils.layout.bottomIsShown()) {
            utils.observer.trigger('bottom:close');
            return;
        }

        if (utils.popup.isShown()) {
            utils.popup.close();
            return;
        }

        _history.back();
    }, false);

    return _history;
});
define('utils/plugin/popup',[
	'bpopup', 
	'utils/plugin/observer',
	'utils/plugin/history'
], function(bpopup, observer) {
	function ModalPopup() {
		var isShown = false
		  , $wrapper = $('#simple-popup')
		  , _defaults = {}
		  , _$ele = false;

		_defaults.onClose = function() {
			isShown = false;
			$(document.body).removeClass('popup-open');
		}
		_defaults.onOpen = function() {
			isShown = true;
			$(document.body).addClass('popup-open');
		}

		this.close = function() {

			$(document.body).removeClass('popup-open');
			
			if (false == isShown) {
				return isShown = false;
			}

            isShown = false;
			$wrapper.close();
			return this;
		}

		this.open = function($ele, openCallback) {

			
			if(this.isShown && $wrapper.close ){
				$wrapper.close();
			}

			$wrapper.html($ele).bPopup.call($wrapper, _defaults, openCallback);

			isShown = true;
			
			return this;
		}
		
		this.isShown = function(){
			return isShown;
		}
	}

	var _popup = new ModalPopup();
	
	observer.on('router:changed', function(){
		if(_popup.isShown()){
			_popup.close();
		}
	});
	
	return _popup;
});

define('utils/plugin/topmenu',[
	'utils/plugin/popup',
],function() {
	
	Backbone.TopMenuView = Backbone.View.extend({
		region: {
			holder: '#top_menu_holder'
		},
		template: null, // need to be over write
        render: function(){
        	
        	this.$holder = $(this.region.holder);
        	
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(){
			if(constants.isTablet){
				utils.popup.open(this.$el);	
			}else {
				this.$holder.html(this.$el);
				
				this.$holder.removeClass('hide');
			}
			
			return this;
		},
		hide: function(){
			if(constants.isTablet){
				utils.popup.close();
			}else{
				this.$holder.addClass('hide');
				this.$el.remove();
			}
			return this;
		}
	});
	
	
	function TopMenuUtils() {
		
		this._topMenuView  = false;
		
		this.toggle = function(view, model) {
			// top menu
			if (constants.isTablet || !view.topMenuIsShown()) {
				
				view.topMenuIsShown(true);
				
				this._topMenuView  = new view.topMenuView({model: model}).render().inject();
				
			} else{
				
				view.topMenuIsShown(false);
				
				if(this._topMenuView){
					
					this._topMenuView.hide();	
					
					this._topMenuView = false;
				}
			}
		}
	}
	
	return new TopMenuUtils();
});

define('utils/extend/jquery',[],function() {
	var ID = +new Date();

	$.fn.id = function() {
		var $this = $(this.get(0));
		var id = $this.prop('id');
		
		if (!id) {
			id = ++ID;
			$this.attr('id', 'eid_' + id);
		}
		return '#' + id;
	}

	$.newElenentId = function() {
		return '_' + (++ID);
	}
	
	$.fn.isDisabled =  function(){
		if(!arguments.length){
			return this.hasClass('disabled');
		}
		arguments[0] ? this.addClass('disabled') : this.removeClass('disabled');
	}
	
	/**
	 * ele.isProccessing(false) => remove class processing
	 * ele.isProccessing(true) => add class processing
	 * ele.isProccessing()     => check is processing 
	 */
	$.fn.isProcessing = function(){
		if(!arguments.length){
			return this.hasClass('processing');
		}
		arguments[0] ? this.addClass('processing') : this.removeClass('processing');
	}
}); 
define('utils/extend/model',[
    'utils/plugin/livetime',
], function(livetime) {
    Backbone.Model.prototype.getId = function() {
        return this.id;
    }

    Backbone.Model.prototype.getType = function() {
        return this.get('sModelType');
    }

    Backbone.Model.prototype.getGID = function() {
        return this.getType() + '@' + this.getId();
    }

    Backbone.Model.prototype.getTimestamp = function() {
        return this.get('iTimeStamp') || this.get('iTimestamp') || 0;
    }

    Backbone.Model.prototype.getLivetime = function() {
        return utils.moment(this.getTimestamp() * 1e3).fromNow();
    }

    Backbone.Model.prototype.getTimeConverted = function() {
        return this.get('sTimeConverted');
    }

    Backbone.Model.prototype.canView = function() {
        return this.get('bCanView') ? 1 : 0;
    }

    /**
     * can like ?
     * @return bool
     */
    Backbone.Model.prototype.canLike = function() {
        return this.get('bCanLike') ? 1 : 0;
    }

    Backbone.Model.prototype.canDislike = function() {
        return (utils.setting.get('like_allow_dislike') && this.get('bCanDislike')) || false;
    }

    /**
     * can share ?
     * @return bool
     */
    Backbone.Model.prototype.canShare = function() {
        return (this.get('bCanShare') == void 0) ? 1 : (this.get('bCanShare') ? 1 : 0);
    }

    /**
     * can rate ?
     * @return bool
     */
    Backbone.Model.prototype.canRate = function() {
        return this.get('bCanRate');
    }

    /**
     * can comment
     * @return bool
     */
    Backbone.Model.prototype.canComment = function() {
        return (this.get('bCanComment') || this.get('bCanPostComment')) ? 1 : 0;
    }

    /**
     * is liked ?
     */
    Backbone.Model.prototype.isLiked = function() {
        return (this.get('bIsLiked')) ? 1 : 0;
    }

    Backbone.Model.prototype.isDisliked = function() {
        return this.get('bIsDisliked') || false;
    }

    Backbone.Model.prototype.isRated = function() {
        return this.get('bIsRating') ? 1 : 0;
    }

    Backbone.Model.prototype.getCategory = function() {
        return this.get('iCategoryId') || this.get('iCategory');
    }

    Backbone.Model.prototype.getTitle = function() {
        return this.get('sTitle') || '';
    }

    Backbone.Model.prototype.getDescription = function() {
        return this.get('sDescription') || '';
    }

    Backbone.Model.prototype.getRateCount = function() {
        return this.get('iRatingCount') || 0;
    }

    Backbone.Model.prototype.getRateValue = function() {
        return (Math.round((this.get('fRating') || 0) * 10) / 10).toString().replace('.0', '');
    }

    Backbone.Model.prototype.getRateFloatValue = function() {
        return this.get('fRating') || 0;
    }

    /**
     * number of like
     */
    Backbone.Model.prototype.getLikeCount = function() {
        return parseInt(this.get('iTotalLike') || 0, 10);
    }

    Backbone.Model.prototype.getDislikeCount = function() {
        return parseInt(this.get('iTotalDislike') || 0, 10);
    }

    Backbone.Model.prototype.getLikeCountLabel = function() {
        var count = this.getLikeCount();

        return count == 1 ? _t('%s Like', count) : _t('%s Likes', count);
    }

    Backbone.Model.prototype.getDislikeCountLabel = function() {
        var count = this.getDislikeCount();

        return count == 1 ? _t('%s Dislike', count) : _t('%s Dislikes', count);
    }

    Backbone.Model.prototype.getCommentCountLabel = function() {
        var count = this.getCommentCount();

        return count == 1 ? _t('%s Comment', count) : _t('%s Comments', count);
    }

    Backbone.Model.prototype.getShareCountLabel = function() {
        return _t('Share');
    }

    Backbone.Model.prototype.getRateValueLabel = function() {
        return _t('%s Rating', this.getRateValue());
    }

    Backbone.Model.prototype.getDataId = function(prefix) {
        if (arguments.length) {
            return [prefix, this.getType(), this.getId()].join('-');
        }
        return [this.getType(), this.getId()].join('-');
    }

    // type;id;count;canLike;isLiked
    Backbone.Model.prototype.getDataLike = function() {
        return [this.getType(), this.getId(), this.getLikeCount(), this.canLike() ? 1 : 0, this.isLiked() ? 1 : 0].join(';');
    }

    Backbone.Model.prototype.getDataDislike = function() {
        return [this.getType(), this.getId(), this.getDislikeCount(), this.canDislike() ? 1 : 0, this.isDisliked() ? 1 : 0].join(';');
    }

    Backbone.Model.prototype.getIdLike = function() {
        return ['like', this.getType(), this.getId()].join('_');
    }

    Backbone.Model.prototype.getIdDislike = function() {
        return ['dislike', this.getType(), this.getId()].join('_');
    }

    Backbone.Model.prototype.getIdShare = function() {
        return ['share', this.getType(), this.getId()].join('_');
    }

    Backbone.Model.prototype.getIdComment = function() {
        return ['comment', this.getType(), this.getId()].join('_');
    }

    Backbone.Model.prototype.getIdRate = function() {
        return ['rate', this.getType(), this.getId()].join('_');
    }

    // type;id;count;fvalue,ivalue;canRate;isRated
    Backbone.Model.prototype.getDataRate = function() {
        return [this.getType(), this.getId(), this.getRateCount(), this.getRateFloatValue(), this.getRateValue(), this.canRate() ? 1 : 0, this.isRated() ? 1 : 0].join(';');
    }

    // type;id;count;canComment
    Backbone.Model.prototype.getDataComment = function() {
        return [this.getType(), this.getId(), this.getCommentCount(), this.canComment() ? 1 : 0].join(';');
    }

    // type;id;shareCount;canShare
    Backbone.Model.prototype.getDataShare = function() {
        return [this.getType(), this.getId(), this.getShareCount(), this.canShare() ? 1 : 0].join(';');
    }

    Backbone.Model.prototype.getDataReport = function() {
        return [this.getType(), this.getId()].join(';');
    }
    /**
     * number of view?
     */
    Backbone.Model.prototype.getViewCount = function() {
        return this.get('iTotalView') || 0;
    }

    Backbone.Model.prototype.getUrl = function() {
        return '#' + this.getType() + '/' + this.getId();
    }

    Backbone.Model.prototype.getLink = function() {
        return '<a href="' + this.getUrl() + '">' + this.getTitle() + '</a>';
    }

    Backbone.Model.prototype.getCommentUrl = function() {
        var attachments = this.get('aAttachments');
        if (attachments && attachments.length > 0 && (attachments[0].sModule == 'event' || attachments[0].sModule == 'fevent')) {
            return '#event-detail/' + attachments[0].sModule + '/' + attachments[0].iId + '/activity';
        } else {
            return this.getUrl() + '/comment' + (this.getParentModuleId() ? '/' + this.getParentModuleId() : '');
        }
    }
    /**
     * number of comment ?
     */
    Backbone.Model.prototype.getCommentCount = function() {
        return parseInt(this.get('iTotalComment') || 0, 10);
    }

    /**
     * number of share ?
     */
    Backbone.Model.prototype.getShareCount = function() {
        return this.get('iTotalShare') || 0;
    }

    Backbone.Model.prototype.getShareCountLabel = function() {
        return _t('Share');
    }

    Backbone.Model.prototype.getRateValueLabel = function() {
        return _t('%s Rating', this.getRateValue());
    }

    Backbone.Model.prototype.getProfilePageId = function() {
        return parseInt(this.get('iProfilePageId')) || 0;
    }

    Backbone.Model.prototype.getPosterId = function() {
        return this.getProfilePageId() || this.get('iUserId') || this.get('iSenderId');
    }

    Backbone.Model.prototype.getPosterType = function() {
        return this.getProfilePageId() > 0 ? 'pages' : 'user';
    }

    Backbone.Model.prototype.getPosterUrl = function() {
        return '#' + this.getPosterType() + '/' + this.getPosterId();
    }

    Backbone.Model.prototype.getPosterTitle = function(len) {
        return (this.get('sFullName') || this.get('sFullname') || this.get('sUserName'));
    }

    Backbone.Model.prototype.getPosterImageSrc = function() {
        return this.get('sUserImage') || this.get('sImage');
    }


    Backbone.Model.prototype.isOwner = function() {
        return this.getPosterId() == Backbone.iUserId; // quick fix for performance
    }

    Backbone.Model.prototype.getItemId = function() {
        return this.get('iItemId');
    }

    Backbone.Model.prototype.getItemType = function() {
        return this.get('sItemType');
    }
    Backbone.Model.prototype.getObjectId = function() {
        return this.get('iObjectId') || 0;
    }

    Backbone.Model.prototype.getObjectType = function() {
        return this.get('sObjectType') || '';
    }

    Backbone.Model.prototype.getObjectTitle = function() {
        return this.get('sObjectTitle') || '';
    }


    Backbone.Model.prototype.getObjectUrl = function() {
        return '#' + this.getObjectType() + '/' + this.getObjectId();
    }

    Backbone.Model.prototype.getObjectLink = function() {
        return '<a href="' + this.getObjectUrl() + '">' + this.getObjectTitle() + '</a>';
    }

    Backbone.Model.prototype.isNeedScroll = function() {
        return this.get('bNeedToScroll') || false;
    }

    Backbone.Model.prototype.getParentType = function() {
        return this.get('sParentType') || '';
    }

    Backbone.Model.prototype.getUserDislike = function() {
        return this.get('aUserDislike') || this.get('aDislikes');
    }

    Backbone.Model.prototype.getParentModuleId = function() {
        return this.get('parentModuleId') || '';
    }

    Backbone.Model.prototype.getSharedUserName = function() {
        return this.get('sSharedUserName') || '';
    }

    Backbone.Model.prototype.getSharedUserId = function() {
        return this.get('iSharedUserId') || 0;
    }

    Backbone.Model.prototype.getSharedUserUrl = function() {
        return '#user/' + this.getSharedUserId();
    }

    Backbone.Model.prototype.getSharedUserLink = function() {
        return '<a href="' + this.getSharedUserUrl() + '">' + this.getSharedUserName() + '</a>';
    }

    Backbone.Model.prototype.canEdit = function() {
        return this.get('bCanEdit') || false;
    }

    Backbone.Model.prototype.canDelete = function() {
        return this.get('bCanDelete') || false;
    }
    
    /**
     * add this prototype to support social share.
     */
    Backbone.Model.prototype.getSocialShareUrl =  function(){
      return constants.siteUrl + 'index.php?do=/'+this.getType()+'/'+ this.getId();
    }
});
define('utils/extend/view-polyplatform',[],function(){
    Backbone.PolyplatformView = Backbone.View.extend({
    });

    Backbone.PolyplatformView.extend = function() {
        if(arguments[0].moduleId) {
            var extendPropsPath = arguments[0].moduleId.replace('/', '/' + constants.template + '/');

            if(require.defined(extendPropsPath)) {
                _.extend(arguments[0], require(extendPropsPath));
            }
            console.log('enhanced', arguments[0]);
        } else {
            console.log('No module Id in polyplatform view -> cannot extend its parent');
        }
        var extended = Backbone.View.extend.apply(this, arguments);

        return extended;
    }

});

define('utils/extend/view-list',[
    'utils/extend/view-polyplatform',
    'utils/plugin/api',
], function(View, api) {
    Backbone.ListView = Backbone.PolyplatformView.extend({
        defaults: {}, // default data to query
        api: '',
        apiFn: api.get,
        phraseNotFound: 'No item found',
        phraseNotMore: 'No item more',
        template: null,
        itemView: null,
        followById: false, // load data by iMinId, iMaxId  or iPage number
        itemModel: null,
        query: {},
        settings: {},
        initialize: function(attrs, $holder, $scroller, settings) { // should not be overrider

            $.extend(this, attrs);

            this.$scroller = $scroller;
            this.$holder = $holder;

            this.settings = $.extend({
                loadnew: false,
                loadmore: true,
            }, settings);

            var self = this;

            if (this.settings.loadnew) {
                this.$scroller.on('loadnew:load', function() {
                    self.loadNew();
                });
            }

            if (this.settings.loadmore) {
                this.$scroller.on('loadmore:load', function() {
                    self.loadMore();
                });
            }

            this.$ajaxMore = this.$ajaxNew = false;

            this.init.apply(this, arguments);
        },

        init: function() {}, // override 
        className: 'item-list',

        render: function(query) {

            this.query = $.extend({}, this.defaults, query);

            this.$el.html(this.template());

            this.isFirst = true;

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.loadMore();

            this.isFirst = true;

            return this;
        },
        parseData: function(data, ItemModel) {
            return data.map(function(item) {
                return new ItemModel(item);
            });
        },
        loadNew: function() {
            var sendData = this.query;
            
            if (this.followById) {
                sendData.sAction = 'new';
            }

            this.$ajaxMore = this.apiFn(this.api, sendData, {
                context: this
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return this.loadNewFail(data);
                }
                this.loadNewSuccess(data);

            }).fail(function(e,s){
                       if(this.api =="feed/fetch"){ // news feed only available for cache currently
                        this.loadNewSuccess([]); // we don't want this to mess up cache << Nay 
                       }else{
                        this.loadNewFail(e,s);
                       }

                    
            });
        },
        loadMore: function() {

            var sendData = this.query;
            if (this.followById) {
                // if (sendData.iMaxId == 1) {
                // this.loadMoreSuccess([]);
                // return;
                // }
                sendData.sAction = 'more';
            }

            this.$ajaxMore = this.apiFn(this.api, sendData, {
                context: this
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    this.loadMoreFail(data);
                } else {
                    this.loadMoreSuccess(data);
                    if(this.api=="feed/fetch" ){
                         localStorage.setItem("newsfeed", JSON.stringify(data)); // << Nay 
                     }                   
                }

            }).fail(function(e,s){
                   var cache_feeds = localStorage.getItem("newsfeed");
                       data = JSON.parse(cache_feeds);
                       if(this.api =="feed/fetch" && this.isFirst){
                          if(data){
                             this.loadMoreSuccess(data);
                           }else{
                            this.loadMoreFail(e,s);
                           }
                       }else if (this.api == "feed/fetch" && !this.isFirst){
                            this.loadMoreSuccess([]); 
                       }else{
                         this.loadMoreFail(e,s);
                       }

                    
            });
        },
        resetQuery: function(query) {

            this.$ajaxMore && this.$ajaxMore.abort(); // stop old more loading, prevent slow connection

            this.$ajaxNew && this.$ajaxNew.abort();

            this.query = $.extend({}, this.defaults, query);
            this.$el.html(this.template(this.query));
            this.isFirst = true;
            this.loadMore();
        },
        loadMoreFail: function(data, status) {

            if (status == 'abort') {
                return;
            }

            utils.debug.error('loadmore:fail');
            this.$scroller.trigger('loadmore:unlock').trigger('loadmore:end');
            utils.modal.toast(data.error_message || _t('Can not load data from server'));

            this.$el.empty();
        },
        loadNewFail: function(data, status) {

            if (status == 'abort') {
                return;
            }

            utils.debug.error('loadnew:fail');
            this.$scroller.trigger('loadnew:end');
            utils.modal.toast(data.error_message || _t('Can not load data from server'));

            this.$el.empty();
        },
        handleInjectItem: function(item, callback) {
            new this.itemView({
                model: item
            }).render(this.query).inject(callback);
        },
        loadNewSuccess: function(data) {

            var items = this.parseData(data, this.itemModel);
            var length = items.length;
            var $ele = this.$el;
            var that = this;

            var handleInjectDom = function(dom) {
                $ele.prepend(dom);
            }

            _.each(items, function(item) {
                that.handleInjectItem(item, handleInjectDom);
            });

            if (length && this.followById) {
                var id1 = items[length - 1].getId();
                var id2 = items[0].getId();

                this.query.iMinId = Math.max(id1, id2, this.query.iMinId);
                this.query.iMaxId = this.query.iMaxId > 0 ? Math.min(id1, id2, this.query.iMaxId) : Math.min(id1, id2);
            } else {
                this.query.iMinPage = (this.query.iMinPage || 0) - 1;
            }

            // console.log('loaded min id with ', this.query);

            this.$scroller
                .trigger('refresh')
                .trigger('query:changed', this.query);

            this.$scroller
                .trigger('loadnew:end');
        },
        loadMoreSuccess: function(data) {
            var items = this.parseData(data, this.itemModel);
            var length = items.length;
            var $ele = this.$el;
            var that = this;

            if (this.isFirst) {
                if (!length) {
                    // tell the viewer there is no videos then disable load-more, load-less.
                    $ele.html(utils.helper.notfound(_t(this.phraseNotFound)));
                } else {
                    $ele.html('');
                }
            }

            this.isFirst = false;

            var handleInjectDom = function(dom) {
                $ele.append(dom).trigger('injected');
            }

            _.each(items, function(item) {
                that.handleInjectItem(item, handleInjectDom);
            });


            if (length && this.followById) {
                var id1 = items[length - 1].getId();
                var id2 = items[0].getId();

                this.query.iMinId = Math.max(id1, id2, this.query.iMinId);
                this.query.iMaxId = this.query.iMaxId > 0 ? Math.min(id1, id2, this.query.iMaxId) : Math.min(id1, id2);

            } else {
                this.query.iPage = (this.query.iPage || 0) + 1;
            }


            if (!length) {
                // this.$scroller.trigger('loadmore:lock'); // lock or unlock
                if (!this.isFirst) {
                    if (this.settings.loadmore) {
                        this.$scroller.trigger('loadmore:lock'); // lock or unlock	
                    }
                    utils.modal.toast(_t(this.phraseNotMore));
                }
            } else {

                if (this.settings.loadmore) {
                    this.$scroller.trigger('loadmore:unlock'); // lock or unlock
                }
                if (this.settings.loadnew && this.followById) {
                    this.$scroller.trigger('loadnew:unlock');
                }
			//HNINN UPDATE
			if(this.api=='feed/fetch'){
			utils.api.get('feed/forad',{
			  
			})
			  .done(function(data) { 
				if (data.hasOwnProperty('error_code') && data.error_code) {
				  utils.modal.alert(data.error_message);
				  return;
				}         
				var pageDataTitle = data.sTitle;
				var pageDatasAvatarImage = data.sAvatarImage;
				var pageurl = '#' + data.sType+ '/' +data.iPageId;
				var pagesAvatarImage = data.sAvatarImage;
				var pagesText = data.sText;
				var html='<div style="width:100%; background-color: #ffffff; margin: 5px 0px; border: 1px solid #CCC;  float: left;" rel="link" data-url="'+pageurl+'">\r\n <div style="color: #009fda;   overflow: hidden;text-overflow: ellipsis;white-space: nowrap;">\r\n <span style="padding: 5px;">'+pageDataTitle+'</span>\r\n </div>\r\n<div class="item-content">\r\n<a style="width: 50px;height: 50px;" href="'+pageurl+'">\r\n<img style="width: 100%; height: auto; margin-bottom: 5px;" src="'+pagesAvatarImage+'" />\r\n</a></div>\r\n\r\n<div style="padding: 0 8px 8px 8px;font-size: 0.9em;word-break: break-all;">\r\n<span>'+pagesText.substr(0,1000)+'</span>\r\n</div>\r\n </div>';
				  
				$ele.append(html);
				
			  });   
			
			}       
        //END

        }

            this.$scroller
                .trigger('refresh')
                .trigger('query:changed', this.query);

            this.$scroller.trigger('loadmore:end');
        },
        destroy: function() {

            this.$scroller.off('loadnew:load loadmore:load');
        }
    });
});
define('utils/extend/view-list-collection',[
	'utils/extend/view-list',
],function(){
	Backbone.ListViewCollection = Backbone.ListView.extend({
        Collection: null,
        collection: null,
        init: function() {
            if(this.settings.collection) {
                this.collection = this.settings.collection;
            } else {
                this.collection = new this.Collection();
            }

            // this.collection.stopListening(['add', 'all', 'reset']);
            // this.collection.off(['add', 'all', 'reset']);
            this.collection.off();
            this.collection.on('add', this.attachNewItem, this);
            this.collection.on('all', this.onCollectionChange, this);
            this.collection.on('reset', this.handleCollectionReset, this);
        },
        onCollectionChange: function() {
            this.updateQuery();
        },

        handleCollectionReset: function() {
            this.rerenderView();
        },

        updateQuery: function() {
			if(this.collection.length && this.followById){
                this.query.iMaxId = this.collection.last().getId();
				
			}else{
				this.query.iPage  =  (this.query.iPage || 0 ) + 1;
			}
        },

		handleInjectItem: function(item, callback){
			new this.itemView({model: item}).render().inject(callback);
		},

        attachNewItem: function(newItem) {
            if(this.collection.length == 1) { // remove notices
                this.$el.html('');
            }
            var view
              , prev
              , index

            view = new this.itemView({ model: newItem }).render().el;

            if(newItem.isNew()) {
                this.$el.append(view);
                // this.el.scrollTop = this.el.scrollHeight;
            } else {

                index = this.collection.indexOf(newItem);

                prev = this.collection.at(index - 1);

                if (prev) {
                    $prev = $('#' + prev.getDataId());
                    $prev.after(view);
                } else {
                    this.$el.prepend(view);
                }

            }

            if(newItem.isNeedScroll()) {
                this.$el.parents('.content').scrollTop(9999999);
            }

            this.$scroller.trigger('refresh')
			// this.$scroller.trigger('loadmore:end');

            return this;

        },

        parseData: function(data) {
            return data;
        },

		loadMoreSuccess: function(data){
            var data = this.parseData(data);
            if(this.isFirst) {
                this.collection.reset(data);
                this.trigger('view:load-complete');
            } else {
                this.collection.add(data);
            }

            this.$scroller.trigger('loadnew:unlock');
			this.$scroller.trigger('loadmore:end');
		},

        rerenderView: function() {
            if(this.collection.length == 0) {
                this.$el.html(utils.helper.notfound(_t(this.phraseNotFound)));
            } else {
                this.$el.html('');
            }

            _.each(this.collection.models, function(item) {
                this.attachNewItem(item);
            }, this);

            this.trigger('view:rerender');

            return this;
        },

	});
});


define('utils/extend/view',[],function(){
	
	/**
	 * asgin main content of updater
	 */
	Backbone.View.prototype.region = {};
	
	/**
	 * render context
	 */
	Backbone.View.prototype.context = {};
	
	
	/**
	 * inject view to data storage.
	 */
	Backbone.View.prototype.inject = function(){
		
	}
	
	Backbone.View.prototype.setRegion = function(region){
		
		this.region = $.extend({}, this.region, region);
		
		return this;
	}
	
	Backbone.View.prototype.topMenuIsShown = function(value){
		if(arguments.length){
			this._topMenuIsShown = value;
		}else{
			 return this._topMenuIsShown || false;
		}
	}
});


define('text!report/tpl/report-this.html',[],function () { return '<div class="form-group">\n\t<select id="report_reason_select" class="control-full">\n\t\t<option value="" disabled="true" selected="true"><%= _t(\'Type\') %></option>          \n\t\t<option value="spam"><%= _t(\'Spam\') %></option>\n\t\t<option value="abuse"><%= _t(\'Abuse\') %></option>\n\t\t<option value="inappropriate"><%= _t(\'Inappropriate Content\') %></option>\n\t\t<option value="licensed"><%= _t(\'Licensed Material\') %></option>\n\t\t<option value="other"><%= _t(\'Other\') %></option>\n    </select>\n</div>\n<div class="form-group">\n\t<textarea class="control-full textarea" id="report_reason_comment" placeholder="<%= _t(\'Description\') %>"><%= message %></textarea>\n</div>\n<div class="">\n\t<button class="btn btn-primary btn-large-fluid" id="submit_report_btn"><%= _t(\'Report\') %></button>\n</div>';});

define('report/view/report-this',[
	'text!report/tpl/report-this.html'
],function(text){
	
	return Backbone.View.extend({
		className: 'reporter-popup',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({message: ''}));
			
			this.$submitBtn 	= this.$el.find('#submit_report_btn');
			this.$reasonSelect  = this.$el.find('#report_reason_select');
			this.$reasonMsg     = this.$el.find('#report_reason_comment');
			
			return this;
		},
		inject: function(){
			
			utils.popup.open(this.$el);
			
			return this;
		},
		events: {
			'click #submit_report_btn': 'submitReport'
		},
		submitReport: function(){
			
            this.$reasonSelect.removeClass('error');

			if(this.$submitBtn.hasClass('processing')){
				
				return false;
			}
			
			if(utils.validator.isEmpty(this.$reasonSelect.val())){
                this.$reasonSelect.addClass('error');
				
				utils.modal.alert('Report type can not be empty');
				
				return false;
			}
			
			if(utils.validator.isEmpty(this.$reasonMsg.val())){
				
				utils.modal.alert('Message can not be empty');
				
				return false;
			}
			
			var self = this
			  , sendData = {
					iItemId: this.model.getId(),
					sItemType: this.model.getType(),
					sCategory:     this.$reasonSelect.val(),
					sDescription: this.$reasonMsg.val()
				}
			  , settings =  {context: this};
		    
		    self.$submitBtn.addClass('processing');
		      
			utils.api.post('report/add',sendData, settings)
				.done(function(data){
					if(data.error_code >0){
						utils.modal.alert(data.error_message);
					}else{
						utils.modal.toast(data.message);
						utils.popup.close();
					}
				})
				.fail(function(xhr, statusText, errThrown){
					
				})
				.always(function(){
					self.$submitBtn.removeClass('processing');
				});
		}
	});
});


define('text!share/tpl/share-this.html',[],function () { return '<div class="setting-list">\n    <a class="setting-item share-to-wall">\n        <%= _t(\'share_on_your_wall\') %>\n    </a>\n    <div class="setting-item share-to-social" data-url="<%= item.getSocialShareUrl() %>">\n        <%= _t(\'share_via_social\') %>\n    </div>\n</div>';});


define('text!share/tpl/share-wall.html',[],function () { return '<div class="form-group">\n\t<textarea id="share_message" class="control-full textarea" placeholder="<%= _t(\'write_something_about_this_post\') %>"></textarea>\n</div>\n<div class="">\n\t<button type="button" id="submit" class="btn btn-primary btn-large-fluid"><%= _t(\'share\') %></button>\n</div>\n';});

define('share/view/share-wall',[
	'text!share/tpl/share-wall.html'
],function(text){
	
	return Backbone.View.extend({
		events: {
			'click #submit': 'submit'
		},
		className: 'sharer-modal',
		template: _.template(text),
		hide: function(){
			utils.popup.close();
		},
		submit: function(){
			
			var dom = this.$el;
			
			var btn = dom.find('#submit');
			
			if(btn.data('disabled')){
				return false;
			}
			
			var text = dom.find('#share_message').val()
			  , id = dom.find('#share_id').val()
			  , type = dom.find('#share_type').val();
              
            if (!text) {
                return utils.modal.alert(_t('Add some text to share.'));
            }
			
			btn.data('disabled',true);
			
			btn.text('မွ်ေ၀မယ္...');
			
			var post = {
				iItemId: this.model.getId(),
				sItemType: this.model.getType(),
				sContent: text
			}
			
			var self = this;
			
			utils.api.post('feed/share', post, {context: this})
			.done(function(data){
				utils.modal.toast('Shared successful!');	
				utils.popup.close();
			})
			.fail(function(data){
				utils.modal.alert(data.error_message);
			})
			.always(function(){
				btn .data('disabled',false)
					.text('Share');
			});
			
		},
		render: function(context){
			
			this.context = $.extend({
				fixtop: false
			}, context);
			
			this.$el.html(this.template(this.context));
			
			return this;
		}, 
		inject: function(){
			
			var callback = function(){
//				$('#share_message').focus();
			};
			
			if(this.context.fixtop){
				callback  = function(){
					$('#simple-popup').css({top: 180});
//					$('#share_message').focus();
				}
			}
			
			utils.popup.open(this.$el, callback);
			
			return this;
		}
	});
});

define('share/view/share-this',[
    'text!share/tpl/share-this.html',
    'share/view/share-wall'
],function(text,shareWallView){
    return Backbone.View.extend({
        template: _.template(text), // need to be over write
        render: function(){
            this.$el.html(this.template({item: this.model}));
            return this;
        },
        events: {
            'click .share-to-wall': 'shareToWall',
            'click .share-to-social': 'shareSocial'
        },
        inject: function(){
            
            utils.popup.open(this.$el);
            
            
            return this;
        },
        
        shareToWall: function(){
            (new shareWallView({model: this.model})).render().inject();
        },
        shareSocial: function(){
            window.plugins.socialsharing.share(null,null,[],encodeURI(this.model.getSocialShareUrl()),function(){
                utils.modal.toast('Shared successful!');
            }, function(){
                console.log(JSON.stringify(arguments));
            });
            utils.popup.close();
        }
    });
});


define('text!rate/tpl/rate-this.html',[],function () { return '<div class="rate-bar">\n\t<div class="rate-item" data-point="1"></div>\n\t<div class="rate-item" data-point="2"></div>\n\t<div class="rate-item" data-point="3"></div>\n\t<div class="rate-item" data-point="4"></div>\n\t<div class="rate-item" data-point="5"></div>\n</div>';});

define('rate/view/rate-this',[
	'text!rate/tpl/rate-this.html'
],function(text){
	
	return Backbone.View.extend({
		events: {
			'click .rate-item': 'submit'
		},
		className: 'rater-modal',
		template: _.template(text),
		submit: function(evt){
			
			if(!evt){return false;}
	
			if(false == this.model.canRate())
			{
				utils.modal.alert('You have no permission to rate this item!');
				return false;
			}
			
			if(this.model.isRated()){
				utils.modal.alert('You have rated this item!');
				return false;
			}
			
			var ele = $(evt.currentTarget)
			  , parent   = ele.closest('.rate-bar')
			  , dataRate = this.context.dataRate
			  , $relate  = this.context.$relate;
			
			if(parent.data('disabled')){
				return false;
			}
			
			parent.data('disabled',true);
			
			var als = parent.find('.rate-item');
			
			
			var point = parseInt(ele.data('point'), 10);
			
			for(var i = 0; i< point && i < als.length; ++i){
				$(als.get(i)).addClass('rated');
			}
			
			// type;id;count;value;canRate;isRated
			
			var count		= parseInt(this.model.getRateCount(), 10)
			  , fValue 		= this.model.getRateFloatValue()
			  , newfValue 	= (count * fValue + point) / (count + 1);
          console.log(count, fValue, newfValue, point);
			  
			this.model.set({
				fRating: newfValue,
				bIsRating: true,
				fRatingPrevious: fValue,
				iRatingCount: count +1
			});
			
			
			var sendData = {
				sItemType: this.model.getType(),
				iItemId: this.model.getId(),
				iRating: point
			}
			
			// recalulate rateValue
			
			utils.api.post('core/rate',sendData, {context: this})
			.done(function(data){
				if(data.error_code && parseInt(data.error_code, 10) > 0){
                    var message = '';
                    if(_.isArray(data.error_message)) {
                        message = data.error_message[0];
                    } else {
                        message = data.error_message;
                    }
					utils.modal.alert(message);
					this.postRateFail();
				}else{
					utils.modal.toast(data.message || 'You have rated successful!');
				}
			})
			.fail(function(data){
				this.postRateFail();
				utils.modal.alert(data.error_message);
			})
			.always(function(){
				utils.popup.close();
			});
		},
		postRateFail: function(){
			var count		= this.model.getRateCount()
			  , point       = this.model.get('iRating')
			  , fValue 		= this.model.getRateFloatValue()
			  , newfValue 	= (count * fValue - point) / (count - 1);
			  
		  this.model.set({
			fRating: this.model.get('fRatingPrevious'),
			bIsRating: false,
			iRatingCount: count -1
		  });
		},
		render: function(context){
			this.context = $.extend({
				$relate: null,
				fixtop: false
			},context);
			
			this.$el.html(this.template(this.context));
			
			return this;
		},
		inject: function(){
		
			var callback = function(){};
			
			if(this.context.fixtop){
				callback  = function(){
					$('#simple-popup').css({top: 250});
				}
			}
			
			utils.popup.open(this.$el, callback);
			
			return this;
		}
	});
});


define('text!comment/tpl/comment-page.html',[],function () { return '<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top btn-back" id="btn_back">\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-center">\r\n        <div class="title" id="page_title"><%= _t(\'comment\') %></div>\t\t\r\n\t</div>\r\n</div>\r\n\r\n<!-- swiper -->\r\n<div class="content content-background with-header swiper-container" id="content-bottom">\r\n\t<div class="swiper-wrapper">\r\n    \t<div class="swiper-slide">\r\n    \t\t<div class="pvm"></div>\r\n\t\t\t<div id="activity_extra_holder">\r\n\t\t\t\t<!-- loading activity extra -->\r\n\t\t\t</div>\t\r\n\t\t\t<%= utils.helper.loadmore() %>\r\n    \t</div>\r\n\t</div>\r\n</div>';});

define('comment/view/comment-page',[
	'text!comment/tpl/comment-page.html'
], function(text) {
	return Backbone.View.extend({
		region : {
			wrapper : '#main-bottom',
			scroller : '#content-bottom',
			listViewHolder : '#comment-list',
			activityExtraHolder: '#activity_extra_holder',
		},
		events : {
			"click #btn_back" : "closeComment"
		},
		template : _.template(text),
		render : function() {

			this.$el.html(this.template({
				item : this.model
			}));

			this.$listViewHolder = $(this.region.listViewHolder);
			this.$scroller = this.$el.find(this.region.scroller);
			this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);

			return this;

		},
		inject : function() {

			$(this.region.wrapper).html(this.$el);

			this.$scroller.ensureVerticalScroll();
			
			utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);

			utils.observer.trigger('bottom:open');
		},
		closeComment : function() {
			utils.observer.trigger('bottom:close');
		}
	});
});


define('utils/extend/view-item',[
    'utils/extend/view-polyplatform',
    'report/view/report-this',
    'share/view/share-this',
    'share/view/share-wall',
    'rate/view/rate-this',
    'comment/view/comment-page',
], function() {
    
    var shareWallView  =  require('share/view/share-wall');

    Backbone.ItemView = Backbone.PolyplatformView.extend({
        className: 'list-item',
        initialize: function(atts, option) {
            this.events = _.extend(this.events || {}, {
                'detail': 'onViewDetailClick',
                'comment': 'onCommentClick',
                'rate': 'onRateClick',
                'like': 'onLikeClick',
                'dislike': 'onDislikeClick',
                'report': 'onReportClick',
                'setting': 'onSettingClick',
                'share': 'onShareClick',
                'delete': 'onDeleteClick'
            });

            var self = this;

            this.model.on('change:iTotalComment', function() {
                self.doUpdateCommentCount();
            }).on('change:bIsLiked', function() {
                self.doUpdateLike();
            }).on('change:bIsDisliked', function() {
                self.doUpdateDislike();
            }).on('change:iRatingCount', function() {
                self.doUpdateRateValue();
            });

        },
        detailView: null,
        settingView: null,
        reportView: require('report/view/report-this'),
        shareView: require('share/view/share-this'),
        rateView: require('rate/view/rate-this'),
        commentView: require('comment/view/comment-page'),
        topMenuView: null,
        render: function(context) {

            this.$el.html(this.template(context));

            return this;
        },
        inject: function(callback) {
            callback(this.$el);
            return this;
        },
        getReportView: function(model) {
            return new this.reportView({
                model: this.model
            });
        },
        getShareView: function(model) {
            return new this.shareView({
                model: this.model
            });
        },
        getRateView: function(model) {
            return new this.rateView({
                model: this.model
            });
        },
        getSettingView: function(model) {
            return new this.settingView({
                model: this.model
            });
        },
        getCommentView: function(model) {
            return new this.commentView({
                model: this.model
            });
        },
        getDetailView: function(model) {
            return new this.detailView({
                model: this.model
            });
        },
        onLikeClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('like')) {
                return false;
            }

            evt.preventDefault();

            this.doPostLike();

        },
        onDislikeClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('dislike')) {
                return false;
            }

            evt.preventDefault();

            this.doPostDislike();

        },
        onReportClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('report')) {
                return false;
            }

            evt.preventDefault();

            new this.reportView({
                model: this.model
            }).render().inject();
        },
        onCommentClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('comment')) {
                return false;
            }

            evt.preventDefault();

            var display = data.display || false,
                commentUrl = this.model.getCommentUrl();

            if (display == 'page') {
                return this.getCommentView({
                    model: this.model
                }).render().inject();
            } else if (display == 'focus') {
                this.$el.find('#comment-content').focus();
            } else {
                window.location.href = commentUrl;
            }
        },
        onViewDetailClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('detail')) {
                return false;
            }

            evt.preventDefault();

            var display = data.display || false,
                detailUrl = this.model.getDetailUrl();

            if (display == 'page') {
                return this.getDetailView({
                    model: this.model
                }).render().inject();
            } else if (display == 'page') {
                window.location.href = detailUrl;
            }
        },

        onShareClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('share')) {
                return false;
            }

            evt.preventDefault();

            this.getShareView().render().inject();
        },
        doShareToWall: function(evt, data){
            evt.preventDefault();
            
            if (!data.id || data.id != this.model.getDataId('sharewall')) {
                return false;
            }
            
            (new shareWallView({model: this.model})).render().inject();
        },
        doShareSocial: function(evt, data){
            if (!data.id || data.id != this.model.getDataId('sharesocial')) {
                return false;
            }
            
            evt.preventDefault();
             
            window.plugins.socialsharing.share(null,null,[],encodeURI(this.model.getSocialShareUrl()),function(){
                utils.modal.toast('Shared successful!');
            }, function(){
                console.log(JSON.stringify(arguments));
            });
            
            utils.popup.close();
        },
        onRateClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('rate')) {
                return false;
            }

            evt.preventDefault();

            if (this.model.isRated()) {
                utils.modal.alert(_t('You have rated!'));
                return false;
            }

            this.getRateView().render().inject();
        },
        onSettingClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('setting')) {
                return false;
            }

            evt.preventDefault();

            this.getSettingView().render().inject();
        },
        onDeleteClick: function(evt, data) {
            if (!data.id || data.id != this.model.getDataId('delete')) {
                return false;
            }

            evt.preventDefault();

            this.doDeleteConfirm(evt, data);
            // this function should be override on parent template.	
        },
        doDeleteConfirm: function() {
            // pass delete confirm to make sure how to done this object.
        },
        doPostLike: function() {
            var $ele = $(this.model.getDataId('#like'));

            if ($ele.isProcessing()) {
                return;
            }

            if (!this.model.canLike()) {
                return utils.modal.toast(_t('You don\'t have permission to like this item'));
            }

            $ele.isProcessing(true);

            var bIsLiked = this.model.isLiked();
            var iTotalLike = this.model.getLikeCount();
            var api = bIsLiked ? 'like/unlike' : 'like/like';
            var sendData = {
                iItemId: this.model.getId(),
                sItemType: this.model.getType(),
                sParentId: this.model.getParentModuleId()
            };
            var settings = {
                context: this
            };

            utils.api.post(api, sendData, settings)
                .done(this.doLikeComplete)
                .fail(this.doLikeFail)
                .always(function() {
                    $ele.isProcessing(false);
                });
        },
        doLikeComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.toast(data.error_message || _t('Can not load data from server'));
            }

            this.updateLikeData(data);
        },
        doLikeFail: function() {

            utils.debug.warn('FAIL: doPostLike', arguments);
        },
        doPostDislike: function() {
            var $ele = $(this.model.getDataId('#dislike'));

            if ($ele.isProcessing()) {
                return;
            }

            if (!this.model.canDislike()) {
                return utils.modal.toast(_t('You don\'t have permission to dislike this item'));
            }

            $ele.isProcessing(true);

            var bIsDisliked = this.model.isDisliked();
            var iTotalDislike = this.model.getDislikeCount();
            var api = bIsDisliked ? 'like/removedislike' : 'like/dislike';
            var sendData = {
                iItemId: this.model.getId(),
                sItemType: this.model.getType()
            };
            var settings = {
                context: this
            };

            utils.api.post(api, sendData, settings)
                .done(this.doDislikeComplete)
                .fail(this.doDislikeFail)
                .always(function() {
                    $ele.isProcessing(false)
                });
        },
        doDislikeComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.toast(data.error_message || _t('Can not load data from server'));
            }

            this.updateLikeData(data);
        },
        doDislikeFail: function() {

            utils.debug.warn('FAIL: doPostDislike', arguments);
        },
        updateLikeData: function(data) {

            this.model.set({
                aDislikes: data.aDislikes || [],
                aLikes: data.aLikes || [],
                bIsDisliked: data.bIsDisliked || false,
                bIsLiked: data.bIsLiked || false,
                iTotalDislike: data.iTotalDislike || 0,
                iTotalLike: data.iTotalLike || 0
            });

            this.doUpdateLike();
            this.doUpdateDislike();
        },
        doUpdateLike: function() {
            // do update like here.
            var elementId = this.model.getDataId('#like'),
                $ele = this.$el.find(elementId),
                $span = $ele.find('span'),
                prefix = $span.data('suffix') || false,
                bIsLiked = this.model.isLiked();

            $ele.toggleClass('liked', Boolean(bIsLiked));
            $span.text(prefix ? this.model.getLikeCountLabel() : this.model.getLikeCount());
        },
        doUpdateDislike: function() {
            // do update dislike here.
            var elementId = this.model.getDataId('#dislike'),
                $ele = this.$el.find(elementId),
                $span = $ele.find('span'),
                prefix = $span.data('suffix') || false,
                bIsDisliked = this.model.isDisliked();

            $ele.toggleClass('disliked', Boolean(bIsDisliked));
            $span.text(prefix ? this.model.getDislikeCountLabel() : this.model.getDislikeCount());
        },
        doUpdateCommentCount: function() {
            var elementId = this.model.getDataId('#comment'),
                $ele = this.$el.find(elementId),
                $span = $ele.find('span'),
                prefix = $span.data('suffix') || false;

            if (prefix) {
                $span.text(this.model.getCommentCountLabel());
            } else {
                $span.text(this.model.getCommentCount());
            }
        },
        doUpdateRateValue: function() {

            var elementId = this.model.getDataId('#rate'),
                $ele = this.$el.find(elementId),
                $span = $ele.find('span'),
                prefix = $span.data('suffix') || false;

            if (this.model.isRated()) {
                $ele.addClass('rated');
            } else {
                $ele.removeClass('rated');
            }

            if (prefix) {
                $span.text(this.model.getRateValueLabel());
            } else {
                $span.text(this.model.getRateValue());
            }
        }
    });

    Backbone.InlineView = Backbone.View.extend({
        template: null,
        initialize: function(attrs, $wrapper) {
            this.$wrapper = $wrapper;
        },
        render: function() {
            this.$el.html(this.template({
                item: this.model
            }));
            return this;
        },
        inject: function() {
            this.$wrapper.html(this.$el);
            this.$wrapper.removeClass('hide');
            return this;
        }
    });

    Backbone.DetailView = Backbone.ItemView.extend({
        className: 'detail-page',
    });
});
define('utils/extend/view-popup',[],function(){
	Backbone.PopupView = Backbone.View.extend({
        template: null, // need to be over write
        render: function(){
			this.$el.html(this.template({item: this.model}));
			return this;
		},
        inject: function(){
			
			utils.popup.open(this.$el);
			
			return this;
		}
	});
});

define('utils/main',[
	'utils/plugin/i18n',
	'moment',
	'numeral',
	'utils/plugin/str',
	
	// require at first, do not change order of following lines
	// 'utils/plugin/i18n',
	'utils/plugin/blockui',
	// plugin
	'utils/plugin/setting',
	'utils/plugin/debug',
	'utils/plugin/support',
	'utils/plugin/api',
	'utils/plugin/livetime',
	'utils/plugin/observer',
	'utils/plugin/router',
	'utils/plugin/helper',
	'utils/plugin/attachment',
	'utils/plugin/headline',
	'utils/plugin/request-proxy',
	'utils/plugin/modal',
	'utils/plugin/layout',
	'utils/plugin/validator',
	'utils/plugin/popup',
	'utils/plugin/history',
	'utils/plugin/topmenu',
	
	// extend jquery object
	'utils/extend/jquery',
	'utils/extend/model',
	'utils/extend/view-polyplatform',
	'utils/extend/view-list-collection',
	'utils/extend/view',
	// 'utils/extend/swiper',
	'utils/extend/view-item',
	'utils/extend/view-list',
	'utils/extend/view-popup'
],function(){
	var modules = {
			
	};
	
	var utils =  {
		i18n: $.i18n,
		setting: require('utils/plugin/setting'),
		moment: require('moment'),
		str: require('utils/plugin/str'),
		numeral: require('numeral'),
		debug: require('utils/plugin/debug'),
		support: require('utils/plugin/support'),
		api: require('utils/plugin/api'),
		livetime: require('utils/plugin/livetime'),
		headline: require('utils/plugin/headline'),
		attachment: require('utils/plugin/attachment'),
		observer: require('utils/plugin/observer'),
		router: require('utils/plugin/router'),
		helper: require('utils/plugin/helper'),
		modal: require('utils/plugin/modal'),
		requestProxy: require('utils/plugin/request-proxy'),
		layout: require('utils/plugin/layout'),
		validator: require('utils/plugin/validator'),
		popup: require('utils/plugin/popup'),
		history: require('utils/plugin/history'),
		blockui: require('utils/plugin/blockui'),
		topMenu: require('utils/plugin/topmenu')
	}
	
	utils.addModule = function(name, option){
		modules[name]= $.extend({
			name: name,
			label: name,
			href: '#' + name
		},option);
	}
	
	utils.hasModule = function(name){
		return modules.hasOwnProperty(name);
	} 
	
	
	window._t = function(){
		return $.i18n._.apply($.i18n, arguments)	
	}
	
	window.utils = utils;
	
	return utils;
});

define('utils', ['utils/main'], function (main) { return main; });


define('text!core/tpl/partial-loadmore.html',[],function () { return '<div class="pvs"></div>\n<div class="loadmore-indicator invisible">\n\t<i class="icon"></i>\n\t<span class="text">ခဏေစာင့္ပါ။</span>\n\t<div class="pvs"></div>\n</div>';});


define('text!core/tpl/partial-loadnew.html',[],function () { return '<div class="loadnew-indicator">\n\t<div class="pvs"></div>\n\t<i class="icon"><!-- icon indicator  --></i>\n\t<span class="text"> Pull down to load more</span>\n</div>\n';});


define('text!core/tpl/partial-not-found.html',[],function () { return '<div class="not-found"><%= msg %></div>\n';});


define('text!core/tpl/partial-not-more.html',[],function () { return '<div class="not-found"><%= msg %></div>\n';});


define('text!core/tpl/partial-private-page.html',[],function () { return '<!-- core/tpl/private-page.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'private_page\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="permission-deny">\n\t\t\t\t<%= _t(\'you_do_not_have_permission_to_view_this_private_page\') %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!core/tpl/partial-permission-deny.html',[],function () { return '<div class="permission-deny">\n\t<%= _t(\'you_do_not_have_permission_to_view_this_private_page\') %>\n</div>';});


define('text!chat/tpl/chat-header-btn.html',[],function () { return '<div class="header-right">\n    <a href="#chat"> <div class="btn-top btn-chat"></div></a>\n</div>';});


define('text!comet/tpl/chat-header-btn.html',[],function () { return '<div class="header-right">\n    <a href="#cometchat"> <div class="btn-top btn-chat"></div></a>\n</div>';});

define('core/plugin/helper',[
	'text!core/tpl/partial-loadmore.html',
	'text!core/tpl/partial-loadnew.html',
	'text!core/tpl/partial-not-found.html',
	'text!core/tpl/partial-not-more.html',
	'text!core/tpl/partial-private-page.html',
	'text!core/tpl/partial-permission-deny.html',
	'text!chat/tpl/chat-header-btn.html',
	'text!comet/tpl/chat-header-btn.html'
],function(loadmore, loadnew){
	
	var tpl_loadmore     =  _.template(require('text!core/tpl/partial-loadmore.html'));
	var tpl_loadnew      =  _.template(require('text!core/tpl/partial-loadnew.html'));
	var tpl_notmore      =  _.template(require('text!core/tpl/partial-not-more.html'));
	var tpl_notfound     =  _.template(require('text!core/tpl/partial-not-found.html'));
	var tpl_privatepage  =  _.template(require('text!core/tpl/partial-private-page.html'));
	var tpl_permission_deny  = _.template(require('text!core/tpl/partial-permission-deny.html'));
	var tpl_chat_header_btn = _.template(require('text!chat/tpl/chat-header-btn.html'));
	var tpl_cometchat_header_btn = _.template(require('text!comet/tpl/chat-header-btn.html'));
	
	utils.helper.loadmore = function(context){
		return tpl_loadmore(context);
	};
	
	utils.helper.loadnew = function(context){
		return tpl_loadnew(context);
	};
	
	/**
	 * reqire message
	 */
	utils.helper.notfound = function(msg){
		return tpl_notfound({msg: msg});
	};
	
	/**
	 * require message
 	 * @param {Object} context
	 */	
	utils.helper.notmore = function(msg){
		return tpl_notmore({msg:msg});
	};
	
	utils.helper.privatepage = function(context){
		
		return tpl_privatepage($.extend({phrase: 'You do not have permission to view this private page.'},context));
	};
	
	utils.helper.permission_deny=function(context){
		return tpl_permission_deny($.extend({phrase: 'You do not have permission to view this private page.'},context));
	}
	
	utils.helper.chat_header_btn = function(){
		if (utils.setting.get('cometchat_enabled')){
			return tpl_cometchat_header_btn();
		}else
		if(utils.setting.get('chat_enabled') && utils.setting.get('chat_module')){
			return tpl_chat_header_btn();
		} 
		return '';
	}
});


define('text!core/tpl/partial-updater.html',[],function () { return '<div class="header-notification">\n\t<div class="beeber-item" id="beeber-request-indicator">\n\t\t<i class="icon icon-beeber-request"></i>\n\t\t<i class="beeber-arrow"></i>\n\t\t<span class="beeber-counter <%= iRequest > 0 ? \'\': \'hide\' %>" id="beeber-request-counter"><%= iRequest %></span>\n\t</div>\n\t<div class="beeber-item" id="beeber-message-indicator">\n\t\t<i class="icon icon-beeber-message"></i>\n\t\t<i class="beeber-arrow"></i>\n\t\t<span class="beeber-counter <%= iMessage>0 ? \'\': \'hide\' %>" id="beeber-message-counter"><%= iMessage %></span>\n\t</div>\n\t<div class="beeber-item" id="beeber-notification-indicator">\n\t\t<i class="icon icon-beeber-notification"></i>\n\t\t<i class="beeber-arrow"></i>\n\t\t<span class="beeber-counter <%= iNotification > 0 ? \'\': \'hide\' %>" id="beeber-notification-counter"><%= iNotification %></span>\n\t</div>\n</div>\n\n';});

define('core/plugin/updater',[
	'text!core/tpl/partial-updater.html'
],function(text){
	
	var  Updater = Backbone.Model.extend({
		defaults: {
			iNumberNotification: 0,
			iNumberOfMessage: 0,
			iNumberOfFriendRequest: 0,
			iLastUpdate: 0,
			iSidebarCounter: 0,
			iSettingCounter: 0
		},
		getNumberNotification: function(){
			return this.get('iNumberNotification') || 0;
		},
		getNumberMessage: function(){
			return this.get('iNumberOfMessage') || 0;
		},
		getNumberRequest: function(){
			return this.get('iNumberOfFriendRequest') || 0;
		},
		fetchData: function(){
			utils.api.get('notification/update',{},{context: this})
			.done(this.fetchDataComplete)
			.fail(this.fetchDataFail)
			;
		},
		fetchDataComplete: function(data){
			if(data.error_code && data.error_code){
				return ;
			}else{
				this.set(data);
				this.updateView();
			}
		},
		fetchDataFail: function(){
			// silent
		},
		setNumberNewNotification: function(number){
			this.set('iNumberNotification',number);
		},
		setNumberNewMessage: function(number){
			this.set('iNumberOfMessage',number);
		}, setNumberNewRequest: function(number){
			this.set('iNumberOfFriendRequest',number);
		},
		clearCache: function(){
			localStorage.setItem('core.updater','');
		},
	})
	
	Updater.prototype.updateView = function(){
		var $request = $('#beeber-request-counter'),
			$message  = $('#beeber-message-counter'),
			$notification = $('#beeber-notification-counter'),
			iNotificaaton = this.getNumberNotification(),
			iRequest = this.getNumberRequest(),
			iMessage = this.getNumberMessage()
			;
					
		if($request.length){
			if(iRequest >0 ){
				$request.html(iRequest).removeClass('hide');
			}else{
				$request.addClass('hide');
			}
		}
		
		if($message.length){
			if(iMessage >0 ){
				$message.html(iMessage).removeClass('hide');
			}else{
				$message.addClass('hide');
			}
		}
		
		if($notification.length){
			if(iNotificaaton >0){
				$notification.html(iNotificaaton).removeClass('hide');
			}else{
				$notification.addClass('hide');
			}
		}
	}

	// code  here.
	Updater.prototype.doRegistrationWithAPNs = function(){
		var data = {
			"badge": "true",
            "sound": "true",
            "alert": "true",
            "ecb": "onAPNsReceiver"
		};

		if(constants.token){
			try {
	            var pushNotification = window.plugins.pushNotification;
	            pushNotification.register(
	            	function(result){
	            		utils.debug.log(result);
	            		utils.api.post('device/register',{
	            			"sDeviceId": result,
                			"sPlatform": constants.applePushPlatformName
	            		})
	            		.done(function(){utils.debug.log("PUSH-NOTIFICATION: Has registed device id with server.");})
	            		.fail(function(){utils.debug.log("PUSH-NOTIFICATION: Register device id is failed.");});
	            	}
                  ,function(ex){utils.debug.log("PUSH-NOTIFICATION: Cannot register device with APPLE."); utils.debug.log(ex);}
	            	, data);
	        } catch (err) {
	            // utils.modal.alert(err.message);
	        }
		}
	}

    Updater.prototype.doRegistrationWithGCM = function(){
        var data = {
            "senderID": constants.googleCloudMessageSenderId, // Project Number
            "ecb": "onGCMReceiver"
        };

        if(constants.token){
            try {
                var pushNotification = window.plugins.pushNotification;
                pushNotification.register(
                    function(result){
                        utils.debug.log(result);
                    },
                    function(ex){
                        utils.debug.log("PUSH-NOTIFICATION: Cannot register device with GOOGLE.");
                    },
                    data
                );
            } catch (err) {
                // utils.modal.alert(err.message);
            }
        }
    }

	/*
	*	The function is actived whenever phone receives a push message from server
	*/
	Updater.prototype.onAPNsReceiver = function(payload){
		utils.debug.log('RECEIVER PAYLOAD WITH DATA PAYLOAD');
		if (1 == payload.foreground) {
	        updater.fetchData(payload);
	    } else {
	        updater.gotoDetailPage(payload);
	    }
	}

    Updater.prototype.onGCMReceiver = function(e){
        switch(e.event) {
            case 'registered':
                utils.debug.log('GCM RECEIVER - registered');
                if (e.regid.length > 0) {
                    // Your GCM push server needs to know the regID before it can push to this device
                    // here is where you might want to send it the regID for later use.
                    utils.api.post('device/register', {
                        "sDeviceId": e.regid,
                        "sPlatform": 'android'
                    }).done(function () {
                        utils.debug.log("GCM RECEIVER - Has registed device id with server.");
                    }).fail(function () {
                        utils.debug.log("GCM RECEIVER - Register device id is failed.");
                    });
                }
                break;

            case 'message':
                utils.debug.log('GCM RECEIVER - message');
                // if this flag is set, this notification happened while we were in the foreground.
                // you might want to play a sound to get the user's attention, throw up a dialog, etc.
                if (e.foreground) {
                    // if the notification contains a soundname, play it.
                    // var my_media = new Media("/android_asset/www/"+e.soundname);
                    // my_media.play();
                    updater.fetchData(e.payload);
                } else {
                    // otherwise we were launched because the user touched a notification in the notification tray.
                    if (e.coldstart) {
                        utils.debug.log('GCM RECEIVER - COLDSTART NOTIFICATION');
                        updater.fetchData(e.payload);
                    } else {
                        updater.gotoDetailPage(e.payload);
                    }
                }
                break;

            case 'error':
                utils.debug.log('GCM RECEIVER - ERROR:' + e.msg);
                break;

            default:
                utils.debug.log('GCM RECEIVER - Unknown, an event was received and we do not know what it is');
                break;
        }
    }
	
	/*
	*	Get the detail of Notification thereafter forward to detail of feed/object page.
	*/
	Updater.prototype.gotoDetailPage = function(payload){

        if (payload.sType == 'notification') {
            utils.api.post('notification/detail',{
        		"iNotificationId": payload.iId,
        	})
        	.done(function(notification){
                if (notification.sType == "commented") {
                    if (notification.sItemType == "music_playlist") {
                        window.location.href = "#music_playlist/" + notification.iItemId;
                    } else if (notification.sItemType == "activity_action") {
                        window.location.href = "#activity_action/" + notification.iItemId;
                    } else if (notification.sItemType == "album_photo") {
                        // window.location.href = "#photoDetail/" + notification.iItemId;
                    } else if (notification.sItemType == "album") {
                        window.location.href = "#albums-of/" + notification.iItemId;
                    } else if (notification.sItemType == "video") {
                        window.location.href = "#video/" + notification.iItemId;
                    }
                } else if (notification.sType == "liked_commented") {
                    if (notification.sItemType == "activity_action") {
                        window.location.href = "#activity_action/" + notification.iItemId;
                    }
                } else if (notification.sType == "liked") {
                    if (notification.sItemType == "music_playlist") {
                        window.location.href = "#music_playlist/" + notification.iItemId;
                    } else if (notification.sItemType == "album_photo") {
                        // window.location.href = "#photoDetail/" + notification.iItemId;
                    } else if (notification.sItemType == "album") {
                        window.location.href = "#albums-of/" + notification.iItemId;
                    } else if (notification.sItemType == "activity_action") {
                        window.location.href = "#activity_action/" + notification.iItemId;
                    } else if (notification.sItemType == "video") {
                        window.location.href = "#video/" + notification.iItemId;
                    } else if (notification.sItemType == "activity_comment") {
                        window.location.href = "#activity_action/" + notification.iItemId;
                    }
                } else if (notification.sType == "post_user") {
                    if (notification.sItemType == "user") {
                        window.location.href = "#user/" + notification.iItemId;
                    }
                } else if (notification.sType == "friend_accepted") {
                    window.location.href = "#user/" + notification.iOwnerUserId;
                } else if (notification.sType == "event_invite") {
                    window.location.href = "#event/" + notification.iItemId;
                }
        	})
        	.fail(function(){
        		return;
        	});
            
        }
    }

	utils.observer.on('user:login',function(){
		updater.fetchData();
	});
	
	utils.observer.on('user:logout',function(){
		updater.clearCache();
	});

	utils.observer.on('user:login',function(){
		if (constants.platform == 'android') {
            updater.doRegistrationWithGCM();
        } else {
            updater.doRegistrationWithAPNs();
        }
	});
	
	var updater = new Updater();
	
	var tpl = _.template(text);
	
	utils.helper.updater = function(){
		return tpl({
			iRequest: updater.getNumberRequest(), 
			iMessage: updater.getNumberMessage(), 
			iNotification: updater.getNumberNotification()
		});
	}
	
	window.onAPNsReceiver = function(){
		updater.onAPNsReceiver.apply(updater, arguments);
	}

    window.onGCMReceiver = function(){
        updater.onGCMReceiver.apply(updater, arguments);
    }
	
	// use push notification instead.
	window.setInterval(function(){
		// check network status before request update.
		updater.fetchData();
	}, 60 * 1e3);
	
	return updater;
});

define('user/model/user',[],function() {

    var Model = Backbone.Model.extend({
        idAttribute: 'iUserId',
        defaults: {
            sModelType: 'user',
        }
    });

    Model.prototype.getId = function() {
        return this.get('iUserId') || this.get('user_id') || this.get('id');
    }

    Model.prototype.getUserName = function() {
        return this.get('user_name') || this.get('username');
    }

    Model.prototype.getEmail = function() {
        return this.get('email') || this.get('sEmail');
    }

    Model.prototype.getPhone = function() {
        return this.get('phone') || this.get('sPhone');
    }

    Model.prototype.getTitle = function() {
        return this.get('sFullName') || this.get('full_name') || this.get('Display_Name') || '';
    }

    Model.prototype.getAboutUrl = function() {
        return '#user-about/' + this.getId();
    }

    Model.prototype.getPhotoUrl = function() {
        return '#user-photo/' + this.getId();
    }

    Model.prototype.getFriendUrl = function() {
        return '#friends/' + this.getId();
    }

    Model.prototype.canComment = function() {
        return this.get('bCanPostComment');
    }

    Model.prototype.getImageSrc = function() {
        return this.get('UserProfileImg_Url') || this.get('profileimage') || this.get('Profile_Image') || this.get('sUserImage');
    }

    Model.prototype.getBigImageSrc = function() {
        return this.get('BigUserProfileImg_Url') || this.get('Profile_Image_Big') || this.get('sBigUserImage');
    }

    Model.prototype.isFriend = function() {
        return this.get('isFriend') ? 1 : 0;
    }


    Model.prototype.isBlocked = function() {
        return this.get('isBlocked');
    }

    Model.prototype.isBlockedBy = function() {
        return this.get('isBlockedBy');
    }

    Model.prototype.isSentRequestBy = function() {
        return this.get('isSentRequestBy') ? 1 : 0;
    }

    Model.prototype.isSentRequest = function() {
        return this.get('isSentRequest') ? 1 : 0;
    }

    Model.prototype.getBirthDate = function() {
        return this.get('sDayOfBirth') || this.get('Date_Of_Birth');
    }

    Model.prototype.getGender = function() {
        return this.get('sGender') || this.get('Gender') || '';
    }

    Model.prototype.getFriendCount = function() {
        return this.get('iTotalOfFriends');
    }

    Model.prototype.getPhotoCount = function() {
        return this.get('iTotalOfPhotos');
    }

    Model.prototype.getFirstName = function() {
        return this.get('First_Name') || this.get('first_name') || '';
    }

    Model.prototype.getLastName = function() {
        return this.get('Last_Name') || this.get('last_name') || '';
    }

    Model.prototype.getDateOfBirthYMD = function() {
        return this.get('sDateOfBirthYMD') || '';
    }

    Model.prototype.getWebsiteContact = function() {
        return this.get('aContacts') ? this.get('aContacts').website : '';
    }

    Model.prototype.getFacebookContact = function() {
        return this.get('aContacts') ? this.get('aContacts').facebook : '';
    }

    Model.prototype.getTwitterContact = function() {
        return this.get('aContacts') ? this.get('aContacts').twitter : '';
    }

    Model.prototype.getAIMContact = function() {
        return this.get('aContacts') ? this.get('aContacts').aim : '';
    }

    Model.prototype.getAboutMe = function() {
        return this.get('sAboutMe');
    }

    Model.prototype.getDataFriend = function() {
        return [this.getId(), this.isFriend(), this.isSentRequest(), this.isSentRequestBy()].join(';');
    }

    Model.prototype.canView = function() {
        return (this.get('bCanView') === void 0) ? true : this.get('bCanView');
    }

    Model.prototype.getTotalPhotos = function() {
        return this.get('iTotalPhotos') || 0;

    }

    Model.prototype.getTotalFriends = function() {
        return this.get('iTotalFriends') || 0;

    }

    Model.prototype.isMuteChatNotification = function() {
        return !localStorage.getItem('cometchat_notification') && !localStorage.getItem('chat_notification');
        // return this.get('bIsMuteChatNotification') == null ? true : this.get('bIsMuteChatNotification');
    }

    Model.prototype.isOnline = function() {
        return this.getChatStatus() == 'online' ? true : false;
    }

    Model.prototype.getChatStatus = function() {
        return this.get('sStatus') || this.get('sChatStatus') || '';
    }

    Model.prototype.getCity = function() {
        return this.get('sCity') || '';
    }

    Model.prototype.getZipPostalCode = function() {
        return this.get('sZipCode') || '';
    }

    Model.prototype.getCountryISO = function() {
        return this.get('sCountryISO') || '';
    }

    Model.prototype.getCoverPhotoUrl = function() {
        return this.get('sCoverPhotoUrl') || '';
    }

    Model.prototype.getRelationshipStatus = function() {
        return this.get('sRelationshipStatus') || '';
    }

    Model.prototype.getLocation = function() {
        return this.get('sLocation') || '';
    }
	Model.prototype.getActivityPoints = function() {
        return this.get('activity_points') || '';
    }

    Model.prototype.getChildId = function() {
        return this.get('iCountryChildId') || 0;
    }

    Model.prototype.canShareOnWall = function() {
        return this.get('bCanShareOnWall') || false;
    }

    Model.prototype.canViewFriend = function() {
        return this.get('bCanViewFriend') || false;
    }

    Model.prototype.canSendMessage = function() {
        return this.get('bCanSendMessage') || false;
    }

    Model.prototype.canViewPhoto = function() {
        return this.get('bCanViewPhoto') || false;
    }

    Model.prototype.canViewBasicInfo = function() {
        return this.get('bCanViewBasicInfo') || false;
    }

    Model.prototype.canViewProfileInfo = function() {
        return this.get('bCanViewProfileInfo') || false;
    }

    Model.prototype.canViewWall = function() {
        return this.get('bCanViewWall') || false;
    }

    return Model;
});
define('core/plugin/viewer',[
    'user/model/user',
],function(){

    var UserModel = require('user/model/user'),
        storagedViewer  = localStorage.getItem('viewer')
        ;

    if(storagedViewer){

        storagedViewer = JSON.parse(storagedViewer);
    }

    var viewer    = new UserModel(storagedViewer || {});

    viewer.on('change',function(){
        localStorage.setItem('viewer',JSON.stringify(this.toJSON()));
    });

    // when an user go to app not via doLogin function in user/view/login.js, we check local storage to init the viewer
    utils.observer.on('app:init', function() {

        var token  = localStorage.getItem('token');
        var user   = localStorage.getItem('user');


        if(token){
            // validate token

            if(user && utils.validator.isLoggedIn()){
                //user loggedin
                        user   = JSON.parse(user);
                        utils.api.setup({token: token});
                        viewer.set(user);
                        //utils.observer.trigger('user:login', user);
                        constants.token = token;
                        window.location.href  = constants.home;
                       
            }else {

             utils.api.get('user/verify_account',{token: token},{context: this,'async':false})
                .done(function(data){

                    if(data.error_code && data.error_code > 0){

                        //check if user is subscribed
                        if (data.error_code == 1 && data.iPurchaseId){
                            window.location.href = '#subscribe/' + data.iPackageId + '/' + data.iPurchaseId;

                        } else {
                            window.location.href = '#logout';
                        }
                    }else{
 
                        localStorage.setItem('user', JSON.stringify(data)); //cached << Nay
                        // do not changed order of these line.
                        utils.api.setup({token: token});
                        viewer.set(data);
                        utils.observer.trigger('user:login', data);
                        constants.token = token;
                        window.location.href  = constants.home;
                    } 
                })
                .fail(function(){
                    window.location.href = '#logout';
                });

            }
            





        }else{
            window.location.href = '#logout';
        }


        });

        utils.observer.on('user:logout', function(){
            Backbone.iUserId  = 0;
            localStorage.setItem('viewer','');
        })
        .on('user:login', function(){
            Backbone.iUserId = viewer.getId();
        })
        .on('user:update', function(){
            // do something after user update his information.

            utils.api.get('user/verify_account', {
                iUserId: viewer.getId()
            })
                .done(function(data){

                    localStorage.setItem('viewer', JSON.stringify(data));

                    viewer.set(data);

                    utils.debug.log('user updated', data);

                    utils.observer.trigger('viewer:update');

                }).fail(function(){
                    utils.debug.log(arguments);
                });
        });




    return viewer;
});

define('core/model/sidebar',[],function(){
	return Backbone.Model.extend({
		idAttribute: 'sName',
		defaults: {},
		getLabel: function(){
			return this.get('sLabel');
		},
		getModuleId: function(){
			return this.get('sLayout');
		},
		toHtml: function(module, config){
			
			if(!config){return ''};
			
			var id  = this.getModuleId();
			var active  = id == module?'active':'';
			
			return '<div class="item '+active+'" data-href="'+config.url +'" data-id="'+id+'"><i class="sidebar-icon '+config.icon+'"></i> <span>'+ _t(this.getLabel()) +'</span></div>';
		}
	});
});

define('core/collection/sidebar',[
	'core/model/sidebar',
], function(SidebarModel){
	
	return Backbone.Collection.extend({
		model: SidebarModel
	});
});


define('text!core/tpl/sidebar.html',[],function () { return '<div class="swiper-wrapper">\n\t<div class="swiper-slide" id="sidebar_list_holder">\n\t\t\n\t</div>\n</div>\n';});


define('text!core/tpl/sidebar-list.html',[],function () { return '<div class="item user-info" data-href="#user/<%= viewer.getId() %>">\n\t<img src="<%= viewer.get(\'profileimage\') %>" class="sidebar-profile-photo" />\n\t<%= utils.str.shorten(viewer.getTitle(),22,false) %>\n</div>\n\n<% menu_items.each(function(item){ %>\n\t<%= item.toHtml(module, configs.get(item.getModuleId())) %>\n<% },this)%>\n\n<div class="item" data-href="#logout" id="link_logout">\n\t<i class="sidebar-icon icon-sidebar-logout"></i>\n\t<span><%= _t(\'sign_out\') %></span>\n</div>';});

define('core/view/sidebar',[
	'core/plugin/viewer',
	'core/collection/sidebar',
	'text!core/tpl/sidebar.html',
	'text!core/tpl/sidebar-list.html'
],function(viewer, SidebarCollection, text, text_list){
	
	
	var Configs  = Backbone.Model.extend({});
	
	return Backbone.View.extend({
		region: {
			outer: '#container',
			wrapper: '#sidebar',
			scroller: '#sidebar-content',
			listViewHolder: '#sidebar_list_holder'
		},
		id: 'sidebar-content',
		className :'sidebar-content swiper-container',
		events: {
			// 'click #link_logout': 'logout',
		//	'click .item': 'navigate',
			'click': 'hide'
		},
		cached : false,
		initialize: function(atts){
			this.menu_items = new SidebarCollection();
			this.viewer =  viewer;
			this.configs = new Configs({
				
			});
			
			var self  = this;

			//this is a patch << Nay 
			$(self.region.wrapper).delegate(".item", "click", function(e){

					self.navigate(e);
			});


			this.menu_items.on('change',function(){
				self.updateView();
			});
			
			this.viewer.on('change',function(){
				self.fetchData();
			});
			
			this.isShown = false;
			
			utils.observer.on('sidebar:toggle',function(){
				self.toggle();
			})
			.on('beeber:pre_show',function(){
				if(self.isShown){
					self.hide();
				}
			})
			.on('router:changed',function(){
				if(self.isShown){
					self.hide();
				}
			});



			

            utils.observer.on('app:run',function(){
            	// Cache Implementation << Nay
				self.cached = localStorage.getItem('sidebar');

            	           if (self.cached) {
				                self.cached = JSON.parse(self.cached);
				                self.menu_items.reset();
								self.menu_items.add(self.cached);
								self.render().inject(); //Patched
								self.menu_items.trigger('change');
								//self.fetchDataComplete(self.cached);
				            }else {

				            		self.fetchData();
				            }

						
					});


		},
		template: _.template(text),
		listTpl: _.template(text_list),
		show:function(){
			utils.observer.trigger('sidebar:pre_show');
			this.$outer.addClass('sidebar-open');
			this.isShown = true;
		},
		hide: function(){
			this.isShown = false;
			this.$outer.removeClass('sidebar-open');
		},
		toggle: function(){
			if(this.isShown){
				this.hide();
			}else{
				this.show();
			}
		},
		fetchData: function(){
			utils.api.get('core/sidebar',{},{context: this})
			.done(this.fetchDataComplete)
			.fail(this.fetchDataFail)
			;
		},
		fetchDataComplete: function(data){
			this.menu_items.reset();
			this.menu_items.add(data);
			this.menu_items.trigger('change');
			//cached << Nay 
			localStorage.setItem('sidebar', JSON.stringify(data));
		},
		fetchDataFail: function(){
			// silent
		},
		navigate: function(evt){
 				//alert("nav item click!");
            // lost connection
            if (Backbone.history.fragment == 'lost-connection') {
                return;
            }

            if(!evt) return false;

			evt.preventDefault();

			var ele = $(evt.currentTarget)
			  , href  = ele.data('href')
			  , id = ele.data('id');
			  
			if(href == '#logout'){
				utils.modal.confirm(_t('Do you want to log out of application?'),function(result){
					if(result == 1){
						window.location.href  = '#logout';
					}
				}, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
				return false;
			}
			  
			if(!href){
				return false;
			}
			
			// remove old active class
			this.$el.find('.active').removeClass('active');
			
			if(id)
			{
				ele.addClass('active');
				localStorage.getItem('sidebar.active')
			}
			
			this.hide();
			window.location.href=href;
		},
		render: function(context){
			
			this.$el.html(this.template());
			
			this.$scroller =  this.$el.find(this.region.scroller);
			
			this.$listView  = this.$el.find(this.region.listViewHolder);
			
			this.$outer  =  $(this.region.outer);
	
			
			return this;
		},
		inject: function(){

			$(this.region.wrapper).html(this.$el);
			
			
			this.swiperObj  = new Swiper('#sidebar-content', {
				scrollContainer: true,
				mode: 'vertical'
			});
			
			this.$scroller.on('click',function(){
				utils.observer.trigger('sidebar:close');
			});
			
			var self = this;
			
			$('#backdrop').on('click',function(){
				self.isShown && self.hide();
			});
			
			return this;
		},
		updateView: function(){

			this.$listView.html(this.listTpl({
				menu_items: this.menu_items,
				module: 'new_feed',
				configs: this.configs,
				viewer: this.viewer
			}));

			this.swiperObj.reInit();
		}
	});
});

define('core/plugin/sidebar',[
	'core/view/sidebar'
],function(SidebarView){
	
	// init sidebar plugin
	var sidebarView = new SidebarView().render().inject();
	 // cached << Nay 
	// utils.observer.on('app:run',function(){
	// 	sidebarView.fetchData();
	// });
	
	
	return sidebarView;
});


define('text!core/tpl/lost-connection.html',[],function () { return '<div class="connection-lost">\n\t<div class="image-connection-lost">\n\t\t<div class="head"><%= _t(\'Connection Lost\') %></div>\n\t\t<div class="refresh">\n\t\t\t<i class="icon icon-tap-retry"></i>\n\t\t\t<span><%= _t(\'Tap to Retry\') %></span>\n\t\t</div>\n\t</div>\t\n</div>\n';});

define('core/view/lost-connection',[
	'text!core/tpl/lost-connection.html'
],function(text){
	
	return Backbone.View.extend({
		region: {
			main: '#main',
			content: '#content'
		},
        events: {
            'click .refresh': 'retry'
        },
		template: _.template(text),
		render: function(context){
			
			this.context  = $.extend({}, context);
			
			this.$el.html(this.template(this.context));
            this.$refresh = $('.refresh', this.$el);
            this.$refreshIcon = $('.refresh i', this.$el);
			
			return this;
		},
		inject: function(){
			
			$(this.region.main).html(this.$el);

            var viewer = localStorage.getItem("viewer");
            var sidebar= localStorage.getItem("sidebar");
            if(viewer.length > 0 && sidebar.length > 0){
                        setTimeout(function(){
                            window.location.href="#newsfeed";// there may have cached feeds << Nay 

                        },1000);
            }else {
                window.location.href="#login";
            }

			return this;
		},
        retry: function() {
            if (this.isProcessing) return ;
            var self = this;

            var data = {
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('core/ping', data, settings).done(this.postDone).always(this.postComplete);
        },
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            var self = this;
            setTimeout(function() {
                self.$refreshIcon.removeClass('processing');
                self.isProcessing =  false;
            }, 1000);
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$refreshIcon.addClass('processing');
            this.isProcessing = true;
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            window.location = '#home';
        },

	});	
});

define('core/controller/index',[
	'core/view/lost-connection'
],function(LostConnectionView) {
	

	function HomeController() {
	
		var token = constants.token;

		if (token) {
			window.location.href = '#newsfeed';
		} else {

			window.location.href =  '#login';
		}
	}
	
	function LostConnectionController()
	{
        utils.observer.trigger('router:changed');

		new LostConnectionView().render().inject();
	}
	
	utils.router.route('lost-connection',LostConnectionController);

	utils.router.route('home', HomeController);

    setTimeout(function() {
    	
    	if(!navigator.connection){  // in brower
    		return false;
    	}
    	
        if(navigator.connection.type == Connection.NONE) {
            if(!Backbone.History.started) {
                Backbone.history.start();
            }
            window.location.href = '#lost-connection';
        }

        document.addEventListener('offline', function() {
            window.location.href = '#lost-connection';
        }, false);

        document.addEventListener('online', function() {
            HomeController();
        }, false);
    }, 2000); //start listening 2000s after starting application
});

define('core/main',[
	// include plugin
	'core/plugin/helper',
	'core/plugin/updater',
	'core/plugin/sidebar',
	'core/plugin/viewer',
	// controller
	'core/controller/index'
],function(){
	
	utils.observer.on('navigate:back',function(){
		window.history.go(-1);
	});
	
	utils.observer.on('navigate:next',function(){
		window.history.go(1);
	});
	
	utils.observer.on('navigate:to',function(ele){
		var href=  ele.data('href');
		window.location.href = href;
	});
	
	return {
		enable: true,
		sidebar: require('core/plugin/sidebar'),
		updater: require('core/plugin/updater'),
		viewer: require('core/plugin/viewer')
	};
});
define('core', ['core/main'], function (main) { return main; });

define('like/main',[
	// plugin
],function(){
	return {
		enable: true
	}
});

define('like', ['like/main'], function (main) { return main; });

define('dislike/main',[
	// plugin
],function(){
	return {
		enable: true
	}
});

define('dislike', ['dislike/main'], function (main) { return main; });

define('comment/main',[],function(){
	return {
		enable: true
	}
});

define('comment', ['comment/main'], function (main) { return main; });

define('share/plugin/activity',[],function(){
    utils.headline.add('share',function(item, context){

        var params = item.getParam();

        // strip tags here.

        var type  =  (params.type || '').replace(/(<a [^>]+>)([^<]+)+(<\/a>)+/ig,'$2') || 'post';

        switch (item.getSharedItemType()) {

            case 'pages':
                return _t('shared a page');
                break;

            case 'quiz':
                return _t('shared a quiz');
                break;

            default:
                return _t('%s ၏ %s ကို မွ်ေ၀ထားသည္', item.getSharedUserLink(), type);
                break;
        }
    });
});

define('share/main',[
	// plugin
	'share/plugin/activity',
],function(){
	return {
		enable: true
	};
});

define('share', ['share/main'], function (main) { return main; });

define('rate/main',[
	// plugin
],function(){
	return {
		enable: true
	};
});

define('rate', ['rate/main'], function (main) { return main; });

define('report/main',[
	// plugin
],function(){
	return {
		enable: true
	}
});

define('report', ['report/main'], function (main) { return main; });

define('user/plugin/connect',[
	'utils'
],function(utils){
	
	var connect_facebook_url =  'http://product-dev.younetco.com/mobile/se460/?m=lite&name=facebook&module=ynmobile';
	var twitter_connect_url = 'http://namnv.local/connect/twitter.php';
	var facebook_token = '';
	
	function get_facebook_profile(){
		$.getJSON('https://graph.facebook.com/me',
		{'access_token': facebook_token},
		function(json){
			alert(JSON.stringify(json));
		});
	}
	
	function connect_facebook()
	{
		var ref = window.open(encodeURI(connect_facebook_url), '_blank','location=no,status=no');
		
		ref.addEventListener('loadstop',function(evt){
			// ref.close();
			var url = evt.url;
			
			var token = /\?access_token=(.+)$/.exec(url);
  			var error = /\?error=(.+)$/.exec(url);
  			
  			if(token)
  			{
  				facebook_token = token.pop();
  				ref.close();
  				
  				get_facebook_profile();
  			}
  			
  			if(error)
  			{
  				ref.close();
  				error = error.pop();
				alert(error);
  			}
		});
	}
	
	function connect_twitter()
	{
		var ref = window.open(encodeURI(connect_twitter_url), '_blank','location=no');
		
		ref.addEventListener('loadstart',function(event){
			ref.close();
		});
		
		ref.addEventListener('loadstop',function(event){
			ref.close();
		});
		
	}
	
	utils.observer.on('connect:facebook',connect_facebook);
	
	utils.observer.on('connect:twitter',connect_twitter);
});

define('user/plugin/activity',[

], function() {

    utils.headline.add(['post', 'feed_comment'], function(item, context) {

        var headline = item.getPosterLink();

        if (item.hasParentUser()) {
            return headline += '<i class="activity-post-via"> &rarr; </i> ' + item.getParentLink();
        }

        return headline;
    });

    utils.headline.add('signup', function(item) {
        return _t('has just signed up. Say hello!');
    });

    utils.headline.add('profile_photo_update', function(item) {
        return _t('has added a new profile photo.');
    });



    utils.headline.add('post_self', function(item) {
        return item.getPosterLink();
    });

    utils.headline.add('status', function(item) {
        return item.getPosterLink();
    });

    utils.headline.add(['user_status', 'custom', 'user_photo'], function(item) {
        return '';
    });
});
define('user/plugin/block-this',[
],function(core, ReportThisView){
	
	utils.observer.on('user:block-this', function($ele, evt){
		var id = $ele.data('id')
          , isBlocked = $ele.data('is-blocked')

          // if is blocked -> need to unblock and vice versa 
          , message = isBlocked ? 'Do you want to un-block this member' : 'Do you want to block this member'
          

        /**
        * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
        */
        var postComplete = function() {
            $ele.isProcessing(false);
        }

        /**
        * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
        */
        var beforeSend = function() {
            $ele.isProcessing(true);
        };

        /**
        * It is called when having a response returned.
        * Note that it will not be called if server returns status !== 200
        */
        var postDone = function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                postSuccess(data);
            }
        }

        /** 
        * It should be called when the response has error_code == 0 
        */
        var postSuccess = function (data) {
        	utils.popup.close();
        	
            utils.observer.trigger('user:block-done', {
                iItemId: id,
                isBlocked: isBlocked ? false : true //new state is in contrast with previous state
            });

            utils.modal.toast(isBlocked ? 'Un-block successfully' : 'Block successfully');

        }

        if(!$ele.isProcessing()) {
            utils.modal.confirm(message, function(result) {
                if(result === 1) {
                    var data = {
                            iUserId: id
                        }
                      , settings = {
                            'beforeSend': beforeSend
                        }
                      , api = isBlocked ? 'user/unblock' : 'user/block' 


                    utils.api.post(api, data, settings).done(postDone).always(postComplete);
                }

            }, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
        } else {
            utils.modal.info('Item is processing');
        }
	});
});



define('text!user/tpl/user-detail-info.html',[],function () { return '<!-- user/tpl/profile/activity.html -->\n<div class="header">\n\t<% if(bIsRoot) {%>\n        <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n            <i class="icon icon-sidebar"></i>\n        </div>\n    <% } else { %>\n        <div class="header-left">\n            <div class="btn-top btn-back" rel="back"></div>\n        </div>\n    <% } %>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n    <div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="menu_toggle">\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div id="content" class="content content-background with-header swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="user-profile-info">\n\t\t\t\t<div class="loading-initiator"></div>\n\t\t\t</div>\n\t\t\t<div class="pvs"></div>\n\t\t\t<div id="activity_minibar_holder" class="user-profile-activity-minibar hide"></div>\n\t\t\t<div class="pvs"></div>\n\t\t\t<div id="activity-list" class="swiper-list vertical hide">\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!user/tpl/user-detail-info-update.html',[],function () { return '<div class="user-profile-info">\n    <div id="basic-info-holder">\n    </div>\n\t<div id="user_detail_menu_holder" class="clearfix menu-justify grid-3 fobos hide">\n\t\t<%if (item.canViewProfileInfo()) {%>\n\t\t<a class="menu-item" href="<%= item.getAboutUrl() %>">\n\t\t\t<div class=""><%= _t(\'ABOUT_1\') %></div>\n\t\t</a>\n\t\t<%}%>\n\t\t<%if (item.canViewPhoto()) {%>\n\t\t<a class="menu-item" href="<%= item.getPhotoUrl() %>">\n\t\t\t<div class="sibling"><%= _t(\'PHOTO_1\') %></div>\n\t\t</a>\n\t\t<%}%>\n\t\t<%if (item.canViewFriend()) {%>\n\t\t<a class="menu-item" href="<%= item.getFriendUrl() %>">\n\t\t\t<div class="sibling"><%= _t(\'FRIEND_1\') %></div>\n\t\t</a>\n\t\t<%}%>\n\t</div>\n</div>\n';});

define('activity/model/privacy',[
], function() { 
    var Privacy = Backbone.Model.extend({
        idAttribute: 'sValue',
        defaults: {
            isChosen: false,
        }
    });

    Privacy.prototype.getClass = function() {
        var prefix = 'icon-privacy-';
        var type = '';
        switch(this.getValue()) {
            case 0: 
                type = 'everyone';
                break;
            case 1: 
                type = 'friends';
                break;
            case 2: 
                type = 'friends-of-friends';
                break;
            case 3: 
                type = 'only-me';
                break;
            case 4: 
                type = 'custom';
                break;
        }

        return prefix + type;
    }

    Privacy.prototype.getValue = function() {
        return parseInt(this.get('sValue'), 10) || 0;
    }

    Privacy.prototype.getPhrase = function() {
        return this.get('sPhrase') || '';
    }

    Privacy.prototype.isChosen = function() {
        return this.get('isChosen') || false;
    }

    return Privacy;
});



define('activity/model/feed',[
    'activity/model/privacy',
    'core'
], function(Privacy, core) {

    var Model = Backbone.Model.extend({
        urlRoot: constants.apiURL + 'feed/get',
        idAttribute: 'iActionId',
        defaults: {
            sModelType: 'feed',
            bCanLike: true,
            bCanShare: true,
            sSubjectType: null,
            sSubjectId: null,
            sSubjectTitle: null
        }
    });


    Model.prototype.getHeadline = function() {
        return utils.headline.translate(this);
    }

    Model.prototype.getPosterLink = function(len) {
        if (!arguments.length) {
            len = 250;
        }
        return '<a class="poster-link" href="' + this.getPosterUrl() + '">' + utils.str.truncate(this.getPosterTitle(), len, false) + '</a>';
    }

    Model.prototype.getObjectLink = function(len) {
        if (!arguments.length) {
            len = 22;
        }
        return '<a class="object-link" href="' + this.getObjectUrl() + '">' + utils.str.truncate(this.getObjectTitle(), len, false) + '</a>';
    }

    Model.prototype.getItemLink = function(len) {
        if (!arguments.length) {
            len = 22;
        }
        return '<a class="item-link" href="' + this.getItemUrl() + '">' + utils.str.truncate(this.getItemTitle(), len, false) + '</a>';
    }

    Model.prototype.getParam = function() {
        return this.get('sParams') || {};
    }

    Model.prototype.getSharedItemType = function() {
        return this.get('sSharedItemType') || {};
    }

    Model.prototype.getItemId = function() {
        return this.get('iItemId');
    }

    Model.prototype.getTimestamp = function() {
        return this.get('iTimestamp');
    }

    Model.prototype.getItemType = function() {
        return this.get('sItemType');
    }

    Model.prototype.getItemTitle = function() {
        return this.get('sItemTitle');
    }

    Model.prototype.getItemUrl = function() {
        return '#' + this.getItemType() + '/' + this.getItemId();
    }


    Model.prototype.getActionType = function() {
        return this.get('sActionType');
    }

    Model.prototype.getActionId = function() {
        return this.get('iActionId');
    }

    Model.prototype.getPosterTitle = function() {
        return this.get('sFullName');
    }

    Model.prototype.getPosterImageSrc = function() {
        return this.get('UserProfileImg_Url');
    }

    Model.prototype.getParentId = function() {
        return this.get('iObjectParentId');
    }

    Model.prototype.getParentType = function() {
        return this.get('sObjectParentType');
    }

    Model.prototype.getParentTitle = function() {
        return this.get('sObjectParentTitle');
    }

    Model.prototype.getParentUrl = function() {
        return '#' + this.getParentType() + '/' + this.getParentId();
    }

    Model.prototype.getParentLink = function(len) {
        if (!arguments.length) {
            len = 22;
        }
        return '<a class="item-link" href="' + this.getParentUrl() + '">' + utils.str.truncate(this.getParentTitle(), len, false) + '</a>';
    }

    Model.prototype.getOwnerId = function() {
        return this.get('iObjectOwnerId');
    }

    Model.prototype.getOwnerType = function() {
        return this.get('sObjectOwnerType');
    }

    Model.prototype.getOwnerTitle = function() {
        return this.get('sObjectOwnerTitle');
    }

    Model.prototype.getOwnerUrl = function() {
        return '#' + this.getOwnerType() + '/' + this.getOwnerId();
    }

    Model.prototype.getOwnerLink = function(len) {
        if (!arguments.length) {
            len = 22;
        }
        return '<a class="item-link" href="' + this.getOwnerUrl() + '">' + utils.str.truncate(this.getOwnerTitle(), len, false) + '</a>';
    }

    Model.prototype.hasStory = function() {
        return this.get('sContent') || this.get('sParams').body;
    }

    Model.prototype.getStory = function() {
        var sStory = this.get('sFullContent') || this.get('sContent') || this.get('sParams').body;
        if (sStory) {
            return sStory.replace(/\[x=(\d+)\]([^\[]+)\[\/x\]/ig, '<a href="#user/$1">$2</a>');
        }
        return sStory;
    }

    Model.prototype.getAttachments = function() {
        return this.get('aAttachments');
    }

    /**
     * get attacment type if exists
     * @return string|false
     */
    Model.prototype.getAttachmentType = function() {
        if (!this.hasAttachment()) {
            return false;
        }
        return this.get('aAttachments')[0].sType;
    }

    /**
     * feed has attachments?
     * @return bool
     */
    Model.prototype.hasAttachment = function() {

        if (!this.get('aAttachments')) {
            return false;
        }

        if (!this.get('aAttachments').length) {
            return false;
        }

        return true;
    }

    Model.prototype.getAttachmentCount = function() {
        if (this.get('aAttachments')) {
            return 0;
        }
        return this.get('aAttachments').length;
    }

    Model.prototype.canDelete = function() {
        return this.get('bCanDelete') || this.isOwner() || (this.get('sItemType') == 'user' && this.get('iItemId') == Backbone.iUserId) || (this.hasParentUser() && this.get('iObjectParentId') == Backbone.iUserId);
    }

    Model.prototype.getTimezoneOffset = function() {
        return parseFloat(this.get('sUserTimezone')) || 0;
    }

    Model.prototype.getPrivacyValue = function() {
        return parseInt(this.get('iPrivacy'), 10) || 0;
    }

    Model.prototype.getPrivacyClass = function() {
        var privacy = new Privacy({
            sValue: this.getPrivacyValue()
        });
        return privacy.getClass();
    }

    Model.prototype.getParentModuleId = function() {
        return this.get('parentModuleId') || '';
    }

    Model.prototype.hasParentUser = function() {

        if (this.getParentModuleId() == 'event' || this.getParentModuleId() == 'fevent') { // currently, data of event feed is wrong parent
            return false;
        }

        return this.getParentTitle() && this.getParentId();
    }

    Model.prototype.getServerHeadLine = function() {

        var sHeadLine = this.get('sHeadLine') || '';

        if (sHeadLine) {
            return sHeadLine.replace(/\[x=(\d+)\]([^\[]+)\[\/x\]/ig, '<a href="#user/$1">$2</a>');
        }

        return sHeadLine;
    }
    
    Model.prototype.getSocialShareUrl = function(){
       if(this.hasAttachment()){
                 
           var item =  this.get('aAttachments')[0];
          
           if(item.hasOwnProperty('sLink_Url'))
             return item.sLink_Url;
           
           if(item.hasOwnProperty('sType') && item.hasOwnProperty('iId'))
                return constants.siteUrl + 'index.php?do=/'+item.sType+'/'+ item.iId;
        }
       
       return this.getItemUrl();
    }

    return Model;
});

define('text!activity/tpl/activity-item.html',[],function () { return '<div class="pvs"></div>\n<div class="item-wrapper">\n\t<a class="item-image" href="<%= item.getPosterUrl() %>">\n\t\t<img src="<%= item.getPosterImageSrc() %>" />\n\t</a>\n\t<div class="item-setting" id="<%= item.getDataId(\'setting\') %>" rel="delegate">\n\t\t<i class="icon icon-setting"></i>\n\t</div>\n\t<div class="item-headline">\n\t\t<% if (item.getActionType()==\'post\' || /_comment$/.test(item.getActionType())) { %>\n\t\t\t<%= item.getHeadline() %>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-everyone gray"></span>\n\t\t<% } else { %>\n\t\t\t<%=item.getPosterLink()%>\n            <span class="feed-icon-privacy-status <%= item.getPrivacyClass() %> gray"></span>\n\t\t\t<!-- <span class="feed-icon-privacy-status icon-privacy-friends gray"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-friends-of-friends active"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-only-me"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-custom gray"></span> -->\n\t\t\t<% if(item.getHeadline()) { %>\n\t\t\t\t<p><%= item.getHeadline() %></p> \n\t\t\t<% } %>\t\n\t\t<% } %>\n\t</div>\n\t<div class="item-subline">\n\t\t<i class="icon icon-time"></i>\n\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t</div>\n\t<% if(item.hasStory()){ %>\n\t<div class="clear item-story">\n\t\t<%= utils.str.shorten(item.getStory(), 200, true) %>\n\t</div>\n\t<% } %>\n\t<% if(item.hasAttachment()){ %>\n\t<div class="clear item-attachment">\n\t\t\n\t</div>\n\t<% } %>\n\t<div class="pvm"></div>\n\t<div class="actions-justify gray">\n\t\t<%if(item.canLike()) {%>\n        <div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n        <%}%>\n\t\t<% if(item.canComment()){%>\n\t\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t<% if(item.canShare()) { %>\n\t\t<div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\n\t\t\t<i class="icon icon-activity-share"></i>\n\t\t</div>\n\t\t<%} %>\n\t</div>\n</div>\n';});


define('text!activity/tpl/activity-setting.html',[],function () { return '<div class="setting-list">\n\t<% if(item.canDelete()){ %>\n\t<a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n\t\t<%= _t(\'delete_this_post\') %>\n\t</a>\n\t<% } %>\n\t<% if (!item.isOwner()) { %>\n\t<a class="setting-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\n\t\t<%= _t(\'report_this_post\') %>\n\t</a>\n\t<% } %>\t\n</div>\n';});

define('activity/view/activity-setting',[
	'text!activity/tpl/activity-setting.html'
],function(text){
	return Backbone.PopupView.extend({
        template: _.template(text)
    });
});

define('activity/view/activity-item',[
	'text!activity/tpl/activity-item.html',
	'activity/view/activity-setting'
],function(text, SettingView){
	
	return Backbone.ItemView.extend({
		className: 'clearfix activity-item',
		template: _.template(text),
		attView: false,
		settingView: SettingView,
		events: {},
		render: function()
		{
			this.$el.html(this.template({item: this.model, hasAttachment: this.model.hasAttachment() }));
			
			this.$el.attr('id', this.model.getDataId());
			
			return this;
		}, 
		inject: function(inject){
			
			inject(this.$el);
			
			var haAttachment  = this.model.hasAttachment();
			
			if(haAttachment)
			{
				var View = utils.attachment.translate(this.model.getAttachmentType());
				
				if(View){

					this.attView = new View({model: this.model});
					this.attView.render().inject(this.$el.find('.item-attachment'));	
				}
			}
			
			return this;			
		},
		doDeleteConfirm: function(evt){
			var self = this;
			utils.popup.close();
			utils.modal.confirm('Delete this post?',function(result){
				if(result == 1){
					self.doDelete();
				}
			}, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
		},
		doDelete: function(){
			this.$el.addClass('hide');
			utils.api.post('feed/delete',{
                iActionId: this.model.getId(),
                sParentId: this.model.getParentModuleId()
            },{context: this})
			.done(function(data){
				if(data.error_code > 0){
					this.doDeleteFail();
				}else{
					this.doDeleteSuccess();
				}
			})
			.fail(function(){
				this.doDeleteFail();
			});
		},
		doDeleteFail: function(){
			this.$el.removeClass('hide');
		},
		doDeleteSuccess: function(){
			this.$el.remove();
		}
	});
});


define('text!activity/tpl/activity-list.html',[],function () { return '<div class="loading-initiator">\n<!-- loading data...  -->\n</div>';});

define('activity/view/activity-list',[
	'activity/model/feed',
	'activity/view/activity-item',
	'text!activity/tpl/activity-list.html',
],function(Model, ItemView, text){
	
	return Backbone.ListView.extend({
		defaults: {
			iPage: 0,
			iAmountOfFeed: 5,
			iMinId: 0,
			iMaxId: 0
		},
		followById: true,
		api: 'feed/fetch',
		phraseNotFound: _t('လႈပ္ရွားမႈမ်ား မရွိပါ။'),
		phraseNotMore: _t('လႈပ္ရွားမႈမ်ား မရွိပါ။'),
		className: 'activity-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('text!activity/tpl/activity-minibar.html',[],function () { return '<div class="clearfix actions-justify gray large">\n    <%if(exclude.indexOf(\'status\') === -1) {%>\n    <a class="action-item" href="#activity/compose-status/<%=sItemType%>/<%=iItemId%>">\n\t\t<i class="icon icon-post-status"></i>\n\t</a>\n\t<%}%>\n\t\n\t<%if(exclude.indexOf(\'photo\') === -1) {%>\n    <a class="action-item" href="#activity/compose-status-photo/<%=sItemType%>/<%=iItemId%>">\n\t\t<i class="icon icon-post-photo"></i>\n\t</a>\n\t<%}%>\n\t\n\t<%if(exclude.indexOf(\'checkin\') === -1) {%>\n    <a class="action-item" href="#activity/compose-status-checkin/<%=sItemType%>/<%=iItemId%>">\n\t\t<i class="icon icon-post-checkin"></i>\n\t</a>\n\t<%}%>\n</div>';});

define('activity/view/activity-minibar',[
	'text!activity/tpl/activity-minibar.html',
    'core'
],function(text){
    var core = require('core');

	return Backbone.View.extend({
		region: {
			main: '#activity_minibar_holder',
			content: '#content'
		},
		className: 'activity-minibar',
		template: _.template(text),
        /**
         * @param {object} context { 
         *      sItemType 
         *      iItemId
         *  }
         */
		render: function(context){
            this.context = $.extend({
                sItemType: 'user',
                iItemId: core.viewer.getId(),
                exclude : [] // what item in bar you do NOT want to show
            }, context);
			
			this.$el.html(this.template(this.context));
			
			return this;
		},
		inject: function(){
			
			var main = $(this.region.main);
			
			main.html(this.el);
		}
	});
});


define('text!user/tpl/user-basic-info.html',[],function () { return '<div class="user-profile-cover-image" style="background-image:url(<%= item.getCoverPhotoUrl() %>);">\n\t<div class="user-profile-cover-mask"></div>\n\t<div class="user-profile-cover-content">\n\t\t<div class="clearfix jumptop"></div>\n\t\t<div class="avatar">\n\t\t    <div class="img" style="background-image:url(<%= item.getBigImageSrc() %>);"></div>\n\t\t</div>\n\t\t<div class="name">\n\t\t    <span class="fullname">\n\t\t        <%= item.getTitle() %> \n\t\t        <i class="<%= item.getGender().toLowerCase() %>"></i>\n\t\t    </span> <br/>\n\t\t    <span class="">\n\t\t        <%= item.getBirthDate() %>\n\t\t    </span>\n\t\t</div>\n\t\t<div class="birthday"></div>\n\n\t\t<div id="friend-action-holder"> </div>\t\n\t</div>\t\n</div>\n';});


define('text!user/tpl/friend-action-on-profile.html',[],function () { return '<div id="friend-action" class="<%=friendClass %>" clickable="true" data-click="friend:friend-action" data-friend="<%= item.getDataFriend() %>" ></div>\n';});

define('user/view/friend-action-on-profile',[
    'text!user/tpl/friend-action-on-profile.html'
], function() { 
    var tpl = require('text!user/tpl/friend-action-on-profile.html')

    var FriendAction = Backbone.View.extend({

        initialize: function() {
            utils.observer.on('friend:action-done', this.handleFriendActionDone, this);
        },
        template: _.template(tpl),
        render: function(context) {
			this.context = $.extend({},context);

            this.$el.html(this.template({
                item: this.context.item,
                friendClass: this.getFriendClass(this.context.item)
            }));

            return this;
        },

        getFriendClass: function(item) {
            var isFriend = item.isFriend()
              , isSentRequest = item.isSentRequest()
              , isSentRequestBy = item.isSentRequestBy()
              , isBlocked      = item.get('isBlocked') || false
              ;
			
			if(isBlocked){
				return 'add-friend';
			}else
            if(isFriend) {
                return 'remove-friend';//remove action
            } else {
                if(isSentRequest) {
                    //cancel friend request action
                    return 'cancel-friend-request';
                } else {

                    if(isSentRequestBy) {
                        return 'confirm-friend-request';

                    } else {
                        // add-friend
                        return 'add-friend';
                    }
                }
            }
        },

        handleFriendActionDone: function(result) {
            if(result.iItemId == this.context.item.getId()) {
                this.context.item.set('isFriend', result.isFriend); 
                this.context.item.set('isSentRequest', result.isSentRequest); 
                this.context.item.set('isSentRequestBy', result.isSentRequestBy); 
                this.render(this.context); // bad feeling about this ~.~
            }

        }
    });

    return FriendAction;
});


define('user/view/user-basic-info',[
    'text!user/tpl/user-basic-info.html',
    'user/view/friend-action-on-profile',
], function(text, FriendActionView ) { 
	
	return Backbone.View.extend({
        template: _.template(text),
        region:{
            wrapper: '#basic-info-holder',
        },
        initialize: function(){
        	var self = this;
        	this.model.on('change',function(){
        		self.updateView();
        	});
        },
        render: function() {
        	
        	this.$el.html(this.template({
                item: this.model
            }));

            this.$friendAction = $('#friend-action-holder', this.$el);

            if(!this.model.isOwner()) {//owner should not have friend action on his own profile
                this.$friendAction.html(new FriendActionView().render({
                    item: this.model
                }).el);
            }
            return this;
        },
        inject: function() {
            $(this.region.wrapper) .html(this.$el);
            return this;
        },
        updateView: function(){
        	if(!this.model.isOwner()) {//owner should not have friend action on his own profile
                this.$friendAction.html(new FriendActionView().render({
                    item: this.model
                }).el);
            }
        }

    });
});



define('text!user/tpl/private-page.html',[],function () { return '<div class="private-page-message">\n    <%= _t(\'you_do_not_have_permission_to_view_this_private_page\') %>\n</div>\n';});

define('user/view/private-page',[
    'text!user/tpl/private-page.html'
], function(text) { 
    return Backbone.View.extend({
        template: _.template(text),
        region: {
            main: '#user-profile-info'
        },
        render: function() {
        	this.$holder =  $(this.region.holder);
            return this;
        },
        inject: function() {
			
			this.$holder.html(this.$el);
			
			return this;
        }
    });
});



define('text!user/tpl/user-topmenu.html',[],function () { return '<div class="setting-list">\n\t<%if (item.isOwner()) {%>\n\t\t<a class="menu-item" href="#user-edit/<%=item.getId()%>"  ><%=_t(\'edit_info\')%></a>\n\t\t<a class="menu-item" id="<%=item.getDataId(\'editavatar\')%>" rel="delegate"><%=_t(\'edit_avatar\')%></a>\n\t\t<a class="menu-item" id="<%=item.getDataId(\'editcover\')%>" rel="delegate"><%=_t(\'edit_cover\')%></a>\n\t<%} else {%>\n\t\t<%if (item.canSendMessage()) {%>\n\t\t<a class="menu-item" href="#messages/compose/<%=item.getId()%>"><%= _t(\'send_a_message\') %></a>\n\t\t<%}%>\n\t\t<a class="menu-item" id="<%=item.getDataId(\'report\')%>" rel="delegate"><%=_t(\'report\')%></a>\n\t\t<a class="menu-item" id="<%=item.getDataId(\'block\')%>" rel="delegate">\n\t\t    <%=_t(item.isBlocked() ? \'မဘေလာ့ခ္ဘူး\' : \'ဘေလာ့ခ္မယ္\')%>\n\t\t</a>\n\t<%}%>\n</div>\n';});

define('user/view/user-topmenu',[
	'text!user/tpl/user-topmenu.html'
], function(text){
	return Backbone.TopMenuView.extend({
		template: _.template(text),
	});
});

define('user/view/user-detail-info',[
    'text!user/tpl/user-detail-info.html',
    'text!user/tpl/user-detail-info-update.html',
    'activity/view/activity-list',
    'activity/view/activity-minibar',
    'user/view/user-basic-info',
    'user/view/private-page',
    'user/view/user-topmenu',
], function(text, textUpdate) {

    var ActivityListView = require('activity/view/activity-list'),
        MinibarView = require('activity/view/activity-minibar'),
        BasicInfo = require('user/view/user-basic-info'),
        PrivatePage = require('user/view/private-page');

    return Backbone.ItemView.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            infoHolder: '#user-profile-info',
            activityHolder: '#activity-list'
        },
        initialize: function() {
            this.model.on('change', this.updateMenu, this);

            // extend super method.
            Backbone.ItemView.prototype.initialize.apply(this, arguments);

        },
        events: {
            'block': 'onBlockClick',
            'click #menu_toggle': 'toggleMenu',
            'editavatar': 'onEditAvatar',
            'editcover': 'onEditCover'
        },
        moduleId: 'user/view/user-detail-info',
        className: 'user-profile-page',
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        topMenuView: require('user/view/user-topmenu'),
        render: function(context) {

            this.$el.html(this.template(context));

            this.$scroller = this.$el.find(this.region.scroller);

            this.$infoHolder = this.$el.find(this.region.infoHolder);

            this.$activityHolder = this.$el.find(this.region.activityHolder);

            this.$menuBtn = this.$el.find('#menu_toggle');

            this.$el.attr({
                id: this.model.getDataId()
            });

            return this;

        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();


            return this;
        },

        toggleMenu: function(evt) {
            utils.topMenu.toggle(this, this.model);
        },
        updateMenu: function() {
            // this.$menu.html(this.templateTopMenu({model: this.model}));
        },
        onBlockClick: function(evt) {
            var self = this;
            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var isBlocked = this.model.isBlocked();
            var message = isBlocked ? _t('Do you want to un-block this member') : _t('Do you want to block this member');
            var api = isBlocked ? 'user/unblock' : 'user/block';
            var sendData = {
                iUserId: this.model.getId()
            };

            utils.modal.confirm(message, function(result) {
                if (result === 1) {
                    $target.addClass('processing');

                    utils.api.post(api, sendData)
                        .done(function(data) {
                            utils.popup.close();

                            if (data.error_code && data.error_code > 0) {
                                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                            }

                            self.blockSuccess(data);
                        })
                        .always(function() {
                            $target.removeClass('processing');
                        });
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        },
        blockSuccess: function(data) {
            var isBlocked = !this.model.isBlocked();
            this.model.set({
                isBlocked: isBlocked,
                isFriend: false,
                isSentRequest: false,
                isSentRequestBy: false
            });

            this.toggleMenu();
            utils.modal.toast(isBlocked ? _t('Block successfully') : _t('Un-block successfully'));
        },
        fetchData: function() {

            var sendData = {
                iUserId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('profile/detail', sendData, settings)
                .done(this.fetchDataDone)
                .fail(this.fetchDataFail);
        },
        fetchDataDone: function(data) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                var userData = data.BasicInfo;
                userData.aContacts = data.Details;
                userData.sAboutMe = data.About_Me ? data.About_Me.About_Me : '';
                this.model.set(userData);
                this.refreshView();
            }
        },
        fetchDataFail: function() {
            utils.debug.error(arguments);
        },
        refreshView: function() {

            if (!this.model.canView()) {
                this.$infoHolder.html(utils.helper.permission_deny());
                return;
            }

            this.$menuBtn.removeClass('hide');

            this.$infoHolder.html(this.templateUpdate({
                item: this.model
            }));

            this.$activity_minibar_holder = this.$el.find('#activity_minibar_holder');
            this.$user_detail_menu_holder = this.$el.find('#user_detail_menu_holder');

            if (this.model.canViewWall() && this.model.canShareOnWall()) {
                this.$activity_minibar_holder.removeClass('hide');

                new MinibarView().render({
                    sItemType: this.model.getType(),
                    iItemId: this.model.getId(),
                    exclude: this.model.isOwner() ? [] : ['checkin'],
                }).inject();
            }

            if (this.model.canViewProfileInfo() || this.model.canViewPhoto() || this.model.canViewFriend()) {
                this.$user_detail_menu_holder.removeClass('hide');
            }

            new BasicInfo({
                model: this.model
            }).render().inject();

            if (this.model.canViewWall()) {
                this.$activityHolder.removeClass('hide');

                this.listView = new ActivityListView({}, this.$activityHolder, this.$scroller, {
                    loadnew: false,
                    loadmore: true
                });

                this.listView.render({
                    sItemType: this.model.getType(),
                    iItemId: this.model.getId()
                }).inject();
            }
        },
        onEditAvatar: function() {

            var href = '#user-edit-photo/';

            this.browsePhoto(href);
        },
        onEditCover: function() {

            var href = '#user-edit-cover/';

            this.browsePhoto(href);
        },
        browsePhoto: function(href) {

            utils.popup.isShown() && utils.popup.close();

            var self = this;

            var onSuccess = function(imageURI) {
                href += self.model.getId() + '/' + btoa(imageURI);
                window.location.href = href;
            };

            var onFail = function(msg) {
                utils.debug.log(msg);
            };

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });
        }
    });
});

define('text!user/tpl/user-detail-photo.html',[],function () { return '<!-- friend/tpl/index.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back"></div>\n\t</div>\n\t<div class="header-center">\n        <div class="title"><%=_t(\'photos\')%></div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list clearfix" id="photo_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item current" href="#user-photo/<%= item.getId() %>">\n        \t<div class=""><%= _t(\'photos\') %></div>\n        </a>\n        <a class="menu-item" href="#user-album/<%= item.getId() %>">\n        \t<div class="sibling"><%= _t(\'albums\') %></div>\n        </a>\n    </div>\n</div>';});

define('photo/model/photo',[],function() {
    var Model = Backbone.Model.extend({
        idAttribute: 'iPhotoId',
        defaults: {
            sModelType: 'photo',
            bCanLike: true,
            bCanShare: true,
            bCanComment: true
        }
    });

    Model.prototype.getType = function() {
        return this.get('sType') || this.get('sModelType');
    }

    Model.prototype.getId = function() {
        return this.id || this.get('iId');
    }

    Model.prototype.getPosterTitle = function() {
        return this.get('sUserName') || '';
    }

    Model.prototype.getPosterImageSrc = function() {
        return this.get('sUserImageUrl') || '';
    }
    Model.prototype.getImgSrc = function() {
        return this.get('sPhotoUrl') || this.get('sPhoto_Url');
    }

    Model.prototype.getModule = function() {
        return this.get('sModule') || null;
    }

    Model.prototype.getItemId = function() {
        return parseInt(this.get('iItemId')) || 0;
    }

    Model.prototype.getUrl = function() {

        var parentType = this.getParentType() || this.getType();
        var url = '#photo-detail/' + parentType + '/' + this.getParentId() + '/' + this.getId();

        if (this.getItemId() && this.getModule() && this.getModule() != this.getType()) {
            return url + '/' + this.getModule() + '/' + this.getItemId();
        }

        return url;
    }

    Model.prototype.getParentId = function() {
        return this.get('iObjectParentId') || this.get('iParentId') || this.get('iAlbumId') || this.get('iEventId') || 0;
    }

    Model.prototype.getUrlWithAlbum = function() {
        return '#photo-detail/' + this.getType() + '/' + this.getAlbumId() + '/' + this.getId();
    }

    Model.prototype.getAlbumId = function() {
        return this.get('iAlbumId') || 0;
    }

    Model.prototype.getResizedImageUrl = function() {
        return this.get('resizedImageUrl');
    }

    Model.prototype.isShowInfo = function() {
        return (this.get('isShowInfo') !== void 0) ? this.get('isShowInfo') : true;
    }

    Model.prototype.getAlbumTitle = function() {
        return this.get('sAlbumName') || this.get('sAlbumTitle');
    }

    Model.prototype.getAlbumType = function() {
        return this.get('sAlbumType') || this.getParentType();
    }

    Model.prototype.getAlbumUrl = function() {
        return '#photo-album-detail/' + this.getAlbumType() + '/' + this.getAlbumId();
    }

    Model.prototype.hasAlbum = function() {
        return (this.getAlbumId() > 0) ? true : false;
    }

    return Model;
});

define('text!photo/tpl/photo-item.html',[],function () { return '<!-- friend/tpl/friend-item -->\n<div class="item-wrapper">\n\t<a href="<%= item.getUrl() %>" class="item-image" style="background-image: url(<%= item.getImgSrc() %>)">\n\t\t<div class="item-footer">\n\t\t\t<div class="item-stats <%= item.isLiked() ? \'liked\': \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t\t<span><%= item.getLikeCount() %></span>\n\t\t\t\t<i class="icon icon-activity-like-white"></i>\n\t\t\t</div>\n\t\t\t<div class="item-stats next" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t\t<span><%= item.getCommentCount() %></span>\n\t\t\t\t<i class="icon icon-activity-comment-white"></i>\n\t\t\t</div>\n\t\t</div>\n\t</a>\n\t<div class="photo-author">\n\t    <a href="<%= item.getPosterUrl() %>">\n\t    \t<img src="<%= item.getPosterImageSrc() %>" alt="author icon" width="20" height="20"/> \n\t    \t<%= item.getPosterTitle() %>\n\t    </a>\n\t</div>\n</div>\n';});


define('text!photo/tpl/photo-item-in-profile.html',[],function () { return '<div class="item-wrapper">\n\t<a href="<%= item.getUrl() %>" class="item-image" style="background-image: url(<%= item.getImgSrc() %>)">\n\t</a>\n</div>\n';});

define('photo/ipad/view/photo-item',[
	'text!photo/tpl/photo-item-in-profile.html',
], function() {
    var textInProfile = require('text!photo/tpl/photo-item-in-profile.html')

    return {
		templateInProfile: _.template(textInProfile),
        render: function() {
			this.$el.attr('id', this.model.getDataId());

            if(this.model.getType() == 'profile_photo' || this.model.getType() == 'event_photo') {
                this.$el.html(this.templateInProfile({item: this.model}));
            } else {
                this.$el.html(this.template({item: this.model}));
            }

			return this;
        }

    };
});

define('photo/view/photo-item',[
	'text!photo/tpl/photo-item.html',
    'photo/ipad/view/photo-item'
],function(text){
	return Backbone.ItemView.extend({
		events: {},
		className: 'photo-item',
        moduleId: 'photo/view/photo-item',
		template: _.template(text),
		render: function(){
			this.$el.attr('id',this.model.getDataId());
            this.$el.html(this.template({item: this.model}));
			return this;
		},
		inject: function(inject){
			inject(this.el);
		},
	});
});


define('text!photo/tpl/photo-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading -->\n</div>';});

define('photo/view/photo-list',[
    'photo/model/photo',
    'photo/view/photo-item',
    'text!photo/tpl/photo-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            // sItemType: null,
            //iUserId: null,
            iInDetails: 1,
            sOrder: "latest",
            iAmountOfPhoto: 12 // 4 rows, 3 photos per rows
        },
        followById: false,
        api: 'photo/filter',
        phraseNotFound: 'ဓာတ္ပံု မရွိပါ။',
        phraseNotMore: 'ဓာတ္ပံု မရွိပါ။',
        className: 'clearfix photo-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        parseData: function(data, ItemModel) {
            var self = this;
            return data.map(function(item) {
                if (self.settings.iAlbumId != void 0) {
                    item.iAlbumId = parseInt(self.settings.iAlbumId, 10);
                }
                if (self.settings.iParentId != void 0) {
                    item.iParentId = parseInt(self.settings.iParentId, 10);
                }
                if (self.settings.sParentType != void 0) {
                    item.sParentType = self.settings.sParentType;
                }
                return new ItemModel(item);
            });
        }
    });
});
define('user/view/user-detail-photo',[
	'text!user/tpl/user-detail-photo.html',
	'photo/view/photo-list'
], function(text, ListView){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#main',
			scroller: '#content',
			photoListHolder: '#photo_list_view_holder'
		},
		template: _.template(text),
		render: function(query){
			
			this.$el.html(this.template({item: this.model}));
			
			this.$scroller = this.$el.find(this.region.scroller);
			
			this.$photoListHolder = this.$el.find(this.region.photoListHolder);
			
			return this;
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
				
			this.$scroller.ensureVerticalScroll();
						
			this.listView  = new ListView({},
				this.$photoListHolder,
				this.$scroller, 
				{
                    iParentId: this.model.getId(),
                    sParentType: 'profile_photo'
                });
                
			this.listView
			.render({
                bIsUserProfile: true,
                iUserId: this.model.getId()
            })
			.inject();
			
			return this;
		}
	});
});


define('text!user/tpl/user-detail-album.html',[],function () { return '<!-- friend/tpl/index.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back"></div>\n\t</div>\n\t<div class="header-center">\n        <div class="title"><%=_t(\'albums\')%></div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list clearfix" id="photo_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item" href="#user-photo/<%= item.getId() %>">\n        \t<div class=""><%= _t(\'photos\') %></div>\n        </a>\n        <a class="menu-item current " href="#user-album/<%= item.getId() %>">\n        \t<div class="sibling"><%= _t(\'albums\') %></div>\n        </a>\n    </div>\n</div>\n';});

define('photo/model/album',[
    'photo/model/photo'
],function(){
    var PhotoModel = require('photo/model/photo')

	var Model = Backbone.Model.extend({
		idAttribute: 'iAlbumId',
		defaults: {
			sModelType: 'photo_album',
			bCanLike: true,
			bCanComment: true
		}
	});
	
	// override model
	Model.prototype.getTitle = function(){
		return this.get('sName') || this.get('sTitle');
	}
	
	// override method from model
	Model.prototype.getPosterTitle = function(){
		return this.get('sUserName');
	}
	
	// override
	Model.prototype.getPosterImageSrc = function(){
		return this.get('sUserImageUrl') || '';
	}
	
	// override
	Model.prototype.getImageSrc = function(){
		return this.get('sAlbumImageURL');
	}
	
	Model.prototype.getPhotoCount = function(){
		return this.get('iTotalPhoto') || 0;
	}
	
	Model.prototype.getPhotoCountText = function(){
		var number = this.getPhotoCount();
        var text = number + (number == 1 ? ' photo' : ' photos');
		return text;
	}

    Model.prototype.getSamplePhotos = function() {
        var aSamplePhotos = this.get('aSamplePhotos')
          , results = []
        
        _.each(aSamplePhotos, function(photo) {
            photo.sModelType = 'photo';
            photo.resizedImageUrl =  constants.siteUrl + '/wideimage/resize.php?src=' + _.escape(photo.sPhotoUrl) + '&w=320&h=177';
            photo.iAlbumId = this.getId();

            var photoModel = new PhotoModel(photo);

            results.push(photoModel);
        }, this);
		
		var limit = utils.setting.get('mfox_limit_photo_to_scroll');
		if (limit > 0) {
			results = results.slice(0, limit);
		}

        return results;
    }

    Model.prototype.canShare = function () {
        this.get('bCanShare') ? true : false;
    }
    
    Model.prototype.getUrl = function () {
        return '#photo-album-detail/' + this.getType() + '/' + this.getId();
    }

    Model.prototype.isProfilePictureAlbum = function () {
        return this.get('bIsProfilePictureAlbum');
    }
	
	return Model;
});


define('text!photo/tpl/album-item.html',[],function () { return '<!-- photo/tpl/album-item -->\n<div class="pvs"></div>\n<div class="item-wrapper">\n\t<div class="swiper-container">\n\t\t<div class="swiper-wrapper">\n\t\t\t<% _.each(item.getSamplePhotos(), function(sample){ %>\n\t\t\t<div class="swiper-slide item-image" style="background-image: url(<%= sample.getResizedImageUrl() %>)" rel="link" data-url="<%= sample.getUrl() %>"></div>\n\t\t\t<%}); %>\n\t\t</div>\n\t</div>\n\t<div class="photo-author">\n\t\t<a href="<%= item.getPosterUrl() %>"> <img src="<%= item.getPosterImageSrc() %>" alt="author icon" width="20" height="20"/> <%= item.getPosterTitle() %> </a>\n\t</div>\n\t<div class="item-footer">\n\t\t<div class="item-stats next" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment-white"></i>\n\t\t</div>\n\t\t<div class="item-stats <%=item.isLiked() ? \'liked\' : \'\'%>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like-white"></i>\n\t\t</div>\n        <div class="item-title" rel="link" data-url="<%= item.getUrl() %>">\n\t\t\t<%= item.getTitle() %>\n\t\t</div>\n\t</div>\n</div>\n';});

define('photo/view/album-item',[
	'text!photo/tpl/album-item.html',
],function(text){
	
	return Backbone.ItemView.extend({
		className: 'photo-album-item',
        moduleId: 'photo/view/album-item',
		template: _.template(text),
		render: function(){
			
			this.$el.attr("id",this.model.getDataId());
            this.$el.html(this.template({item: this.model}));
			return this;
		},
		events: {},
		inject: function(inject){
			
			inject(this.$el);
			
			var width = this.$el.find('.item-wrapper').first().width();
			
			this.$el.find('.item-image').css({width: width});
			
			var container = this.$el.find('.swiper-container');
			
			container.swiper({
				scrollContainer: false,
				mode: 'horizontal',
				slidesPerView: 'auto',
				slidesPerViewFit: true,
				visibilityFullFit: true,
			});
			
			// container.trigger('refresh');
		}
	});
});


define('text!photo/tpl/album-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading ...  -->\n</div>';});


define('text!photo/tpl/album-my-item.html',[],function () { return '<!-- photo/tpl/my-album-item.html -->\n<div class="pvm"></div>\n<div class="item-image">\n    <a href="<%= item.getUrl() %>">\n        <div class="item-image" style="background-image: url(<%= item.getImageSrc() %>)"></div>\n    </a>\n</div>\n<div class="item-setting" id="<%= item.getDataId(\'setting\') %>" rel="delegate">\n    <i class="icon icon-setting"></i>\n</div>\n<div class="item-headline">\n\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n</div>\n<!-- <div class="item-subline">\n\tby <a class="text-link" href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n</div> -->\n<div class="item-subline">\n\t<%= item.getPhotoCountText() %>\n</div>\n<div class="pvm"></div>\n';});


define('text!photo/tpl/album-item-setting.html',[],function () { return '<div class="setting-list">\n    <%if (item.canEdit()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'edit\') %>">\n    \t<%= _t(\'edit\') %>\n    </a>\n    <%}%>\n    <%if (item.canDelete()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n    \t<%= _t(\'delete\') %>\n    </a>\n    <%}%>\n</div>\n\n\n';});

define('photo/view/album-item-setting',[
    'text!photo/tpl/album-item-setting.html'
], function() { 
    var text = require('text!photo/tpl/album-item-setting.html')

    var SettingView = Backbone.View.extend({
        template: _.template(text),
        render: function() {
            this.$el.html(this.template({item: this.model}));
            return this;
        },

        inject: function() {
            utils.popup.open(this.$el);
            return this;
        }
    });

    return SettingView;
});


define('photo/view/album-my-item',[
	'text!photo/tpl/album-my-item.html',
    'photo/view/album-item-setting'
],function(text, SettingView){
	
	return Backbone.ItemView.extend({
		className: 'photo-my-album-item',
		template: _.template(text),
		render: function(){
			this.$el.attr("id", this.model.getDataId());
			this.$el.attr("data-albumid",this.model.getId());
			this.$el.html(this.template({item: this.model}));
			return this;
		},
		inject: function(inject){
			inject(this.$el);
			
			var width = this.$el.find('.item-wrapper').first().width();
			
			this.$el.find('.item-image').css({width: width});
			
			var container = this.$el.find('.swiper-container');
			
			container.swiper({
				scrollContainer: true,
				mode: 'horizontal',
				slidesPerView: 'auto'
			});
		},
		events: {
            'edit': 'editAlbum'
		},
        settingView: SettingView,
		editAlbum: function(event){
	        window.location.href = "#photos/edit-album/"+this.model.getId();
		},
		doDeleteConfirm: function (evt) {
			var self = this;
        	var $target = $(evt.currentTarget);
        	
        	if ($target.hasClass('processing')) {
        		return;
        	}
        	
        	utils.modal.confirm(_t('Do you want to delete this album?'), function(result) {
                if(result === 1) {
                    $target.addClass('processing');
                    
                    utils.api.post('photo/albumdelete', {iAlbumId: self.model.getId()})
                    .done(function (data) {
                    	if (data.error_code && data.error_code > 0) {
			        		return utils.modal.alert(data.error_message || _t('Can not load data from server'));
			        	}
			        	
			        	self.deleteSuccess(data);
                    })
                    .always(function () {
                    	$target.removeClass('processing');
                    });
                }
            }, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
		},
		deleteSuccess: function (data) {
        	utils.modal.toast(_t("The album has been deleted successfully."));
        	this.$el.remove();
        	utils.popup.close();
        }
	});
});

define('photo/ipad/view/album-list',[
    'photo/view/album-item',
    'photo/view/album-my-item',
], function() {
    var AlbumItem = require('photo/view/album-item')
      , AlbumMyItem = require('photo/view/album-my-item')


    return {
        init: function(params) {

            if(document.URL.match('user-album')) {
                this.itemView = AlbumMyItem;
            } else { 
                this.itemView = AlbumItem;
            }
        }

    };
});

define('photo/view/album-list',[
	'photo/model/album',
	'photo/view/album-item',
	'text!photo/tpl/album-list.html',
    'photo/ipad/view/album-list'
],function(Model, ItemView, text){


	return Backbone.ListView.extend({
		defaults: {
			sView: '',
			iPage: 1,
			sSearch: '',
			sOrder: 'latest',
			// iUserId: null,
			iCategoryId: 0,
			iAmountOfAlbum: 8 // 2 x 4 item 
		},
        moduleId: 'photo/view/album-list',
		followById: false,
		api: 'photo/filter_album',
		phraseNotFound: 'အယ္လဘမ္ မေတြ.ပါ။',
		phraseNotMore: 'ေနာက္ထပ္ အယ္လဘမ္ မေတြ.ပါ။',
		className: 'photo-album-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});

define('user/view/user-detail-album',[
	'text!user/tpl/user-detail-album.html',
	'photo/view/album-list',
], function(text, ListView){
	
	return Backbone.PolyplatformView.extend({
		template: _.template(text),
		region: {
			wrapper: '#main',
			scroller: '#content',
			albumListHolder: '#photo_list_view_holder'
		},
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			this.$scroller = this.$el.find(this.region.scroller);
			
			this.$albumListHolder =  this.$el.find(this.region.albumListHolder);
			
			return this;
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
				
			this.$scroller.ensureVerticalScroll();
						
			this.listView  = new ListView({},
				this.$albumListHolder,
				this.$scroller, 
				{});
				
			this.listView.render({
                bIsUserProfile: true,
                iUserId: this.model.getId()
            }).inject();
			
			return this;
		}
	});
});

define('user/controller/user-detail',[
	'user/model/user',
	'user/view/user-detail-info',
	'user/view/user-detail-photo',
	'user/view/user-detail-album'
],function(UserModel, InfoView, PhotoView, AlbumView){
	
	function InfoController(id)
	{
		var bIsRoot = (utils.history._data.length == 0 && id == Backbone.iUserId);
		utils.history.push(bIsRoot);
		
		utils.observer.trigger('router:changed');
		
		new InfoView({
			model: new UserModel({iUserId: id})
		}).render({
			bIsRoot: bIsRoot
		}).inject();
	}
	
	function PhotoController(id){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new PhotoView({
			model: new UserModel({iUserId: id})
		})
		.render().inject();
	}
	
	function AlbumController(id){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new AlbumView({
			model: new UserModel({iUserId: id})
		})
		.render().inject();
	}
	
	utils.router.route('user-photo/:id', PhotoController);
	
	utils.router.route('user-album/:id', AlbumController);
	
	utils.router.route('user/:id(/:action)', InfoController);
	
});

define('user/plugin/signup-data',[
	'core'
],function(){
	
	var DefaultData = {
		sUserName: '',
		sFullName: '',
		sEmail: '',
		sPassword: '',
		sTimeZone: 0,
		sFirstName: '',
		sLastName: '',
		iGender: '',
		sBirthday: '',
		sFacebook: '',
		sTwitter: '',
		sAim: '',
		sAbout: '',
		sLoginBy: null,
        sLoginUID: null,

        //to post avatar
        sCoordinates: '',
        iWidth: '',
        iHeight: '',
        sImgSrc: '',
        bIsAgreeTerms: false
	};
	
	var SignUpData = function(){
		this.all = DefaultData;
	}
	
	SignUpData.prototype.reset = function(){
		this.all = DefaultData;
		return this;
	}
	
	SignUpData.prototype.update  = function(data){
		this.all = $.extend({},this.all, data);
		return this;
	}
	
	return new SignUpData;
});

define('user/plugin/social-connect',[
    'user/plugin/signup-data',
    'user/model/user',
    'core'
], function() {

    var signupData = require('user/plugin/signup-data'),
        User = require('user/model/user'),
        core = require('core')

        // Constructer defines properties and inits object
        var SocialConnect = function(type, connect_url) {

            this._type = type;
            this._connect_url = encodeURI(connect_url);
            this._id = null;
            this._token = null;
            this._token_secret = null;


    }

    SocialConnect.prototype = {

        connect: function() {

            var token = '';
            var token_secret = '';
            var self = this;

            window.localStorage.setItem("sLoginBy", self._type);

            // Open social connect in InappBrowser
            var ref = window.open(encodeURI(self._connect_url), '_blank', 'location=no, status=no');

            // Add handler for loadstop event
            ref.addEventListener('loadstop', function(evt) {

                var url = decodeURI(evt.url);
                utils.debug.log('Callback URL: ' + url);

                switch (self._type) {

                    case 'facebook':
                        token = /[\?\&]access_token=([^&]+)/.exec(url);
                        // var user_id = /[\?\&]user_id=([^&]+)/.exec(url);
                        var error = /\?error=(.+)$/.exec(url);
                        utils.debug.log(token);
                        if (token) {
                            ref.close();
                            self._token = token[1];

                            self.getFacebookProfile();
                        } else {
                            // token = /[\?\&]confirm_token=([^&]+)/.exec(url);
                            // // var user_id = /[\?\&]user_id=([^&]+)/.exec(url);
                            // var error = /\?error=(.+)$/.exec(url);
                            // utils.debug.log(token);
                            // if (token){
                            //     ref.close();
                            //     self._token = token[1];
                            //     
                            //     self.getFacebookProfile();
                            // }

                        }

                        // Connect fail
                        if (error) {
                            // console.log(self._type + ' connect error: ' + JSON.stringify(error));
                            navigator.notification.alert(self._type + ' connect error: ' + JSON.stringify(error));
                        }
                        break;

                    case 'twitter':
                        token = /[\?\&]access_token=([^&]+)/.exec(url);
                        token_secret = /[\?\&]secret_token=([^&]+)/.exec(url);
                        json_data = /[\?\&]json_data=([^&]+)/.exec(url);
                        error = /\?error=(.+)$/.exec(url);

                        if (token && token_secret) {
                            ref.close();
                            self._token = token[1];
                            self._token_secret = token_secret[1];

                            var data = JSON.parse(decodeURIComponent(json_data[1]));
                            if (data.id) {
                                self._id = data.id;
                                var name = data.name.split('+');
                                var json = {
                                    'id': data.id,
                                    'email': '',
                                    'first_name': name[0],
                                    'last_name': name[1],
                                    'username': data.screen_name
                                };
                                // console.log(json);
                                self.processLogin(json);
                            }

                        }

                        // Connect fail
                        if (error) {
                            // console.log(self._type + ' connect error: ' + JSON.stringify(error));
                            navigator.notification.alert(self._type + ' connect error: ' + JSON.stringify(error));
                        }
                        break;

                    case 'linkedin':
                        break;

                    default:
                        break;

                }

            });

        },

        getFacebookProfile: function() {
            utils.debug.log(this);
            var self = this;

            $.ajax({
                url: 'https://graph.facebook.com/me',
                data: {
                    'access_token': this._token
                },
                dataType: 'json',
                success: function(data) {
                    // console.log(JSON.stringify(data));

                    self.processLogin(data);
                },
                error: function(error) {
                    // console.log('Get Facebook Profile fail: ' + JSON.stringify(error));
                    navigator.notification.alert(JSON.stringify(error));

                    errorCallback(error);
                },
                // complete: function(){},
                // beforeSend: function(){}
            });

        },

        getTwitterProfile: function() {


        },

        quickLogin: function(data) {
            constants.token = data.token;

            core.viewer.set(data);

            localStorage.setItem('token', data.token);

            localStorage.setItem('viewer', JSON.stringify(data));

            window.location.href = '#newsfeed';
            window.location.reload();
        },

        processLogin: function(jsonData) {

            var sApi = "user/login";
            var jData = {
                "sLoginBy": this._type,
                "sEmail": jsonData.email,
                "sLoginUID": jsonData.id,
                'sAccessToken': this._token,
                'sSecretToken': this._token_secret
            };
            var self = this;
            console.log(JSON.stringify(jsonData));
            // Try to login
            utils.api.post(sApi, jData).done(function(resData) {

                if (resData == null) {
                    navigator.notification.alert("Cannot connect to server");
                    return;
                }

                if (resData.token != null) {

                    self.quickLogin(resData);
                    // window.localStorage.setItem("user.user_id", resData.user_id);
                    // window.localStorage.setItem("user.full_name", resData.full_name);
                    // window.localStorage.setItem("user.user_name", resData.user_name);
                    // window.localStorage.setItem("user.profileimage", resData.profileimage);
                    // window.localStorage.setItem("token", resData.token);
                    // window.localStorage.setItem("user.bIsAdmin", resData.bIsAdmin);

                    // window.localStorage.setItem("sLoginUID", jsonData.id);

                    // if (sDeviceFilePath == 'ipad/') {
                    //     $('.login_page').addClass("loading");
                    //     $('.over_lay').hide();
                    //     $('#loading_signin').show();
                    // } else {
                    //     $('.login_form').hide();
                    //     $('.bottom_login').hide();
                    //     $('.logo_container').css({'background-position': 'center 25%', 'height': ($(window).height()-89)+'px'});
                    // }

                    // setTimeout(function () {
                    //     startApp();
                    // }, 200);

                } else {
                    // Account do not exists, signup new account
                    utils.modal.toast("This account does not exists, please create a new one.");

                    var user = new User(jsonData);
                    // console.log(user);
                    signupData.update({
                        sFirstName: user.getFirstName(),
                        sFullName: user.getFirstName() + ' ' + user.getLastName(),
                        sUserName: user.getUserName(),
                        sEmail: user.getEmail(),
                        sLastName: user.getLastName(),
                        iGender: jsonData.gender == 'male' ? 1 : (jsonData.gender == 'female' ? 0 : 2),
                        sLoginUID: user.getId(),
                        sAccessToken: self._token,
                        sSecretToken: self._token_secret,
                        sFacebook: jsonData.link,
                        sLoginBy: self._type
                    });

                    window.location = '#signup';

                    // if (jsonData.id != null && jsonData.id != ''){
                    //     window.localStorage.setItem("sLoginUID", jsonData.id);
                    // }

                    // if (jsonData.email != null && jsonData.email != ''){
                    //     window.localStorage.setItem("email", jsonData.email);
                    // }

                    // if (jsonData.username != null && jsonData.username != ''){
                    //     window.localStorage.setItem("username", jsonData.username);
                    // }

                    // if (jsonData.first_name != null && jsonData.first_name != ''){
                    //     window.localStorage.setItem("firstname", jsonData.first_name);
                    // }

                    // if (jsonData.last_name != null && jsonData.last_name != ''){
                    //     window.localStorage.setItem("lastname", jsonData.last_name);
                    // }

                    // if (jsonData.gender != null && jsonData.gender != ''){
                    //     window.localStorage.setItem("gender", jsonData.gender);
                    // }

                    // if (jsonData.timezone != null && jsonData.timezone != ''){
                    //     window.localStorage.setItem("timezone", jsonData.timezone);
                    // }

                    // if (jsonData.signup_facebook != null && jsonData.signup_facebook != ''){
                    //     window.localStorage.setItem("signup_facebook", jsonData.signup_facebook);
                    // }

                    // // Open signup form
                    // $("#main-container").html( ( new SignupView() ).render().el );

                }

            });

        }

    }

    return SocialConnect;

});

define('text!user/tpl/user-login.html',[],function () { return '<div class="content swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide" data-url="1">\n\t\t\t<div class="login-logo"></div>\n\n\t\t\t<div class="login-form" id="login-form">\n\t\t\t    <div class="form-group form-input-phone">\n\t\t\t\t<input class="control-full" type="phone" id="phone" name="phone" \n\t\t\t\tplaceholder="<%= _t(\'ဖုန္းနံပါတ္\') %>" />\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group form-input-control">\n\t\t\t\t\t<input class="control-full" type="email" id="email" name="email" placeholder="<%= _t(\'email\') %>" />\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group form-input-control">\n\t\t\t\t\t<input class="control-full" type="password" id="password" name="password" placeholder="<%= _t(\'password\') %>" />\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<button type="button" id="btn-login" class="btn btn-success btn-large-fluid"><%= _t(\'sign_in\') %></button>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group form-group-flex">\n\t\t\t\t\t<div id="login_by_facebook_btn" class="btn btn-facebook btn-small-fluid" >Facebook</div>\n\t\t    \t\t<!--<div id="login_by_twitter_btn" class="btn btn-twitter btn-small-fluid">Twitter</div>-->\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group form-group-border-signup">\n\t\t\t\t\t<a href="#signup" class="btn btn-danger btn-large-fluid" id="btn-signup"><%= _t(\'sign_up\') %></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class="signing-in">\n\t\t\t\t<div class="loading-image"></div>\n\t\t\t\t<div class="loading-content"><%= _t(\'signing_in\') %></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer footer-fixed">\n\t<a href="#forgot-password" id="forgot-password"><%= _t(\'forgot_password\') %></a>\t\n</div>\n';});

define('user/view/user-login',[
    'core',
    'user/plugin/social-connect',
     'user/plugin/signup-data',
     'user/model/user',
    'text!user/tpl/user-login.html'
], function(core, SocialConnect, signupData,User, text) {
    
    var facebookToken = null;
    var facebookPermissions = ["email","user_friends","user_birthday"];
    
    function facebookLogoutThenLogin(){
        utils.debug.log('logout to facebook then login');
        facebookConnectPlugin.logout(function(){
            loginToFacebook();
        },function(){
            utils.debug.log('error when logout from facebook');
            utils.debug.log(arguments);
            loginToFacebook();
        });
    }
    
    function loginToFacebook(){
        utils.debug.log('login to facebook');
        facebookConnectPlugin.login(facebookPermissions, getFbProfileInfo, function(msg){
            utils.modal.alert(msg);
        },function(){
            alert(JSON.stringify(arguments));
        });
    }
    
    function getFacebookAccessTokenThenLogin(){
        facebookConnectPlugin.getAccessToken(function(token){
            facebookToken =  token;
            getFbProfileInfo();
        },function(failed){
            utils.debug.log('could not get facebook access token '+ failed);
            loginToFacebook();
        });
    }
    
    function getFbProfileInfo(data){
//           
          if(data && data.hasOwnProperty('authResponse'))
            facebookToken = data.authResponse.accessToken;
         
          utils.debug.log('getting facebook profile info  '+ JSON.stringify(data));
          
          facebookConnectPlugin.api('me/?fields=id,email,birthday,first_name,last_name,timezone,languages,name,gender', [],
        
            processLoginByFacebook,
        
            function () {
                utils.debug.log(arguments);
            });  
        }
        
    function quickLogin(data) {
            constants.token = data.token;

            core.viewer.set(data);

            localStorage.setItem('token', data.token);

            localStorage.setItem('viewer', JSON.stringify(data));

            window.location.href = '#newsfeed';
            window.location.reload();
        }
        
    function processLoginByFacebook(jsonData) {
            utils.debug.log('process login by facebook '+ JSON.stringify(jsonData));
            
            var sApi = "user/login";
            
            var jData = {
                "sLoginBy": 'facebook',
            //    "sPhone": jsonData.phone,
                "sEmail": jsonData.email,
                "sLoginUID": jsonData.id,
                'sAccessToken': facebookToken,
            };

            utils.debug.log(JSON.stringify(jData));
            // Try to login
            utils.api.post(sApi, jData).done(function(resData) {

                if (resData == null) {
                    navigator.notification.alert("Cannot connect to server");
                    return;
                }

                if (resData.token != null) {

                    quickLogin(resData);

                } else {
                    console.log(JSON.stringify(resData));
                    // Account do not exists, signup new account
                    utils.modal.toast("This account does not exists, please create a new one.");

                    var user = new User(jsonData);
                    // console.log(user);
                    
                    var sBirthday = jsonData.birthday;
                    
                    if(sBirthday){
                        var ar = sBirthday.split('/');
                        // fb reurn 'mm/dd/yyyy'
                        sBirthday = ar[2] + '-' + ar[0] + '-'+ ar[1];
                    }
                    
                    var updateData = {
                        sFirstName: user.getFirstName(),
                        sFullName: jsonData.name,
                        sUserName: user.getUserName(),
                        sBirthday: sBirthday,
                        sPhone: user.getPhone(),
                        sEmail: user.getEmail(),
                        sLastName: user.getLastName(),
                        iGender: jsonData.gender == 'male' ? 1 : (jsonData.gender == 'female' ? 0 : 2),
                        sLoginUID: user.getId(),
                        sAccessToken: facebookToken,
                        sSecretToken: '',
                        sFacebook: '',
                        sLoginBy: 'facebook'
                    };
                    
                    signupData.update(updateData);
                    
                    console.log(JSON.stringify(updateData));

                    window.location = '#signup';
                }

            }).fail(function(){
                utils.modal.alert('can not process login by facebook');
            });

        }

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            form: '#login-form'
        },
        className: 'page user-login-page',
        template: _.template(text),
        doLogin: function(evt) {

            var self = this;

            var btnLogin = $(evt.currentTarget),
                form = $(this.region.form),
                $ele = $(this.el);

            //'check login view';
            if (form.data('lock')) {
                return;
            }

            var email = form.find('#email').val();
            var phone = form.find("#phone").val();
            var password = form.find('#password').val();

            if (!email && !phone) {
                utils.modal.alert('Please enter email or phone number');
                return;
            }

            if (!utils.validator.isEmail(email)) {
                utils.modal.alert('Please enter a valid email address');
                return;
            }

            if (!password) {
                utils.modal.alert('Password is empty!');
                return;
            }

            var post_data = {
                sPhone:phone,
                sEmail: email,
                sPassword: password
            }

            form.data('lock', true);

            // login successfull
            $ele.addClass('signin-loading');
            // btnLogin.text('Signing In ...');


            // block ui.
            utils.observer.trigger('blockui');

            utils.api.get('user/login', post_data)
                .done(function(data) {
                    if (data.hasOwnProperty('token') && data.hasOwnProperty('user_id')) {

                        utils.debug.log('user logged in', data);

                        // update main data at first.
                        constants.token = data.token;

                        core.viewer.set(data);

                        localStorage.setItem('token', data.token);

                        localStorage.setItem('viewer', JSON.stringify(data));

                        $.ajaxSetup({
                            headers: {
                                token: data.token
                            }
                        });

                        self.checkSubscription(data);
                    } else {
                        utils.modal.alert(data.error_message);
                    }
                    // trigger to login view.
                }).fail(function(result) {
                    utils.debug.log(arguments);
                }).always(function(result) {
                    // release ui blocked
                    $ele.removeClass('signin-loading');
                    utils.observer.trigger('releaseui');
                    btnLogin.text('Sign In');
                    form.data('lock', false);

                });
        },
        render: function(context) {
            
            this.$el.html(this.template(context));

            // fix footer of login page
            this.$el.find(".footer").css({
                top: window.baseMinHeight - 67
            });
            this.$el.css({
                'min-height': window.baseMinHeight
            });

            this.$scroller = this.$el.find(this.region.scroller);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            return this;
        },
        events: {
            'click #btn-login': 'doLogin',
            'click #login_by_facebook_btn': 'checkLoginStatus',
            'click #login_by_twitter_btn': 'loginByTwitter'
        },
       checkLoginStatus: function() {
            facebookConnectPlugin.getLoginStatus(function(response){
                switch(response.status){
                    case 'connected': 
                        utils.debug.log('facebook now connected');
                        facebookLogoutThenLogin();
                        // getFacebookAccessTokenThenLogin();
                        break;
                    case 'unknown':
                    default:
                        // process login to facebook
                        // loginToFacebook();
                        loginToFacebook();
                        utils.debug.log('facebook connect status ' +  response.status);    
                }
            },function(){
                utils.debug.log(JSON.stringify(arguments));
                getFacebookAccessTokenThenLogin();
            });
            
            
            // issue with anroid, does not know #,?
            // var social = new SocialConnect('facebook', 'social-connect-facebook.html');
            // social.connect();
            // /Users/namnv/Sites/mobile/phpfox/trunk/phonegap-facebook-plugin
        },
        loginByTwitter: function() {
            var social = new SocialConnect('twitter', 'social-connect-twitter.html');
            social.connect();
        },
        checkSubscription: function (loginData){

            utils.api.get('user/verify_account',{},{context: this,'async':false})
                .done(function(data){
                    if(data.error_code && data.error_code > 0){

                        //check if user is subscribed
                        if (data.error_code == 1 && data.iPurchaseId){
                            window.location.href = '#subscribe/' + data.iPackageId + '/' + data.iPurchaseId;

                        } else {
                            window.location.href = '#logout';
                        }
                    }else{
                        // trigger observer
                        utils.observer.trigger('user:login', loginData);

                        // redirect to newsfeed page.
                        window.location.href = constants.home;
                    }
                })
                .fail(function(){
                    window.location.href = '#logout';
                })
            ;
        }
    });
});
define('user/controller/user-login',[
	'user/view/user-login'
],function(View) {
	
	function Controller()
	{
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new View()
			.render({
				
			})
			.inject();
	}

	utils.router.route('login',  Controller);
}); 
define('user/controller/user-logout',[
	'user/view/user-login'
], function(View){
	
	function Controller(){
		
		utils.history.clear();
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		utils.observer.trigger('user:logout');
		
		
		localStorage.setItem('user.viewer','');
		localStorage.setItem('token','');
		constants.token = '';
		
		utils.api.setup({
			token: null
		});
		
		window.location.href = '#login';
	}
	
	utils.router.route('logout', Controller);
});


define('text!user/tpl/user-signup-step-01.html',[],function () { return '<!-- user/tpl/signup/step01 -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" id="cancel_btn">\n\t\t\t<%= _t(\'cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled" id="btn-next">\n\t\t\t<%= _t(\'save\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(\'create_account\') %></div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="form-general" id="signup-form">\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'fullname\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-fullname" name="fullname" placeholder="<%= _t(\'fullname\') %>" value="<%= data.sFullName %>"  />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'email\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="email" class="control-full" id="signup-email" name="email" placeholder="<%= _t(\'email\') %>" value="<%= data.sEmail %>"  />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'password\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="password" class="control-full" id="signup-password" name="password" placeholder="<%= _t(\'password\') %>" value="<%= data.sPassword %>"  />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'confirm_password\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="password" class="control-full" id="signup-confirm" name="password_confirm" placeholder="<%= _t(\'confirm_password\') %>" value="<%= data.sPassword %>" />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'birthday\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-birthday" value="<%= data.sBirthday %>" placeholder="<%=_t(\'birthday\')%>" readonly />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'gender\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group clearfix">\n\t\t\t\t\t<select id="signup-gender" class="control-full" name="gender" value="<%= data.iGender %>">\n\t\t\t\t\t\t<option value=""><%= _t(\'gender\') %></option>\n                        <option value="1" <% if (parseInt(data.iGender, 10) === 1) print(\'selected="selected"\') %> ><%= _t(\'male\') %></option>\n\t\t\t\t\t\t<option value="2" <% if (parseInt(data.iGender, 10) === 2) print(\'selected="selected"\') %> ><%= _t(\'female\') %></option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-group sigup_agree_term">\n                    <input id="term-condition-checkbox" type="checkbox" <% if(data.bIsAgreeTerms) print(\'checked="checked"\') %> />\n                    <label for="term-condition-checkbox"> <a href="javascript:void(0)" id="term-condition-link"> <%= _t(\'term_service\') %> </a><%= _t(\'read_and_aggree_with\') %></label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('subscribe/model/subscription',[
], function() {

    var Model = Backbone.Model.extend();

    Model.prototype.getSubscriptionPackages = function() {

        return this.get('aPackage') || [];
    }

    Model.prototype.subscribeIsRequiredOnSignUp = function() {

        return this.get('aPerm').bSubscribeIsRequiredOnSignUp || false;
    }



    return Model;
});


define('text!user/tpl/term-condition.html',[],function () { return '<div class="term-condition">\n\t<div class="term-condition-title popup-title">\n\t\t<div class="btn-close-popup" id="btn-close-term-condition"></div>\n\t\t<%= _t(\'term_service\') %>\n\t</div>\n\t<div id="term-condition-content" class="term-condition-content swiper-container native-vscroll">\n\t\t<div class="swiper-wrapper">\n\t\t\t<div class="swiper-slide" id="term_and_condition_content_holder">\n\t\t\t    <div class="loading-initiator">\n\t\t\t\t\t\t\n\t\t\t    </div> \t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('user/view/term-condition',[
    'text!user/tpl/term-condition.html'
], function(text) { 

   
   return Backbone.View.extend({
        template: _.template(text),
        events: {
            'click #btn-close-term-condition': 'closePopup'
        },
        region:{
        	scroller: '#popup-content',
        	holder: '#term_and_condition_content_holder'
        },

        render: function() {
            this.$el.html(this.template());
			
			this.$holder =  this.$el.find(this.region.holder);

            var settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('user/signup_term', {}, settings).done(this.postDone).always(this.postComplete);

            return this;
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
        	$(this.region.holder).html(data.message);
        },

        inject: function() {
            utils.popup.open(this.$el);
            
            this.$scroller.ensureVerticalScroll();
            
            return this;
        },

        closePopup: function() {
            utils.popup.close();
        }

    });
});


define('user/view/user-signup-step-01',[   //Display Signup Form
    'text!user/tpl/user-signup-step-01.html',
    'user/plugin/signup-data',
    'subscribe/model/subscription',
    'user/view/term-condition'
],function(text, signupData, Model){

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content'
        },
        termConditionView: require('user/view/term-condition'),
        events: {
            'click #view-subscription-link': 'onSubscriptionViewClick',
            'click #cancel_btn': 'onCancelClick',
            'click #btn-next': 'goNext',
            'click #term-condition-link': 'showTermCondition',
            'click #signup-birthday': 'handleDates'
        },
        template: _.template(text),
        goNext: function(evt){
            var $target = $(evt.currentTarget);

             window.location.href='#signup/step04'; //no step 4 -- testing facebook
             return;

            if ($target.hasClass('processing')) {
                return;
            }

            var dom =  this.$el;

            var sFullname        = dom.find('#signup-fullname').val();
            var sEmail           = dom.find('#signup-email').val();
            var sPassword        = dom.find('#signup-password').val();
            var sPasswordConfirm = dom.find('#signup-confirm').val();
            var iGender          = dom.find('#signup-gender').val();
            var sBirthday        = dom.find('#signup-birthday').val();
            var bIsChecked       = dom.find('#term-condition-checkbox').is(':checked');

            var $fullname        = dom.find('#signup-username');
            var $password        = dom.find('#signup-password');
            var $passwordConfirm = dom.find('#signup-confirm');
            var $mail            = dom.find('#signup-email');
            var $birthday        = dom.find('#signup-birthday');
            // get subscription package

            var iPackageId = this.$subscriptionSelect.val() || 0;

            $password.removeClass('error');
            $passwordConfirm.removeClass('error');
            $mail.removeClass('error');
            $birthday.removeClass('error');

            if(!sFullname){
                $fullname.addClass('error');
                utils.modal.alert(_t('Fullname can not be empty!'));
                return ;
            }


            if(!sEmail){
                $mail.addClass('error');
                utils.modal.alert(_t('Email can not be null!'));
                return ;
            } else {
                if(!utils.validator.isEmail(sEmail)){
                    $mail.addClass('error');
                    utils.modal.alert(_t('Email is not valid!'));
                    return ;
                }
            }

            if(!sPassword){
                $password.addClass('error');
                utils.modal.alert(_t('Password can not be empty!'));
                return ;
            }

            if (sPassword.indexOf(' ') > -1) {
                $password.addClass('error');
                utils.modal.alert(_t('Password should not contain space'));
                return ;
            }

            if (sPassword.length < 6) {
                $password.addClass('error');
                utils.modal.alert(_t('Password must be longer than 6'));
                return;
            }

            if(!sPasswordConfirm || sPasswordConfirm != sPassword){
                $passwordConfirm.addClass('error');
                utils.modal.alert(_t('Password does not match'));
                return ;
            }

            // var datePatt = /(\d{4}-\d{2}-\d{2})$/;
            // if (!datePatt.test(sBirthday)) {
            // 	$birthday.addClass('error');
            // 	utils.modal.alert("Please select birthday");
            // 	return;
            // }

            if(!bIsChecked) {
                utils.modal.alert(_t('You must agree to the terms of service to continue'));
                return ;
            }

            signupData.update({
                sEmail: sEmail,
                sPassword: sPassword,
                sFullName: sFullname,
                iGender: iGender,
                sBirthday: sBirthday,
                bIsAgreeTerms: bIsChecked,
                iPackageId: iPackageId
            });

            $target.addClass('processing');

            // var checkUserName = utils.api.post('user/signup_check_username', {sUserName: sUserName});
            var checkEmail = utils.api.post('user/signup_check_email', {sEmail: sEmail});

            // $.when(checkUserName, checkEmail).done(function (data1, data2) {
            $.when(checkEmail).done(function (data1) {
                // data1 = data1[0];
                // data2 = data2[0];


                if (data1.error_code > 0) {
                    utils.modal.alert(data1.error_message);
                    $mail.addClass('error');
                    return;
                }

                window.location.href='#signup/step03'; //no step 2

            }).always(function () {
                $target.removeClass('processing');
            });
        },
        render: function(context){
            var self = this;

            this.$el.html(this.template({data: signupData.all }));

            this.$scroller  = this.$el.find(this.region.scroller);

            this.$subscriptionGroup = this.$el.find('#signup_subscription_group');

            this.$subscriptionSelect = this.$el.find('#signup_subscription_package');

            // bind input edit, paste events
            this.$input_eles = $('input', this.$el);
            this.$input_eles.each(function () {
                $(this).bind('input propertychange', function () {
                    self.toggleBtn();
                });
            });

            this.fetchData();

            return this;
        },
        inject: function(){

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            return this;
        },
        showTermCondition: function(e) {
            new this.termConditionView().render().inject();
        },
        toggleBtn: function () {
            var bDisable = true;

            this.$input_eles.each(function () {
                if ($(this).attr("type") != "checkbox" && $(this).val() != "") {
                    bDisable = false;
                }
            });

            $('#btn-next').toggleClass('disabled', bDisable);
        },
        onCancelClick: function () {
            utils.modal.confirm(_t('No account will be created if you cancel this screen'), function (selected) {
                if (selected == 1) {
                    signupData.reset();
                    window.location.href = "#login";
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        },
        handleDates: function (evt) {
            if (constants.platform == 'android') {
                this.handleDatesAndroid(evt);
            } else {
                this.handleDatesiOS(evt);
            }
        },
        handleDatesiOS: function (evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if(typeof myNewDate === "number") {
                myNewDate = new Date (myNewDate);
            }

            var minYear = utils.setting.get('user_date_of_birth_start');
            var maxYear = utils.setting.get('user_date_of_birth_end');
            var minDate = new Date(minYear, 0, 1, 0, 0, 0);
            var maxDate = new Date(maxYear, 11, 31, 23, 59, 59);

            if (myNewDate.getTime() > maxDate.getTime()) {
                myNewDate = maxDate;
            } else if (myNewDate.getTime() < minDate.getTime()) {
                myNewDate = minDate;
            }
            currentField.val(utils.moment(myNewDate.getTime()).format('YYYY-MM-DD'));

            datePicker.show({
                date : myNewDate,
                minDate: minDate,
                maxDate: maxDate,
                mode : 'date'
            }, function(returnDate) {
                if(returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    // fix case date picker return wrong selected value
                    if (newDate.getTime() > maxDate.getTime()) {
                        newDate = maxDate;
                    } else if (newDate.getTime() < minDate.getTime()) {
                        newDate = minDate;
                    }
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        handleDatesAndroid: function (evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if(typeof myNewDate === "number") {
                myNewDate = new Date (myNewDate);
            }

            var minYear = utils.setting.get('user_date_of_birth_start');
            var maxYear = utils.setting.get('user_date_of_birth_end');
            var minDate = Date.parse(minYear + '/01/01 00:00:00');
            var maxDate = Date.parse(maxYear + '/12/31 23:59:59');

            if (myNewDate.getTime() > maxDate) {
                myNewDate.setTime(maxDate);
            } else if (myNewDate.getTime() < minDate) {
                myNewDate.setTime(minDate);
            }
            currentField.val(utils.moment(myNewDate.getTime()).format('YYYY-MM-DD'));

            datePicker.show({
                date : myNewDate,
                minDate: minDate,
                maxDate: maxDate,
                mode : 'date'
            }, function(returnDate) {
                if(returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    // fix case date picker return wrong selected value
                    if (newDate.getTime() > maxDate) {
                        newDate.setTime(maxDate);
                    } else if (newDate.getTime() < minDate) {
                        newDate.setTime(minDate);
                    }
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        fetchData: function () {
            // get data

            var settings  = {context: this};

            utils.api.get('user/getsubscriptionpackages', {}, settings)
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function (data) {

            var self = this;

            if(data.error_code && data.error_code > 0){

                utils.modal.alert(data.error_message);

                utils.history.back();
            }else{

                this.model = new Model();

                this.model.set(data);

                this.updateSubscription();
            }
        },
        fetchDataFail : function(error, msg) {

            msg = msg || _t('Could not fetch data');

            utils.modal.alert(msg);

            utils.history.back();
        },
        updateSubscription: function () {

            var self = this;

            var packages = this.model.getSubscriptionPackages();

            if (packages.length) {
                this.$subscriptionGroup.removeClass('hide');

                if (!this.model.subscribeIsRequiredOnSignUp()) {
                    this.$subscriptionSelect.append(new Option(_t('Free'), 0));
                }

                _.each(packages, function (package) {
                    self.$subscriptionSelect.append(new Option(package.sTitle, package.iPackageId));
                });

                // reasign pacakge
                if (signupData.all.iPackageId) {
                    this.$subscriptionSelect.val((signupData.all.iPackageId));
                }
            }
        },
        onSubscriptionViewClick: function () {

            // save signup data to fill in when backing from subscription packages view

            var dom =  this.$el;
            var sFullname        = dom.find('#signup-fullname').val();
            var sEmail           = dom.find('#signup-email').val();
            var sPassword        = dom.find('#signup-password').val();
            var iGender          = dom.find('#signup-gender').val();
            var sBirthday        = dom.find('#signup-birthday').val();
            var bIsChecked       = dom.find('#term-condition-checkbox').is(':checked');

            var iPackageId = this.$subscriptionSelect.val() || 0;

            signupData.update({
                sEmail: sEmail,
                sPassword: sPassword,
                sFullName: sFullname,
                iGender: iGender,
                sBirthday: sBirthday,
                bIsAgreeTerms: bIsChecked,
                iPackageId: iPackageId
            });
        }
    });
});


define('text!user/tpl/user-signup-step-02.html',[],function () { return '<!-- user/tpl/signup/step02 -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" id="cancel_btn">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled" id="btn-next">\n\t\t\t<%= _t(\'save\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'create_account\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="form-general" id="signup-form">\n\t\t\t\t<!-- form content -->\n\t\t\t\t<div class="form-title-h3">\n\t\t\t\t\t<%= _t(\'personal_info\') %>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'first_name\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-firstname" name="firstname" placeholder="<%= _t(\'First Name\') %>" value="<%= data.sFirstName %>"/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'last_name\') %>\n\t\t\t\t</div>\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text"  class="control-full"id="signup-lastname" name="lastname" placeholder="<%= _t(\'Last Name\') %>" value="<%= data.sLastName %>"/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'gender\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<select id="signup-gender" class="control-full" name="gender" value="<%= data.iGender %>">\n                        <option value="1" <% if (parseInt(data.iGender, 10) === 1) print(\'selected="selected"\') %> ><%= _t(\'Male\') %></option>\n\t\t\t\t\t\t<option value="2" <% if (parseInt(data.iGender, 10) === 2) print(\'selected="selected"\') %> ><%= _t(\'Female\') %></option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'birthday\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group" id="form_input_birthday">\n\t\t\t\t\t<input class="input-datetime" type="text" id="signup-birthday" value="<%= data.sBirthday %>" readonly/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title-h3">\n\t\t\t\t\t<%= _t(\'contact_information\') %>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'website\') %>\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-website" name="website" placeholder="Website" value="<%= data.sWebsite %>"/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'Facebook\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-facebook" name="facebook" placeholder="Facebook" value="<%= data.sFacebook %>"/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'Twitter\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-twitter" name="twitter" placeholder="Twitter" value="<%= data.sTwitter %>"/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t\t<%= _t(\'AIM\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input type="text" class="control-full" id="signup-aim" name="aim" placeholder="AIM" value="<%= data.sAim %>"/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class="form-title-h3">\n\t\t\t\t\t<%= _t(\'about_me\') %>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<textarea name="aboutme" id="signup-about" class="control-full textarea" placeholder="<%= _t(\'About me\') %>"><%= data.sAbout %></textarea>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('user/view/user-signup-step-02',[ //Save Signup Data
	'text!user/tpl/user-signup-step-02.html',
	'user/plugin/signup-data'
],function(text, signupData){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#main',
			scroller: '#content'
		},
		events: {
			'click #cancel_btn': 'onCancelClick',
			'click #btn-next': 'goNext',
			'click #form_input_birthday': 'focusBirthday',
			'click #signup-birthday': 'handleDates'
		},
		template: _.template(text),
		goNext: function(){
			
			var dom = this.$el;
			
			var sFirstName = dom.find('#signup-firstname').val();
			var sLastName = dom.find('#signup-lastname').val();
			var iGender = dom.find('#signup-gender').val();
			var sWebsite = dom.find('#signup-website').val();
			var sFacebook = dom.find('#signup-facebook').val();
			var sTwitter = dom.find('#signup-twitter').val();
			var sAim = dom.find('#signup-aim').val();
			var sAbout = dom.find('#signup-about').val();
			var sBirthday = dom.find('#signup-birthday').val();
			
			var $firstName = dom.find('#signup-firstname');
			var $lastName = dom.find('#signup-lastname');
			var $gender = dom.find('#signup-gender');

            $firstName.removeClass('error');
            $lastName.removeClass('error');
            $gender.removeClass('error');

			if(!sFirstName.trim()){
                $firstName.addClass('error');
				utils.modal.alert('First Name can not be empty!');
				return ;
			}
			
			if(!sLastName.trim()){
                $lastName.addClass('error');
				utils.modal.alert('Last Name can not be empty!');
				return ;
			}
			
			// if(!iGender){
                // $gender.addClass('error');
			// 	alert('Gender can not be empty');
			// 	return ;
			// }
			
			signupData.update({
				sFirstName: sFirstName,
				sLastName: sLastName,
				iGender: iGender,
				sWebsite: sWebsite,
				sFacebook: sFacebook,
				sTwitter: sTwitter,
				sAim: sAim,
				sAbout: sAbout,
				sBirthday:sBirthday
				
			});
						
			window.location.href='#signup/step03';
		}, 
		render: function(context){
			var self = this;
			
			this.context = $.extend({}, context);
			
			this.$el.html(this.template({data: signupData.all }));
			
			this.$scroller = this.$el.find(this.region.scroller);
			
			// bind input edit, paste events
			this.$input_eles = $('input', this.$el);
			this.$input_eles.each(function () {
				$(this).bind('input propertychange', function () {
		            self.toggleBtn();
		        });
			});
			
			return this;
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();

            this.toggleBtn();

			return this;
		},
		focusBirthday: function (evt) {
			$('#signup-birthday', this.$el).focus();
		},
        handleDates: function (evt) {
            if (constants.platform != 'android') {
                return;
            }

            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val()) || new Date();
            if(typeof myNewDate === "number") {
                myNewDate = new Date (myNewDate);
            }

            datePicker.show({
                date : myNewDate,
                mode : 'date'
            }, function(returnDate) {
                if(returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        toggleBtn: function () {
        	var bDisable = true;
	        
	        this.$input_eles.each(function () {
	            if ($(this).attr("type") != "checkbox" && $(this).val() != "") {
	                bDisable = false;
	            }
	        });
	        
	        $('#btn-next').toggleClass('disabled', bDisable);
        },
        onCancelClick: function () {
        	utils.modal.confirm(_t('No account will be created if you cancel this screen'), function (selected) {
        		if (selected == 1) {
        			signupData.reset();
        			window.location.href = "#login";
        		}
        	}, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        }
	});
});


define('text!user/tpl/user-signup-step-03.html',[],function () { return '<!-- user/tpl/signup/step03 -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" id="cancel_btn">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="btn-next">\n\t\t\t<%= _t(\'save\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(\'upload_avatar\') %></div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="form-general" id="signup-form-edit-avatar">\n\t\t\t\t<!-- form content -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <div class="menu-item" id="reselect_btn">\n        \t<div class=""><%= _t(\'Reselect Photo\') %></div>\n        </div>\n    </div>\n</div>';});


define('text!user/tpl/select-crop-image.html',[],function () { return '<div id="img_container">\n\t<img id="profile_photo" class="photo-cropping" src="<%=context.imageURI%>" />\n</div>\n';});

define('user/view/select-crop-image',[
    'text!user/tpl/select-crop-image.html'
], function(text) {

    return Backbone.View.extend({
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                imageURI: ''
            }, context);

            this.$el.html(this.template({
                context: this.context
            }));

            this.$img_container = this.$el.find('#img_container');

            var self = this;
            setTimeout(function() {
                self.initJcrop($('#profile_photo'));
            }, 200);

            return this;
        },

        initJcrop: function(element) {
            var self = this;
            var iViewWidth = element.width();
            var iViewHeight = element.height();

            this.iWidth = iViewWidth;
            this.iHeight = iViewHeight;

            var iMinSize = 48;
            if (iViewWidth < 48 || iViewHeight < 48) {
                iMinSize = Math.min(iViewWidth, iViewHeight);
            }

            var aCoords = [0, 0, 100, 100];

            if (iViewWidth > 100 && iViewHeight > 100) {
                aCoords[0] = iViewWidth / 2 - 50;
                aCoords[1] = iViewHeight / 2 - 50;
                aCoords[2] = aCoords[0] + 100;
                aCoords[3] = aCoords[1] + 100;
            } else {
                if (iViewHeight < iViewWidth) {
                    aCoords[0] = iViewWidth / 2 - iViewHeight / 2;
                    aCoords[1] = 0;
                    aCoords[2] = aCoords[0] + iViewHeight;
                    aCoords[3] = iViewHeight;
                } else {
                    aCoords[0] = 0;
                    aCoords[1] = iViewHeight / 2 - iViewWidth / 2;
                    aCoords[2] = iViewWidth;
                    aCoords[3] = aCoords[0] + iViewWidth;
                }
            }

            this.coordinates = aCoords[0] + ':' + aCoords[1] + ':' + iViewWidth + ':' + iViewHeight;
            element.Jcrop({
                aspectRatio: 1 / 1,
                minSize: [iMinSize, iMinSize],
                setSelect: aCoords,
                onSelect: getCoords,
                onChange: getCoords
            });

            function getCoords(c) {
                if (c.w > 0 && c.h > 0) {
                    self.coordinates = c.x + ':' + c.y + ':' + c.w + ':' + c.h;
                    // window.localStorage.setItem('ProfileEditAvatarView.sCoordinates', c.x + ':' + c.y + ':' + c.w + ':' + c.h);
                } else {
                    self.coordinates = '';
                }
            }
        },

        getData: function() {

            return {
                sCoordinates: this.coordinates,
                iHeight: this.iHeight,
                iWidth: this.iWidth,
                sImgSrc: this.context.imageURI
            }
        }
    });
});
define('user/view/user-signup-step-03',[ //User Profile Image 
    'text!user/tpl/user-signup-step-03.html',
    'user/plugin/signup-data',
    'user/view/select-crop-image',
    'core'
], function() {

    var SelectCropImageView = require('user/view/select-crop-image'),
        text = require('text!user/tpl/user-signup-step-03.html'),
        signupData = require('user/plugin/signup-data'),
        core = require('core');

    return Backbone.View.extend({
        initialize: function() {
            this.cropView = new SelectCropImageView();

        },
        region: {
            wrapper: '#main',
            scroller: '#content'
        },
        events: {
            'click #cancel_btn': 'onCancelClick',
            'click #reselect_btn': 'selectPhoto',
            'click #btn-next': 'goNext'
        },
        template: _.template(text),
        goNext: function() {
            var data = this.cropView.getData();
            signupData.update(data);

            utils.debug.log("post data to completed signup form.");

            this.postSignupForm();
        },
        render: function(context) {

            this.context = $.extend({
                data: signupData.all
            }, context);

            this.$el.html(this.template(this.context));

            this.$scroller = this.$el.find(this.region.scroller);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.$postBtn = $('#btn-next');

            this.selectPhoto();

            return this;
        },

        selectPhoto: function(evt) {

            var self = this;

            if(!navigator.camera){
                //looks like we are on development mode, let's skip this one
                 window.location.href='#signup/step04';
                 return;
            }

            var onSuccess = function(imageURI) {
                self.$el.find('#signup-form-edit-avatar').html(self.cropView.render({
                    imageURI: imageURI
                }).el);
            };

            var onFail = function(msg) {
                utils.modal.alert(msg);
                utils.history.back();
            };

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });
        },

        postSignupForm: function() {
            if (this.$postBtn.hasClass('processing')) return;

            var self = this;

            function done(data) {

                if (parseInt(data.error_code, 10) > 0) {
                    if (data.error_code == 4 || data.error_code == 5) { // need to verify email or admin approve
                        utils.modal.alert(data.error_message);
                        window.location.href = '#login';
                     // window.location.href='#signup/step04';
                        return;
                    } else {
                        utils.modal.alert(data.error_message || 'Post URL failed!');
                        window.location = '#signup/step01';
                        return;
                    }
                } else {
                    
                    window.location.href='#signup/step04';
                    self.quickLogin(data);   // let's login at final stage << Nay
                }
            };

            function fail(error) {
                utils.modal.alert('Cannot Create Account! ');
                utils.debug.error('Error uploading file: ' + JSON.stringify(error));

                // self.handleUploadPhotoSuccess(data, settings, result);
            };

            function always() {
                self.$postBtn.removeClass('processing');
            }

            // console.log(signupData);
            this.$postBtn.addClass('processing');

            var params = signupData.all;

            utils.api.uploadImage('user/signup_account', params.sImgSrc, params).done(done).fail(fail).always(always);
        },

        quickLogin: function(data) {

            constants.token = data.token;

            core.viewer.set(data);

            localStorage.setItem('token', data.token);

            localStorage.setItem('viewer', JSON.stringify(data));

            // var iPackageId = signupData.all.iPackageId;

            // signupData.reset();

            // if (data.iPurchaseId){         // go to purchase if a package was selected

            //     window.location.href='#subscribe/' + iPackageId + '/' + data.iPurchaseId;

            //     return;
            // } else {

            //     utils.modal.toast('Signup sucessfully');
            //     window.location.href = constants.home;
            //     window.location.reload();
            // }

        },

        onCancelClick: function() {
            utils.modal.confirm(_t('No account will be created if you cancel this screen'), function(selected) {
                if (selected == 1) {
                    signupData.reset();
                    window.location.href = "#login";
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        }
    });
});

/**
 * response if signing up successfully
 *email: "fdsaf1@fdasfa.com"
 error_code: 0
 full_name: "fdaf fdasf"
 profileimage: "http://product-dev.younetco.com/mobile/se460/public/user/70/0c/0c64_ab60.jpg?c=9c9e"
 result: 1
 token: "wyduXY9dB0ECL30pVjFz0cTP"
 user_id: 164
 user_name: "Fdasfdsafsda1"
 */;

define('text!user/tpl/user-signup-step-04.html',[],function () { return '<!-- user/tpl/signup/step04 -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" id="cancel_btn">\r\n\t\t\t<%= _t(\'Cancel\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top" id="btn-next">\r\n\t\t\t<%= _t(\'Save\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title"><%= _t(\'သူငယ္ခ်င္းမ်ားဖိတ္ေခၚမယ္\') %></div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header-footer swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t\t<div class="form-general facebook-invite-form" id="form-general" style="padding: 20px;">\r\n\t\t\t\t<div class="form-title">\r\n\t\t\t\t<%= _t(\'သင့္သူငယ္ခ်င္းမ်ား ႏွင့္ ဒို႔ျမန္မာ မွာ ဆံုစည္းႏုိင္ဖို႔ Facebook မွ သူငယ္ခ်င္းမ်ား ကို ဖိတ္ေခၚႏုိင္ပါသည္။\') %>\r\n\t\t\t\t</div>\r\n\t\t\t\t<br><br>\r\n\t\t\t\t<div class="form-group form-group-flex">\r\n\t\t\t<div href="#friRequest" id="friRequest" class="btn btn-invite-facebook btn-small-fluid">\r\n\t\t\t<%= _t(\' Invite Friends \') %>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n';});

define('user/view/user-signup-step-04',[ //Friends Invitation << Nay 
    'text!user/tpl/user-signup-step-04.html',
    'user/plugin/signup-data',
    'core',
    'user/plugin/social-connect',     
    'user/model/user'
], function() {

    var text = require('text!user/tpl/user-signup-step-04.html'),
        signupData = require('user/plugin/signup-data'),
        core = require('core'),
        SocialConnect = require('user/plugin/social-connect'),
        User  = require('user/model/user');


    return Backbone.View.extend({
        initialize: function() {
            
        },
        region: {
            wrapper: '#main',
            scroller: '#content'
        },
        events: {
            'click #cancel_btn': 'onCancelClick',
            'click #btn-next': 'goNext',
            'click #friRequest': 'FBFriendRequestInit'
        },
        template: _.template(text),
        goNext: function() {
           
            utils.debug.log("post data to completed signup form.");
            //we don't have any data to save in this step :) 
            //to newsfeed
                 utils.modal.toast('Signup sucessfully');
                 window.location.href = constants.home;
                 window.location.reload();
        },
        render: function(context) {

            this.context = $.extend({
                data: signupData.all
            }, context);

            this.$el.html(this.template(this.context));

            this.$scroller = this.$el.find(this.region.scroller);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.$postBtn = $('#btn-next');


            return this;
        },

        FBFriendRequestInit: function(evt){
             var $target = $(evt.currentTarget);
             if($target.hasClass("processing")){return;}else{
                $target.addClass("processing");
             }

            var  fbAppRequestDialog = function (){
                            var options = { method:"apprequests", message: "Please Check out this app, buddy." };
                            facebookConnectPlugin.showDialog(options,
                                function (result) {
                                    utils.modal.alert("Thank You!");
                                    $("#friRequest").removeClass("processing");

                                                 },
                                function (e) {
                                    utils.modal.alert(JSON.stringify(e));
                                     $("#friRequest").removeClass("processing");
                            });
               };


            var fbLoginSuccess = function (userData) {

                    facebookConnectPlugin.getLoginStatus(
                        function (status) {
                            fbAppRequestDialog();
                        }
                    );

                };


            facebookConnectPlugin.getLoginStatus(function (status) {

                            var facebookPermissions = ["public_profile"];
                            alert(JSON.stringify(status.authResponse));
                            if(status.authResponse && status.authResponse.userID){
                                     fbAppRequestDialog();
                            }else {
                                  facebookConnectPlugin.login(facebookPermissions,
                                        fbLoginSuccess,
                                        function (error) { utils.modal.alert("login error : " + JSON.stringify(error)) }
                                    );
                            }
                            

                        },
                        function (e){

                        }
                    );




        },
        onCancelClick: function() {
            utils.modal.confirm(_t('Are you sure you want to skip this? '), function(selected) {
                if (selected == 1) {
                    signupData.reset();
                    window.location.href = "#login";
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        }
    });
});



define('text!user/tpl/user-signup-step-05.html',[],function () { return '<!-- user/tpl/signup/step05 -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" id="cancel_btn">\r\n\t\t\t<%= _t(\'Cancel\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top" id="btn-next">\r\n\t\t\t<%= _t(\'Save\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title"><%= _t(\'Follow Pages of Your Interest\') %></div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header-footer swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div class="info-text">\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n';});

define('user/view/user-signup-step-05',[ // Page Like Suggestions << Nay
    'text!user/tpl/user-signup-step-05.html',
    'user/plugin/signup-data',
    'core'
], function() {

    var text = require('text!user/tpl/user-signup-step-05.html'),
        signupData = require('user/plugin/signup-data'),
        core = require('core');

    return Backbone.View.extend({
        initialize: function() {
            
        },
        region: {
            wrapper: '#main',
            scroller: '#content'
        },
        events: {
            'click #cancel_btn': 'onCancelClick',
            'click #btn-next': 'goNext'
        },
        template: _.template(text),
        goNext: function() {
            var self = this;
            utils.debug.log("post data to completed signup form.");

            //to login page 
            //self.quickLogin(signupData.loginInfo);
                 utils.modal.toast('Signup sucessfully');
                 window.location.href = constants.home;
                 window.location.reload();

        },
        render: function(context) {

            this.context = $.extend({
                data: signupData.all
            }, context);

            this.$el.html(this.template(this.context));

            this.$scroller = this.$el.find(this.region.scroller);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.$postBtn = $('#btn-next');

            return this;
        },
        quickLogin: function(data) {

            constants.token = data.token;

            core.viewer.set(data);

            localStorage.setItem('token', data.token);

            localStorage.setItem('viewer', JSON.stringify(data));

            var iPackageId = signupData.all.iPackageId;

            signupData.reset();

            if (data.iPurchaseId){         // go to purchase if a package was selected

                window.location.href='#subscribe/' + iPackageId + '/' + data.iPurchaseId;

                return;
            } else {

                utils.modal.toast('Signup sucessfully');
                window.location.href = constants.home;
                window.location.reload();
            }
        },


        onCancelClick: function() {
            utils.modal.confirm(_t('No account will be created if you cancel this screen'), function(selected) {
                if (selected == 1) {
                    signupData.reset();
                    window.location.href = "#login";
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        }
    });
});


define('user/controller/user-signup',[
	'user/plugin/signup-data',
	'user/view/user-signup-step-01',
	'user/view/user-signup-step-02',
	'user/view/user-signup-step-03',
	'user/view/user-signup-step-04',
	'user/view/user-signup-step-05'
],function() {

	var signupData = require('user/plugin/signup-data')
	  , Step01View = require('user/view/user-signup-step-01')
	  , Step02View = require('user/view/user-signup-step-02')
	  , Step03View  = require('user/view/user-signup-step-03')
	  , Step04View  = require('user/view/user-signup-step-04')
	  , Step05View  = require('user/view/user-signup-step-05');
	
	function Step01Controller() 	
	{
		utils.history.push(true);
		
		
		utils.observer.trigger('router:changed');
		
		new Step01View()
			.render({
				
			})
			.inject();
	}
	
	function Step02Controller(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new Step02View()
			.render({
				
			})
			.inject();
	}
	
	function Step03Controller(){
		
		// utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new Step03View()
			.render({
				
			})
			.inject();
	}

	function Step04Controller(){
		
		// utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new Step04View()
			.render({
				
			})
			.inject();
	}

	// function Step05Controller(){
		
	// 	// utils.history.push();
		
	// 	utils.observer.trigger('router:changed');
		
	// 	new Step05View()
	// 		.render({
				
	// 		})
	// 		.inject();
	// }


	utils.router.route('signup', Step01Controller);
	
	utils.router.route('signup/step01', Step01Controller);
	
	utils.router.route('signup/step02', Step02Controller);
	
	utils.router.route('signup/step03', Step03Controller);

	utils.router.route('signup/step04', Step04Controller);

	//utils.router.route('signup/step05', Step05Controller);
});


define('text!user/tpl/user-about.html',[],function () { return '<!-- user/tpl/about -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back"></div>\n\t</div>\n    <% if(item.isOwner()) { %>\n        <div class="header-right">\n            <div class="btn-top btn-more" id="menu_toggle">\n            </div>\n        </div>\n    <% } %>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n            <%= _t(\'about\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"> </div>\n<div id="content" class="content with-header swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n            <div class="user-profile-info">\n                <div id="basic-info-holder">\n                    <div class="loading-initiator"></div>\n                </div>\n                <div id="user-extend-info">\n                </div>\n            </div>\n\t\t\t<div class="pvs"></div>\n\t\t</div>\n\t</div>\n</div>\n\n';});


define('text!user/tpl/user-extend-info.html',[],function () { return '\n\n<div class="user-extend-info-title"><%= _t(\'contact_information\') %></div>\n<div>\n    <% if(item.getLocation()) { %>\n        <div><%= _t(\'location\') %>: <%= item.getLocation() %></div>\n    <% } %>\n\n    <% if(item.getZipPostalCode()) { %>\n        <div><%= _t(\'Zip Code\') %>: <%= item.getZipPostalCode() %></div>\n    <% } %>\n\n    <% if(item.getRelationshipStatus()) { %>\n        <div><%= _t(\'relationship\') %>: <%= item.getRelationshipStatus() %> </div>\n    <% } %>\n</div>\n\n<div class="pvs"></div>\n<div class="user-extend-info-title"><%= _t(\'about_me\') %></div>\n<div>\n    <%if (item.getAboutMe()) {%><p><%= utils.str.shorten(item.getAboutMe(), 200,true) %></p><%}%>\n</div>\n\n<div class="pvs"></div>\n<div class="user-extend-info-title"><%= _t(\'activity_points\') %></div>\n<div>\n    <%if (item.getActivityPoints()) {%><p><%= utils.str.shorten(item.getActivityPoints(), 200,true) %></p><%}%>\n</div>\n';});

define('user/view/user-about',[
    'text!user/tpl/user-about.html',
    'text!user/tpl/user-extend-info.html',
    'user/view/user-basic-info',
    'user/view/user-topmenu'
], function() { 
    var tpl = require('text!user/tpl/user-about.html')
     ,  extendTpl = require('text!user/tpl/user-extend-info.html')
     ,  BasicInfo = require('user/view/user-basic-info')
     ,  TopMenuView  = require('user/view/user-topmenu')
     ;     
    return Backbone.View.extend({
        template: _.template(tpl),
        topMenuView: TopMenuView,
        events: {
            'click #menu_toggle': 'toggleMenu'
        },
		region:{
			wrapper: '#main',
			scroller: '#content'
		},
        render: function() {
        	
            this.$el.html(this.template({item: this.model}));

			this.$scroller  = this.$el.find(this.region.scroller);
			
            return this;
        },

        inject: function() {
			
			$(this.region.wrapper).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
			
            this.fetchData();

            return this;
        },

        fetchData: function() {
            var data = {
                iUserId: this.model.getId()
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('profile/detail', data, settings)
            .done(this.postDone)
            .always(this.postComplete);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
        	
        	this.model.set(data.BasicInfo);

            this.model.set('sAboutMe', data.About_Me ? data.About_Me.About_Me : '');
            
            new BasicInfo({
            	model: this.model
            }).render()
            .inject();

            this.$el.find('#user-extend-info', this.$el).html(_.template(extendTpl)({
                item: this.model
            }));
            
            this.$scroller.trigger('refresh');
        },

        toggleMenu: function(e){
			utils.topMenu.toggle(this, this.model);
        }
    });
});


define('user/controller/user-about',[
	'user/model/user',
	'user/view/user-about'
],function(Model, AboutView){
	
	function AboutController(id)
	{
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new AboutView({
			model: new Model({iUserId: id})
		}).render().inject();
	}

	utils.router.route('user-about/:id', AboutController);
	
});


define('text!user/tpl/edit-profile-info.html',[],function () { return '<!-- user/tpl/edit-profile-info.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'cancel\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n\t\t<div class="btn-top disabled" id="save_btn">\n\t\t\t<%= _t(\'save\') %>\t\n\t\t</div>\n\t</div>\n\t<div class="header-center" href="#">\n\t\t<div class="title">\n            <%= _t(\'edit_profile\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<!-- swiper -->\n<div class="content content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical">\n                <div id="edit-profile-content">\n                    <div class="loading-initiator"></div>\n                </div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n\n';});


define('text!user/tpl/edit-profile-info-content.html',[],function () { return '<div class="pvs"></div>\n\n<div class="form-title">\n    *<%= _t(\'location\') %>\n</div>\n<div class="form-group">\n    <select id="user_form_location" class="control-full">\n        <option value=""><%=_t(\'select\')%></option>\n        <%_.each(data.aLocations, function(aLocation) {%>\n        <option value="<%=aLocation.country_iso%>" <%if (aLocation.country_iso == item.getCountryISO()) {%>selected="selected"<%}%>><%=aLocation.name%></option>\n        <%});%>\n    </select>\n</div>\n<div class="form-group" id="user_form_childs_holder">\n</div>\n\n<div class="form-title">\n    <%= _t(\'city\') %>\n</div>\n<div class="form-group">\n    <input id="user_form_city" type="text" class="control-full text" placeholder="<%= _t(\'City\') %>" value="<%= item.getCity() %>" />\n</div>\n\n<div class="form-title">\n    <%= _t(\'ZIP / Postal Code\') %>\n</div>\n<div class="form-group">\n    <input id="user_form_zippostalcode" type="text" class="control-full text" placeholder="<%=_t(\'Zip / Postal Code\')%>" value="<%=item.getZipPostalCode()%>" />\n</div>\n\n<div class="form-title">\n    <%= _t(\'date_of_birth\') %>\n</div>\n<div class="form-group group-span-inline clearfix">\n    <input id="user_form_birthday" type="text" class="control-full text" value="<%= item.getDateOfBirthYMD() %>" readonly />\n</div>\n\n<div class="form-title">\n    *<%= _t(\'gender\') %>\n</div>\n<div class="form-group">\n    <select id="user_form_gender" class="control-full">\n        <option value=""><%=_t(\'select\')%></option>\n        <option value="1"<%if (item.getGender() == \'Male\') {%> selected="selected"<%}%>><%= _t(\'male\') %></option>\n        <option value="2"<%if (item.getGender() == \'Female\') {%> selected="selected"<%}%>><%= _t(\'female\') %></option>\n    </select>\n</div>\n\n<div class="form-title">\n    <%= _t(\'about_me\') %> \n</div>\n<div class="form-group">\n    <textarea id="user_form_aboutme" placeholder="ကိုယ္ေရးအက်ဥ္း" class="control-full textarea"><%= item.getAboutMe() %></textarea>\n</div>\n';});


define('text!user/tpl/country-childs.html',[],function () { return '<select id="user_form_childs" class="control-full">\n    <option value="0"><%=_t(\'state_province\')%></option>\n    <%_.each(data, function(aChild) {%>\n    <option value="<%=aChild.child_id%>" <%if (aChild.child_id == item.getChildId()) {%>selected="selected"<%}%>><%=aChild.name%></option>\n    <%});%>\n</select>';});

define('user/view/edit-profile-info',[
    'text!user/tpl/edit-profile-info.html',
    'text!user/tpl/edit-profile-info-content.html',
    'text!user/tpl/country-childs.html'
], function(text, textInfoContent, textChilds) {

    return Backbone.View.extend({
        template: _.template(text),
        templateInfoContent: _.template(textInfoContent),
        templateChilds: _.template(textChilds),
        region: {
            holder: '#main',
            scroller: '#content',
            content: '#edit-profile-content'
        },
        events: {
            'change #user_form_gender': 'onChangeGender',
            'change #user_form_location': 'onChangeLocation',
            'click #save_btn': 'submitForm',
            'click #user_form_birthday': 'handleDates'
        },
        render: function() {

            this.$holder = $(this.region.holder);

            this.$el.html(this.template());

            this.$scroller = this.$el.find(this.region.scroller);

            this.$contentHolder = this.$el.find(this.region.content);

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iUserId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('user/formeditprofile', postData, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data, status, jqXHR) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            this.fetchSuccess(data);
        },
        fetchSuccess: function(data) {

            this.formData = {
                aLocations: data.aLocations,
                bActiveAboutMe: data.bActiveAboutMe
            };

            this.model.set(data.info);

            this.refreshView();

            utils.observer.trigger('user:update');
        },
        fetchFail: function(error) {

            utils.debug.warn('[FAIL] user/formeditprofile', error);
            utils.modal.alert(_t('Can not load data from server'));

            utils.history.back();
        },
        refreshView: function() {

            this.$contentHolder.html(this.templateInfoContent({
                item: this.model,
                data: this.formData
            }));

            this.fetchChilds(this.model.getCountryISO());

            this.$save_btn = this.$el.find('#save_btn');
            this.$user_form_aboutme = this.$el.find('#user_form_aboutme');
            this.$user_form_birthday = this.$el.find('#user_form_birthday');
            this.$user_form_city = this.$el.find('#user_form_city');
            this.$user_form_gender = this.$el.find('#user_form_gender');
            this.$user_form_location = this.$el.find('#user_form_location');
            this.$user_form_zippostalcode = this.$el.find('#user_form_zippostalcode');
            this.$user_form_childs_holder = this.$el.find('#user_form_childs_holder');

            this.toggleSaveBtn();
        },
        onChangeGender: function(evt) {

            this.toggleSaveBtn();
        },
        onChangeLocation: function(evt) {

            this.toggleSaveBtn();

            this.$user_form_childs_holder.empty();

            var $target = $(evt.currentTarget);

            this.fetchChilds($target.val());
        },
        fetchChilds: function(sCountryIso) {

            var postData = {
                sCountryIso: sCountryIso
            };
            var settings = {
                context: this
            };

            utils.api.get('core/getchilds', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load country childs'));
                }

                this.updateChilds(data);
            }).fail(function(error) {
                utils.debug.warn('[FAIL] core/getchilds', error);
                return utils.modal.alert(_t('Can not load country childs'));
            });
        },
        updateChilds: function(data) {

            if (data.length > 0) {
                this.$user_form_childs_holder.html(this.templateChilds({
                    item: this.model,
                    data: data
                }));
            }
        },
        submitForm: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            if (!this.$user_form_location.val()) {
                return utils.modal.alert('Please select Location.');
            }

            if (!this.$user_form_gender.val()) {
                return utils.modal.alert('Please select Gender.');
            }

            this.$user_form_childs = this.$el.find('#user_form_childs');

            var postData = {
                iCountryChildId: this.$user_form_childs.length > 0 ? this.$user_form_childs.val() : 0,
                iGender: this.$user_form_gender.val(),
                iUserId: this.model.getId(),
                sAbout: this.$user_form_aboutme.val(),
                sBirthday: this.$user_form_birthday.val(),
                sCity: this.$user_form_city.val(),
                sCountryIso: this.$user_form_location.val(),
                sZipCode: this.$user_form_zippostalcode.val()
            };

            var settings = {
                'context': this
            };

            this.$save_btn.addClass('processing');

            utils.api.post('user/edit_profile', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                this.saveSuccess();
            }).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveSuccess: function() {

            utils.observer.trigger('user:update');
            utils.modal.toast('Edit Successfully');

            utils.history.back();
        },
        handleDates: function(evt) {
            if (constants.platform == 'android') {
                this.handleDatesAndroid(evt);
            } else {
                this.handleDatesiOS(evt);
            }
        },
        handleDatesiOS: function(evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if (typeof myNewDate === "number") {
                myNewDate = new Date(myNewDate);
            }

            var minYear = utils.setting.get('user_date_of_birth_start');
            var maxYear = utils.setting.get('user_date_of_birth_end');
            var minDate = new Date(minYear, 0, 1, 0, 0, 0);
            var maxDate = new Date(maxYear, 11, 31, 23, 59, 59);

            if (myNewDate.getTime() > maxDate.getTime()) {
                myNewDate = maxDate;
            } else if (myNewDate.getTime() < minDate.getTime()) {
                myNewDate = minDate;
            }
            currentField.val(utils.moment(myNewDate.getTime()).format('YYYY-MM-DD'));

            datePicker.show({
                date: myNewDate,
                minDate: minDate,
                maxDate: maxDate,
                mode: 'date'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    // fix case date picker return wrong selected value
                    if (newDate.getTime() > maxDate.getTime()) {
                        newDate = maxDate;
                    } else if (newDate.getTime() < minDate.getTime()) {
                        newDate = minDate;
                    }
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        handleDatesAndroid: function(evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if (typeof myNewDate === "number") {
                myNewDate = new Date(myNewDate);
            }

            var minYear = utils.setting.get('user_date_of_birth_start');
            var maxYear = utils.setting.get('user_date_of_birth_end');
            var minDate = Date.parse(minYear + '/01/01 00:00:00');
            var maxDate = Date.parse(maxYear + '/12/31 23:59:59');

            if (myNewDate.getTime() > maxDate) {
                myNewDate.setTime(maxDate);
            } else if (myNewDate.getTime() < minDate) {
                myNewDate.setTime(minDate);
            }
            currentField.val(utils.moment(myNewDate.getTime()).format('YYYY-MM-DD'));

            datePicker.show({
                date: myNewDate,
                minDate: minDate,
                maxDate: maxDate,
                mode: 'date'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    // fix case date picker return wrong selected value
                    if (newDate.getTime() > maxDate) {
                        newDate.setTime(maxDate);
                    } else if (newDate.getTime() < minDate) {
                        newDate.setTime(minDate);
                    }
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        toggleSaveBtn: function() {

            var bDisable = (!this.$user_form_location.val() || !this.$user_form_gender.val());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('user/controller/user-edit',[
	'user/model/user',
	'user/view/edit-profile-info'
],function(UserModel, EditView){
	
	function editController(id)
	{
		// utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new EditView({
			model: new UserModel({iUserId: id})
		}).render().inject();
	}

	utils.router.route('user-edit/:id', editController);
	
});



define('text!user/tpl/edit-user-photo.html',[],function () { return '<!-- user/tpl/about -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n\t\t<div class="btn-top" id="save-photo">\n\t\t\t<%= _t(\'Save\') %>\t\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n            <%= _t(\'Edit My Photo\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="content" class="content with-header ">\n    <div id="edit-avatar">\n\n    </div>\n</div>\n\n\n\n';});

/**
 * jquery.Jcrop.js v0.9.12
 * jQuery Image Cropping Plugin - released under MIT License 
 * Author: Kelly Hallman <khallman@gmail.com>
 * http://github.com/tapmodo/Jcrop
 * Copyright (c) 2008-2013 Tapmodo Interactive LLC {{{
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * }}}
 */

(function ($) {

  $.Jcrop = function (obj, opt) {
    var options = $.extend({}, $.Jcrop.defaults),
        docOffset,
        _ua = navigator.userAgent.toLowerCase(),
        is_msie = /msie/.test(_ua),
        ie6mode = /msie [1-6]\./.test(_ua);

    // Internal Methods {{{
    function px(n) {
      return Math.round(n) + 'px';
    }
    function cssClass(cl) {
      return options.baseClass + '-' + cl;
    }
    function supportsColorFade() {
      return $.fx.step.hasOwnProperty('backgroundColor');
    }
    function getPos(obj) //{{{
    {
      var pos = $(obj).offset();
      return [pos.left, pos.top];
    }
    //}}}
    function mouseAbs(e) //{{{
    {
      return [(e.pageX - docOffset[0]), (e.pageY - docOffset[1])];
    }
    //}}}
    function setOptions(opt) //{{{
    {
      if (typeof(opt) !== 'object') opt = {};
      options = $.extend(options, opt);

      $.each(['onChange','onSelect','onRelease','onDblClick'],function(i,e) {
        if (typeof(options[e]) !== 'function') options[e] = function () {};
      });
    }
    //}}}
    function startDragMode(mode, pos, touch) //{{{
    {
      docOffset = getPos($img);
      Tracker.setCursor(mode === 'move' ? mode : mode + '-resize');

      if (mode === 'move') {
        return Tracker.activateHandlers(createMover(pos), doneSelect, touch);
      }

      var fc = Coords.getFixed();
      var opp = oppLockCorner(mode);
      var opc = Coords.getCorner(oppLockCorner(opp));

      Coords.setPressed(Coords.getCorner(opp));
      Coords.setCurrent(opc);

      Tracker.activateHandlers(dragmodeHandler(mode, fc), doneSelect, touch);
    }
    //}}}
    function dragmodeHandler(mode, f) //{{{
    {
      return function (pos) {
        if (!options.aspectRatio) {
          switch (mode) {
          case 'e':
            pos[1] = f.y2;
            break;
          case 'w':
            pos[1] = f.y2;
            break;
          case 'n':
            pos[0] = f.x2;
            break;
          case 's':
            pos[0] = f.x2;
            break;
          }
        } else {
          switch (mode) {
          case 'e':
            pos[1] = f.y + 1;
            break;
          case 'w':
            pos[1] = f.y + 1;
            break;
          case 'n':
            pos[0] = f.x + 1;
            break;
          case 's':
            pos[0] = f.x + 1;
            break;
          }
        }
        Coords.setCurrent(pos);
        Selection.update();
      };
    }
    //}}}
    function createMover(pos) //{{{
    {
      var lloc = pos;
      KeyManager.watchKeys();

      return function (pos) {
        Coords.moveOffset([pos[0] - lloc[0], pos[1] - lloc[1]]);
        lloc = pos;

        Selection.update();
      };
    }
    //}}}
    function oppLockCorner(ord) //{{{
    {
      switch (ord) {
      case 'n':
        return 'sw';
      case 's':
        return 'nw';
      case 'e':
        return 'nw';
      case 'w':
        return 'ne';
      case 'ne':
        return 'sw';
      case 'nw':
        return 'se';
      case 'se':
        return 'nw';
      case 'sw':
        return 'ne';
      }
    }
    //}}}
    function createDragger(ord) //{{{
    {
      return function (e) {
        if (options.disabled) {
          return false;
        }
        if ((ord === 'move') && !options.allowMove) {
          return false;
        }
        
        // Fix position of crop area when dragged the very first time.
        // Necessary when crop image is in a hidden element when page is loaded.
        docOffset = getPos($img);

        btndown = true;
        startDragMode(ord, mouseAbs(e));
        e.stopPropagation();
        e.preventDefault();
        return false;
      };
    }
    //}}}
    function presize($obj, w, h) //{{{
    {
      var nw = $obj.width(),
          nh = $obj.height();
      if ((nw > w) && w > 0) {
        nw = w;
        nh = (w / $obj.width()) * $obj.height();
      }
      if ((nh > h) && h > 0) {
        nh = h;
        nw = (h / $obj.height()) * $obj.width();
      }
      xscale = $obj.width() / nw;
      yscale = $obj.height() / nh;
      $obj.width(nw).height(nh);
    }
    //}}}
    function unscale(c) //{{{
    {
      return {
        x: c.x * xscale,
        y: c.y * yscale,
        x2: c.x2 * xscale,
        y2: c.y2 * yscale,
        w: c.w * xscale,
        h: c.h * yscale
      };
    }
    //}}}
    function doneSelect(pos) //{{{
    {
      var c = Coords.getFixed();
      if ((c.w > options.minSelect[0]) && (c.h > options.minSelect[1])) {
        Selection.enableHandles();
        Selection.done();
      } else {
        Selection.release();
      }
      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
    }
    //}}}
    function newSelection(e) //{{{
    {
      if (options.disabled) {
        return false;
      }
      if (!options.allowSelect) {
        return false;
      }
      btndown = true;
      docOffset = getPos($img);
      Selection.disableHandles();
      Tracker.setCursor('crosshair');
      var pos = mouseAbs(e);
      Coords.setPressed(pos);
      Selection.update();
      Tracker.activateHandlers(selectDrag, doneSelect, e.type.substring(0,5)==='touch');
      KeyManager.watchKeys();

      e.stopPropagation();
      e.preventDefault();
      return false;
    }
    //}}}
    function selectDrag(pos) //{{{
    {
      Coords.setCurrent(pos);
      Selection.update();
    }
    //}}}
    function newTracker() //{{{
    {
      var trk = $('<div></div>').addClass(cssClass('tracker'));
      if (is_msie) {
        trk.css({
          opacity: 0,
          backgroundColor: 'white'
        });
      }
      return trk;
    }
    //}}}

    // }}}
    // Initialization {{{
    // Sanitize some options {{{
    if (typeof(obj) !== 'object') {
      obj = $(obj)[0];
    }
    if (typeof(opt) !== 'object') {
      opt = {};
    }
    // }}}
    setOptions(opt);
    // Initialize some jQuery objects {{{
    // The values are SET on the image(s) for the interface
    // If the original image has any of these set, they will be reset
    // However, if you destroy() the Jcrop instance the original image's
    // character in the DOM will be as you left it.
    var img_css = {
      border: 'none',
      visibility: 'visible',
      margin: 0,
      padding: 0,
      position: 'absolute',
      top: 0,
      left: 0
    };

    var $origimg = $(obj),
      img_mode = true;

    if (obj.tagName == 'IMG') {
      // Fix size of crop image.
      // Necessary when crop image is within a hidden element when page is loaded.
      if ($origimg[0].width != 0 && $origimg[0].height != 0) {
        // Obtain dimensions from contained img element.
        $origimg.width($origimg[0].width);
        $origimg.height($origimg[0].height);
      } else {
        // Obtain dimensions from temporary image in case the original is not loaded yet (e.g. IE 7.0). 
        var tempImage = new Image();
        tempImage.src = $origimg[0].src;
        $origimg.width(tempImage.width);
        $origimg.height(tempImage.height);
      } 

      var $img = $origimg.clone().removeAttr('id').css(img_css).show();

      $img.width($origimg.width());
      $img.height($origimg.height());
      $origimg.after($img).hide();

    } else {
      $img = $origimg.css(img_css).show();
      img_mode = false;
      if (options.shade === null) { options.shade = true; }
    }

    presize($img, options.boxWidth, options.boxHeight);

    var boundx = $img.width(),
        boundy = $img.height(),
        
        
        $div = $('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({
        position: 'relative',
        backgroundColor: options.bgColor
      }).insertAfter($origimg).append($img);

    if (options.addClass) {
      $div.addClass(options.addClass);
    }

    var $img2 = $('<div />'),

        $img_holder = $('<div />') 
        .width('100%').height('100%').css({
          zIndex: 310,
          position: 'absolute',
          overflow: 'hidden'
        }),

        $hdl_holder = $('<div />') 
        .width('100%').height('100%').css('zIndex', 320), 

        $sel = $('<div />') 
        .css({
          position: 'absolute',
          zIndex: 600
        }).dblclick(function(){
          var c = Coords.getFixed();
          options.onDblClick.call(api,c);
        }).insertBefore($img).append($img_holder, $hdl_holder); 

    if (img_mode) {

      $img2 = $('<img />')
          .attr('src', $img.attr('src')).css(img_css).width(boundx).height(boundy),

      $img_holder.append($img2);

    }

    if (ie6mode) {
      $sel.css({
        overflowY: 'hidden'
      });
    }

    var bound = options.boundary;
    var $trk = newTracker().width(boundx + (bound * 2)).height(boundy + (bound * 2)).css({
      position: 'absolute',
      top: px(-bound),
      left: px(-bound),
      zIndex: 290
    }).mousedown(newSelection);

    /* }}} */
    // Set more variables {{{
    var bgcolor = options.bgColor,
        bgopacity = options.bgOpacity,
        xlimit, ylimit, xmin, ymin, xscale, yscale, enabled = true,
        btndown, animating, shift_down;

    docOffset = getPos($img);
    // }}}
    // }}}
    // Internal Modules {{{
    // Touch Module {{{ 
    var Touch = (function () {
      // Touch support detection function adapted (under MIT License)
      // from code by Jeffrey Sambells - http://github.com/iamamused/
      function hasTouchSupport() {
        var support = {}, events = ['touchstart', 'touchmove', 'touchend'],
            el = document.createElement('div'), i;

        try {
          for(i=0; i<events.length; i++) {
            var eventName = events[i];
            eventName = 'on' + eventName;
            var isSupported = (eventName in el);
            if (!isSupported) {
              el.setAttribute(eventName, 'return;');
              isSupported = typeof el[eventName] == 'function';
            }
            support[events[i]] = isSupported;
          }
          return support.touchstart && support.touchend && support.touchmove;
        }
        catch(err) {
          return false;
        }
      }

      function detectSupport() {
        if ((options.touchSupport === true) || (options.touchSupport === false)) return options.touchSupport;
          else return hasTouchSupport();
      }
      return {
        createDragger: function (ord) {
          return function (e) {
            if (options.disabled) {
              return false;
            }
            if ((ord === 'move') && !options.allowMove) {
              return false;
            }
            docOffset = getPos($img);
            btndown = true;
            startDragMode(ord, mouseAbs(Touch.cfilter(e)), true);
            e.stopPropagation();
            e.preventDefault();
            return false;
          };
        },
        newSelection: function (e) {
          return newSelection(Touch.cfilter(e));
        },
        cfilter: function (e){
          e.pageX = e.originalEvent.changedTouches[0].pageX;
          e.pageY = e.originalEvent.changedTouches[0].pageY;
          return e;
        },
        isSupported: hasTouchSupport,
        support: detectSupport()
      };
    }());
    // }}}
    // Coords Module {{{
    var Coords = (function () {
      var x1 = 0,
          y1 = 0,
          x2 = 0,
          y2 = 0,
          ox, oy;

      function setPressed(pos) //{{{
      {
        pos = rebound(pos);
        x2 = x1 = pos[0];
        y2 = y1 = pos[1];
      }
      //}}}
      function setCurrent(pos) //{{{
      {
        pos = rebound(pos);
        ox = pos[0] - x2;
        oy = pos[1] - y2;
        x2 = pos[0];
        y2 = pos[1];
      }
      //}}}
      function getOffset() //{{{
      {
        return [ox, oy];
      }
      //}}}
      function moveOffset(offset) //{{{
      {
        var ox = offset[0],
            oy = offset[1];

        if (0 > x1 + ox) {
          ox -= ox + x1;
        }
        if (0 > y1 + oy) {
          oy -= oy + y1;
        }

        if (boundy < y2 + oy) {
          oy += boundy - (y2 + oy);
        }
        if (boundx < x2 + ox) {
          ox += boundx - (x2 + ox);
        }

        x1 += ox;
        x2 += ox;
        y1 += oy;
        y2 += oy;
      }
      //}}}
      function getCorner(ord) //{{{
      {
        var c = getFixed();
        switch (ord) {
        case 'ne':
          return [c.x2, c.y];
        case 'nw':
          return [c.x, c.y];
        case 'se':
          return [c.x2, c.y2];
        case 'sw':
          return [c.x, c.y2];
        }
      }
      //}}}
      function getFixed() //{{{
      {
        if (!options.aspectRatio) {
          return getRect();
        }
        // This function could use some optimization I think...
        var aspect = options.aspectRatio,
            min_x = options.minSize[0] / xscale,
            
            
            //min_y = options.minSize[1]/yscale,
            max_x = options.maxSize[0] / xscale,
            max_y = options.maxSize[1] / yscale,
            rw = x2 - x1,
            rh = y2 - y1,
            rwa = Math.abs(rw),
            rha = Math.abs(rh),
            real_ratio = rwa / rha,
            xx, yy, w, h;

        if (max_x === 0) {
          max_x = boundx * 10;
        }
        if (max_y === 0) {
          max_y = boundy * 10;
        }
        if (real_ratio < aspect) {
          yy = y2;
          w = rha * aspect;
          xx = rw < 0 ? x1 - w : w + x1;

          if (xx < 0) {
            xx = 0;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          } else if (xx > boundx) {
            xx = boundx;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          }
        } else {
          xx = x2;
          h = rwa / aspect;
          yy = rh < 0 ? y1 - h : y1 + h;
          if (yy < 0) {
            yy = 0;
            w = Math.abs((yy - y1) * aspect);
            xx = rw < 0 ? x1 - w : w + x1;
          } else if (yy > boundy) {
            yy = boundy;
            w = Math.abs(yy - y1) * aspect;
            xx = rw < 0 ? x1 - w : w + x1;
          }
        }

        // Magic %-)
        if (xx > x1) { // right side
          if (xx - x1 < min_x) {
            xx = x1 + min_x;
          } else if (xx - x1 > max_x) {
            xx = x1 + max_x;
          }
          if (yy > y1) {
            yy = y1 + (xx - x1) / aspect;
          } else {
            yy = y1 - (xx - x1) / aspect;
          }
        } else if (xx < x1) { // left side
          if (x1 - xx < min_x) {
            xx = x1 - min_x;
          } else if (x1 - xx > max_x) {
            xx = x1 - max_x;
          }
          if (yy > y1) {
            yy = y1 + (x1 - xx) / aspect;
          } else {
            yy = y1 - (x1 - xx) / aspect;
          }
        }

        if (xx < 0) {
          x1 -= xx;
          xx = 0;
        } else if (xx > boundx) {
          x1 -= xx - boundx;
          xx = boundx;
        }

        if (yy < 0) {
          y1 -= yy;
          yy = 0;
        } else if (yy > boundy) {
          y1 -= yy - boundy;
          yy = boundy;
        }

        return makeObj(flipCoords(x1, y1, xx, yy));
      }
      //}}}
      function rebound(p) //{{{
      {
        if (p[0] < 0) p[0] = 0;
        if (p[1] < 0) p[1] = 0;

        if (p[0] > boundx) p[0] = boundx;
        if (p[1] > boundy) p[1] = boundy;

        return [Math.round(p[0]), Math.round(p[1])];
      }
      //}}}
      function flipCoords(x1, y1, x2, y2) //{{{
      {
        var xa = x1,
            xb = x2,
            ya = y1,
            yb = y2;
        if (x2 < x1) {
          xa = x2;
          xb = x1;
        }
        if (y2 < y1) {
          ya = y2;
          yb = y1;
        }
        return [xa, ya, xb, yb];
      }
      //}}}
      function getRect() //{{{
      {
        var xsize = x2 - x1,
            ysize = y2 - y1,
            delta;

        if (xlimit && (Math.abs(xsize) > xlimit)) {
          x2 = (xsize > 0) ? (x1 + xlimit) : (x1 - xlimit);
        }
        if (ylimit && (Math.abs(ysize) > ylimit)) {
          y2 = (ysize > 0) ? (y1 + ylimit) : (y1 - ylimit);
        }

        if (ymin / yscale && (Math.abs(ysize) < ymin / yscale)) {
          y2 = (ysize > 0) ? (y1 + ymin / yscale) : (y1 - ymin / yscale);
        }
        if (xmin / xscale && (Math.abs(xsize) < xmin / xscale)) {
          x2 = (xsize > 0) ? (x1 + xmin / xscale) : (x1 - xmin / xscale);
        }

        if (x1 < 0) {
          x2 -= x1;
          x1 -= x1;
        }
        if (y1 < 0) {
          y2 -= y1;
          y1 -= y1;
        }
        if (x2 < 0) {
          x1 -= x2;
          x2 -= x2;
        }
        if (y2 < 0) {
          y1 -= y2;
          y2 -= y2;
        }
        if (x2 > boundx) {
          delta = x2 - boundx;
          x1 -= delta;
          x2 -= delta;
        }
        if (y2 > boundy) {
          delta = y2 - boundy;
          y1 -= delta;
          y2 -= delta;
        }
        if (x1 > boundx) {
          delta = x1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }
        if (y1 > boundy) {
          delta = y1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }

        return makeObj(flipCoords(x1, y1, x2, y2));
      }
      //}}}
      function makeObj(a) //{{{
      {
        return {
          x: a[0],
          y: a[1],
          x2: a[2],
          y2: a[3],
          w: a[2] - a[0],
          h: a[3] - a[1]
        };
      }
      //}}}

      return {
        flipCoords: flipCoords,
        setPressed: setPressed,
        setCurrent: setCurrent,
        getOffset: getOffset,
        moveOffset: moveOffset,
        getCorner: getCorner,
        getFixed: getFixed
      };
    }());

    //}}}
    // Shade Module {{{
    var Shade = (function() {
      var enabled = false,
          holder = $('<div />').css({
            position: 'absolute',
            zIndex: 240,
            opacity: 0
          }),
          shades = {
            top: createShade(),
            left: createShade().height(boundy),
            right: createShade().height(boundy),
            bottom: createShade()
          };

      function resizeShades(w,h) {
        shades.left.css({ height: px(h) });
        shades.right.css({ height: px(h) });
      }
      function updateAuto()
      {
        return updateShade(Coords.getFixed());
      }
      function updateShade(c)
      {
        shades.top.css({
          left: px(c.x),
          width: px(c.w),
          height: px(c.y)
        });
        shades.bottom.css({
          top: px(c.y2),
          left: px(c.x),
          width: px(c.w),
          height: px(boundy-c.y2)
        });
        shades.right.css({
          left: px(c.x2),
          width: px(boundx-c.x2)
        });
        shades.left.css({
          width: px(c.x)
        });
      }
      function createShade() {
        return $('<div />').css({
          position: 'absolute',
          backgroundColor: options.shadeColor||options.bgColor
        }).appendTo(holder);
      }
      function enableShade() {
        if (!enabled) {
          enabled = true;
          holder.insertBefore($img);
          updateAuto();
          Selection.setBgOpacity(1,0,1);
          $img2.hide();

          setBgColor(options.shadeColor||options.bgColor,1);
          if (Selection.isAwake())
          {
            setOpacity(options.bgOpacity,1);
          }
            else setOpacity(1,1);
        }
      }
      function setBgColor(color,now) {
        colorChangeMacro(getShades(),color,now);
      }
      function disableShade() {
        if (enabled) {
          holder.remove();
          $img2.show();
          enabled = false;
          if (Selection.isAwake()) {
            Selection.setBgOpacity(options.bgOpacity,1,1);
          } else {
            Selection.setBgOpacity(1,1,1);
            Selection.disableHandles();
          }
          colorChangeMacro($div,0,1);
        }
      }
      function setOpacity(opacity,now) {
        if (enabled) {
          if (options.bgFade && !now) {
            holder.animate({
              opacity: 1-opacity
            },{
              queue: false,
              duration: options.fadeTime
            });
          }
          else holder.css({opacity:1-opacity});
        }
      }
      function refreshAll() {
        options.shade ? enableShade() : disableShade();
        if (Selection.isAwake()) setOpacity(options.bgOpacity);
      }
      function getShades() {
        return holder.children();
      }

      return {
        update: updateAuto,
        updateRaw: updateShade,
        getShades: getShades,
        setBgColor: setBgColor,
        enable: enableShade,
        disable: disableShade,
        resize: resizeShades,
        refresh: refreshAll,
        opacity: setOpacity
      };
    }());
    // }}}
    // Selection Module {{{
    var Selection = (function () {
      var awake,
          hdep = 370,
          borders = {},
          handle = {},
          dragbar = {},
          seehandles = false;

      // Private Methods
      function insertBorder(type) //{{{
      {
        var jq = $('<div />').css({
          position: 'absolute',
          opacity: options.borderOpacity
        }).addClass(cssClass(type));
        $img_holder.append(jq);
        return jq;
      }
      //}}}
      function dragDiv(ord, zi) //{{{
      {
        var jq = $('<div />').mousedown(createDragger(ord)).css({
          cursor: ord + '-resize',
          position: 'absolute',
          zIndex: zi
        }).addClass('ord-'+ord);

        if (Touch.support) {
          jq.bind('touchstart.jcrop', Touch.createDragger(ord));
        }

        $hdl_holder.append(jq);
        return jq;
      }
      //}}}
      function insertHandle(ord) //{{{
      {
        var hs = options.handleSize,

          div = dragDiv(ord, hdep++).css({
            opacity: options.handleOpacity
          }).addClass(cssClass('handle'));

        if (hs) { div.width(hs).height(hs); }

        return div;
      }
      //}}}
      function insertDragbar(ord) //{{{
      {
        return dragDiv(ord, hdep++).addClass('jcrop-dragbar');
      }
      //}}}
      function createDragbars(li) //{{{
      {
        var i;
        for (i = 0; i < li.length; i++) {
          dragbar[li[i]] = insertDragbar(li[i]);
        }
      }
      //}}}
      function createBorders(li) //{{{
      {
        var cl,i;
        for (i = 0; i < li.length; i++) {
          switch(li[i]){
            case'n': cl='hline'; break;
            case's': cl='hline bottom'; break;
            case'e': cl='vline right'; break;
            case'w': cl='vline'; break;
          }
          borders[li[i]] = insertBorder(cl);
        }
      }
      //}}}
      function createHandles(li) //{{{
      {
        var i;
        for (i = 0; i < li.length; i++) {
          handle[li[i]] = insertHandle(li[i]);
        }
      }
      //}}}
      function moveto(x, y) //{{{
      {
        if (!options.shade) {
          $img2.css({
            top: px(-y),
            left: px(-x)
          });
        }
        $sel.css({
          top: px(y),
          left: px(x)
        });
      }
      //}}}
      function resize(w, h) //{{{
      {
        $sel.width(Math.round(w)).height(Math.round(h));
      }
      //}}}
      function refresh() //{{{
      {
        var c = Coords.getFixed();

        Coords.setPressed([c.x, c.y]);
        Coords.setCurrent([c.x2, c.y2]);

        updateVisible();
      }
      //}}}

      // Internal Methods
      function updateVisible(select) //{{{
      {
        if (awake) {
          return update(select);
        }
      }
      //}}}
      function update(select) //{{{
      {
        var c = Coords.getFixed();

        resize(c.w, c.h);
        moveto(c.x, c.y);
        if (options.shade) Shade.updateRaw(c);

        awake || show();

        if (select) {
          options.onSelect.call(api, unscale(c));
        } else {
          options.onChange.call(api, unscale(c));
        }
      }
      //}}}
      function setBgOpacity(opacity,force,now) //{{{
      {
        if (!awake && !force) return;
        if (options.bgFade && !now) {
          $img.animate({
            opacity: opacity
          },{
            queue: false,
            duration: options.fadeTime
          });
        } else {
          $img.css('opacity', opacity);
        }
      }
      //}}}
      function show() //{{{
      {
        $sel.show();

        if (options.shade) Shade.opacity(bgopacity);
          else setBgOpacity(bgopacity,true);

        awake = true;
      }
      //}}}
      function release() //{{{
      {
        disableHandles();
        $sel.hide();

        if (options.shade) Shade.opacity(1);
          else setBgOpacity(1);

        awake = false;
        options.onRelease.call(api);
      }
      //}}}
      function showHandles() //{{{
      {
        if (seehandles) {
          $hdl_holder.show();
        }
      }
      //}}}
      function enableHandles() //{{{
      {
        seehandles = true;
        if (options.allowResize) {
          $hdl_holder.show();
          return true;
        }
      }
      //}}}
      function disableHandles() //{{{
      {
        seehandles = false;
        $hdl_holder.hide();
      } 
      //}}}
      function animMode(v) //{{{
      {
        if (v) {
          animating = true;
          disableHandles();
        } else {
          animating = false;
          enableHandles();
        }
      } 
      //}}}
      function done() //{{{
      {
        animMode(false);
        refresh();
      } 
      //}}}
      // Insert draggable elements {{{
      // Insert border divs for outline

      if (options.dragEdges && $.isArray(options.createDragbars))
        createDragbars(options.createDragbars);

      if ($.isArray(options.createHandles))
        createHandles(options.createHandles);

      if (options.drawBorders && $.isArray(options.createBorders))
        createBorders(options.createBorders);

      //}}}

      // This is a hack for iOS5 to support drag/move touch functionality
      $(document).bind('touchstart.jcrop-ios',function(e) {
        if ($(e.currentTarget).hasClass('jcrop-tracker')) e.stopPropagation();
      });

      var $track = newTracker().mousedown(createDragger('move')).css({
        cursor: 'move',
        position: 'absolute',
        zIndex: 360
      });

      if (Touch.support) {
        $track.bind('touchstart.jcrop', Touch.createDragger('move'));
      }

      $img_holder.append($track);
      disableHandles();

      return {
        updateVisible: updateVisible,
        update: update,
        release: release,
        refresh: refresh,
        isAwake: function () {
          return awake;
        },
        setCursor: function (cursor) {
          $track.css('cursor', cursor);
        },
        enableHandles: enableHandles,
        enableOnly: function () {
          seehandles = true;
        },
        showHandles: showHandles,
        disableHandles: disableHandles,
        animMode: animMode,
        setBgOpacity: setBgOpacity,
        done: done
      };
    }());
    
    //}}}
    // Tracker Module {{{
    var Tracker = (function () {
      var onMove = function () {},
          onDone = function () {},
          trackDoc = options.trackDocument;

      function toFront(touch) //{{{
      {
        $trk.css({
          zIndex: 450
        });

        if (touch)
          $(document)
            .bind('touchmove.jcrop', trackTouchMove)
            .bind('touchend.jcrop', trackTouchEnd);

        else if (trackDoc)
          $(document)
            .bind('mousemove.jcrop',trackMove)
            .bind('mouseup.jcrop',trackUp);
      } 
      //}}}
      function toBack() //{{{
      {
        $trk.css({
          zIndex: 290
        });
        $(document).unbind('.jcrop');
      } 
      //}}}
      function trackMove(e) //{{{
      {
        onMove(mouseAbs(e));
        return false;
      } 
      //}}}
      function trackUp(e) //{{{
      {
        e.preventDefault();
        e.stopPropagation();

        if (btndown) {
          btndown = false;

          onDone(mouseAbs(e));

          if (Selection.isAwake()) {
            options.onSelect.call(api, unscale(Coords.getFixed()));
          }

          toBack();
          onMove = function () {};
          onDone = function () {};
        }

        return false;
      }
      //}}}
      function activateHandlers(move, done, touch) //{{{
      {
        btndown = true;
        onMove = move;
        onDone = done;
        toFront(touch);
        return false;
      }
      //}}}
      function trackTouchMove(e) //{{{
      {
        onMove(mouseAbs(Touch.cfilter(e)));
        return false;
      }
      //}}}
      function trackTouchEnd(e) //{{{
      {
        return trackUp(Touch.cfilter(e));
      }
      //}}}
      function setCursor(t) //{{{
      {
        $trk.css('cursor', t);
      }
      //}}}

      if (!trackDoc) {
        $trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);
      }

      $img.before($trk);
      return {
        activateHandlers: activateHandlers,
        setCursor: setCursor
      };
    }());
    //}}}
    // KeyManager Module {{{
    var KeyManager = (function () {
      var $keymgr = $('<input type="radio" />').css({
        position: 'fixed',
        left: '-120px',
        width: '12px'
      }).addClass('jcrop-keymgr'),

        $keywrap = $('<div />').css({
          position: 'absolute',
          overflow: 'hidden'
        }).append($keymgr);

      function watchKeys() //{{{
      {
        if (options.keySupport) {
          $keymgr.show();
          $keymgr.focus();
        }
      }
      //}}}
      function onBlur(e) //{{{
      {
        $keymgr.hide();
      }
      //}}}
      function doNudge(e, x, y) //{{{
      {
        if (options.allowMove) {
          Coords.moveOffset([x, y]);
          Selection.updateVisible(true);
        }
        e.preventDefault();
        e.stopPropagation();
      }
      //}}}
      function parseKey(e) //{{{
      {
        if (e.ctrlKey || e.metaKey) {
          return true;
        }
        shift_down = e.shiftKey ? true : false;
        var nudge = shift_down ? 10 : 1;

        switch (e.keyCode) {
        case 37:
          doNudge(e, -nudge, 0);
          break;
        case 39:
          doNudge(e, nudge, 0);
          break;
        case 38:
          doNudge(e, 0, -nudge);
          break;
        case 40:
          doNudge(e, 0, nudge);
          break;
        case 27:
          if (options.allowSelect) Selection.release();
          break;
        case 9:
          return true;
        }

        return false;
      }
      //}}}

      if (options.keySupport) {
        $keymgr.keydown(parseKey).blur(onBlur);
        if (ie6mode || !options.fixedSupport) {
          $keymgr.css({
            position: 'absolute',
            left: '-20px'
          });
          $keywrap.append($keymgr).insertBefore($img);
        } else {
          $keymgr.insertBefore($img);
        }
      }


      return {
        watchKeys: watchKeys
      };
    }());
    //}}}
    // }}}
    // API methods {{{
    function setClass(cname) //{{{
    {
      $div.removeClass().addClass(cssClass('holder')).addClass(cname);
    }
    //}}}
    function animateTo(a, callback) //{{{
    {
      var x1 = a[0] / xscale,
          y1 = a[1] / yscale,
          x2 = a[2] / xscale,
          y2 = a[3] / yscale;

      if (animating) {
        return;
      }

      var animto = Coords.flipCoords(x1, y1, x2, y2),
          c = Coords.getFixed(),
          initcr = [c.x, c.y, c.x2, c.y2],
          animat = initcr,
          interv = options.animationDelay,
          ix1 = animto[0] - initcr[0],
          iy1 = animto[1] - initcr[1],
          ix2 = animto[2] - initcr[2],
          iy2 = animto[3] - initcr[3],
          pcent = 0,
          velocity = options.swingSpeed;

      x1 = animat[0];
      y1 = animat[1];
      x2 = animat[2];
      y2 = animat[3];

      Selection.animMode(true);
      var anim_timer;

      function queueAnimator() {
        window.setTimeout(animator, interv);
      }
      var animator = (function () {
        return function () {
          pcent += (100 - pcent) / velocity;

          animat[0] = Math.round(x1 + ((pcent / 100) * ix1));
          animat[1] = Math.round(y1 + ((pcent / 100) * iy1));
          animat[2] = Math.round(x2 + ((pcent / 100) * ix2));
          animat[3] = Math.round(y2 + ((pcent / 100) * iy2));

          if (pcent >= 99.8) {
            pcent = 100;
          }
          if (pcent < 100) {
            setSelectRaw(animat);
            queueAnimator();
          } else {
            Selection.done();
            Selection.animMode(false);
            if (typeof(callback) === 'function') {
              callback.call(api);
            }
          }
        };
      }());
      queueAnimator();
    }
    //}}}
    function setSelect(rect) //{{{
    {
      setSelectRaw([rect[0] / xscale, rect[1] / yscale, rect[2] / xscale, rect[3] / yscale]);
      options.onSelect.call(api, unscale(Coords.getFixed()));
      Selection.enableHandles();
    }
    //}}}
    function setSelectRaw(l) //{{{
    {
      Coords.setPressed([l[0], l[1]]);
      Coords.setCurrent([l[2], l[3]]);
      Selection.update();
    }
    //}}}
    function tellSelect() //{{{
    {
      return unscale(Coords.getFixed());
    }
    //}}}
    function tellScaled() //{{{
    {
      return Coords.getFixed();
    }
    //}}}
    function setOptionsNew(opt) //{{{
    {
      setOptions(opt);
      interfaceUpdate();
    }
    //}}}
    function disableCrop() //{{{
    {
      options.disabled = true;
      Selection.disableHandles();
      Selection.setCursor('default');
      Tracker.setCursor('default');
    }
    //}}}
    function enableCrop() //{{{
    {
      options.disabled = false;
      interfaceUpdate();
    }
    //}}}
    function cancelCrop() //{{{
    {
      Selection.done();
      Tracker.activateHandlers(null, null);
    }
    //}}}
    function destroy() //{{{
    {
      $div.remove();
      $origimg.show();
      $origimg.css('visibility','visible');
      $(obj).removeData('Jcrop');
    }
    //}}}
    function setImage(src, callback) //{{{
    {
      Selection.release();
      disableCrop();
      var img = new Image();
      img.onload = function () {
        var iw = img.width;
        var ih = img.height;
        var bw = options.boxWidth;
        var bh = options.boxHeight;
        $img.width(iw).height(ih);
        $img.attr('src', src);
        $img2.attr('src', src);
        presize($img, bw, bh);
        boundx = $img.width();
        boundy = $img.height();
        $img2.width(boundx).height(boundy);
        $trk.width(boundx + (bound * 2)).height(boundy + (bound * 2));
        $div.width(boundx).height(boundy);
        Shade.resize(boundx,boundy);
        enableCrop();

        if (typeof(callback) === 'function') {
          callback.call(api);
        }
      };
      img.src = src;
    }
    //}}}
    function colorChangeMacro($obj,color,now) {
      var mycolor = color || options.bgColor;
      if (options.bgFade && supportsColorFade() && options.fadeTime && !now) {
        $obj.animate({
          backgroundColor: mycolor
        }, {
          queue: false,
          duration: options.fadeTime
        });
      } else {
        $obj.css('backgroundColor', mycolor);
      }
    }
    function interfaceUpdate(alt) //{{{
    // This method tweaks the interface based on options object.
    // Called when options are changed and at end of initialization.
    {
      if (options.allowResize) {
        if (alt) {
          Selection.enableOnly();
        } else {
          Selection.enableHandles();
        }
      } else {
        Selection.disableHandles();
      }

      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
      Selection.setCursor(options.allowMove ? 'move' : 'default');

      if (options.hasOwnProperty('trueSize')) {
        xscale = options.trueSize[0] / boundx;
        yscale = options.trueSize[1] / boundy;
      }

      if (options.hasOwnProperty('setSelect')) {
        setSelect(options.setSelect);
        Selection.done();
        delete(options.setSelect);
      }

      Shade.refresh();

      if (options.bgColor != bgcolor) {
        colorChangeMacro(
          options.shade? Shade.getShades(): $div,
          options.shade?
            (options.shadeColor || options.bgColor):
            options.bgColor
        );
        bgcolor = options.bgColor;
      }

      if (bgopacity != options.bgOpacity) {
        bgopacity = options.bgOpacity;
        if (options.shade) Shade.refresh();
          else Selection.setBgOpacity(bgopacity);
      }

      xlimit = options.maxSize[0] || 0;
      ylimit = options.maxSize[1] || 0;
      xmin = options.minSize[0] || 0;
      ymin = options.minSize[1] || 0;

      if (options.hasOwnProperty('outerImage')) {
        $img.attr('src', options.outerImage);
        delete(options.outerImage);
      }

      Selection.refresh();
    }
    //}}}
    //}}}

    if (Touch.support) $trk.bind('touchstart.jcrop', Touch.newSelection);

    $hdl_holder.hide();
    interfaceUpdate(true);

    var api = {
      setImage: setImage,
      animateTo: animateTo,
      setSelect: setSelect,
      setOptions: setOptionsNew,
      tellSelect: tellSelect,
      tellScaled: tellScaled,
      setClass: setClass,

      disable: disableCrop,
      enable: enableCrop,
      cancel: cancelCrop,
      release: Selection.release,
      destroy: destroy,

      focus: KeyManager.watchKeys,

      getBounds: function () {
        return [boundx * xscale, boundy * yscale];
      },
      getWidgetSize: function () {
        return [boundx, boundy];
      },
      getScaleFactor: function () {
        return [xscale, yscale];
      },
      getOptions: function() {
        // careful: internal values are returned
        return options;
      },

      ui: {
        holder: $div,
        selection: $sel
      }
    };

    if (is_msie) $div.bind('selectstart', function () { return false; });

    $origimg.data('Jcrop', api);
    return api;
  };
  $.fn.Jcrop = function (options, callback) //{{{
  {
    var api;
    // Iterate over each object, attach Jcrop
    this.each(function () {
      // If we've already attached to this object
      if ($(this).data('Jcrop')) {
        // The API can be requested this way (undocumented)
        if (options === 'api') return $(this).data('Jcrop');
        // Otherwise, we just reset the options...
        else $(this).data('Jcrop').setOptions(options);
      }
      // If we haven't been attached, preload and attach
      else {
        if (this.tagName == 'IMG')
          $.Jcrop.Loader(this,function(){
            $(this).css({display:'block',visibility:'hidden'});
            api = $.Jcrop(this, options);
            if ($.isFunction(callback)) callback.call(api);
          });
        else {
          $(this).css({display:'block',visibility:'hidden'});
          api = $.Jcrop(this, options);
          if ($.isFunction(callback)) callback.call(api);
        }
      }
    });

    // Return "this" so the object is chainable (jQuery-style)
    return this;
  };
  //}}}
  // $.Jcrop.Loader - basic image loader {{{

  $.Jcrop.Loader = function(imgobj,success,error){
    var $img = $(imgobj), img = $img[0];

    function completeCheck(){
      if (img.complete) {
        $img.unbind('.jcloader');
        if ($.isFunction(success)) success.call(img);
      }
      else window.setTimeout(completeCheck,50);
    }

    $img
      .bind('load.jcloader',completeCheck)
      .bind('error.jcloader',function(e){
        $img.unbind('.jcloader');
        if ($.isFunction(error)) error.call(img);
      });

    if (img.complete && $.isFunction(success)){
      $img.unbind('.jcloader');
      success.call(img);
    }
  };

  //}}}
  // Global Defaults {{{
  $.Jcrop.defaults = {

    // Basic Settings
    allowSelect: true,
    allowMove: true,
    allowResize: true,

    trackDocument: true,

    // Styling Options
    baseClass: 'jcrop',
    addClass: null,
    bgColor: 'black',
    bgOpacity: 0.6,
    bgFade: false,
    borderOpacity: 0.4,
    handleOpacity: 0.5,
    handleSize: null,

    aspectRatio: 0,
    keySupport: true,
    createHandles: ['n','s','e','w','nw','ne','se','sw'],
    createDragbars: ['n','s','e','w'],
    createBorders: ['n','s','e','w'],
    drawBorders: true,
    dragEdges: true,
    fixedSupport: true,
    touchSupport: null,

    shade: null,

    boxWidth: 0,
    boxHeight: 0,
    boundary: 2,
    fadeTime: 400,
    animationDelay: 20,
    swingSpeed: 3,

    minSelect: [0, 0],
    maxSize: [0, 0],
    minSize: [0, 0],

    // Callbacks / Event Handlers
    onChange: function () {},
    onSelect: function () {},
    onDblClick: function () {},
    onRelease: function () {}
  };

  // }}}
}(jQuery));

define("jcrop", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.jcrop;
    };
}(this)));

/*!
 * jQuery Color Animations v2.0pre
 * http://jquery.org/
 *
 * Copyright 2011 John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

(function( jQuery, undefined ){
	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color outlineColor".split(" "),

		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [{
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						2.55 * execResult[1],
						2.55 * execResult[2],
						2.55 * execResult[3],
						execResult[ 4 ]
					];
				}
			}, {
				re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[1],
						execResult[2] / 100,
						execResult[3] / 100,
						execResult[4]
					];
				}
			}],

		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				cache: "_rgba",
				props: {
					red: {
						idx: 0,
						type: "byte",
						empty: true
					},
					green: {
						idx: 1,
						type: "byte",
						empty: true
					},
					blue: {
						idx: 2,
						type: "byte",
						empty: true
					},
					alpha: {
						idx: 3,
						type: "percent",
						def: 1
					}
				}
			},
			hsla: {
				cache: "_hsla",
				props: {
					hue: {
						idx: 0,
						type: "degrees",
						empty: true
					},
					saturation: {
						idx: 1,
						type: "percent",
						empty: true
					},
					lightness: {
						idx: 2,
						type: "percent",
						empty: true
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				min: 0,
				max: 255
			},
			"percent": {
				min: 0,
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		rgbaspace = spaces.rgba.props,
		support = color.support = {},

		// colors = jQuery.Color.names
		colors,

		// local aliases of functions called often
		each = jQuery.each;

	spaces.hsla.props.alpha = rgbaspace.alpha;

	function clamp( value, prop, alwaysAllowEmpty ) {
		var type = propTypes[ prop.type ] || {},
			allowEmpty = prop.empty || alwaysAllowEmpty;

		if ( allowEmpty && value == null ) {
			return null;
		}
		if ( prop.def && value == null ) {
			return prop.def;
		}
		if ( type.floor ) {
			value = ~~value;
		} else {
			value = parseFloat( value );
		}
		if ( value == null || isNaN( value ) ) {
			return prop.def;
		}
		if ( type.mod ) {
			value = value % type.mod;
			// -10 -> 350
			return value < 0 ? type.mod + value : value;
		}

		// for now all property types without mod have min and max
		return type.min > value ? type.min : type.max < value ? type.max : value;
	}

	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];

		string = string.toLowerCase();

		each( stringParsers, function( i, parser ) {
			var match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				parsed,
				spaceName = parser.space || "rgba",
				cache = spaces[ spaceName ].cache;


			if ( values ) {
				parsed = inst[ spaceName ]( values );

				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ cache ] = parsed[ cache ];
				rgba = inst._rgba = parsed._rgba;

				// exit each( stringParsers ) here because we matched
				return false;
			}
		});

		// Found a stringParser that handled it
		if ( rgba.length !== 0 ) {

			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( Math.max.apply( Math, rgba ) === 0 ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}

		// named colors / default - filter back through parse function
		if ( string = colors[ string ] ) {
			return string;
		}
	}

	color.fn = color.prototype = {
		constructor: color,
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red instanceof jQuery || red.nodeType ) {
				red = red instanceof jQuery ? red.css( green ) : jQuery( red ).css( green );
				green = undefined;
			}

			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [],
				source;

			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}

			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}

			if ( type === "array" ) {
				each( rgbaspace, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}

			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						each( space.props, function( key, prop ) {
							var cache = space.cache;

							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {

								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( red[ key ] == null || key === "alpha") {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}

							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				myself = this;

			each( spaces, function( _, space ) {
				var isCache = is[ space.cache ],
					localCache;
				if (isCache) {
					localCache = myself[ space.cache ] || space.to && space.to( myself._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				start = this[ space.cache ] || space.to( this._rgba ),
				result = start.slice();

			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};

				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ prop.idx ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}

			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;

			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});

			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}

			return prefix + rgba.join(",") + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}

					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});

			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join(",") + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();

			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}

			return "#" + jQuery.map( rgba, function( v, i ) {

				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	};
	color.fn.parse.prototype = color.fn;

	// hsla conversions adapted from:
	// http://www.google.com/codesearch/p#OAMlx_jo-ck/src/third_party/WebKit/Source/WebCore/inspector/front-end/Color.js&d=7&l=193

	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + (q - p) * 6 * h;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + (q - p) * ((2/3) - h) * 6;
		}
		return p;
	}

	spaces.hsla.to = function ( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;

		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}

		if ( l === 0 || l === 1 ) {
			s = l;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};

	spaces.hsla.from = function ( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q,
			r, g, b;

		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};


	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;

		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {

			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}

			var type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice(),
				ret;

			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});

			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};

		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === 'alpha' ? ( this._hsla ? 'hsla' : 'rgba' ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;

				if ( vtype === "undefined" ) {
					return cur;
				}

				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});

	// add .fx.step functions
	each( stepHooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, backgroundColor, curElem;

				if ( jQuery.type( value ) !== 'string' || ( parsed = stringParse( value ) ) )
				{
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						do {
							backgroundColor = jQuery.curCSS( curElem, "backgroundColor" );
						} while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							( curElem = curElem.parentNode ) &&
							curElem.style
						);

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				elem.style[ hook ] = value;
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	});

	// detect rgba support
	jQuery(function() {
		var div = document.createElement( "div" ),
			div_style = div.style;

		div_style.cssText = "background-color:rgba(1,1,1,.5)";
		support.rgba = div_style.backgroundColor.indexOf( "rgba" ) > -1;
	});

	// Some named colors to work with
	// From Interface by Stefan Petre
	// http://interface.eyecon.ro/
	colors = jQuery.Color.names = {
		aqua: "#00ffff",
		azure: "#f0ffff",
		beige: "#f5f5dc",
		black: "#000000",
		blue: "#0000ff",
		brown: "#a52a2a",
		cyan: "#00ffff",
		darkblue: "#00008b",
		darkcyan: "#008b8b",
		darkgrey: "#a9a9a9",
		darkgreen: "#006400",
		darkkhaki: "#bdb76b",
		darkmagenta: "#8b008b",
		darkolivegreen: "#556b2f",
		darkorange: "#ff8c00",
		darkorchid: "#9932cc",
		darkred: "#8b0000",
		darksalmon: "#e9967a",
		darkviolet: "#9400d3",
		fuchsia: "#ff00ff",
		gold: "#ffd700",
		green: "#008000",
		indigo: "#4b0082",
		khaki: "#f0e68c",
		lightblue: "#add8e6",
		lightcyan: "#e0ffff",
		lightgreen: "#90ee90",
		lightgrey: "#d3d3d3",
		lightpink: "#ffb6c1",
		lightyellow: "#ffffe0",
		lime: "#00ff00",
		magenta: "#ff00ff",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		orange: "#ffa500",
		pink: "#ffc0cb",
		purple: "#800080",
		violet: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		white: "#ffffff",
		yellow: "#ffff00",
		transparent: [ null, null, null, 0 ],
		_default: "#ffffff"
	};
})( jQuery );

define("jcolor", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.jcolor;
    };
}(this)));

define('user/view/edit-user-photo',[
    'text!user/tpl/edit-user-photo.html',
    'user/view/select-crop-image',
    'jcrop',
    'jcolor',
], function() {

    var text = require('text!user/tpl/edit-user-photo.html'),
        SelectCropImageView = require('user/view/select-crop-image');

    return Backbone.View.extend({
        initialize: function() {
            this.coordinates = '';
            this.sImgSrc = '';
            this.cropView = new SelectCropImageView();
        },
        events: {
            'click #save-photo': 'savePhoto'
        },
        template: _.template(text),
        region: {
            main: '#main',
        },
        render: function(context) {

            this.context = $.extend({
                imageURI: ''
            }, context);

            this.$holder = $(this.region.main);

            this.$el.html(this.template());

            this.$scroller = this.$el.find('#content');

            this.$postBtn = this.$el.find('#save-photo');

            return this;
        },

        inject: function() {

            this.$holder.html(this.$el);

            this.$el.find('#edit-avatar').html(this.cropView.render(this.context).el);

            return this;
        },

        savePhoto: function() {
            var params = {
                iUserId: this.model.getId()
            },
                cropData = this.cropView.getData();

            if (cropData.coordinates !== '') {
                params.sCoordinates = cropData.sCoordinates;
                params.iWidth = cropData.iWidth;
                params.iHeight = cropData.iHeight;
            }

            function done(data) {
                if (data.error_code > 0) {
                    utils.modal.alert(data.error_message || 'Post URL failed!');
                    return false;
                } else {
                    utils.modal.toast('Edit sucessfully');
                    utils.observer.trigger('user:update');
                    utils.history.back();
                }

            };

            function fail(result) {
                // utils.modal.alert('Cannot upload photo');
            };

            utils.api.uploadImage('user/edit_avatar', cropData.sImgSrc, params).done(done).fail(fail);
        }
    });
});
define('user/controller/user-edit-photo',[
    'user/model/user',
    'user/view/edit-user-photo'
], function(UserModel, EditView) {

    function editController(id, imageuri) {

        // utils.history.push();

        utils.observer.trigger('router:changed');

        new EditView({
            model: new UserModel({
                iUserId: id
            })
        }).render({
            imageURI: atob(imageuri)
        }).inject();
    }

    utils.router.route('user-edit-photo/:id/:imageuri', editController);

});

define('text!user/tpl/edit-user-cover.html',[],function () { return '<!-- user/tpl/about -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n\t\t<div class="btn-top" id="save-photo">\n\t\t\t<%= _t(\'save\') %>\t\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n            <%= _t(\'edit_cover\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="content" class="content with-header ">\n    <div id="edit-avatar">\n        <div id="img_container">\n        \t<img id="profile_photo" class="photo-cropping" src="<%=context.imageURI%>" />\n        </div>\n    </div>\n</div>\n\n\n\n';});

define('user/view/edit-user-cover',[
    'text!user/tpl/edit-user-cover.html',
], function() {

    var text = require('text!user/tpl/edit-user-cover.html');

    return Backbone.View.extend({
        initialize: function() {},
        events: {
            'click #save-photo': 'savePhoto'
        },
        template: _.template(text),
        region: {
            main: '#main',
        },
        render: function(context) {

            this.context = $.extend({
                imageURI: ''
            }, context);

            this.$holder = $(this.region.main);

            this.$el.html(this.template({
                context: this.context
            }));

            this.$scroller = this.$el.find('#content');

            this.$postBtn = this.$el.find('#save-photo');

            this.$img_container = this.$el.find('#img_container');

            return this;
        },

        inject: function() {

            this.$holder.html(this.$el);

            return this;
        },

        savePhoto: function() {

            var params = {
                iUserId: this.model.getId()
            };

            function done(result) {
                utils.modal.toast('Edit sucessfully');
                utils.history.back();
            };

            function fail(result) {
                utils.modal.alert(JSON.stringify(result));
                // utils.modal.alert('Cannot upload photo');
            };

            utils.api.uploadImage('user/edit_cover', this.context.imageURI, params).done(done).fail(fail);
        }
    });
});
define('user/controller/user-edit-cover',[
    'user/model/user',
    'user/view/edit-user-cover'
], function(UserModel, EditView) {

    function editController(id, imageuri) {

        // utils.history.push();

        utils.observer.trigger('router:changed');

        new EditView({
            model: new UserModel({
                iUserId: id
            })
        }).render({
            imageURI: atob(imageuri)
        }).inject();
    }

    utils.router.route('user-edit-cover/:id/:imageuri', editController);
});

define('text!user/tpl/user-forgot-password.html',[],function () { return '<!-- user/tpl/signup/forgot-password.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(\'forgot_password\') %></div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="btn-send-email">\n            <%= _t(\'send\') %>\n\t\t</div>\n\t</div>\n</div>\n<div class="content with-header forgot-password swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="form-general">\n                <div class="form-title">\n                    <%= _t(\'an_email_with_instruction_will_be_sent_to_your_email_below_to_reset_password\') %>\n                </div>\n                <div class="form-group ">\n                    <input placeholder="<%= _t(\'your_email\') %>" type="email" name="email" id="email_to_reset_password"  value="" class="control-full text"  />\n                </div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('user/view/user-forgot-password',[
	'text!user/tpl/user-forgot-password.html'
],function(text){

	return Backbone.View.extend({
		region: {
			wrapper: '#main',
			scroller: '#content'
		},
        events: {
            'click #btn-send-email': 'sendEmail'
        },
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({}));
			
			this.$scroller = this.$el.find(this.region.scroller);
			
			return this;
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);

			this.$scroller.ensureVerticalScroll();
			
            this.$email = this.$el.find('#email_to_reset_password');

            this.$email.focus();
            
            this.$postBtn = this.$el.find('#btn-send-email');
			
			return this;
		},

        sendEmail: function(e) {
            if(!this.isValidate() || this.$postBtn.isProcessing()) {
                return ;
            }

            var data = {
                sEmail: this.$email.val()
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('user/forgot', data, settings).done(this.postDone).always(this.postComplete);

        },

        isValidate: function() {
            if(this.$email.val().trim() == '') {
            	var msg = 'Please enter your email';
				utils.modal.alert(msg);
				return false;
            }

            if(!utils.validator.isEmail(this.$email.val())) {
            	var msg = 'Please enter a valid email';
            	
            	utils.modal.alert(msg);
                return false;
            }

            return true;

        },
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.isProcessing(false);
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.isProcessing(true);
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
        	var msg  =  _t('You have been sent an email with instructions how to reset your password. If the email does not arrive within several minutes, be sure to check your spam or junk mail folders.');
            utils.modal.alert(msg);
			utils.history.back();
        },
	});
});

define('user/controller/user-forgot-password',[
	'utils',
	'user/view/user-forgot-password'
],function(utils, View){
	
	function ForgotPasswordController(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new View().render().inject();
	}
	
	utils.router.route('forgot-password', ForgotPasswordController);
});

define('user/main',[
	// plugin
	'user/plugin/connect',
	'user/plugin/activity',
	'user/plugin/block-this',
	// controller
	'user/controller/user-detail',
	'user/controller/user-login',
	'user/controller/user-logout',
	'user/controller/user-signup',
    'user/controller/user-about',
	'user/controller/user-edit',
	'user/controller/user-edit-photo',
	'user/controller/user-edit-cover',
	'user/controller/user-forgot-password',
],function(){
	
	
});

define('user', ['user/main'], function (main) { return main; });


define('text!activity/tpl/attachment-checkin.html',[],function () { return '<div class="att-item-image" style="background-image: url(<%= imgSrc %>);">\n    <div class="close_button"><a href="javascript:void(0);" id="remove_att"></a></div>\n    <!-- Remove style later -->\n\t<div class="att-item-marker">\n\t\t<div class="att-item-title"><%= checkin.sTitle %></div>\n\t</div>\n</div>\n';});

define('activity/view/attachment-checkin',[
	'text!activity/tpl/attachment-checkin.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'attachment-checkin',
		template: _.template(text),
		render: function(){
			var feed = this.model;
			var checkin = feed.getAttachments()[0];
			var width  = $('.item-attachment').width();
			
			if(constants.isTablet){
				width = width - 32;
			}
			//var height = screen.height * 0.25;
			// fix height because issue of swiper need to caculate height of view port
			var height = 160;
			
			
			var imgSrc = 'http://maps.googleapis.com/maps/api/staticmap?center=' + checkin.fLatitude + ',' + checkin.fLongitude +
                '&zoom=15&size=' +width +'x'+height +
                '&maptype=roadmap&markers=color:red%7C' + checkin.fLatitude + ',' + checkin.fLongitude + '&sensor=false';
			
			this.$el.html(this.template({feed:feed,checkin: checkin, imgSrc: imgSrc, width: width, height: height }));	
			
			return this;	
		},
		inject: function(dom){
			dom.html(this.$el);
			return this;
		}
	});
});

define('activity/plugin/activity',[
	'activity/view/attachment-checkin'
],function(AttachmentCheckinView){
	
	utils.attachment.add(['ynmobile_map'],AttachmentCheckinView);

	utils.headline.add(['ynmobile_checkin'], function(item){
        if(item.hasAttachment()) {
            return _t('has checked in - at ') + '<span class="feed-location-name">' + item.getAttachments()[0].sLocationName + '</span>';
        } else {
            return '';
        }
	});
	
});


define('text!activity/tpl/newsfeed.html',[],function () { return '<!-- activity/tpl/newsfeed.html -->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n\t<%= utils.helper.chat_header_btn() %>\n</div>\n<!-- swiper -->\n<div id="activity_minibar_holder" class="clearfix">\n\t\n</div>\n<div id="newstory_view_holder" class="hide">\n\t<!-- new story view -->\n</div>\n<div class="content content-background with-topbar swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<%= utils.helper.loadnew() %>\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical" id="activity-list"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!activity/tpl/activity-newstory.html',[],function () { return '<div class="new-stage">\n\t<i class="icon-arrow-up"></i>\n\t<span>\n\t\t<% if(number < 2){ %>\n\t\t<%= number %> <%= _t(\'ခု ၾကည့္ရႈရန္\') %>\n\t\t<% } else {%>\n\t\t<%= number %> <%= _t(\'ခု ၾကည့္ရႈရန္\') %>\n\t\t<% } %>\n\t</span>\t\n</div>';});

define('activity/view/activity-newstory',[
	'text!activity/tpl/activity-newstory.html'
],function(text){
	
	return Backbone.View.extend({
		template: _.template(text),
		className: 'activity-new-story',
		api: 'feed/getupdate',
		defaults: {
			iMinId: 0
		},
		query: {},
		interval: 60, // second of interval timeout
		intervalProcessId: 0,
		initialize: function(attrs, $holder, $scroller){
			this.$scroller  = $scroller;
			this.$holder = $holder;
			this.$ajax = false;
			
			var self = this;
			
			this.$scroller
			.on('loadnew:load',function(){
				self.hide();
				self.$scroller.scrollTop(1)	;
			})
			.on('query:changed',function(evt, query){
				if(query.iMinId && query.iMinId +1 != self.query.iMinId){
					self.resetQuery({iMinId: query.iMinId +1 });
				}
			});
		},
		render: function(){
			this.$el.html(this.template({number: 4}));
			return this;
		},
		inject: function(){
			this.$holder.html(this.$el);
			return this;
		},
		hide: function(){
			this.$holder.addClass('hide');
		},
		show: function(){
			this.$holder.removeClass('hide');
		},
		updateView: function(number){
			
			this.$el.html(this.template({number: number}));			

			if(number > 0){
				this.$holder.removeClass('hide');
			}else {
				this.$hodler.addClass('hide');
			}
		},
		events: {
			'click': 'onStickerClick'
		},
		onStickerClick: function(){
			this.$scroller.trigger('loadnew:start').trigger('loadnew:load');
		},
		fetchData: function(){
			if( ! /#newsfeed/.test(utils.history.getCurrentUrl())) return ;
			try{
				this.$ajax && this.$ajax.abort(); // cancel request before.
				if(this.intervalProcessId){
					window.clearTimeout(this.intervalProcessId);
				}
				this.intervalProcessId = 0;	
			}catch(e){
				
			}
			
			this.$ajax = utils.api.get(this.api, this.query, {context: this})
			.done(this.fetchDone)
			.always(this.fetchAlways);
			
		},
		fetchDone: function(data){
			if(data.error_code && data.error_code > 0) return ; // cancel process
			if(data.iTotalFeedUpdate){
				this.updateView(data.iTotalFeedUpdate);
			}
 		},
		fetchAlways: function(){
			
			this.$ajax  = false;
			var self = this;
			
			this.intervalProcessId  =  window.setTimeout(function(){
				self.fetchData();
			}, this.interval * 1e3);
			
		},
		resetQuery: function(query){
			var self = this;
			try{
				this.$ajax && this.$ajax.abort(); // cancel request before.
				if(this.intervalProcessId){
					window.clearTimeout(this.intervalProcessId);
				}
				this.intervalProcessId = 0;	
			}catch(e){
				
			}

			this.query  = $.extend({}, this.defaults, query);
			
			// register to update later.			
			this.intervalProcessId  =  window.setTimeout(function(){
				self.fetchData();
			}, this.interval * 1e3);
		},
	});
});

define('activity/view/newsfeed',[
	'text!activity/tpl/newsfeed.html',
	'activity/view/activity-list',
	'activity/view/activity-minibar',
	'activity/view/activity-newstory'
],function(text, ListView, MiniBarView){
	
	var NewStoryView  = require('activity/view/activity-newstory');
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
		},
		className: 'newsfeed-page',
		template : _.template(text),
		render : function(context) {
			
			this.context = $.extend({}, context);
			
			this.$el.html(this.template(context));
			
			this.$scroller = this.$el.find('#content');
			
			return this;
		},
		inject: function(){
			
			$(this.region.holder).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
						
			var $elCheckNew =  this.$el.find('#newsfeed_new_story_stage');
			
			this.listView  = new ListView({},this.$el.find('#activity-list'), this.$scroller, {
				loadmore: true,
				loadnew: true,
				checknew: true,
				$elCheckNewStory: $elCheckNew
			}).render().inject();
			
			this.miniBarView = new MiniBarView().render().inject();
			
			this.newStoryView = new NewStoryView({}, 
				this.$el.find('#newstory_view_holder'),
			 	this.$scroller
			 ).render().inject();

			
			return this;
		},
		events: {
			'click #newsfeed_new_story_stage': 'loadNew'
		},
		loadNew: function(evt){
			this.$el.find('#newsfeed_new_story_stage').addClass('hide');
			this.$el.find('#content').trigger('loadnew:start').trigger('loadnew:load');
		}
	});
});
define('activity/controller/newsfeed',[
	'activity/view/newsfeed'
],function(IndexView)
	{
		function Controller()
		{
			utils.history.push(true);
			
			utils.observer.trigger('router:changed');

			new IndexView().render({
				
			}).inject();
		}

		utils.router.route('newsfeed', Controller);
});


define('text!activity/tpl/activity-detail.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" >\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<!-- swiper -->\n<div class="content content-activity-detail content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical">\n\t\t\t\t<div class="pvs"></div>\n\t\t\t\t<div id="activity_detail_view_holder" class="clearfix activity-item">\n\t                <div class="loading-initiator">\n\t                    <!-- Loading ... -->\n\t                </div>\n\t            </div>\n\t\t\t</div>\n            <div id="activity_extra_holder" class="hide">\n                <!-- activity detail -->\n            </div>\n\t\t\t<%= utils.helper.loadmore() %>\t\n\t\t</div>\n\t</div> \n</div>\n';});


define('text!activity/tpl/activity-detail-update.html',[],function () { return '<div class="item-wrapper">\n\t<div class="item-image">\n\t\t<img src="<%= item.getPosterImageSrc() %>" />\n\t</div>\n\t<div class="item-setting" clickable="true" id="<%= item.getDataId(\'setting\') %>" rel="delegate">\n\t\t<i class="icon icon-setting"></i>\n\t</div>\n\t<div class="item-headline">\n\t\t<% if (item.getActionType()==\'post\' || /_comment$/.test(item.getActionType())) { %>\n\t\t\t<%= item.getHeadline() %>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-everyone gray"></span>\n\t\t<% } else { %>\n\t\t\t<%=item.getPosterLink()%>\n            <span class="feed-icon-privacy-status <%= item.getPrivacyClass() %> gray"></span>\n\t\t\t<!-- <span class="feed-icon-privacy-status icon-privacy-friends gray"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-friends-of-friends active"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-only-me"></span>\n\t\t\t<span class="feed-icon-privacy-status icon-privacy-custom gray"></span> -->\n\t\t\t<% if(item.getHeadline()) { %>\n\t\t\t\t<p><%= item.getHeadline() %></p> \n\t\t\t<% } %>\t\n\t\t<% } %>\n\t</div>\n\t<div class="item-subline">\n\t\t<i class="icon icon-time"></i>\n\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t</div>\n\t<% if(item.hasStory()){ %>\n\t<div class="clear item-story">\n\t\t<%= utils.str.shorten(item.getStory(), 200, true) %>\n\t</div>\n\t<% } %>\n\t<% if(item.hasAttachment()){ %>\n\t<div class="clear item-attachment">\n\t\t\n\t</div>\n\t<% } %>\n\t<div class="pvm"></div>\n\t<div class="actions-justify gray">\n\t\t<div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n\t\t<% if(item.canComment()){%>\n\t\t<div class="action-item js-comment-btn" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\n\t\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t<% if(item.canShare()) { %>\n\t\t<div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\n\t\t\t<i class="icon icon-activity-share"></i>\n\t\t</div>\n\t\t<%} %>\n\t</div>\n</div>\n';});


define('text!activity/tpl/activity-detail-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canDislike()) {%>\n    <div class="setting-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="setting-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\n    </div>\n    <%}%>\n\t<% if(item.canDelete()){ %>\n\t<a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n\t\t<%= _t(\'delete_this_post\') %>\n\t</a>\n\t<% } %>\n\t<% if (!item.isOwner()) { %>\n\t<a class="setting-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\n\t\t<%= _t(\'report_this_post\') %>\n\t</a>\n\t<% } %>\t\n</div>\n';});

define('dislike/model/dislike',[],function(){
	return Backbone.Model.extend({
		idAttribute: '',
		defaults: {
			sModelType: 'dislike',
            iDislikeId   : 0,
            iUserId   : 0,
            sFullName : '',
            sImage    : ''
		}
	});
});

define('dislike/collection/dislike',[
	'dislike/model/dislike'
], function (Model) {
	return Backbone.Collection.extend({
		model: Model
	});
});


define('text!dislike/tpl/dislike-detail.html',[],function () { return '<span class="you-dislike"><%= phrase0 %></span>\n<%= phrase1 %>\n<% if(hasAnd){ %>\n<%= _t(\'and\') %>\n<% } %>\n<% if (phrase2 != \'\'){ %>\n    <a id="other-dislikes"><%= phrase2 %> </a> \n<%} %>\n<%= _t(\'disliked_this\') %>\n\n';});


define('text!dislike/tpl/dislike-list-item.html',[],function () { return '<div class="dislike_item">\n    <a href="#user/<%= iUserId %>">\n        <img src="<%= sImage %>" />\n        <span><%= utils.str.shorten(sFullName, 22) %></span>\n    </a>\n</div>\n\n';});

define('dislike/view/dislike-list-item',[
    'text!dislike/tpl/dislike-list-item.html'
], function(text) { 

    return Backbone.View.extend({
        template: _.template(text),
        render: function() {
        	
            this.$el.html(this.template(this.model.toJSON()));
            
            return this;
        }
    });
});



define('text!dislike/tpl/dislike-list.html',[],function () { return '<div id="dislike-list-wrapper">\n    <div class="popup-title"><%= _t(\'people_who_disliked_this\') %></div>\n    <div id="dislike-list-content" class="swiper-container">\n        <div class="swiper-wrapper">\n            <div class="swiper-slide">\n                <div id="dislike-list-holder" class="dislike-list-holder">\n                \t<div class="loading-initiator"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n';});

define('dislike/view/dislike-list',[
    'dislike/model/dislike',
    'dislike/view/dislike-list-item',
    'text!dislike/tpl/dislike-list.html'
], function(DislikeModel, DislikeListItemView, text) { 


    return Backbone.View.extend({
        events: {},
        region: {
            scroller: '#dislike-list-content',
            holder: '#dislike-list-holder',
        },
		template : _.template(text),
        render: function() {
        	
            this.$el.html(this.template());
            
            this.$scroller = this.$el.find(this.region.scroller);
            
            this.$dislikeListHolder = this.$el.find(this.region.holder);

			this.isFirst = true;
			
            return this;
        },
        
        inject: function() { 
  		
			utils.popup.open(this.$el);
			
			if(constants.os_version < '30'){
				this.$scroller.ensureSwiper();
			}
			this.fetchData();
			
			return this;
        },

        fetchData: function() {
            var data = {
                iAmountOfDislike: 9999,
                iItemId: this.model.get('iItemId'),
                sItemType: this.model.get('sItemType'),
                sParentId: this.model.get('sParentId')
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };
            
            utils.api.post('like/dislikelistalldislike', data, settings).done(this.postDone).always(this.postComplete);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
        	
        	if(this.isFirst){
        		this.isFirst = false;
				this.$dislikeListHolder.find('.loading-initiator').remove();
        	}
        	
            _.each(data, function(dislike) {
                this.$dislikeListHolder.append(new DislikeListItemView({
                    model: new DislikeModel({ 
                        iDislikeId   : dislike.iDislikeId,
                        iUserId   : dislike.iUserId,
                        sFullName : dislike.sFullName,
                        sImage    : dislike.sImage
                    })
                }).render().el);
            }, this);
			
			if(constants.os_version < '30'){
				var that = this;
                window.setTimeout(function(){
                    that.$scroller.trigger('refresh');
                },1000);
			}
        },

    });
});


define('dislike/model/dislike-list',[
], function() { 
    return Backbone.Model.extend({
        defaults: {
            'sItemType': '',
            'iItemId': 0
        }
    });
});


define('dislike/view/dislike-detail',[
    'text!dislike/tpl/dislike-detail.html',
    'dislike/view/dislike-list',
    'dislike/model/dislike-list'
], function(text, DislikeListView, DislikeListModel) { 
    
    return Backbone.View.extend({
        template: _.template(text),
        className: 'dislike-content',
        events: {
            'click #other-dislikes': 'handleClickOnOtherDislikes',
        },
        initialize: function(attrs){
        	var self  = this;
        	this.model.on('change:bIsDisliked',function(){
        		self.doUpdateDislike();
        	});
        },
        doUpdateDislike: function(){
        	this.render().inject();
        },
        handleClickOnOtherDislikes: function() {
            new DislikeListView({
                model: new DislikeListModel({
                    iItemId: this.model.getId(),
                    sItemType: this.model.getType(),
                    sParentId: this.model.getParentModuleId()
                })
            }).render().inject();
        },

        render: function() {

            var phrase0 = 'သင္' 
              , phrase1 = ''
              , phrase2 = ''
              , iTotalDislike = this.model.getDislikeCount()
              , iRemainDislike = iTotalDislike -1
              , dislikes = this.model.dislikes
              ;
              
            if(true == this.model.isDisliked()) {
                phrase1 = '';
                phrase0 = 'သင္';
                if(iTotalDislike > 1) {
                	phrase0 = 'သင္ႏွင့္ ';
                    phrase1 = '';
                    phrase2 = (iRemainDislike > 1) ? (iRemainDislike + ' ေယာက္'): (iRemainDislike + ' ေယာက္') ;	
                }

            } else {
            	// console.log(iTotalDislike, aDislikes);
                if(iTotalDislike > 0 && dislikes.length) {

                    phrase1 = '<a href="#user/' + dislikes.at(0).get('iUserId') + '" >' + dislikes.at(0).get('sDisplayName') + '</a>';

                    if(iTotalDislike > 1) {
						
                        phrase2 = iTotalDislike - 1;
                        if(iTotalDislike - 1 > 1) {
                            phrase2 += ' ေယာက္';
                        } else {
                            phrase2 += ' ေယာက္';
                        }
                    }
                } 
            }
            
            if(iTotalDislike > 1 && !this.model.isDisliked()){
            	phrase0 =  'သင္ႏွင့္ ';
            }
            
            if(iTotalDislike < 1){
            	this.$el.addClass('hide');
            }else{
            	this.$el.removeClass('hide');
            }
            
            this.$el.html(this.template({
            	isDisliked: this.model.isDisliked(),
            	phrase0: phrase0,
                phrase1: phrase1,
                phrase2: phrase2,
                hasAnd: phrase1 != '' && phrase2 != ''
            }));
            
            if(!this.model.isDisliked()){
            	this.$el.find('.you-dislike').addClass('hide');
            }

            return this;
        }
    });
});


define('activity/view/activity-detail-setting',[
	'text!activity/tpl/activity-detail-setting.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
],function(text, DislikeCollection, DislikeDetailView){
	return Backbone.View.extend({
        template: _.template(text),
        render: function(){
			var self = this;
			
			this.$el.html(this.template({item: this.model}));
            
            this.$dislikeHolder = this.$el.find('#dislike-list');
            
            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));
			
			this.model.on('change:iTotalDislike change:bIsDisliked', function () {
        		self.updateView();
        	});
            
			return this;
		},
        inject: function(){
            this.model.dislikes = new DislikeCollection();
			
			this.model.dislikes.add(this.model.getUserDislike());
			            
            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);
			
			utils.popup.open(this.$el);
			
			return this;
		},
        updateView: function () {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
			this.$dislikeHolder.toggleClass('hide', bHide);
            
            var sText = this.model.isDisliked() ? _t('remove_dislike') : _t('dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});

define('activity/view/activity-detail',[
	'activity/view/activity-item',
	'text!activity/tpl/activity-detail.html',
	'text!activity/tpl/activity-detail-update.html',
	'activity/view/activity-detail-setting'	
],function(ActivityItemView, detailText, updateText, SettingView){
	// loading feed detail
	
	return ActivityItemView.extend({
		events: {
			'click .btn-back':'goBack'
		},
		template: _.template(detailText),
		templateUpdate: _.template(updateText),
		settingView: SettingView,
		className: 'activity-detail-page',

		render: function(){
			var self = this;

			
			this.$holder =  $('#main');
			
			this.$el.html(this.template({item: this.model}));
			
			this.$scroller  =  this.$el.find('#content');
			
			this.$activityHolder = this.$el.find('#activity_extra_holder');
			
			this.$detailHolder =  this.$el.find('#activity_detail_view_holder');
			
			this.$el.prop('id', this.model.getDataId());
			
			return this;
		},
		inject: function(){
			
			this.$holder.prepend(this.$el); //Nay 
			$(".newsfeed-page").css({"opacity":0}); //Nay
			
			this.$scroller.ensureVerticalScroll(); // this one causing issue while appending the page instead of adding it

			
			utils.api.get('feed/get', {
                iActionId: this.model.getId(),
                bIsGetOneFeed: true,
                sParentId: this.model.getParentModuleId()
            },{context: this})
			.done(function(data){
				this.model.set(data[0]);
				this.doUpdateView();
			})
			.fail(function(){
				utils.debug.log(arguments);
			});
			
			utils.helper.addActivityExtraBlock(this.model, this.$activityHolder, this.$scroller);
			
			return this;
		},
		doUpdateView: function(){
			
			var haAttachment  = this.model.hasAttachment();
			
			this.$detailHolder.html(this.templateUpdate({item: this.model, hasAttachment: haAttachment}));
			
			if(haAttachment)
			{
				var View = utils.attachment.translate(this.model.getAttachmentType());
				
				this.$attachment  = this.$el.find('.item-attachment');
				
				if(View){
					
					this.attView = new View({model: this.model});
					
					this.attView.render().inject(this.$attachment);
				}
			}
		
			
			this.$activityHolder.removeClass('hide');
			
			this.$scroller.trigger('refresh');
			
			return this;
		},
		doDeleteConfirm: function(evt){
			var self = this;
			utils.popup.close();
			utils.modal.confirm('Delete this post?',function(result){
				if(result == 1){
					self.doDelete();
				}
			}, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
		},
		doDelete: function(){
			utils.api.post('feed/delete',{
                iActionId: this.model.getId(),
                sParentId: this.model.getParentModuleId()
            },{context: this})
			.done(function(data){
				if(data.error_code > 0){
					this.doDeleteFail(data.messsage);
				}else{
					this.doDeleteSuccess();
				}
			})
			.fail(function(){
				this.doDeleteFail();
			});
		},
		doDeleteFail: function(msg){
			utils.modal.alert(msg || _t('Can not delete this post!') );
		},
		doDeleteSuccess: function(){
			utils.history.back();
		},
		goBack: function(){
			utils.router.previous();
			this.$holder.find(".newsfeed-page").css({"opacity":1});
			this.$holder.find(".activity-detail-page").hide().remove();
		}
	});
});

define('activity/controller/activity-detail',[
    'activity/view/activity-detail',
    'activity/model/feed'
], function(DetailView, FeedModel) {

    function ActivityDetailRouter(id, action, parentId) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new FeedModel({
                iActionId: id,
                parentModuleId: parentId ? parentId : ''
            })
        }).render().inject();
    }

    utils.router.route('feed/:id(/:action)(/:parentId)', ActivityDetailRouter);

    utils.router.route('user_status/:id', ActivityDetailRouter);
});

define('text!activity/tpl/compose-attachment-checkin.html',[],function () { return '<!-- activity/tpl/compose-attachment-checkin.html -->\n<div class="header">\n\t<div class="header-left">\n        <div class="btn-top" id="checkin_back_btn">\n        \t<%= _t(\'Cancel\') %>\n        </div>\n\t</div>\n\t<div class="header-right">\n\t\t<!-- <div class="btn-top" id="activity_status_post_btn">Post</div> -->\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(\'Check-in\') %></div>\n\t</div>\n</div>\n\n<div id="content-bottom" class="content with-header swiper-container">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div class="form-general update-status-checkin">\n                <!-- checkin -->\n                <div class="layout_container">\n                    <div class="content_container">\n                        <div class="yncheckin">\n                            <div id="location_map" class="map">\n                            </div>\n                            <div class="action_checkin">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<input class="control-full" type="text" id="search_keyword" placeholder="Search your location"/>\n\t\t\t\t\t\t\t\t</div>\n                                <div id="location_not_found" class="not-found hide"><span><%= _t(\'location_is_not_found.\') %></span></div>\n                                <div id="location_loading" class="not-found hide"><span><%= _t(\'loading...\') %></span></div>\n\n                                <div class="checkin-list-content">\n                                    <div id="checkinlistviewitem">\n                                    </div>\n                                    <%= utils.helper.loadmore() %>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n\n';});

define('activity/model/checkinLocation',[
], function() { 
    var checkinLocation = Backbone.Model.extend({
    });

    return checkinLocation;
});



define('text!activity/tpl/checkin-location-item.html',[],function () { return '<div class="checkin-item" id="<%=id%>" data-longitude="<%=longitude%>" data-latitude="<%=latitude%>" data-name="<%=name%>">\n    <a href="javascript:void(0);" data-longitude="<%=longitude%>" data-latitude="<%=latitude%>" data-name="<%=name%>"><%=name%></a>\n</div>\n';});

define('activity/view/checkin-location-item',[
    'text!activity/tpl/checkin-location-item.html'
], function() { 
    var tplText = require('text!activity/tpl/checkin-location-item.html');
    
    var CheckinItem = Backbone.View.extend({
        template: _.template(tplText),
        render: function(event) {
            this.$el.html(this.template(this.model.toJSON()));

            return this;
        }
    });

    return CheckinItem;
});



define('text!activity/tpl/attachment-checkin-to-add.html',[],function () { return '<div class="user_add_content link">\n    <div class="close_button"><a href="javascript:void(0);" id="remove_attachment_btn"></a></div>\n    <div class="wrap clearfix">\n        <%if (sImage != null) {%><img class="float" alt="" src="<%=sImage%>" /><%}%>\n        <div>\n            <%if (sLocation != null) {%><div class="link_post_title"><%=sLocation%></div><%}%>\n        </div>\n        <div class="clear"></div>\n    </div>\n</div>\n\n';});

define('activity/view/compose-attachment-checkin',[
	'text!activity/tpl/compose-attachment-checkin.html',
    'activity/model/checkinLocation',
    'activity/view/checkin-location-item',
    'text!activity/tpl/attachment-checkin-to-add.html',
    'core'
],function (){

    var core = require('core')
      , text = require('text!activity/tpl/compose-attachment-checkin.html')
      , CheckinLocationModel = require('activity/model/checkinLocation')
      , CheckinItemView = require('activity/view/checkin-location-item')
      , attachmentTpl = require('text!activity/tpl/attachment-checkin-to-add.html')
	
	return Backbone.View.extend({
        initialize: function () {
        },
        events: {
            'click #checkin_back_btn': 'handleBack',
            'click #checkinlistviewitem .checkin-item': 'handleSelectALocation',
        },
		region: {
			main: '#main-bottom',
			content: '#content-bottom'
		},
		template : _.template(text),
		render : function(context) {
			
            var self = this;
			this.$el.html(this.template(context));
			

            

            //initilize auto trigger check in search on typing
            this.autoTrigger($('#search_keyword', this.$el), function() {
                self.checkin();
            });

            // initilize jquery variable of view here
            this.$scroller = $('#checkinlistviewitem_id', this.$el);
            this.$notFound = $('#location_not_found', this.$el);
            this.$loading = $('#location_loading', this.$el);
			this.$mapHolder  =  this.$el.find('#location_map');
			
			var coords  = {latitude: 0, longitude: 0};
			
			var coords_str = localStorage.getItem('checkin_coords');
			
			if(coords_str){
				var old_coords  = JSON.parse(coords_str);
				coords = $.extend(coords, old_coords);
			} 
			
            var url = "http://maps.googleapis.com/maps/api/staticmap?center=" + coords.latitude + "," + coords.longitude + "&zoom=15&size=" + screen.width + "x137" + "&maptype=roadmap&markers=color:red%7C" + coords.latitude + "," + coords.longitude + "&sensor=false";
            this.$mapHolder.html('<img src="' + url + '" height="137" />');
           	
           	this.fetchLocation();
			
			return this;
			
		},
		
		fetchLocation: function(){
			var self = this;
			navigator.geolocation.getCurrentPosition(function(position) {

                self.currentLong = position.coords.longitude;
                self.currentLat = position.coords.latitude;
                
                localStorage.setItem('checkin_coords', JSON.stringify({latitude: self.currentLat, longitude: self.longitude}));
                
                // Add map
                var url = "http://maps.googleapis.com/maps/api/staticmap?center=" + position.coords.latitude + "," + position.coords.longitude + "&zoom=15&size=" + screen.width + "x137" + "&maptype=roadmap&markers=color:red%7C" + position.coords.latitude + "," + position.coords.longitude + "&sensor=false";
                self.$mapHolder.html('<img src="' + url + '" height="137" />');

                self.checkin();
            
            }, function(err) {
                utils.modal.alert(err.message || _t('Device cannot get your current position!'));
                self.close();
            },{
                enableHighAccuracy: false,
                // timeout: 120000,
                // maximumAge: 10000
            });
		},
		
        handleBack: function() {
            // we will refactor this evil action later

            this.close();
        },
		inject: function(){
			var main = $(this.region.main);
            var self = this;
			
			main.html(this.el);
			
			this.content = $(this.region.content);
			
            this.content.vscroll();
            this.content.on('loadmore:load', function() {
                self.checkin(true);
            });
            

			return this;
		},

        loadMore: function() {

        },

        checkin: function(isLoadmore) {
            if(typeof this.currentLong === 'undefined') {
                utils.modal.alert("Device cannot get your current position!");
                return false;
            }

            if(this.nextPageToken == '' && isLoadmore) {
                utils.modal.toast('No more result');
                this.content.trigger('loadmore:end');
                return ;
            }
            
            // Prepare searching data
            var search_keyword = $('#search_keyword').val()
              , search_radius = 2000
              , isLoadmore = typeof isLoadmore !== 'undefined' ? isLoadmore : false
              , url

            this.searchRadius = search_radius;
            this.searchKeyword = search_keyword;

            isLoadmore || $('#checkinlistviewitem', this.$el).empty();

            url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=' + constants.GOOGLE_API_KEY + '&sensor=true' + '&location=' + this.currentLat + ',' + this.currentLong + '&keyword=' + search_keyword + '&radius=' + search_radius;

            if(isLoadmore && typeof this.nextPageToken !== 'undefined') { // defensive programming
                url = url + '&pagetoken=' + this.nextPageToken ;
            }

            
            var data = {
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };


            $.ajax({
                url: encodeURI(url),
                context: this,
                beforeSend: this.beforeSend,
                type: "GET", 
                cache: false,
				timeout: 40e3,
                data: data
            }).done(this.postDone).always(this.postComplete).fail(this.handleFail);

        },

        handleFail: function() {
            utils.modal.alert('Cannot get data from server.');
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.content.trigger('loadmore:end');
            this.$loading.addClass('hide');
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$notFound.addClass('hide');
            this.$loading.removeClass('hide');
            // this.$scroller.addClass('processing');
            // utils.observer.trigger('blockui');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
            
        },

        postSuccess: function(data) {
            if (data.results.length > 0) {
                this.$notFound.addClass('hide');
           
                for (var i = 0; i < data.results.length; i++) {
                    var checkin = new CheckinLocationModel();
                    checkin.set('id', i);
                    checkin.set('name', data.results[i].name);
                    checkin.set('icon', data.results[i].icon);
                    checkin.set('longitude', data.results[i].geometry.location.lng);
                    checkin.set('latitude', data.results[i].geometry.location.lat);
                    $('#checkinlistviewitem', this.$el).append(new CheckinItemView({model: checkin}).render().el);
                }
               
                this.nextPageToken = data.next_page_token || '';
                console.log(this.nextPageToken);

            } else {
                this.$notFound.removeClass('hide');
            }

        },

       handleSelectALocation: function(event) {
           var $target = $(event.target)
             , data = $target.data();

           var model = {
                name: data.name,
                latitude: data.latitude,
                longitude: data.longitude,
                //data for tempplate
                sImage: "http://maps.googleapis.com/maps/api/staticmap?center=" + data.latitude + "," + data.longitude + "&zoom=14&size=100x100" + "&maptype=roadmap&markers=color:red%7C" + data.latitude + "," + data.longitude + "&sensor=false",
                sLocation: data.name
            }
              , tpl = _.template(attachmentTpl)
              , attachmentHtml = tpl(model);


           utils.observer.trigger('attachment:success', {
                data: model, 
                html: attachmentHtml,
                type: 'checkin'
           });
           this.close();
           utils.modal.toast('Choose location successfully');

       }, 

       close: function() {
            $('body').removeClass('bottom-open');
            utils.observer.trigger('bottom:close');
       },

       handleOnKeyup: function() {

       },

       // if user stop x s, the callback will be triggered
       autoTrigger: function($el, callback, timeout) {
           //setup before functions
            var typingTimer;                //timer identifier

            var doneTypingInterval = timeout || 2000;  //time in ms, 2 second for example

            //on keyup, start the countdown
            $el.keyup(function(){
                clearTimeout(typingTimer);
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            });

            //on keydown, clear the countdown 
            $el.keydown(function(){
                clearTimeout(typingTimer);
            });

            //user is "finished typing," do something
            function doneTyping () {
                //do something
                callback();
            }

       }

        
	});
});


define('text!activity/tpl/compose-attachment-link.html',[],function () { return '<div class="update-status-attachment-link">\n\t<input type="submit" id="submit_link_btn" value="<%= _t(\'save\') %>" class="btn btn-active">\t\n\t<div class="update-input-attachment-link">\n\t\t<input class="control-full" placeholder="<%= _t(\'insert_url\') %>" type="text" id="link_url" />\n\t</div>\n</div>\n\n';});


define('text!activity/tpl/attachment-link.html',[],function () { return '<div class="user_add_content link">\n    <div class="close_button"><a href="javascript:void(0);" id="remove_attachment_btn"></a></div>\n    <div class="wrap clearfix">\n\t\t<%if (sDefaultImage != null) {%><div class="wrap_img" style="background-image:url(<%=sDefaultImage%>);"></div><%}%>\n        <div class="wrap_content">\n            <%if (sTitle != null) {%><div class="link_post_title"><%=sTitle%></div><%}%>\n            <%if (sLink != null) {%><div class="link_post_source"><%=sLink%></div><%}%>\n            <%if (sDescription != null) {%><div class="link_post_desc"><%=utils.helper.shorten(sDescription, 200, "...")%></div><%}%>\n        </div>\n        <div class="clear"></div>\n    </div>\n</div>\n\n';});

define('activity/view/compose-attachment-link',[
    'text!activity/tpl/compose-attachment-link.html',
    'text!activity/tpl/attachment-link.html'
], function() { 
    var tpl = require('text!activity/tpl/compose-attachment-link.html')
      , attachmentTpl = require('text!activity/tpl/attachment-link.html');


    var AttachmentLink = Backbone.View.extend({
        region: {
			main: '#simple-popup', // main region is where the html contain is injected
            attachment_holder: '#compose_status_select_attachment_holder'
        },
        events: {
            'click #submit_link_btn': 'submitLink'
        },
		template : _.template(tpl),
        render: function() {
            this.$el.html(this.template());
            
            // initialize jquery variables
            this.$postBtn = $('#submit_link_btn', this.$el); // this variable is the same as many view for copy/paste purpose :)
            this.$linkUrl = $('#link_url', this.$el);

            return this;
        },

        inject: function() { 
            
            utils.popup.open(this.$el);
			
			return this;
        },
        
        close: function() {
		    utils.popup.close();	
			
			return this;
        },

        submitLink: function() {
            if(this.$postBtn.hasClass('processing')) {
                return false;
            }

            if(!this.isLinkValidate())  {
                return false;
            }

            var data = {
                sLink: utils.helper.checkToAddHttpIntoLinkIfNeccessary(this.$linkUrl.val())
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('link/preview', data, settings).done(this.postDone).always(this.postComplete);

        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.removeClass('processing');
            this.$postBtn.val('Save');
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.addClass('processing');
            this.$postBtn.val('Saving...');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post link failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        isLinkValidate: function() {

            if(this.$linkUrl.val().trim() === '') {
                utils.modal.alert('Please enter your link');
                return false;
            }

            return true;
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {

            var model = {
                sDefaultImage: data.sDefaultImage,
                sTitle: data.sTitle,
                sLink: data.sLink,
                sDescription: data.sDescription
            }
              , tpl = _.template(attachmentTpl)
              , attachmentHtml = tpl(model);


            utils.observer.trigger('attachment:success', {
                data: model, 
                html: attachmentHtml,
                type: 'link'
            });
            // this.region.attachment_holder.html(
            utils.modal.toast('Submit link successfully');
            this.close();
        },

    });

    return AttachmentLink;
});



define('text!activity/tpl/attachment-video.html',[],function () { return '<div class="user_add_content link">\n    <div class="close_button"><a href="javascript:void(0);" id="remove_attachment_btn"></a></div>\n    <div class="wrap clearfix">\n        <div class="link_post_title"><%=sTitle ? sTitle : _t(\'video_from_device\')%></div>\n    </div>\n</div>\n\n';});


define('text!activity/tpl/compose-attachment-video.html',[],function () { return '<div id="ynupdate_status_video_popup">\n\t<div class="form-group">\n\t\t<input class="control-full" placeholder="<%= _t(\'video_title\') %>" type="text" id="video_form_title" />\n\t</div>\n    <ul id="">\n        <li class="active"><a href="javascript:void(0);"><%=_t(\'video_from_device\')%></a></li>\n    </ul>\n    <div class="clear"></div>\n    <input class="btn btn-active btn-small-fluid" type="submit" id="video_form_save_btn" value="<%= _t(\'save\') %>">\n</div>\n\n';});

define('activity/view/compose-attachment-video',[
    'text!activity/tpl/attachment-video.html',
    'text!activity/tpl/compose-attachment-video.html'
], function(attachmentTpl, tpl) {

    var StatusVideo = Backbone.View.extend({
        events: {
            'click #video_form_save_btn': 'saveVideo'
        },
        region: {
            main: '#simple-popup', // main region is where the html contain is injected
        },
        template: _.template(tpl),
        render: function(context) {

            this.context = $.extend({
                fileURI: ''
            }, context);

            this.$el.html(this.template());
            this.$save_btn = $('#video_form_save_btn', this.$el);
            this.$form_title = $('#video_form_title', this.$el);

            return this;
        },
        inject: function() {

            utils.popup.open(this.$el);

            return this;
        },
        saveVideo: function() {

            var data = {
                sTitle: this.$form_title.val() || '',
                fileURI: this.context.fileURI
            };

            var attachmentHtml = _.template(attachmentTpl, data);

            utils.observer.trigger('attachment:success', {
                data: data,
                html: attachmentHtml,
                type: 'video'
            });

            this.close();
        },
        close: function() {

            utils.popup.close();

            return this;
        }
    });

    return StatusVideo;
});

define('text!activity/tpl/attachment-photo.html',[],function () { return '<div class="user_add_content photo">\n    <div class="wrap">\n        <div class="wrap_photo">\n            <div class="close_button"><a href="javascript:void(0);" id="remove_attachment_btn"></a></div>\n            <%if (sImgSrc != null) {%><img src="<%=sImgSrc%>" /><%}%>\n        </div>\n    </div>\n</div>\n\n';});


define('text!activity/tpl/compose-attachment.html',[],function () { return '<div class="footer with-action">\n\t<div class="clearfix actions-justify gray large">\n        <% if(exclude.indexOf(\'camera\') === -1) {%>\n\t\t<div class="action-item js-status-add-attachment-link" data-type="camera" >\n\t\t\t<i class="icon icon-attachment-camera"></i>\n\t\t</div>\n        <% } %>\n\n        <% if(exclude.indexOf(\'gallery\') === -1) {%>\n\t\t<div class="action-item js-status-add-attachment-link" data-type="gallery">\n\t\t\t<i class="icon icon-attachment-gallery"></i>\n\t\t</div>\n        <% } %>\n\n        <% if(exclude.indexOf(\'video\') === -1) {%>\n\t\t<div class="action-item js-status-add-attachment-link" data-type="video">\n\t\t\t<i class="icon icon-attachment-video"></i>\n\t\t</div>\n        <% } %>\n\n        <% if(exclude.indexOf(\'checkin\') === -1) {%>\n\t\t<div class="action-item js-status-add-attachment-link" data-type="checkin">\n\t\t\t<i class="icon icon-attachment-checkin"></i>\n\t\t</div>\n        <% } %>\n\n        <% if(exclude.indexOf(\'link\') === -1) {%>\n\t\t<div class="action-item js-status-add-attachment-link" data-type="link">\n\t\t\t<i class="icon icon-attachment-link"></i>\n\t\t</div>\n        <% } %>\n\n\t</div>\n</div>\n';});

define('activity/view/compose-attachment',[
    'activity/view/compose-attachment-checkin',
    'activity/view/compose-attachment-link',
    'activity/view/compose-attachment-video',
    'text!activity/tpl/attachment-photo.html',
    'text!activity/tpl/compose-attachment.html'
], function(ComposeCheckinView, ComposeLinkView, ComposeVideoView, photoAttachmentTpl, composeTpl) {

    var ComposeAttachment = Backbone.View.extend({
        initialize: function() {
            this.maximumAttachment = 1;
            this.numOfAttachment = 0;
            utils.observer.on('attachment:success', function() {
                this.numOfAttachment++;
            }, this);

            utils.observer.on('attachment:remove', function() {
                this.numOfAttachment--;
            }, this);
        },
        events: {
            'click .js-status-add-attachment-link': 'addAttachment'
        },
        template: _.template(composeTpl),
        region: {
            main: '#compose_status_select_attachment_holder',
        },
        render: function(context) {

            this.context = $.extend({
                exclude: [] // what item in attachment you do NOT want to attach in
            }, context);
            this.$el.html(this.template(this.context));
            return this;
        },
        inject: function() {
            console.log(this.region);
            var $main = $(this.region.main);
            $main.html(this.el);
            return this;
        },
        addAttachment: function(e) {
            var data = $(e.currentTarget).data()

            if (this.numOfAttachment >= this.maximumAttachment) {
                utils.modal.alert('Cannot contain more than one item. Please remove the current selection before adding another item.');
                return false;
            }

            switch (data.type) {
                case 'video':
                    this.addVideo();
                    break;

                case 'link':
                    this.addLink();
                    break;

                case 'camera':
                    this.addFromCamera();
                    break;

                case 'gallery':
                    this.addFromGallery();
                    break;

                case 'checkin':
                    this.addCheckin();
                    break;
            }
        },
        browsePhotoSuccess: function(imageURI) {
            var tpl = _.template(photoAttachmentTpl),
                attachmentHtml = tpl({
                    sImgSrc: imageURI
                }),
                model = {
                    sImgSrc: imageURI
                };

            utils.observer.trigger('attachment:success', {
                data: model,
                html: attachmentHtml,
                type: 'photo'
            });
        },
        browePhotoFail: function(message) {

        },
        addFromGallery: function() {

            navigator.camera.getPicture(this.browsePhotoSuccess, this.browsePhotoFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });
        },
        addFromCamera: function() {
            var self = this;

            navigator.device.capture.captureImage(onCameraSuccess, onCameraFail, {
                limit: 1
            });

            function onCameraSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.browsePhotoSuccess(sImgSrc);

            }

            function onCameraFail(error) {
                //navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
            }
        },
        addLink: function() {
            this.composeLinkView = new ComposeLinkView();

            // this.$attachmentPickerHolder.html(this.composeStatusLinkView.render().el);
            this.composeLinkView.render().inject();
        },
        addVideo: function() {

            var self = this;

            var onSuccess = function(fileURI) {
                self.onGetVideoSuccess(fileURI);
            };

            var onFail = function(msg) {
                utils.debug.log(msg);
            };

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                mediaType: Camera.MediaType.VIDEO
            });
        },
        onGetVideoSuccess: function(fileURI) {

            this.composeVideoView = new ComposeVideoView();

            this.composeVideoView.render({
                fileURI: fileURI
            }).inject();
        },
        addCheckin: function() {
            this.composeCheckinView = new ComposeCheckinView();
            this.composeCheckinView.render().inject();
            $('body').addClass('bottom-open');
            utils.observer.trigger('bottom:open');
        }
    });

    return ComposeAttachment;
});

define('text!activity/tpl/privacy-holder.html',[],function () { return '\n<span class="icon-privacy-status <%= item.getClass() %> gray"></span>\n';});


define('text!activity/tpl/choose-privacy.html',[],function () { return '<div class="loading-initiator"></div>\n<!-- <div class="setting-list"> -->\n<!--     <a class="menu-item"> <span class="icon-privacy-status icon-privacy-everyone gray"> </span> Everyone </a> -->\n<!--     <a class="menu-item"> <span class="icon-privacy-status icon-privacy-friends gray"></span> Friend </a> -->\n<!--     <span class="icon-privacy-status icon-privacy-friends-of-friends active"></span> -->\n<!--     <span class="icon-privacy-status icon-privacy-only-me"></span> -->\n<!--     <span class="icon-privacy-status icon-privacy-custom gray"></span> -->\n<!-- </div> -->\n';});


define('text!activity/tpl/choose-privacy-item.html',[],function () { return '<div class="privacy-item <% if(item.isChosen()) print(\'active\') %>" >\n    <span class="icon-privacy-status <%= item.getClass() %> gray"></span> <%= item.getPhrase() %>\n</div>\n';});

define('activity/view/choose-privacy-item',[
    'text!activity/tpl/choose-privacy-item.html'
], function(text) { 
    var PrivacyItem = Backbone.View.extend({
        template: _.template(text),
        initialize: function() {
            this.model.on('change', function() {
                this.render();
            }, this);
        },
        events: {
            'click': 'setChosen'
        },
        setChosen: function() {
            this.model.collection.setChosen(this.model.id);
        },
        render: function() {
            this.$el.html(this.template({
                item: this.model
            }));
            return this;
        }
    });

    return PrivacyItem;
});


define('activity/view/choose-privacy',[
    'text!activity/tpl/choose-privacy.html',
    'activity/view/choose-privacy-item'
], function() { 
    var tpl = require('text!activity/tpl/choose-privacy.html'),
        PrivacyItemView = require('activity/view/choose-privacy-item');


    var ChoosePrivacy = Backbone.View.extend({
        initialize: function() {
            this.model.on('all', function() {
                this.updateView();
            }, this);

            this.model.on('privacy-chosen', function() {
                this.close();
            }, this);
        },
        className: 'privacy-list',
        region: {
			// main: '#simple-popup', // main region is where the html contain is injected
            // attachment_holder: '#compose_status_select_attachment_holder'
        },
        events: {
            // 'click #submit_link_btn': 'submitLink'
        },
		template : _.template(tpl),
        render: function() {
            this.$el.html(this.template());
            
            return this;
        },

        inject: function() { 
            
            utils.popup.open(this.$el);

            if(this.model.length > 0) {
                this.updateView();
            }
			
			return this;
        },

        close: function() {
		    utils.popup.close();	
			
			return this;
        },


        updateView: function(data) {
            this.$el.html('');
            _.each(this.model.models, function(item) {
                if(item.getValue() == 4) {
                    //do nothing with custome type
                } else {
                    this.$el.append(new PrivacyItemView({
                        model: item
                    }).render().el);
                }
                
            }, this);
        }

    });

    return ChoosePrivacy;
});



define('activity/collection/privacy',['activity/model/privacy'],function(model){

	var Collection = Backbone.Collection.extend({
		model: model,
        setChosen: function(id) {
            _.each(this.models, function(item) {
                if(item.id == id) {
                    item.set('isChosen', true);
                } else {
                    item.set('isChosen', false);
                }

            }, this);

            this.trigger('privacy-chosen');
        },

        getChosen: function() {
            var chosen = this.findWhere({
                isChosen: true
            });

            if(!chosen) {
                return new model({
                    'sValue': 0,
                    'sPhrase': 'everyone'
                });
            }

            return chosen;
        }
	});



	return Collection;
});

define('activity/view/privacy-holder',[
    'text!activity/tpl/privacy-holder.html',
	'activity/view/choose-privacy',
    'activity/collection/privacy'
], function(text) {
    var ChoosePrivacy = require('activity/view/choose-privacy')
      , PrivacyCollection = require('activity/collection/privacy');

    var PrivacyHolder = Backbone.View.extend({
        template: _.template(text),
        initialize: function() {
            this.model = new PrivacyCollection();
            this.model.on('privacy-chosen', function() {
                this.render();
            }, this);
        },
        events: {
            'click': 'showPrivacy',
        },
        region:{
            main: '#privacy_holder',
        },
        render: function() {
            this.$el.html(this.template({
                item: this.model.getChosen()
            }));

            return this;
        },

        getChosenValue: function() {
            return this.model.getChosen().getValue();
        },

        inject: function() {
            var main = $(this.region.main);
            
            main.html(this.el);
            
            return this;
        },

        showPrivacy: function() {
            new ChoosePrivacy({
                model: this.model
            }).render().inject();
            this.fetchData();
        },

        fetchData: function() {
            // if(this.collection.length > 0) {
            //     return ;
            // }

            var data = {
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('privacy/privacy', data, settings).done(this.postDone).always(this.postComplete);

        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post link failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
            this.model.set(data);
            // constants.privacies = data;
        },
    });

    return PrivacyHolder;
});



define('text!activity/tpl/compose-status-form.html',[],function () { return '<div class="form-general form-update-status">\n    <div id="privacy_holder">\n    </div>\n\t<div class="input-textarea">\n\t\t<textarea class="fluid-no-border" id="activiy_status_compose_text" placeholder="<%= _t(\'what_s_on_your_mind\') %>"></textarea>\n\t</div>\n</div>\n\n<!-- To display attachmet here -->\n<div id="compose_status_attachment_holder"> </div>';});


define('text!activity/tpl/compose-status.html',[],function () { return '<!-- activity/tpl/compose-status.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'မတင္ပါ\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled hide" id="activity_status_post_btn">\n\t\t\t<%= _t(\'post\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(\'update_status\') %></div>\n\t</div>\n</div>\n\n<div id="content" class="content with-header-footer swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="status_form_holder">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n\n<!-- Select attachment type here -->\n<div id="compose_status_select_attachment_holder" class="hide"> </div>\n';});

define('activity/view/compose-status',[
    'activity/view/compose-attachment',
    'activity/view/privacy-holder',
    'core',
    'text!activity/tpl/compose-status-form.html',
    'text!activity/tpl/compose-status.html'
], function(ComposeAttachment, PrivacyHolder, core, textForm, text) {

    return Backbone.View.extend({
        initialize: function() {
            utils.observer.on('attachment:success', this.handleAttachSucess, this);
            this.attachment = {
                type: 'text'
            };
        },
        events: {
            'click #activity_status_post_btn': 'post',
            'click #remove_attachment_btn': 'removeAttachment', // the close button are generated from attachment view, not this view
            'keyup #activiy_status_compose_text': 'onKeyup',
            'input #activiy_status_compose_text': 'onKeyup',
            'paste #activiy_status_compose_text': 'onKeyup',
            // 'focus #activiy_status_compose_text': function(e) { alert('abc')},
        },
        region: {
            main: '#main',
            content: '#content'
        },
        template: _.template(text),
        templateForm: _.template(textForm),
        render: function(context) {

            this.context = $.extend({
                sItemType: 'user',
                iItemId: core.viewer.getId(),
                trigger: ''
            }, context);

            this.$el.html(this.template(this.context));

            this.$postBtn = $('#activity_status_post_btn', this.$el);
            this.$form_holder = $('#status_form_holder', this.$el);

            return this;
        },
        inject: function() {

            $(this.region.main).html(this.$el);

            this.$scroller = this.$el.find('#content');

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            utils.api.get('feed/formstatus', {}, {
                context: this
            }).done(this.fetchDataDone).fail(this.fetchDataFail);
        },
        fetchDataDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;
            this.updateView();
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.log(arguments);
            utils.modal.alert(_t('Can not load data from server'));
            utils.history.back();
        },
        updateView: function() {

            this.$form_holder.html(this.templateForm(this.context));

            this.$text = this.$el.find('#activiy_status_compose_text');
            this.$attachmentHolder = this.$el.find('#compose_status_attachment_holder');
            this.$attachmentPickerHolder = this.$el.find('#compose_status_select_attachment_holder');

            this.$postBtn.removeClass('hide');

            // attachment view
            var exclude = this.formData.bCanUploadVideo ? [] : ['video'];

            if (this.context.sItemType === 'event' || this.context.sItemType === 'fevent' || this.context.sItemType === 'pages') {
                exclude.push('checkin');
            }

            this.composeAttachment = new ComposeAttachment().render({
                exclude: exclude
            }).inject();

            this.$attachmentPickerHolder.removeClass('hide');

            this.applyTrigger();

            // privacy view
            this.privacyView = new PrivacyHolder().render().inject();
            if (this.context.sItemType === 'event' || this.context.sItemType === 'fevent') {
                this.privacyView.$el.addClass('hide');
            }
        },

        /**
         * @param {} data
         *      html -> html of generated attachment
         *      data -> data related to each type
         *      type
         */
        handleAttachSucess: function(data) {
            this.$attachmentHolder.html(data.html);
            this.attachment.data = data.data;
            this.attachment.type = data.type;
        },

        removeAttachment: function() {
            this.$attachmentHolder.html('');
            this.attachment = {
                type: 'text'
            };
            utils.observer.trigger('attachment:remove');
        },

        post: function() {
            if (this.$postBtn.hasClass('processing')) {
                return false;
            }

            if (!this.isPostValidated()) {
                return false;
            }

            var data = {
                'sContent': this.$text.val(),
                'iSubjectId': this.context.iItemId,
                'sSubjectType': this.context.sItemType,
                'iPrivacy': this.privacyView.getChosenValue()
            };
            var settings = {
                'context': this,
                'beforeSend': this.beforeSend
            };

            switch (this.attachment.type) {
                case 'link':
                    this.postStatusWithLink(data, settings);
                    break;

                case 'video':
                    this.postStatusWithVideo(data, settings);
                    break;

                case 'photo':
                    this.postStatusWithPhoto(data, settings);
                    break;

                case 'checkin':
                    this.postStatusWithCheckin(data, settings);
                    break;

                default:
                    utils.api.post('feed/post', data, settings).done(this.postDone).always(this.postComplete);
                    break;
            }
        },

        postStatusWithPhoto: function(data, settings) {
            var self = this,
                path = this.attachment.data.sImgSrc

            var params = $.extend(data, {
                isPostStatus: true,
                sStatusInfo: data.sContent,
                sSubjectType: data.sSubjectType,
                iSubjectId: data.iSubjectId

            });

            utils.api.uploadImage('photo/upload', path, params).done(function(result) {
                self.postSuccess(result);
            }).fail(this.hanleUploadPhotoFail);
        },

        hanleUploadPhotoFail: function(error) {
            utils.modal.alert('Can not upload file(s). Please try again later.');
            utils.debug.error('Error upload file :' + JSON.stringify(error));
        },

        postStatusWithLink: function(data, settings) {
            // depend on our knowledgeo the attachment trigger on sucess attach
            data['aAttachment'] = {
                'uri': this.attachment.data.sLink,
                'title': this.attachment.data.sTitle,
                'description': this.attachment.data.sDescription,
                'thumb': this.attachment.data.sDefaultImage,
                'type': 'link'
            };
            utils.api.post('feed/post', data, settings).done(this.postDone).always(this.postComplete);
        },

        postStatusWithVideo: function(data, settings) {

            var postData = $.extend(data, {
                sTitle: this.attachment.data.sTitle
            });

            var self = this;
            utils.api.uploadVideo('video/upload', this.attachment.data.fileURI, postData).done(function(response) {
                self.postConvertVideo(response.iVideoId);
                self.postDone(response);
            });
        },

        postConvertVideo: function(iVideoId) {

            var postData = {
                iVideoId: iVideoId,
                iInline: 1
            };
            var settings = {
                timeout: 0
            }

            utils.api.post('video/convert', postData, settings); // ignore result
        },

        postStatusWithCheckin: function(data, settings) {
            data.sLocation = this.attachment.data.name;
            data.fLatitude = this.attachment.data.latitude;
            data.fLongitude = this.attachment.data.longitude;
            data.iUserId = data.iSubjectId;
            data.sStatus = data.sContent;

            utils.api.post('user/checkin', data, settings).done(this.postDone).always(this.postComplete);

        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.removeClass('processing');
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.addClass('processing');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            }

            this.postSuccess(data);
        },

        isPostValidated: function() {
            if (this.$text.val().trim() === '') {
                utils.modal.alert('Please enter your message');
                return false;
            }
            return true;
        },

        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {

            utils.modal.toast(data.message || _t('Post status successfully'));
            window.history.back();
        },

        applyTrigger: function() {

            switch (this.context.trigger) {
                case 'camera':
                    this.composeAttachment.addFromCamera();
                    break;
                case 'checkin':
                    this.composeAttachment.addCheckin();
                    break;
            }
        },

        onKeyup: function(e) {
            var bDisable = (this.$text.val().trim() == '');
            if (bDisable) {
                this.$postBtn.addClass('disabled');
            } else {
                this.$postBtn.removeClass('disabled');
            }
        }
    });
});
define('activity/controller/activity-compose',[
    'activity/view/compose-status'
], function(View) {

    function Controller(sItemType, iItemId) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new View().render({
            sItemType: sItemType,
            iItemId: iItemId
        }).inject();
    }
    utils.router.route('activity/compose-status(/:sItemType)(/:iItemId)', Controller);

    function handleComposeStatusPhoto(sItemType, iItemId) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new View().render({
            sItemType: sItemType,
            iItemId: iItemId,
            trigger: 'camera'
        }).inject();

    }
    utils.router.route('activity/compose-status-photo(/:sItemType)(/:iItemId)', handleComposeStatusPhoto);

    function handleComposeStatusCheckin(sItemType, iItemId) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new View().render({
            sItemType: sItemType,
            iItemId: iItemId,
            trigger: 'checkin'
        }).inject();

    }
    utils.router.route('activity/compose-status-checkin(/:sItemType)(/:iItemId)', handleComposeStatusCheckin);
});
define('like/model/like-detail',[],function() { 
    return  Backbone.Model.extend({
        defaults: {
            /**
             * @param {array} aLikes of object { iUserId -> int, sDisplayName -> string}
             */
            'aLikes'        : [],
            'bIsLike'       : false,
            'iTotalLike'    : 0,
            'iItemId'       : 0,
            'sItemType'     : ''
        },
        getUserLikes: function() {
            return this.get('aUserLike');
        }
    });
});


define('comment/model/comment',[
    'underscore.string'
], function(STR){
	return Backbone.Model.extend({
		idAttribute: 'iCommentId',
		defaults: {
			sModelType     : 'core_comment', // defined by socialengine if is activity_action or is activity_comment.
            // represent what server returns
            UserLike       : [],
            bIsLiked       : false,
            iCommentId     : 0,
            iItemId        : 0,
            iTotalComment  : 0,
            iTotalLike     : 0,
            iUserId        : 0,
            sContent       : '',
            sFullName      : '',
            sImage         : '',
            sItemType      : '',
            sModelType     : '',
            sTime          : '',
            sTimeConverted : ''
		},
		getContent: function(){
			var sContent = this.get('sContent');
            if (sContent) {
                return STR.stripTags(sContent);
            }
            return sContent;
		},
        getItemId: function () {
            return this.get('iItemId');
        },
		getLikeLabel: function () {
			var text = '';
			var count = this.getLikeCount();
			if (count > 0) {
				text += count + ' ';
			}
			return text + (count > 1 ? _t('likes') : _t('like'));
		},
		getDislikeLabel: function () {
			var text = '';
			var count = this.getDislikeCount();
			if (count > 0) {
				text += count + ' ';
			}
			return text + (count > 1 ? _t('dislikes') : _t('dislike'));
		},
        canDislike: function () {
            return utils.setting.get('like_allow_dislike') || false;
        }
	});
});

define('comment/collection/comment',[
	'comment/model/comment'
],function(CommentModel){
	return Backbone.Collection.extend({
		model: CommentModel
	});
});

define('comment/model/comment-list',[
    'comment/collection/comment',
], function(CommentCollection) { 
    
    return Backbone.Model.extend( {
        defaults: {
            'aComments'     : new CommentCollection(),
            'iTotalComment' : 0,
            'iItemId'       : 0,
            'sItemType'     : ''
        },
        getTotalComment: function() {
	        return parseInt(this.get('iTotalComment'), 10);
	    },
	    getComments: function() {
	        return this.get('aComments');
	    },
	    getItemType: function() {
	        return this.get('sItemType');
	    },
	    getItemId: function() {
	        return this.get('iItemId');
	    }
    });
});


define('like/model/like',[],function(){
	return Backbone.Model.extend({
		idAttribute: '',
		defaults: {
			sModelType: 'like',
            iLikeId   : 0,
            iUserId   : 0,
            sFullName : '',
            sImage    : ''
		}
	});
});

define('like/collection/like',[
	'like/model/like'
], function(LikeModel){
	return Backbone.Collection.extend({
		model: LikeModel
	});
});


define('text!comment/tpl/post-comment.html',[],function () { return '<div class="btn-comment">\n\t<input type="submit" class="btn btn-small-fluid btn-primary" id="submit-comment-btn" value="<%= _t(\'post\') %>"/>\n</div>\n<div class="input-comment">\n\t<input type="text" class="control-full" id="comment-content" placeholder="<%= _t(\'comment_here\') %>"/>\n</div>';});

define('comment/view/post-comment',[
	'text!comment/tpl/post-comment.html',
], function(text) {
	return Backbone.View.extend({
		template : _.template(text),
		events : {
			'click #submit-comment-btn' : 'postComment'
		},
		postComment : function() {
			if (this.$postBtn.hasClass('processing')){
				return false;
			}

			if (this.$content.val().trim() == '') {
				utils.modal.alert('Please enter your comment');
				return false;
			}

			var data = {
				sItemType : this.model.getType(),
				sParentId : this.model.getParentModuleId(),
				iItemId : this.model.getId(),
				sText : this.$content.val()
			}, settings = {
				'context' : this,
				'beforeSend' : this.beforeSend
			};

			utils.api.post('comment/add', data, settings).done(this.postDone).always(this.postComplete);
		},

		render : function(context) {
			this.$el.html(this.template());
			this.$content = $('#comment-content', this.$el);
			this.$postBtn = $('#submit-comment-btn', this.$el);
			
			if(!this.model.canComment()){
				this.$el.addClass('hide');
			}

			return this;
		},

		/**
		 * post complete will always be called when the ajax finishes, it is the best
		 * place to collect your garbage
		 */
		postComplete : function() {
			this.$postBtn.removeClass('processing');
		},

		/**
		 * beforesend will be called right before data is send, this is the best place to
		 * initialize your awesome handling functions
		 */
		beforeSend : function() {
			this.$postBtn.addClass('processing');
		},

		/**
		 * It is called when having a response returned.
		 * Note that it will not be called if server returns status !== 200
		 */
		postDone : function(data, status, jqXHR) {
			if (data.error_code > 0) {
				utils.modal.alert(data.error_message || 'Post URL failed!');
				//defensive programming
				return false;
			} else {
				this.postSuccess(data);
			}
		},

		/**
		 * It should be called when the response has error_code == 0
		 */
		postSuccess : function(data) {

            data.parentModuleId = this.model.getParentModuleId();
			this.model.comments.add(data);

			this.model.set('iTotalComment', this.model.getCommentCount() + 1);

			this.$content.val('');
		},
	});
});



define('text!comment/tpl/comment-list.html',[],function () { return '<div class="loading-initiator hide">\n\t\n</div>';});


define('text!comment/tpl/comment-item.html',[],function () { return '<div class="clearfix item-wrapper">\n\t<a class="item-image" href="<%= item.getPosterUrl() %>" style="background-image: url(<%= item.getPosterImageSrc() %>); "></a>\n\t<div class="item-headline">\n\t\t<span><span class="icon icon-time"></span><%= item.getLivetime() %></span>\n\t\t<a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n\t</div>\n\t<div class="item-content">\n\t \t<%= utils.str.shorten(item.getContent(),100, true) %>\n\t</div>\n\t<div class="item-subline comment-action-holder"></div>\n</div>\n';});


define('text!comment/tpl/comment-action.html',[],function () { return '<div class="comment-action">\n\t<div class="action-item">\n\t\t<a class="text link-like <%if (item.isLiked()) {%>liked<%}%>"><%=item.getLikeLabel()%></a>\t\t\n\t</div>\n\t<%if(item.canDislike()){%>\n\t<span class="middot">-</span>\n\t<div class="action-item">\n\t\t<a class="text link-dislike <%if (item.isDisliked()) {%>disliked<%}%>"><%=item.getDislikeLabel()%></a>\n\t</div>\n\t<%}%>\n\t<%if(item.isOwner()){%>\n\t<span class="middot">-</span>\n\t<div class="action-item">\t\t\t\t\n\t\t<a class="text delete-comment"><%= _t(\'delete\') %></a>\n\t</div>\n\t<%}%>\n</div>\n';});


define('text!like/tpl/like-list-item.html',[],function () { return '<div class="like_item">\n    <a href="#user/<%= iUserId %>">\n        <img src="<%= sImage %>" />\n        <span><%= utils.str.shorten(sFullName, 22) %></span>\n    </a>\n</div>\n\n';});

define('like/view/like-list-item',[
    'text!like/tpl/like-list-item.html'
], function(text) { 

    return Backbone.View.extend({
        template: _.template(text),
        render: function() {
        	
            this.$el.html(this.template(this.model.toJSON()));
            
            return this;
        }
    });
});



define('text!like/tpl/like-list.html',[],function () { return '<div id="like-list-wrapper">\n    <div class="popup-title"><%= _t(\'people_who_liked_this\') %></div>\n    <div id="like-list-content" class="swiper-container">\n        <div class="swiper-wrapper">\n            <div class="swiper-slide">\n                <div id="like-list-holder" class="like-list-holder">\n                \t<div class="loading-initiator"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n';});

define('like/view/like-list',[
    'like/model/like',
    'like/view/like-list-item',
    'text!like/tpl/like-list.html'
], function(LikeModel, LikeListItemView, text) { 


    return Backbone.View.extend({
        events: {},
        region: {
            scroller: '#like-list-content',
            holder: '#like-list-holder',
        },
		template : _.template(text),
        render: function() {
        	
            this.$el.html(this.template());
            
            this.$scroller = this.$el.find(this.region.scroller);
            
            this.$likeListHolder = this.$el.find(this.region.holder);

			this.isFirst = true;
			
            return this;
        },
        
        inject: function() { 
  		
			utils.popup.open(this.$el);
			
			if(constants.os_version < '30'){
				this.$scroller.ensureSwiper();
			}
			this.fetchData();
			
			return this;
        },

        fetchData: function() {
            var data = {
                iAmountOfLike: 9999,
                iItemId: this.model.get('iItemId'),
                sItemType: this.model.get('sItemType'),
                sParentId: this.model.get('sParentId')
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };
            
            utils.api.post('like/listalllikes', data, settings).done(this.postDone).always(this.postComplete);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
        	
        	if(this.isFirst){
        		this.isFirst = false;
				this.$likeListHolder.find('.loading-initiator').remove();
        	}
        	
            _.each(data, function(like) {
                this.$likeListHolder.append(new LikeListItemView({
                    model: new LikeModel({ 
                        iLikeId   : like.iLikeId,
                        iUserId   : like.iUserId,
                        sFullName : like.sFullName,
                        sImage    : like.sImage
                    })
                }).render().el);
            }, this);
			
			if(constants.os_version < '30'){
				var that = this;
				window.setTimeout(function(){
					that.$scroller.trigger('refresh');
				},1000);
			}
        },

    });
});


define('like/model/like-list',[
], function() { 
    return Backbone.Model.extend({
        defaults: {
            'sItemType': '',
            'iItemId': 0
        }
    });
});


define('comment/view/comment-item',[
    'text!comment/tpl/comment-item.html',
    'text!comment/tpl/comment-action.html',
    'like/view/like-list',
    'like/model/like-list'
], function(text, textAction, LikeListView, LikeListModel) {

    return Backbone.View.extend({
        events: {
            'click .delete-comment': 'onDelete',
            'click .link-like': 'onLikeClick',
            'click .link-dislike': 'onDislikeClick',
            'click .other-likes': 'handleClickOnOtherLikes'
        },

        className: 'comment-item',

        template: _.template(text),

        templateAction: _.template(textAction),

        initialize: function() {
            var self = this;
            this.model.on('change:bIsLiked change:bIsDisliked', function() {
                self.updateView();
            });
        },

        render: function() {

            this.$el.attr('data-id', this.model.getId());

            this.$el.html(this.template({
                item: this.model
            }));

            this.$el.find('.comment-action-holder').html(this.templateAction({
                item: this.model
            }));

            return this;
        },

        inject: function(inject) {
            inject(this.el);
            return this;
        },

        onDelete: function(e) {

            var self = this;
            utils.modal.confirm('Do you want to delete this comment?', function(selected) {
                if (selected == 1) { // sure == 1 to allow work on webview ( it is helpful for front-end engineer)
                    self.deleteComment();
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);

        },

        deleteComment: function() {
            var data = {
                'iCommentId': this.model.getId(),
                'iItemId': this.model.getItemId(),
                'sItemType': this.model.getItemType()
            },
                settings = {
                    'context': this,
                    'beforeSend': this.beforeSend
                };

            utils.api.post('comment/remove', data, settings)
                .done(this.postDone)
                .always(this.postComplete)
                .fail(this.postFail);

        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {},

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$el.addClass('hide');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                this.$el.removeClass('hide');
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {

            this.collection.remove(this.model);

            utils.modal.toast(_t('Delete comment successfully'));

            this.$el.remove();
        },

        postFail: function() {
            this.$el.removeClass('hide');
        },

        handleClickOnOtherLikes: function() {
            new LikeListView({
                model: new LikeListModel({
                    iItemId: this.model.getId(),
                    sItemType: this.model.getItemType()
                })
            }).render().inject();
        },

        updateView: function() {
            this.$el.find('.comment-action-holder').html(this.templateAction({
                item: this.model
            }));
        },

        onLikeClick: function(evt) {
            var $ele = $(evt.currentTarget);

            if ($ele.isProcessing()) {
                return;
            }

            $ele.isProcessing(true);

            var bIsLiked = this.model.isLiked();
            var iTotalLike = this.model.getLikeCount();
            var api = bIsLiked ? 'like/unlike' : 'like/like';
            this.model.set({
                bIsLiked: !bIsLiked,
                iTotalLike: bIsLiked ? iTotalLike - 1 : iTotalLike + 1
            });

            var sendData = {
                iCommentId: this.model.getId(),
                iItemId: this.model.getItemId(),
                sItemType: this.model.getItemType(),
                sParentId: this.model.getParentModuleId(),
            };

            var settings = {
                context: this
            };

            utils.api.post(api, sendData, settings)
                .done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        utils.modal.alert(data.error_message || data.message || _t('Can not load data from server'));
                        this.model.set({
                            bIsLiked: bIsLiked,
                            iTotalLike: iTotalLike
                        });
                        return;
                    }

                    if (data.message) {
                        utils.modal.toast(data.message);
                    }
                })
                .always(function() {
                    $ele.isProcessing(false);
                });
        },

        onDislikeClick: function(evt) {
            var $ele = $(evt.currentTarget);

            if ($ele.isProcessing()) {
                return;
            }

            $ele.isProcessing(true);

            var bIsDisliked = this.model.isDisliked();
            var iTotalDislike = this.model.getDislikeCount();
            var api = bIsDisliked ? 'like/removedislike' : 'like/dislike';
            this.model.set({
                bIsDisliked: !bIsDisliked,
                iTotalDislike: bIsDisliked ? iTotalDislike - 1 : iTotalDislike + 1
            });

            var sendData = {
                iCommentId: this.model.getId(),
                iItemId: this.model.getItemId(),
                sItemType: this.model.getItemType()
            };

            var settings = {
                context: this
            };

            utils.api.post(api, sendData, settings)
                .done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        utils.modal.alert(data.error_message || _t('Can not load data from server'));
                        this.model.set({
                            bIsDisliked: bIsDisliked,
                            iTotalDislike: iTotalDislike
                        });
                        return;
                    }

                    if (data.message) {
                        utils.modal.toast(data.message);
                    }
                })
                .always(function() {
                    $ele.isProcessing(false);
                });
        }
    });
});
define('comment/view/comment-list',[
    'text!comment/tpl/comment-list.html',
    'comment/collection/comment',
    'comment/view/comment-item',
], function(text, Collection, ItemView) {

    return Backbone.View.extend({
        region: {
            more: '.view-more-comment',
        },

        events: {
            'click .view-more-comment': 'viewMoreComment'
        },

        className: 'comment-list',

        template: _.template(text),

        isFirst: true,

        initialize: function(attrs, $holder, $scroller) {

            this.processing = false;

            this.$holder = $holder;

            this.$scroller = $scroller;

            var self = this;

            this.model.comments.on('add', function(model) {
                self.appendComment(model);
            }, this).on('remove', function() {
                self.model.set('iTotalComment', self.model.getCommentCount() - 1);
            });

        },

        loadMoreComment: function() {
            if (this.processing) return;

            var $last_comment_item = this.$el.find('.comment-item').last();

            var data = {
                iItemId: this.model.getId(),
                sParentId: this.model.getParentModuleId(),
                sItemType: this.model.getType(),
                iLastCommentIdViewed: $last_comment_item.data('id')
            };
            var settings = {
                'context': this,
                'beforeSend': this.beforeSend
            };

            utils.api.post('comment/listallcomments', data, settings).done(this.postDone).always(this.postComplete);

        },

        render: function() {
            var self = this;

            this.$el.html('');

            //init jquery variable
            this.$loadMore = $(this.region.more, this.$el);

            this.$noMoreComment = $('.no-more-comment', this.$el); // the scroll lies outside this view

            this.$scroller.trigger('loadmore:end');

            this.model.comments.each(function(comment) {
                this.appendComment(comment);
            }, this);

            setTimeout(function() {
                self.$scroller.trigger('loadmore:unlock').trigger('refresh');
            }, 1000);

            this.checkLoadMore();

            this.$scroller.on('loadmore:load', function() {
                self.loadMoreComment();
            });

            return this;
        },

        inject: function() {
            this.$holder.html(this.$el);
            return this;
        },

        checkLoadMore: function() {
            if (this.model.getCommentCount() > this.model.comments.length) { // it is NOT trivial to remain this consistence
                // this.$loadMore.removeClass('hide');
            } else {
                this.$scroller.data('loadmore_state', false);
                this.$noMoreComment.removeClass('hide');
            }
        },

        appendComment: function(comment) {
            this.$el.append(new ItemView({
                collection: this.model.comments,
                model: comment
            }).render().el);
            this.$scroller.trigger('refresh');
        },

        prependComment: function(comment) {
            this.$el.prepend(new ItemView({
                collection: this.model,
                model: comment
            }).render().el);
            this.$scroller.trigger('refresh');
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.processing = false;
            this.$scroller.trigger('loadmore:end');

        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.processing = true;
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {
            this.model.comments.add(data);
            this.checkLoadMore();
        },

    });
});

define('text!like/tpl/like-detail.html',[],function () { return '<span class="you-like"><%= phrase0 %></span>\n<%= phrase1 %>\n<% if(hasAnd){ %>\n<%= _t(\'and\') %>\n<% } %>\n<% if (phrase2 != \'\'){ %>\n    <a id="other-likes"><%= phrase2 %> </a> \n<%} %>\n<span class="hide" id="has_like"><%=_t(\'liked_this\')%></span>\n<span class="hide" id="no_likes"><%=_t(\'be_the_first_of_your_friends_to_ like_this\')%></span>';});

define('like/view/like-detail',[
    'text!like/tpl/like-detail.html',
    'like/view/like-list',
    'like/model/like-list',
    'core'
], function(text, LikeListView, LikeListModel, core) {

    return Backbone.View.extend({
        template: _.template(text),
        className: 'like-content',
        events: {
            'click #other-likes': 'handleClickOnOtherLikes',
        },
        initialize: function(attrs) {
            var self = this;
            this.model.on('change:bIsLiked', function() {
                self.doUpdateLike();
            });
        },
        doUpdateLike: function() {
            this.render().inject();
        },
        handleClickOnOtherLikes: function() {
            new LikeListView({
                model: new LikeListModel({
                    iItemId: this.model.getId(),
                    sItemType: this.model.getType(),
                    sParentId: this.model.getParentModuleId()
                })
            }).render().inject();
        },

        render: function() {

            var phrase0 = 'သင္',
                phrase1 = '',
                phrase2 = '',
                iTotalLike = this.model.getLikeCount(),
                iRemainLike = iTotalLike - 1,
                likes = this.model.likes;

            if (true == this.model.isLiked()) {
                phrase1 = '';
                phrase0 = 'သင္';
                if (iTotalLike > 1) {
                    phrase0 = 'သင္ႏွင့္ ';
                    phrase1 = '';
                    phrase2 = (iRemainLike > 1) ? (iRemainLike + ' ေယာက္') : (iRemainLike + ' ေယာက္');
                }

            } else {
                // console.log(iTotalLike, aLikes);
                if (iTotalLike > 0 && likes.length) {

                    var index = 0;
                    if (likes.at(0).get('iUserId') == core.viewer.getId()) {
                        index = 1;
                    }

                    phrase1 = '<a href="#user/' + likes.at(index).get('iUserId') + '" >' + likes.at(index).get('sDisplayName') + '</a>';

                    if (iTotalLike > 1) {

                        phrase2 = iTotalLike - 1;
                        if (iTotalLike - 1 > 1) {
                            phrase2 += ' ေယာက္';
                        } else {
                            phrase2 += ' ေယာက္';
                        }
                    }
                }
            }

            if (iTotalLike > 1 && !this.model.isLiked()) {
                phrase0 = 'သင္ႏွင့္ ';
            }

            this.$el.html(this.template({
                isLiked: this.model.isLiked(),
                phrase0: phrase0,
                phrase1: phrase1,
                phrase2: phrase2,
                hasAnd: phrase1 != '' && phrase2 != ''
            }));

            if (!this.model.isLiked()) {
                this.$el.find('.you-like').addClass('hide');
            }

            if (iTotalLike < 1) {
                this.$el.find('#no_likes').removeClass('hide');
            } else {
                this.$el.find('#has_like').removeClass('hide');
            }

            return this;
        }
    });
});

define('text!activity/tpl/activity-extra.html',[],function () { return '<div id="like-list">\n\t\n</div>\n\n<div id="comment-form">\n\t\n</div>\n\n<div id="comment_list_holder">\n    <div class="loading-initiator">\n    </div>\n</div>\n';});

define('activity/view/activity-extra',[

    'like/model/like-detail',
    'comment/model/comment-list',

    'comment/collection/comment',
    'like/collection/like',

    'comment/view/post-comment',
	'comment/view/comment-list',
    'like/view/like-detail',

	'text!activity/tpl/activity-extra.html',

], function(CommentListView, text){

    var LikeModel        = require('like/model/like-detail')
      , CommentListModel = require('comment/model/comment-list')
    
      , CommentCollection = require('comment/collection/comment')
	  , LikeCollection   = require('like/collection/like')
      , CommentListView  = require('comment/view/comment-list')
      , LikeDetailView   = require('like/view/like-detail')
      , PostCommentView  = require('comment/view/post-comment')

      , text             = require('text!activity/tpl/activity-extra.html')
    ;

	return Backbone.View.extend({
		className: 'activity-extra',
		region: {
			main: '#activity_extra_holder',
			content: '#content'
		},
		initialize: function(attrs, $holder, $scroller){
			this.$holder = $holder;
			this.$scroller = $scroller;
		},
		template: _.template(text),
		render: function(context){
			
			this.$el.html(this.template({item: this.model}));
			
            this.fetchExtraData();

            //init jquery variables
            this.$likeHolder = this.$el.find('#like-list');
            
            this.$commentListViewHolder = this.$el.find('#comment_list_holder');
            
            this.$postCommentHolder = this.$el.find('#comment-form');

			return this;
		},

        fetchExtraData: function() {
            var data = {
                'iItemId': this.model.getId(),
                'sParentId': this.model.getParentModuleId(),
                'sItemType': this.model.getType()
            },
                settings = {
                'context': this,
                // 'beforeSend': this.beforeSend
            };

            utils.api.post('statistic/info', data, settings).done(this.postDone).always(this.postComplete);
        },

		inject: function(){
			
			this.$holder.html(this.$el);		
			
			this.$scroller.data('loadmore_state',true); // release load more because comment is initialized.
			
			return this;
		},
		
		 /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message);
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {

            var self = this;
            
            this.model.likes = new LikeCollection();
			
			this.model.likes.add(data.aLikes);
			            
            this.$likeHolder.html(new LikeDetailView({
                model: this.model
            }).render().el);
			
			this.model.comments = new CommentCollection(data.aComments);
            _.each(this.model.comments.models, function(comment) {
                comment.set('parentModuleId', this.model.getParentModuleId());
            }, this);
			
			//post comment view
			
			this.model.set('bCanComment', data.bCanComment);
			
            if (data.bCanComment) {
                this.postCommentView = new PostCommentView({
                    model: this.model
                });

                this.$postCommentHolder.html(this.postCommentView.render().$el);
            }

            this.commentListView = new CommentListView({
                model: this.model
            }, this.$commentListViewHolder, this.$scroller);

			this.commentListView.render().inject();
			
            //bind event
            this.postCommentView.on('comment:add', function(comment) {
                self.commentListView.prependComment(comment);
                // console.log(comment);
                // listComments.add(comment);
            });
        },
	});
});

define('activity/main',[
	'core',
 	// plugin
 	'activity/plugin/activity',
 	'activity/plugin/activity',
 	// controller
	'activity/controller/newsfeed',
 	'activity/controller/activity-detail',
 	'activity/controller/activity-compose',
 	
 	'activity/view/activity-extra',
 ],function(core) {
 	
 	var ExtraView = require('activity/view/activity-extra');
 	
 	utils.helper.addActivityExtraBlock = function(model, $holder, $scroller){
 		new ExtraView({
 			model: model
 		}, $holder, $scroller)
 		.render().inject();	
 	}
 	
 	core.sidebar.configs.set('new_feed',{
 		icon: 'icon-sidebar-activity',
 		url: '#newsfeed',
 		label: 'News Feed'
 	});
});

define('activity', ['activity/main'], function (main) { return main; });

define('beeber_box',[],function(){
	var Beeber = function(boxView, indicator){
		this.isShown = false;
		
		this.boxView = boxView;
		
		var self = this;
		
		$(document).on('click', indicator, function(){
			console.log('clicked on ' + indicator);
			if(self.isShown){
				self.close();
			} else {
				self.open();
			}
		});
	}
	
	Beeber.prototype.open =  function(){
		
		if(true  == this.isShown ){
			return this.isShown = true;
		}
		
		utils.observer.trigger('beeber:before_open', this);
		
		this.isShown = true;
		
		this.view = new (this.boxView)();
		
		this.view.render().inject().open();	
		
	}
	
	Beeber.prototype.close = function(){
		
		if(false == this.isShown)
		{
			this.isShown = false;
		}
	
		this.view.close();
		
		this.isShown = false;
		
		utils.observer.trigger('beeber:after_close', this);
		
	}
	
	return Beeber;

});


define('text!request/tpl/request-box.html',[],function () { return '<div id="box-request-content" class="box-request-content swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="request_list_view_holder" class="box-request-list swiper-list vertical">\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>';});

define('request/model/request',[],function(){
	
	var Model = Backbone.Model.extend({
		idAttribute: 'iRequestId',
		defaults: {
			sModelType: 'request',
			sRequestType: 'friend_request'
		}
	});
	
	Model.prototype.getPosterId =  function(){
		return this.get('iResourceId');
	}
	
	Model.prototype.getPosterType =  function(){
		return 'user';
	}
	
	Model.prototype.getPosterImageSrc =  function(){
		return this.get('UserProfileImg_Url');
	}
	
	Model.prototype.getRequestType = function(){
		return this.get('sRequestType') ||'';
	}
	
	return Model;
});


define('text!request/tpl/request-box-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading -->\n</div>';});

define('request/view/request-box-list',[
	'request/model/request',
	'text!request/tpl/request-box-list.html',
],function(Model, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: 'all',
			iPage: 1,
			sSearch: '',
			iCategory: 0,
			iAmountOfVideo: 5
		},
		followById: false,
		api: 'notification/friendrequested',
		phraseNotFound: 'သူငယ္ခ်င္းအျဖစ္ေတာင္းဆုိမွုမရွိပါ။',
		phraseNotMore: 'ေနာက္ထပ္ သူငယ္ခ်င္းေတာင္းဆုိမွုမရွိပါ။',
		className: 'friend-reques-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: null,
		handleInjectItem: function(item, callback){
			var ProxyView = utils.requestProxy.get(item);
			if(!ProxyView){
				return;
			}
			// append if does not exist
			if (this.$el.find('#request_item_' + item.getPosterId()).length == 0) {
				new ProxyView({model: item}).render().inject(callback);
			}
		}
	});
});

define('request/view/request-box',[
	'core',
	'text!request/tpl/request-box.html',
	'request/view/request-box-list'
],function(core, text, ListView){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#box-request',
			scroller: '#box-request-content',
			indicator: '#beeber-request-indicator',
			listViewHolder: '#request_list_view_holder'
		},
		template: _.template(text),
		render: function(){

			this.$el.html(this.template());
			
			this.$scroller =  this.$el.find(this.region.scroller);
			this.$listViewHolder = this.$el.find(this.region.listViewHolder);
			
			this.$wrapper = $(this.region.wrapper);
			this.$indicator  =  $(this.region.indicator);
			
			return this;
		},
		inject: function(){
			
			this.$wrapper.html(this.$el);
			
			this.$scroller .ensureVerticalScroll();
			
			this.listView  = new ListView({},
				this.$listViewHolder,
				this.$scroller,
				{loadnew: true, loadmore: false});
				
			this.listView.render().inject();
			
			return this;
		},
		open: function(){
			
			this.$wrapper.addClass('open');
			
			this.$indicator.addClass('active');
			
			this.$indicator.find('.beeber-counter').addClass('hide');
			
			core.updater.setNumberNewRequest(0);
			
			return this;
		},
		close: function(){
			
			var that      = this;
			
			this.$wrapper.removeClass('open');
			
			this.$indicator.removeClass('active');
			
			window.setTimeout(function(){
				that.remove();
			},300);
			
			return this;
		}
	});
});
define('request/plugin/request-box',[
	'beeber_box',
	'request/view/request-box'
], function(beeber_box, BoxView){
	return new beeber_box(BoxView, '#beeber-request-indicator');
});
define('request/main',[
	// plugin
	'request/plugin/request-box'
],function(){
	return {
		enable: true
	};
});

define('request', ['request/main'], function (main) { return main; });


define('text!friend/tpl/request/friend-request.html',[],function () { return '<!-- video/tpl/video-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<a href="<%= item.getPosterUrl() %>">\n            <img src="<%= item.getPosterImageSrc() %>" width="48" height="48"/>\n        </a>\n\t</div>\n\t<div class="item-headline">\n\t\t<a href="<%= item.getPosterUrl() %>"><%= utils.str.shorten(item.getPosterTitle(),22,false) %></a> <%= _t(\'has_sent_a_friend_request\') %>\n\t</div>\n\t<div class="item-action">\n\t\t<div class="btn btn-primary btn-long" id="friend_accept_btn"><%= _t(\'accept\') %></div>\n\t\t<div class="btn btn-default btn-long" id="friend_deny_btn"><%= _t(\'deny\') %></div>\n\t</div>\n</div>\n';});

define('friend/view/request/friend-request',[
	'text!friend/tpl/request/friend-request.html'
],function(text){
	
	return Backbone.View.extend({
		className: 'beeber-request-item',
		template: _.template(text),
		render: function(){
			this.$el.attr("id", "request_item_" + this.model.getPosterId());
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(inject){
			inject(this.$el);
		},
		events: {
			"click #friend_accept_btn": "acceptFriend",
			"click #friend_deny_btn": "denyFriend"
		},
		acceptFriend: function (evt) {
			var self = this;
			var target = $(evt.currentTarget);
			
			if (this.isProcessing()) {
				return;
			}
			
			target.addClass("processing");
			
			var sendData = {
				iUserId: this.model.getPosterId()
			};
			
			utils.api.post("friend/confirm", sendData)
			.complete(function () {
				target.removeClass("processing");
			})
			.done(function (data) {
				if (data.hasOwnProperty('error_code') && data.error_code) {
					utils.modal.alert(data.error_message);
					return;
				}
				
				// response success
				target.parent().html('<div class="friend-confirmed">Confirmed</div>');
			});
		},
		denyFriend: function (evt) {
			var self = this;
			var target = $(evt.currentTarget);
			
			if (this.isProcessing()) {
				return;
			}
			
			target.addClass("processing");
			
			var sendData = {
				iUserId: this.model.getPosterId()
			};
			
			utils.api.post("friend/deny", sendData)
			.complete(function () {
				target.removeClass("processing");
			})
			.done(function (data) {
				if (data.hasOwnProperty('error_code') && data.error_code) {
					utils.modal.alert(data.error_message);
					return;
				}
				
				// response success
				target.parent().html('<div class="friend-denied">Denied</div>');
			});
		},
		isProcessing: function () {
			if ($('#friend_accept_btn').hasClass("processing")) {
				return true;
			}
			
			if ($('#friend_deny_btn').hasClass("processing")) {
				return true;
			}
			
			return false;
		}
	});
});

define('friend/plugin/request',[
	'friend/view/request/friend-request'
],function(FriendRequest){
	
	utils.requestProxy.add(['friend_request'], FriendRequest);
});

define('friend/plugin/friend-action',[
],function(core, ReportThisView){
	
	utils.observer.on('friend:friend-action', function($ele, evt){
		var friendData      = $ele.data('friend')
		  , parts           = friendData.split(';')
          , id              = parseInt(parts[0], 10)
          , isFriend        = parseInt(parts[1], 10)
          , isSentRequest   = parseInt(parts[2], 10)
          , isSentRequestBy = parseInt(parts[3], 10)
          , choices         = ['OK', 'Cancel']
          , OKPosition      = 1
          , CancelPosition  = 2
          , RejectPosition  = 3
          , action
          , api
          , consequenceIsFriend
          , consequenceIsSentRequest
          , consequenceIsSentRequestBy

        /**
        * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
        */
        var postComplete = function() {
            $ele.isProcessing(false);
        }

        /**
        * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
        */
        var beforeSend = function() {
            $ele.isProcessing(true);
        };

        /**
        * It is called when having a response returned.
        * Note that it will not be called if server returns status !== 200
        */
        var postDone = function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                postSuccess(data);
            }
        }

        /** 
        * It should be called when the response has error_code == 0 
        */
        var postSuccess = function (data) {
            utils.observer.trigger('friend:action-done', {
                iItemId: id,
                isFriend: consequenceIsFriend,
                isSentRequest: consequenceIsSentRequest,
                isSentRequestBy: consequenceIsSentRequestBy
            });

            utils.modal.toast('Action completed');
            utils.popup.close();
        }


        if(isFriend) {
            // -> unfriend
            api = 'friend/delete';
            message = 'Do you want to remove this member from your friend list?';
            consequenceIsFriend =  false;
            consequenceIsSentRequest = false;
            consequenceIsSentRequestBy = false;

        } else {
            if(isSentRequest) {
                //cancel friend request
                api = 'friend/cancelrequest';
                message = 'Do you want to cancel friend request to this member?';
                consequenceIsFriend =  false;
                consequenceIsSentRequest = false;
                consequenceIsSentRequestBy = false;
            } else {
                if(isSentRequestBy) {
                    // confirm
                    choices = ['Accept', 'Reject', 'Cancel'];
                    OKPosition = 1;
                    RejectPosition = 2;
                    CancelPosition = 3;
                    
                    // deny case handled after confirmed
                    api = 'friend/confirm'; 
                    message = 'Do you want to confirm this friend request?';
                    consequenceIsFriend =  true;
                    consequenceIsSentRequest = false;
                    consequenceIsSentRequestBy = false;

                } else {
                    // add-friend
                    api = 'friend/add';
                    message = 'Do you want to add this member to your friend list?';
                    consequenceIsFriend =  false;
                    consequenceIsSentRequest = true;
                    consequenceIsSentRequestBy = false;
                }
            }
        }

        if(!$ele.isProcessing()) {
            utils.modal.confirm(message, function(result) {
                var data = {
                        iUserId: id
                    }
                  , settings = {
                        'beforeSend': beforeSend
                    };
                    
                if(result == CancelPosition) {
                    // do nothing 
                } else if(result === OKPosition) {

                    utils.api.post(api, data, settings).done(postDone).always(postComplete);
                } else if(result === RejectPosition ) {

                    consequenceIsFriend        = false;
                    consequenceIsSentRequest   = false;
                    consequenceIsSentRequestBy = false;
                    api                        = 'friend/deny';

                    utils.api.post(api, data, settings).done(postDone).always(postComplete);

                }

            }, _t('Confirm'), choices);
        } else {
            utils.modal.info('Item is processing');
        }
	});
});



define('friend/plugin/activity',[],function() {
    utils.headline.add('friends', function(item) {
        item.set('sContent', ''); // fix issue with socialengine content can not translate.
        return _t('is now friend with %s', item.getObjectLink(11));
    })
});

define('text!friend/tpl/friend-index.html',[],function () { return '<!-- friend/tpl/friend-index.html-->\n<div class="header">\n    <% if(bIsRoot) {%>\n        <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n            <i class="icon icon-sidebar"></i>\n        </div>\n    <% } else { %>\n        <div class="header-left">\n            <div class="btn-top btn-back" rel="back"></div>\n        </div>\n    <% } %>\n\t<div class="header-center">\n            <div class="title"><%= _t(\'friends\') %></div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'no_friends_found\') %></div>\n\t\t\t<div class="swiper-list vertical-align" id="friend_list_view_holder">\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n';});

define('friend/model/friend',['require'],function(core) {
	return Backbone.Model.extend({
		idAttribute : 'id',
		defaults : {
			'sModelType' : 'user'
		},
        isSelf: function () {
            return (this.getId() == Backbone.iUserId);
        },
		getName : function() {
			return this.get('sFullName');
		},
		getTitle : function() {
			return this.get('sFullName');
		},
		getUrl: function(){
			return '#user/' + this.getId();
		},
		getLink: function(){
			return '<a href="'+this.getUrl()+'">'+ this.getTitle() +'</a>';
		},
		getMultualFriendCount : function() {
			return this.get('iMutualFriends') || 0;
		},

		getTextMutualFriend : function() {
			var iNumber = this.get('iMutualFriends');
			//return iNumber + (iNumber == 1 ? " mutual friend" : " mutual friends");
			return " အျပန္အလွန္ သူငယ္ခ်င္း "+ iNumber +" ေယာက္";
		},

		isFriend : function() {
			return this.get('isFriend') || false;
		},

		getImgSrc : function() {
			return this.get('UserProfileImg_Url') || '';
		},

		isSentRequestBy : function() {
			return this.get('bSentRequestBy') || false;
		},

		isSentRequest : function() {
			return this.get('bSentRequest') || false;
		},

		getStatus : function() {
			return this.get('sStatus') || '';
		},

		hasNewMessage : function() {
			return !!this.get('bHasNewMessage');
		}
	});
});


define('text!friend/tpl/friend-item.html',[],function () { return '<!-- friend/tpl/friend-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<a href="<%= item.getUrl() %>">\n\t\t\t<img src="<%= item.getImgSrc() %>">\t\n\t\t</a>\n\t</div>\n\t<a class="item-headline" href="<%= item.getUrl() %>"><%= item.getPosterTitle() %></a>\n\t<%if (!item.isSelf()) {%>\n    <div class="item-subline">\n\t\t<span class="item-stats"><%= item.getTextMutualFriend() %></span>\n\t</div>\n\t<div id="item_action_holder" class="item-action">\n        <%if (item.isSentRequestBy()) {%>\n\t\t<%} else if (item.isSentRequest()) {%>\n        <div class="request-sent"><%= _t(\'request_sent\') %></div>\n        <%} else if (!item.isFriend() && !item.isOwner()) {%>\n        <div id="add_friend_btn" class="btn btn-primary btn-long"><%= _t(\'add_friend\') %></div>\n        <%} else {%>\n        <a href="#messages/compose/<%=item.getId()%>" class="btn btn-primary btn-long"><%= _t(\'send_a_message\') %></a>\n        <%}%>\n\t</div>\n    <%}%>\n</div>\n';});

define('friend/view/friend-item',[
	'text!friend/tpl/friend-item.html'
], function(text) {

	return Backbone.View.extend({
		region : {},
		className : 'friend-item',
		template : _.template(text),
		render : function() {

			this.$el.html(this.template({
				item : this.model
			}));

			return this;
		},
		inject : function(inject) {
			inject(this.$el);
		},
		events : {
			"click #add_friend_btn" : "addFriend"
		},
		addFriend : function(evt) {

			var target = $(evt.currentTarget);

			if (target.hasClass("processing")) {
				return;
			}

			target.addClass("processing");

			var sendData = {
				iUserId : this.model.getId()
			}, settings = {
				context : this
			};

			utils.api.post("friend/add", sendData, settings)
			.always(function() {
				target.removeClass("processing");
			}).done(function(data) {
				if (data.hasOwnProperty('error_code') && data.error_code) {
					utils.modal.alert(data.error_message);
					return;
				}
				target.parent().html('<div class="request-sent">Request sent</div>');
			});
		}
	});
});


define('text!friend/tpl/friend-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading friend -->\n</div>';});

define('friend/view/friend-list',[
	'friend/model/friend',
	'friend/view/friend-item',
	'text!friend/tpl/friend-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sAction: "all",
            iAmountOfFriend: 20,
            iPage: 1
		},
		followById: false,
		api: 'friend/get',
		phraseNotFound: 'No friends found.',
		phraseNotMore: 'No more friends.',
		className: 'friend-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('text!friend/tpl/friend-search.html',[],function () { return '<div class="search-simple">\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_friend\') %>" value="">\n\t</div>\n</div>';});

define('friend/view/friend-search',[
	'text!friend/tpl/friend-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
			
			return this;
		},
		events: {
			"click #search_icon": "submitSearch",
            'click #adv_search_toggle_btn': 'toggleSearch'
		},
        toggleSearch: function() {
            this.$advSearchHolder.toggleClass('hide');
        },
		submitSearch: function () {
			
			// this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || ''
			});
		}
	});
	
});

define('friend/view/friend-index',[
	'text!friend/tpl/friend-index.html',
	'friend/view/friend-list',
	'friend/view/friend-search',
], function(text, ListView, SearchView) {
	
	return Backbone.View.extend({
		region: {
			wrapper: '#main',
			scroller: '#content',
			listViewHolder: '#friend_list_view_holder'
		},
		template : _.template(text),
		render : function(query) {
			
			this.query 			= $.extend({}, query);
			
			this.$el.html(this.template(this.query));
			
			this.$scroller 			= this.$el.find(this.region.scroller);
			this.$listViewHolder  	= this.$el.find(this.region.listViewHolder);
			
			return this;
		},
		inject: function(){
			
            var self = this;
            
			$(this.region.wrapper).html(this.$el);
			
			var useSwiper   =  constants.os_version < '30';
			this.$scroller.ensureVerticalScroll(useSwiper);
			
			this.searchView = new SearchView();
            
            this.searchView.render().inject();
			
            this.searchView.on('submit', function(data){
				
				var query = $.extend({}, self.query, data);
				
				self.listView.resetQuery(query);
			});
			
			this.listView  = new ListView({}, 
				this.$listViewHolder,
			 	this.$scroller,
			  	{loadmore: true, loadnew: false}
            );
			 
            this.listView.render(this.query).inject();
            
			return this;
		}
	});
});

define('friend/controller/friend-index',[
	'core',
	'friend/view/friend-index'
],function(core, IndexView, ListView){
	
	function IndexController(userId)
	{
		var bIsRoot = true;
		
		if (userId) {
			bIsRoot = false;
		}
		
		utils.history.push(bIsRoot);
		
		utils.observer.trigger('router:changed');

		userId = userId || core.viewer.getId();
		
		new IndexView()
			.render({iUserId: userId, bIsRoot: bIsRoot})
			.inject();	
	}
	
	utils.router.route('friends(/:userId)', IndexController);
});

define('friend/main',[
	'core',
	// plugin
	'friend/plugin/request',
	'friend/plugin/friend-action',
	'friend/plugin/activity',
	// controller
	'friend/controller/friend-index'
],function(core){
	
	core.sidebar.configs.set('friend',{
 		icon: 'icon-sidebar-friend',
 		label: 'Friends',
 		url: '#friends',
 	});
});

define('friend', ['friend/main'], function (main) { return main; });


define('text!message/tpl/message-box.html',[],function () { return '<div class="box-header">\n\t<a href="#messages/compose">\n\t\t<i class="icon icon-compose-message"></i>\n\t\t<span><%= _t(\'new_message\') %></span>\n\t</a>\n</div>\n<div id="box-message-content" class="box-message-content swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="pvs"></div>\n\t\t\t<div id="message_box_list_view_holder" class="swiper-list vertical"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="box-footer">\n    <div class="text-anchor">\n    \t<div class=""><a href="#messages"><%= _t(\'see_all\') %></a></div>\n    </div>\n</div>';});

define('message/model/conversation',[],function(){
	
	var Model = Backbone.Model.extend({
		
	});
	
	Model.prototype.getId =  function(){
		return this.get('iConversationId');
	}
	
	Model.prototype.getUrl =  function(){
        return '#message/' + this.getId();
	}
	
	Model.prototype.getTitle =  function(){
		return this.get('sTitle');
	}
	
	Model.prototype.getDescription = function(){
		return this.get('sBody').replace(/\[img\][^\[]+\[\/img\]/gi, '');
	}
	
	Model.prototype.getPosterTitle =  function(){
		return this.get('sOwnerFullName');
	}
	
	Model.prototype.getPosterImageSrc = function(){
		return this.get('sOwnerImage');
	}
	
	Model.prototype.getPosterId = function(){
		return this.get('iOwnerId');
	}
	
	Model.prototype.getPosterUrl =  function(){
		return '#user/' + this.getPosterId();
	}
	
	Model.prototype.getPosterLink = function(){
		return '<a href="'+this.getPosterUrl()+'">'+this.getPosterTitle()+'</a>';
	}
	
	Model.prototype.isRead = function () {
		return false !== this.get('bIsRead');
	}

    Model.prototype.getPostedDate = function(){
        return this.get('sTimeConverted');
    }
    
    Model.prototype.getFolder = function () {
        return this.get('sNameOfFolder');
    }
    
    Model.prototype.isReply = function () {
        return this.get('bIsReply') ? true : false;
    }
    
    Model.prototype.getRecipients = function () {
        return this.get('aRecipients');
    }
	
	return Model;
});


define('text!message/tpl/message-box-item.html',[],function () { return '<!-- message/message-box-item.html -->\n<a href="<%= item.getUrl() %>" class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<img src="<%= item.getPosterImageSrc() %>"/>\n\t</div>\n\t<div class="item-headline">\n\t\t<div class="item-subline">\n\t\t\t<i class="icon icon-time"></i>\n\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\t\n\t\t</div>\n\t\t<span><%= item.getPosterTitle() %></span>\n\t</div>\n\t<div class="item-description">\n\t\t<%= item.getTitle() %>\n\t</div>\n</a>\n';});

define('message/view/message-box-item',[
	'text!message/tpl/message-box-item.html'
],function(text){

	return Backbone.View.extend({
		className: 'box-message-item',
		template: _.template(text),
		render: function(){
			if (!this.model.isRead()) {
				this.$el.addClass("message-new");
			}
			this.$el.attr("id", "message_item_" + this.model.getId());
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});


define('text!message/tpl/message-box-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading ... -->\n</div>';});

define('message/view/message-box-list',[
	'message/model/conversation',
	'message/view/message-box-item',
	'text!message/tpl/message-box-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: 'all',
			iPage: 1,
			sSearch: '',
			iCategory: 0,
			iAmountOfMessage: 10, // set 10 items in tablet.
		},
		followById: false,
		api: 'message/inbox',
		phraseNotFound: 'စာတုိ မရွိပါ။',
		phraseNotMore: 'ေနာက္ထပ္ စာတုိ မရွိပါ။',
		className: 'box-conversation-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});

define('message/view/message-box',[
	'core',
	'text!message/tpl/message-box.html',
	'message/view/message-box-list'
],function(core, text, ListView){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#box-message',
			indicator: '#beeber-message-indicator',
			scroller: '#box-message-content',
			listViewHolder: '#message_box_list_view_holder',
			scroller: '#box-message-content',
		},
		events: {
			'click .box-footer': 'viewAll'
		},
		template: _.template(text),
		viewAll: function()
		{
			utils.observer.trigger('router:changed');
			
			window.location.href = '#messages';
			
		},
		render: function(){
			this.$el.html(this.template());
			
			this.$scroller = this.$el.find(this.region.scroller);
			this.$listViewHolder = this.$el.find(this.region.listViewHolder);
			
			this.$wrapper = $(this.region.wrapper);
			this.$indicator = $(this.region.indicator);
			
			return this;
		},
		inject: function(){
			
			this.$wrapper.html(this.$el);
			
			var useSwiper   =  constants.os_version < '30';
			this.$scroller.ensureVerticalScroll(useSwiper);
			
			this.listView = new ListView({},
				this.$listViewHolder,
				this.$scroller,
				{loadnew: false, loadmore: true});
			
			this.listView.render(this.query).inject();
				
			return this;
		},
		open: function(){
			
			this.$wrapper.addClass('open');
			
			this.$indicator.find('.beeber-counter').addClass('hide');

			this.$indicator.addClass('active');
			
			core.updater.setNumberNewMessage(0);
			
			return this;
		},
		close: function(){
			var that = this;

			this.$wrapper.removeClass('open');
						
			this.$indicator.removeClass('active');
			
			window.setTimeout(function(){
				that.remove();
			},300);
			
			return this;
		}
	});
});
define('message/plugin/message-box',[
	'beeber_box',
	'message/view/message-box'
], function(beeber_box, BoxView){
	return new beeber_box(BoxView, '#beeber-message-indicator');
});

define('text!message/tpl/conversation-index.html',[],function () { return '<!-- message/tpl/message-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#messages/compose"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title"><%= _t(filter == \'inbox\'? \'လက္ခံစာ\': \'ပို.စာ\') %></div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'no_messages_found\') %></div>\n\t\t\t<div class="swiper-list vertical" id="conversation_list_view_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item <%= filter == \'inbox\'? \'current\': \'\' %>" href="#messages">\n        \t<div class=""><%= _t(\'inbox\') %></div>\n        </a>\n        <a class="menu-item <%= filter == \'sent\'? \'current\': \'\' %>" href="#messages/sent">\n        \t<div class="sibling"><%= _t(\'sent_msg\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!message/tpl/conversation-item.html',[],function () { return '<!-- video/tpl/video-item -->\n<a href="<%= item.getUrl() %>" class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<img src="<%= item.getPosterImageSrc() %>" width="48" height="48"/>\n\t</div>\n\t<div class="item-headline">\n\t\t<div class="item-subline">\n\t\t\t<%if (item.getFolder() != \'sent\') {%><span class="item-folder"><%=item.getFolder()%></span><%}%>\n\t\t\t<i class="icon icon-time"></i>\n\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t</div>\n\t\t\n\t\t<span><%= item.getPosterTitle() %></span>\n\t</div>\n\t<div class="item-title">\n\t\t<%if (item.isReply()) {%><%=_t(\'re\')%>: <%}%><%= item.getTitle() %>\n\t</div>\n\t<div class="item-description">\n\t\t<%= utils.str.shorten(item.getDescription(), 100) %>\n\t</div>\n</a>\n';});

define('message/view/conversation-item',[
	'text!message/tpl/conversation-item.html'
],function(text){
	return Backbone.View.extend({
		region: {},
		className: 'conversation-item',
		template: _.template(text),
		render: function(){
			
			if (!this.model.isRead()) {
				this.$el.addClass("message-new");
			}
			
			this.$el.attr("id", "conversation_item_" + this.model.getId());
			
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});


define('text!message/tpl/conversation-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading ... -->\n</div>\n';});

define('message/view/conversation-list',[
	'message/model/conversation',
	'message/view/conversation-item',
	'text!message/tpl/conversation-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			iPage: 1,
			sSearch: '',
			iCategoryId: 0,
			iAmountOfMessage: 10 // for tablet load 10 items to full screen.
		},
		followById: false,
		api: 'message/fetch',
		phraseNotFound: 'စာတုိ မရွိပါ',
		phraseNotMore: 'ေနာက္ထပ္ စာတုိ မရွိပါ။',
		className: 'conversation-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('text!message/tpl/conversation-search.html',[],function () { return '<div class="search-simple">\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_your_messages\') %>" value="">\n\t</div>\n</div>';});

define('message/view/conversation-search',[
	'text!message/tpl/conversation-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$keywordInput  = this.$el.find('#search_keywords');
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			return this;
		},
		events: {
			"click #search_icon": "submitSearch",
            'click #adv_search_toggle_btn': 'toggleSearch'
		},
        toggleSearch: function() {
            this.$advSearchHolder.toggleClass('hide');
        },
		submitSearch: function () {
			
			// this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || ''
			});
		}
	});
	
});

define('message/view/conversation-index',[
	'text!message/tpl/conversation-index.html',
	'message/view/conversation-list',
	'message/view/conversation-search'
],function(text){
	
	var ListView = require('message/view/conversation-list')
	  , SearchView = require('message/view/conversation-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(query){
			
			this.query  = $.extend({}, {filter: 'inbox'}, query);
			
			this.$el.html(this.template(this.query));
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({}, 
				this.$el.find('#conversation_list_view_holder'),
				this.$scroller,
				{
					loadmore: true,
					loadnew: true,
				});
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render(this.query).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				
				var query = $.extend({}, self.query, data);
				
				self.listView.resetQuery(query);
			});
			
			return this;
		}
	});
});

define('message/controller/conversation-index',[
	'core',
	'message/view/conversation-index'
],function(core, IndexView){
	
	var InboxController = function (){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			filter: 'inbox'
		}).inject();
	}
	
	var SentController = function(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			filter: 'sent'
		}).inject();
	}
	
	utils.router.route('messages', InboxController);
	
	utils.router.route('messages/sent', SentController);
});


define('text!message/tpl/conversation-detail.html',[],function () { return '<!-- message/tpl/message-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading ...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="content" class="content with-header-footer swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="message-recipient-list" class="hide">\n\t\t\t\t<%= _t(\'between\') %> <a href="<%=viewer.getUrl()%>"><%= _t(\'you\') %></a>\n\t\t\t\t<%= _t(\'and\') %> <span id="recipients_list_less"></span>\n\t\t\t\t<span id="recipients_list_more" class="hide"></span>\n\t            <i id="toggle_recipients" class="hide"><%= _t(\'more\') %></i>\n            </div>\n\t\t\t<div class="swiper-list vertical" id="message_list_view_holder"> <!-- message-list -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-1 fobos">\n        <a class="menu-item hide" id="conversation_reply_btn" href="#message-reply/<%=item.getId()%>">\n        \t<div class=""><%= _t(\'reply\') %></div>\n        </a>\n        <div class="menu-item">\n        \t<div class="sibling" id="conversation_delete_btn"><%= _t(\'delete\') %></div>\n        </div>\n    </div>\n</div>';});

define('message/model/message',[],function() {

    var Model = Backbone.Model.extend({

    });


    Model.prototype.getId = function() {
        return this.get('iMessageId');
    }

    Model.prototype.getConversationId = function() {
        return this.get('iConversationId');
    }

    Model.prototype.getTitle = function() {
        return this.get('iConversationTitle');
    }

    Model.prototype.getUrl = function() {
        return '#message/' + this.getId();
    }

    Model.prototype.getPosterTitle = function() {
        return this.get('sFullName');
    }

    Model.prototype.getPosterImageSrc = function() {
        return this.get('sImage');
    }

    Model.prototype.getContent = function() {

        var sBody = this.get('sBody') || '';

        return utils.helper.parseExternalLink(sBody);
    }

    Model.prototype.getPostedDate = function() {
        return this.get('sTimeConverted');
    }
    Model.prototype.getPosterId = function() {
        return this.get('iUserId');
    }

    Model.prototype.getPosterUrl = function() {
        return '#user/' + this.getPosterId();
    }

    return Model;
});

define('text!message/tpl/message-item.html',[],function () { return '<div class="clearfix message-item">\n\t<div class="item-image">\n\t\t<a href="<%= item.getPosterUrl() %>">\n\t\t\t<img src="<%= item.getPosterImageSrc() %>" />\n\t\t</a>\n\t</div>\n\t<div class="item-headline">\n\t\t<div class="item-subline">\n\t\t\t<i class="icon icon-time"></i>\n            <span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t</div>\n\t\t<a href="<%= item.getPosterUrl() %>">\n\t\t\t<%= item.getPosterTitle() %>\n\t\t</a>\n\t</div>\n\t<div class="item-description">\n\t\t<%= item.getContent() %>\n\t</div>\n\t<div class="item-attachment">\n\t</div>\n</div>';});


define('text!message/tpl/attachment/album_photo.html',[],function () { return '<div class="item-att-image" rel="link" data-url="#photo-detail/album_photo/0/<%=item.iId%>">\n\t<img src="<%=item.sUrl%>" style="width: 100%" class="responsive-max-width"/>\n</div>\n<div class="item-att-title">\n\t<a href="#album_photo/<%=item.iId%>"><%=item.sTitle%></a>\n</div>\n<div class="item-att-description">\n\t<%=item.sDescription%>\n</div>\n';});


define('text!message/tpl/attachment/core_link.html',[],function () { return '<div class="item-att-image">\n\t<a href="javascript:window.open(\'<%=item.sLink_Url%>\', \'_blank\', \'location=yes\');"><img src="<%=item.sUrl%>" /></a>\n</div>\n<div class="item-att-title">\n\t<a href="javascript:window.open(\'<%=item.sLink_Url%>\', \'_blank\', \'location=yes\');"><%=item.sTitle%></a>\n</div>\n<div class="item-att-description">\n\t<%=item.sDescription%>\n</div>';});


define('text!message/tpl/attachment/music_playlist_song.html',[],function () { return '<div class="item-att-image">\n\t<a href="#music_playlist_song/<%=item.iId%>"><i class="icon-music"></i></a>\n</div>\n<div class="item-att-title">\n\t<a href="#music_playlist_song/<%=item.iId%>"><%=item.sTitle%></a>\n</div>\n<div class="item-att-description">\n\t<%=item.sDescription%>\n</div>';});


define('text!message/tpl/attachment/video.html',[],function () { return '<div class="item-att-image">\n\t<a href="#video/<%=item.iId%>"><img src="<%=item.sUrl%>" /></a>\n</div>\n<div class="item-att-title">\n\t<a href="#video/<%=item.iId%>"><%=item.sTitle%></a>\n</div>\n<div class="item-att-description">\n\t<%=item.sDescription%>\n</div>';});

define('message/view/message-item-attachment',[
	'text!message/tpl/attachment/album_photo.html',
	'text!message/tpl/attachment/core_link.html',
	'text!message/tpl/attachment/music_playlist_song.html',
	'text!message/tpl/attachment/video.html'
],function(){
	
	var tpl = {
		album_photo 		: require('text!message/tpl/attachment/album_photo.html'),
		advalbum_photo		: require('text!message/tpl/attachment/album_photo.html'),
		core_link 			: require('text!message/tpl/attachment/core_link.html'),
		music_playlist_song : require('text!message/tpl/attachment/music_playlist_song.html'),
		video 				: require('text!message/tpl/attachment/video.html')
	};
	
	return Backbone.View.extend({
		region: {},
		template: null,
		render: function(item){
			
			this.template = _.template(tpl[item.sType]);
			
			this.$el.addClass("attachment_" + item.sType);
			this.$el.html(this.template({item: item}));
			
			return this;
		}
	});
});

define('message/view/message-item',[
	'text!message/tpl/message-item.html',
	'message/view/message-item-attachment'
],function(text, AttachmentView){
	
	return Backbone.View.extend({
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			if (this.model.get('aAttachments') != "") {
				var attachmentHolder = this.$el.find('.item-attachment');
				attachmentHolder.html(new AttachmentView().render(this.model.get('aAttachments')).el);
			}
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});


define('text!message/tpl/message-list.html',[],function () { return '<div class="loading-initiator">\n\t\n</div>';});

define('message/view/message-list',[
	'message/model/message',
	'message/view/message-item',
	'text!message/tpl/message-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			iPage: 1,
		},
		followById: false,
		api: 'message/detail',
		phraseNotFound: 'စာတုိ မရွိပါ။',
		phraseNotMore: 'ေနာက္ထပ္ စာတုိ မရွိပါ။',
		className: 'message-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});

define('message/view/conversation-detail',[
	'core',
	'text!message/tpl/conversation-detail.html',
	'message/model/conversation',
	'message/view/message-list'
], function(core, text, Model, ListView) {
	
	return Backbone.View.extend({
		region: {
			main: '#main',
			content: '#content'
		},
		template : _.template(text),
		events : {
			"click #toggle_recipients" : "toggleRecipients",
			"click #conversation_delete_btn": "deleteConversation"
		},
		render: function() {
			
            this.context = {
                item: this.model,
                viewer: core.viewer
            };
            
			this.$el.html(this.template(this.context));
            
            this.$pageTitle = this.$el.find('#page_title');
            
            this.$replyBtn = this.$el.find('#conversation_reply_btn');
            
            this.$listHolder = this.$el.find('#message_list_view_holder');
			
			return this;
		},
		inject: function(){
			
			var self = this;
			
            this.$holder = $(this.region.main);
			
            this.$holder.html(this.$el);
			
            this.$scroller = this.$el.find(this.region.content);
            
			this.$scroller.ensureVerticalScroll();
			
			// conversation info
            utils.api.get('message/conversation_detail', {
				iConversationId: this.model.getId()
			})
			.done(function(data) {
				if (data.hasOwnProperty('error_code') && data.error_code) {
					utils.modal.alert(data.error_message);
					return;
				}
				
                self.model.set(data);
                
                self.updateInfo();
			});
			
            // message list
			new ListView({}, this.$listHolder, this.$scroller, {loadmore: false, loadnew: false})
            .render({iItemId: this.model.getId()})
            .inject();
		},
        updateInfo: function () {
            this.$pageTitle.html(this.model.getTitle());
            
            if (this.model.getFolder() != 'sent') {
                this.$replyBtn.removeClass('hide');
            }
            
            this.appendRecipients();
        },
		appendRecipients : function(aRecipients) {
			var aRecipients = this.model.getRecipients();
			
            //remove current user from list
			var iViewerId = core.viewer.getId();
			var iRemove = -1;

			$.each(aRecipients, function(index, aRecipient) {
				if (aRecipient.iUserId == iViewerId) {
					iRemove = index;
				}
			});

			if (iRemove > -1) {
				aRecipients.splice(iRemove, 1);
			}
			
			var lessSpan = $('#recipients_list_less');
			var moreSpan = $('#recipients_list_more');
			
			lessSpan.empty();
			moreSpan.empty();
			
			lessSpan.append('<a href="#user/' + aRecipients[0].iUserId + '">' + aRecipients[0].sUserName + '</a>');
			
			if (aRecipients.length > 1) {
	            lessSpan.append(' and ' + (aRecipients.length - 1) + ' others');
	            
	            var moreList = "";
	            _.each(aRecipients, function (aRecipient) {
	            	moreList += ', <a href="#user/' + aRecipient.iUserId + '">' + aRecipient.sUserName + '</a>';
	            });
	            moreSpan.html(moreList.substring(2));
	            
	            $('#toggle_recipients').removeClass("hide");
	        }
	        
	        $('#message-recipient-list').removeClass("hide");
		},
		toggleRecipients : function(evt) {
			var target = $(evt.currentTarget);
			var lessSpan = $('#recipients_list_less');
			var moreSpan = $('#recipients_list_more');

			lessSpan.toggleClass("hide");
			moreSpan.toggleClass("hide");
			
			current = target.html();
			target.html(current == "More" ? "Less" : "More");
		},
		deleteConversation: function (evt) {
			var self = this;
			var target = $(evt.currentTarget);
			
			if (target.hasClass("processing")) {
				return;
			}
			
			utils.modal.confirm("Are you sure to delete this message?", function (selected) {
				if (selected == 1) {
					target.addClass("processing");
					
					var sendData = {
						iItemId: self.model.getId(),
                        sType: (self.model.getFolder() == 'sent') ? 'sentbox' : self.model.getFolder()
					};
					
					utils.api.post("message/delete", sendData)
					.done(function (data) {
						if (data.hasOwnProperty('error_code') && data.error_code) {
							utils.modal.alert(data.error_message);
							return;
						}
						
						utils.history.goRoot();
					})
					.complete(function () {
						target.removeClass("processing");
					});
				}
			}, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
		}
	});
});

define('message/controller/conversation-detail',[
	'message/model/conversation',
	'message/view/conversation-detail'
],function(Model, View){
	
	function Controller(iConversationId){
		
		utils.history.push();	
		
		utils.observer.trigger('router:changed');
		
		new View({
            model: new Model({
                iConversationId: iConversationId
            })
        }).render().inject();
	}
	
	utils.router.route('message/:id', Controller);
});

define('message/model/friend',[],function() {
	return Backbone.Model.extend({
		idAttribute : 'id',
		defaults : {
			'sModelType' : 'user'
		},
        getTitle: function () {
            return this.get('sFullName');
        },
        getFormatedTitle : function() {
			var sTitle = this.getTitle();
            var sSearch = this.get('sSearch');
            
            if (sTitle && sSearch) {
                var patt = new RegExp('(' + sSearch + ')', 'ig');
                return sTitle.replace(patt, '<strong>$1</strong>');
            }
            
            return sTitle;
		},
		getImgSrc : function() {
			return this.get('UserProfileImg_Url') || '';
		}
	});
});


define('text!message/tpl/friend-item.html',[],function () { return '<img src="<%=item.getImgSrc()%>" width="30" height="30"><span><%=item.getFormatedTitle()%></span>';});

define('message/view/friend-item',[
	'text!message/tpl/friend-item.html'
], function(text) {

	return Backbone.View.extend({
		region : {},
        tagName: 'li',
		className : 'friend-item',
		template : _.template(text),
		render : function() {
        
            this.$el.attr({
                'data-id': this.model.getId(),
                'data-title': this.model.getTitle()
            });

			this.$el.html(this.template({
				item : this.model
			}));

			return this;
		},
		inject : function(inject) {
			inject(this.$el);
		}
	});
});


define('text!message/tpl/friend-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading friend -->\n</div>';});

define('message/view/friend-list',[
    'message/model/friend',
    'message/view/friend-item',
    'text!message/tpl/friend-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iAmountOfFriend: 20,
            iPage: 1,
        },
        followById: false,
        api: 'message/fetchfriend',
        phraseNotFound: 'No friends found.',
        phraseNotMore: 'No more friends.',
        tagName: 'ul',
        className: 'autocomplete shadow',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        parseData: function(data, ItemModel) {
            var self = this;
            return data.map(function(item) {
                item.sSearch = self.query.sSearch;
                return new ItemModel(item);
            });
        }
    });
});

define('text!photo/tpl/attachment-album-photo-item.html',[],function () { return '<!--li class="ynphoto_upload_item"-->\r\n<div class="attachment-photo-item">\r\n\t<span class="attachment-photo-image" data-src="<%= item.ImgSrc %>" data-photoid="<%= item.PhotoId %>">\r\n        <img src="<%= item.ImgSrc %>" />\r\n    </span>\r\n\t<div class="close_button">\r\n\t\t<a href="javascript:void(0);" id="remove_att" data-photoid="<%= item.PhotoId %>" data-src="<%= item.ImgSrc %>"></a>\r\n\t</div>\r\n</div>\r\n\r\n';});

define('photo/view/attachment-album-photo-item',[
	'text!photo/tpl/attachment-album-photo-item.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		//className: 'attachment-album-photo-item',
		template: _.template(text),
		render: function(item){
			// this.$el.attr("id","album_id_"+item.PhotoId);
			this.$el.html(this.template({item: item}));
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});


define('text!photo/tpl/photo-add-actions.html',[],function () { return '<div class="setting-list">\n    <div class="menu-item" rel="delegate" id="onCamera-<%=delegateId%>"><%=_t(\'take_photo\')%></div>\n    <div class="menu-item" rel="delegate" id="onGallery-<%=delegateId%>"><%=_t(\'select_from_gallery\')%></div>\n</div>\n';});

define('photo/view/photo-add-actions',[
    'text!photo/tpl/photo-add-actions.html'
], function(text) { 

    var MoreAction = Backbone.View.extend({
        template: _.template(text),
        events: {
            'click .menu-item': 'close'
        },
        render: function(context) {
			
			this.context = $.extend({
				delegateId: ''
			}, context);
			
            this.$el.html(this.template(this.context));

            return this;
        },

        inject: function() { 
            
            utils.popup.open(this.$el);
			
			return this;
        },
        
        close: function() {
		    utils.popup.close();
			
			return this;
        },
    });

    return MoreAction;
});





define('text!message/tpl/friend-selected-item.html',[],function () { return '<li class="list_user_send">\n    <span><%=sTitle%></span>\n    <% if(iId) { %>\n        <span class="friend_search_remove" data-id="<%=iId%>"><%= _t(\'remove\') %></span>\n    <% } %>\n</li>\n';});


define('text!message/tpl/message-compose.html',[],function () { return '<!-- activity/tpl/newsfeed.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'မပို.ဘူး\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n\t\t<div class="btn-top disabled" id="post_message_btn">\n\t\t\t<%= _t(\'send\') %>\t\n\t\t</div>\n\t</div>\n\t<div class="header-center" href="#">\n\t\t<div class="title">\n\t\t\t<%= _t(\'compose\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<!-- swiper -->\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical">\n\t\t\t\t<div class="clearfix jumptop"></div>\n\t\t\t\t<div class="form-title">\n\t\t\t\t   <%= _t(\'to\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n                    <div id="wrap_mail_to_user">\n                        <ul id="to_user_list" class="mail_list">\n                            <li class="list_user_send_last">\n                                <input type="text" id="mail_to_user" placeholder="<%= _t(\'to\') %>" />\n                                <div class="hide" id="autocomplete_mail_to_holder"></div>\n                            </li>\n                            <div class="clear"></div>\n                        </ul>\n                    </div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t   <%= _t(\'subject\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<input id="subject" type="text" class="control-full text" placeholder="အေၾကာင္းအရာ" />\n\t\t\t\t</div>\n\n\t\t\t\t<div class="form-title">\n\t\t\t\t   <%= _t(\'message\') %>\n\t\t\t\t</div>\n\t\t\t\t<div class="from-group">\n\t\t\t\t\t<textarea id="message" rows="4" class="control-full textarea" name="body" placeholder="စာတုိ"></textarea>\n\t\t\t\t</div>\n\n                <div id="compose_message_attachment_holder"> </div>\n                <input class="btn btn-form-photo" type="button" id="photo_add_btn" />\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('message/view/message-compose',[
    'message/view/friend-list',
    'photo/view/attachment-album-photo-item',
    'photo/view/photo-add-actions',
    'text!message/tpl/friend-selected-item.html',
    'text!message/tpl/message-compose.html'
], function(FriendListView, AttachmentPhotoItemView, PhotoAddActionsView, SelectFriendTpl, text) {

    return Backbone.View.extend({

        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        selectFriendTpl: _.template(SelectFriendTpl),
        initialize: function() {
            this.aSelectedFriend = [];
        },
        render: function(context) {

            this.context = $.extend({}, context);

            this.$el.attr('id', 'message_compose');

            this.$el.html(this.template(this.context));

            //init jquery variable
            this.$autocompleteHolder = $('#autocomplete_mail_to_holder', this.$el);
            this.$attachmentHolder = $('#compose_message_attachment_holder', this.$el);
            this.$photo_add_btn = $('#photo_add_btn', this.$el);
            this.$postBtn = $('#post_message_btn', this.$el);
            this.$to = $('#mail_to_user', this.$el);
            this.$subject = $('#subject', this.$el);
            this.$message = $('#message', this.$el);

            // bind input edit, paste events
            var self = this;
            this.$subject.bind('input propertychange', function() {
                self.toggleBtn();
            });
            this.$message.bind('input propertychange', function() {
                self.toggleBtn();
            });

            return this;

        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            // add selected friend
            if (this.context.iUserId) {
                this.addSelectedFriend(this.context.iUserId);
            }

            // friend autocomplete list
            this.friendListView = new FriendListView({},
                this.$autocompleteHolder,
                this.$autocompleteHolder, {
                    loadmore: false,
                    loadnew: false,
                    input: this.$to
                }
            );

            this.friendListView.render().inject();

            return this;
        },
        events: {
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #post_message_btn': 'post',
            'click .close_button': 'removeAttachment',
            'click #wrap_mail_to_user': 'focusToInput',
            'click .friend-item': 'selectFriend',
            'click .friend_search_remove': 'removeFriend',
            'keyup #mail_to_user': 'searchFriends',
            'touchend': 'hideAutocomplete',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function() {

            var self = this;

            navigator.device.capture.captureImage(onSuccess, onFail, {
                limit: 1
            });

            function onSuccess(mediaFiles) {
                var imageURI = mediaFiles[0].fullPath;
                self.addPhotoItem(imageURI);
            }

            function onFail(msg) {
                utils.debug.warn(msg);
            }
        },
        browsePhoto: function() {

            var self = this;

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                correctOrientation: true
            });

            function onSuccess(imageURI) {
                self.addPhotoItem(imageURI);
            }

            function onFail(msg) {
                utils.debug.warn(msg);
            }
        },
        addPhotoItem: function(path) {

            var self = this;

            var inject = function(dom) {
                self.$attachmentHolder.html(dom);
            };

            new AttachmentPhotoItemView().render({
                PhotoId: 0,
                ImgSrc: path
            }).inject(inject);

            this.$photo_add_btn.addClass('hide');
        },
        removeAttachment: function() {

            this.$attachmentHolder.empty();

            this.$photo_add_btn.removeClass('hide');
        },
        focusToInput: function(evt) {

            this.$to.focus();
        },
        searchFriends: function(evt) {

            if (!this.$to.val().trim()) {
                return;
            }

            this.$autocompleteHolder.removeClass('hide');

            var newQueryTime = +new Date();

            if (newQueryTime - this.friendQueryTime < 200) {
                return;
            }

            this.friendQueryTime = newQueryTime;

            var newQuery = $.extend({}, this.friendQuery, {
                sSearch: this.$to.val()
            });

            this.friendListView.resetQuery(newQuery);
        },
        hideAutocomplete: function(evt) {

            if (!this.$autocompleteHolder.is(evt.target) // if the target of the click isn't the container...
                && this.$autocompleteHolder.has(evt.target).length === 0) // ... nor a descendant of the container
            {
                this.$autocompleteHolder.addClass('hide');
            }
        },
        selectFriend: function(evt) {

            this.$autocompleteHolder.addClass('hide');

            var $target = $(evt.currentTarget);
            var item = {
                iId: $target.data('id'),
                sTitle: $target.data('title')
            };

            if (this.aSelectedFriend.indexOf(item.iId) == -1) {
                this.aSelectedFriend.push(item.iId);
                this.$to.parent().before(this.selectFriendTpl(item));
            }

            this.toggleBtn();

            this.$to.val('');
            this.$to.attr('placeholder', '');
            this.$to.focus();
        },
        addSelectedFriend: function(iUserId) {

            // disable input
            this.$to.attr({
                placeholder: _t('Loading friends...'),
                disabled: true
            });

            // get friend detail
            utils.api.get('profile/detail', {
                iUserId: iUserId
            }, {
                context: this
            }).done(function(data) {
                if (data.error_code && data.error_code > 0 || !data.BasicInfo) {
                    this.$to.attr('placeholder', _t('To'));
                    return utils.modal.alert(_t('Can not load selected friend'));
                }

                var item = {
                    iId: data.BasicInfo.iUserId,
                    sTitle: data.BasicInfo.sFullName
                };

                this.aSelectedFriend.push(item.iId);
                this.$to.parent().before(this.selectFriendTpl(item));

                this.$to.attr('placeholder', '');
            }).always(function() {
                this.$to.removeAttr('disabled');
            });
        },
        removeFriend: function(evt) {

            var $target = $(evt.currentTarget);
            var iId = $target.data('id');

            $target.parent().remove();

            var index = this.aSelectedFriend.indexOf(iId);
            this.aSelectedFriend.splice(index, 1);

            if (this.aSelectedFriend.length == 0) {
                this.$to.attr('placeholder', _t('To'));
            }

            this.toggleBtn();
        },
        post: function() {
            if (this.$postBtn.hasClass('processing')) {
                return false;
            }

            if (!this.isValidate(true)) {
                return false;
            }

            var data = {
                'sUserIds': this.aSelectedFriend.join(),
                'sSubject': this.$subject.val(),
                'sText': this.$message.val()
            };
            var settings = {
                'context': this,
                'beforeSend': this.beforeSend
            };

            var attachmentPhoto = this.$attachmentHolder.find('.attachment-photo-image');

            if (attachmentPhoto.length > 0 && attachmentPhoto.data('src')) {
                this.sendMessageWithPhoto(data, settings, attachmentPhoto.data('src'));
            } else {
                utils.api.post('message/compose', data, settings).done(this.postDone).always(this.postComplete);
            }
        },
        sendMessageWithPhoto: function(data, settings, imageURI) {

            var self = this;

            function done(result) {
                if (result.sImagePath != null) {
                    self.handleUploadPhotoSuccess(data, settings, result);
                } else {
                    utils.modal.alert(result.error_message || _t('Can not upload file(s). Please try again later.'));
                    utils.debug.warn('[FAIL] message/attach', result);
                }
            };

            function fail(err) {
                utils.debug.warn('[FAIL] message/attach', err);
            };

            utils.api.uploadImage('message/attach', imageURI, {}).done(done).fail(fail);
        },
        handleUploadPhotoSuccess: function(data, settings, result) {
            data['sText'] = data['sText'] + ' ' + result.sImagePath;
            data['attachmentData'] = {
                "type": "photo"
            };
            utils.api.post('message/compose', data, settings).done(this.postDone).always(this.postComplete);
        },
        toggleBtn: function() {

            var bDisable = !this.isValidate();

            this.$postBtn.toggleClass('disabled', bDisable);
        },
        isValidate: function(bAlert) {

            if (this.aSelectedFriend.length == 0 && !this.context.iParentId) {
                bAlert && utils.modal.alert('Please choose a recipient');
                return false;
            }

            if (this.$subject.val().trim() == '') {
                bAlert && utils.modal.alert('Please enter the subject');
                return false;
            }

            if (this.$message.val().trim() == '') {
                bAlert && utils.modal.alert('Please enter the message');
                return false;
            }

            return true;
        },
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.removeClass('processing');
        },
        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.addClass('processing');
        },
        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message);
                return false;
            } else {
                this.postSuccess();
            }
        },
        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function() {

            utils.modal.toast('Send message successfully');
            window.location = '#messages/sent';
        },
    });
});
define('message/controller/message-compose',[
	'core',
	'message/view/message-compose'
],function(core, View){
	
	function Controller(id){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new View().render({
			iUserId: id
		}).inject();
	}
	
	utils.router.route('messages/compose(/:id)', Controller);
	
});


define('text!message/tpl/message-reply.html',[],function () { return '<!-- message/tpl/message-reply.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back"></div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="send_btn"><%= _t(\'send\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="content" class="content with-header-footer swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="message-recipient-list" class="hide">\n\t\t\t\t<%= _t(\'between\') %> <a href="<%=viewer.getUrl()%>"><%= _t(\'you\') %></a> \n\t\t\t\t<%= _t(\'and\') %> <span id="recipients_list_less"></span>\n\t\t\t\t<span id="recipients_list_more" class="hide"></span>\n\t            <i id="toggle_recipients" class="hide"><%= _t(\'more\') %></i>\n            </div>\n\t\t\t<div class="form-general">\n\t\t\t\t<textarea class="fluid-no-border" id="reply_message" placeholder="<%= _t(\'reply_message...\') %>"></textarea>\n\t\t\t\t<div id="reply_message_attachment_holder"> </div>\n                <input class="btn btn-form-photo" type="button" id="photo_add_btn" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});

define('message/view/message-reply',[
    'core',
    'photo/view/attachment-album-photo-item',
    'photo/view/photo-add-actions',
    'text!message/tpl/message-reply.html'
], function(core, AttachmentPhotoItemView, PhotoAddActionsView, text) {

    return Backbone.View.extend({
        region: {
            main: '#main',
            content: '#content'
        },
        template: _.template(text),
        render: function(iConversationId) {

            this.context = {
                viewer: core.viewer,
                iConversationId: iConversationId
            };

            this.$el.attr('id', 'message_reply');

            this.$el.html(this.template(this.context));

            this.$attachment_holder = this.$el.find('#reply_message_attachment_holder');
            this.$photo_add_btn = this.$el.find('#photo_add_btn');
            this.$send_btn = this.$el.find('#send_btn');

            return this;
        },
        inject: function() {
            var self = this;

            var main = $(this.region.main);

            main.html(this.el);

            var content = $(this.region.content);

            content.vscroll();

            utils.api.get('message/conversation_detail', {
                iConversationId: this.context.iConversationId
            })
                .done(function(data) {
                    if (data.hasOwnProperty('error_code') && data.error_code) {
                        utils.modal.alert(data.error_message);
                        return;
                    }

                    $('#page_title').html(data.sTitle);

                    self.appendRecipients(data.aRecipients);
                });

            return this;
        },
        appendRecipients: function(aRecipients) {
            var self = this;
            //remove current user from list
            var iViewerId = core.viewer.getId();
            var iRemove = -1;

            $.each(aRecipients, function(index, aRecipient) {
                if (aRecipient.iUserId == iViewerId) {
                    iRemove = index;
                }
            });

            if (iRemove > -1) {
                aRecipients.splice(iRemove, 1);
            }

            var lessSpan = $('#recipients_list_less');
            var moreSpan = $('#recipients_list_more');

            lessSpan.empty();
            moreSpan.empty();

            lessSpan.append('<a href="#user/' + aRecipients[0].iUserId + '">' + aRecipients[0].sUserName + '</a>');

            if (aRecipients.length > 1) {
                lessSpan.append(' and ' + (aRecipients.length - 1) + ' others');

                var moreList = "";
                _.each(aRecipients, function(aRecipient) {
                    moreList += ', <a href="#user/' + aRecipient.iUserId + '">' + aRecipient.sUserName + '</a>';
                });
                moreSpan.html(moreList.substring(2));

                $('#toggle_recipients').removeClass("hide");
            }

            $('#message-recipient-list').removeClass("hide");
        },
        events: {
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #send_btn': 'onSendClick',
            'click #toggle_recipients': 'toggleRecipients',
            'click .close_button': 'removeAttachment',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function() {

            var self = this;

            navigator.device.capture.captureImage(onSuccess, onFail, {
                limit: 1
            });

            function onSuccess(mediaFiles) {
                var imageURI = mediaFiles[0].fullPath;
                self.addPhotoItem(imageURI);
            }

            function onFail(msg) {
                utils.debug.warn(msg);
            }
        },
        browsePhoto: function() {

            var self = this;

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                correctOrientation: true
            });

            function onSuccess(imageURI) {
                self.addPhotoItem(imageURI);
            }

            function onFail(msg) {
                utils.debug.warn(msg);
            }
        },
        addPhotoItem: function(path) {

            var self = this;

            var inject = function(dom) {
                self.$attachment_holder.html(dom);
            };

            new AttachmentPhotoItemView().render({
                PhotoId: 0,
                ImgSrc: path
            }).inject(inject);

            this.$photo_add_btn.addClass('hide');
        },
        removeAttachment: function() {

            this.$attachment_holder.empty();

            this.$photo_add_btn.removeClass('hide');
        },
        toggleRecipients: function(evt) {
            var target = $(evt.currentTarget);
            var lessSpan = $('#recipients_list_less');
            var moreSpan = $('#recipients_list_more');

            lessSpan.toggleClass("hide");
            moreSpan.toggleClass("hide");

            current = target.html();
            target.html(current == "More" ? "Less" : "More");
        },
        onSendClick: function(evt) {

            if (this.$send_btn.hasClass("processing")) {
                return;
            }

            var replyMsg = $('#reply_message').val();
            if (replyMsg.trim() == '') {
                utils.modal.alert("Please fill the message.");
                return;
            }

            var postData = {
                iItemId: this.context.iConversationId,
                sText: replyMsg
            };
            var settings = {
                context: this
            }

            var attachmentPhoto = this.$attachment_holder.find('.attachment-photo-image');

            if (attachmentPhoto.length > 0 && attachmentPhoto.data('src')) {
                this.sendReplyWithPhoto(postData, settings, attachmentPhoto.data('src'));
            } else {
                this.sendReply(postData, settings);
            }
        },
        sendReply: function(postData, settings) {

            this.$send_btn.addClass('processing');

            utils.api.post('message/reply', postData, settings).done(this.postDone).always(this.postComplete);
        },
        postDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            window.location.href = '#messages/sent';
        },
        postComplete: function() {

            this.$send_btn.removeClass('processing');
        },
        sendReplyWithPhoto: function(postData, settings, imageURI) {

            var self = this;

            function done(result) {
                if (result.sImagePath != null) {
                    self.handleUploadPhotoSuccess(postData, settings, result);
                } else {
                    utils.modal.alert(result.error_message || _t('Can not upload file(s). Please try again later.'));
                    utils.debug.warn('[FAIL] message/attach', result);
                }
            };

            function fail(err) {
                utils.debug.warn('[FAIL] message/attach', err);
            };

            utils.api.uploadImage('message/attach', imageURI, {}).done(done).fail(fail);
        },
        handleUploadPhotoSuccess: function(postData, settings, result) {

            postData['sText'] = postData['sText'] + ' ' + result.sImagePath;
            postData['attachmentData'] = {
                "type": "photo"
            };

            this.sendReply(postData, settings);
        }
    });
});
define('message/controller/message-reply',[
	'core',
	'message/view/message-reply'
],function(core, View){
	
	function Controller(iConversationId){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new View().render(iConversationId).inject();
	}
	
	utils.router.route('message-reply/:id', Controller)
});

define('message/main',[
	'core',
	// plugin
	'message/plugin/message-box',
	// controller
	'message/controller/conversation-index',
	'message/controller/conversation-detail',
	'message/controller/message-compose',
	'message/controller/message-reply'
],function(core){
	core.sidebar.configs.set('mail',{
 		icon: 'icon-sidebar-message',
 		label: 'Mails',
 		url: '#messages',
 	});
});

define('message', ['message/main'], function (main) { return main; });


define('text!link/tpl/attachment-link.html',[],function () { return '\n<div class="att-item-wrapper">\n\t<div class="att-col-image">\n\t\t<a href="javascript:void(0)" onclick="window.open(<%= onclick %>)">\n\t\t\t<img class="att-item-image" src="<%= attachment.sPhoto_Url%>" />\n\t\t</a>\n\t</div>\n\t<div class="att-col-info">\n\t\t<div class="att-item-title">\n\t\t\t<a href="javascript:void(0)" onclick="window.open(<%= onclick %>)">\n\t\t\t\t<%= attachment.sTitle %>\n\t\t\t</a>\n\t\t</div>\n\t\t<div class="att-item-subline"><%= domain %></div>\n\t\t<div class="att-item-description"><%= utils.str.shorten(attachment.sDescription,100)%></div>\n\t</div>\n</div>';});

define('link/view/attachment-link',[
	'text!link/tpl/attachment-link.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'attachment-link',
		template: _.template(text),
		render: function(){
			
			var item = this.model;
			var att = item.getAttachments()[0];
			
			var context = {
				item: item,
				attachment: att,
				domain: '', // etc: tuoitre.vn
				onclick: ["'"+att.sOriginalLink_Url+"'", "'_blank'","'location=yes'"].join(',')
			};
			
			this.$el.html(this.template(context));
			
			return this;
		},
		inject: function(dom){
			dom.html(this.el);
		}
	});
});

define('link/plugin/activity',[
    'link/view/attachment-link'
], function(LinkView) {
    utils.attachment.add(['core_link', 'link'], LinkView);
    utils.headline.add(['link'], function(item) {
        if (item.hasParentUser()) {
            return '<i class="activity-post-via"> &rarr; </i> ' + item.getParentLink();
        } else {
            return _t('shared_a_link');
        }
    });
});
define('link/main',[
	// plugin
	'link/plugin/activity'
],function(){
	return {
		enable: true
	}
});

define('link', ['link/main'], function (main) { return main; });


define('text!notification/tpl/notification-box.html',[],function () { return '<div id="box-notification-content" class="box-notification-content swiper-container">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="pvs"></div>\n\t\t\t<div id="notification_box_list_view_holder" class="box-notification-list swiper-list vertical"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="box-footer">\n    <div class="menu-item" id="mark_read_all_btn">\n    \t<a class=""><%= _t(\'mark_all_as_read\') %></a>\n    </div>\n</div>';});

define('notification/plugin/notification-type',[],function() {

    function NotificationType() {
        this.maps = {};

        this.add = function(types, cb) {
            for (var i = 0; i < types.length; ++i) {
                this.maps[types[i]] = cb;
            }
            return this;
        }

        this.getItemDetailUrl = function(obj) {
            var type = obj.get('sTypeId');
            if (this.maps.hasOwnProperty(type)) {
                return this.maps[type](obj);
            }
            return '#none';
        }
    }

    var notificationType = new NotificationType();

    notificationType.add([
        'comment_advancedphoto_tag',
        'comment_event',
        'comment_event_tag',
        'comment_feed_tag',
        'comment_fevent',
        'comment_fevent_tag',
        'comment_user_statustag',
        'comment_videochannel_tag',
        'event_approved',
        'event_comment',
        'event_comment_feed',
        'feed_comment_like',
        'feed_comment_link',
        'fevent_approved',
        'fevent_comment',
        'fevent_comment_feed',
        'fevent_repeattonormalwarning',
        'photo_approved',
        'photo_tag',
        'videochannel_favourite'
    ], function(obj) {
        return '#none';
    });

    notificationType.add([
        'comment_advancedphoto',
        'advancedphoto_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iPhotoId) {
            return '#none';
        }
        return '#photo-detail/advancedphoto/0/' + obj.get('aLink').iPhotoId;
    });

    notificationType.add([
        'comment_photo',
        'photo_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iPhotoId) {
            return '#none';
        }
        return '#photo-detail/photo/0/' + obj.get('aLink').iPhotoId;
    });

    notificationType.add([
        'event_comment_like',
        'event_like',
        'event_invite'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#event-detail/event/' + obj.get('iItemId');
    });

    notificationType.add([
        'fevent_invite'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#event-detail/fevent/' + obj.get('iItemId');
    });

    notificationType.add([
        'fevent_comment_like',
        'fevent_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iEventId) {
            return '#none';
        }
        return '#event-detail/fevent/' + obj.get('aLink').iEventId;
    });

    notificationType.add([
        'comment_feed',
        'comment_user_status',
        'feed_comment_profile',
        'user_status_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iFeedId) {
            return '#none';
        }
        return '#feed/' + obj.get('aLink').iFeedId;
    });

    notificationType.add([
        'friend_accept',
        'friend_accepted'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iUserId) {
            return '#none';
        }
        return '#user/' + obj.get('aLink').iUserId;
    });

    notificationType.add([
        'comment_music_album',
        'music_album_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iAlbumId) {
            return '#none';
        }
        return '#music_album/' + obj.get('aLink').iAlbumId;
    });

    notificationType.add([
        'comment_music_song',
        'music_song_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iSongId) {
            return '#none';
        }
        return '#music_song/' + obj.get('aLink').iSongId;
    });

    notificationType.add([
        'comment_photo_album',
        'photo_album_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iAlbumId) {
            return '#none';
        }
        return '#photo-album-detail/photo_album/' + obj.get('aLink').iAlbumId;
    });

    notificationType.add([
        'comment_advancedphoto_album',
        'advancedphoto_album_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iAlbumId) {
            return '#none';
        }
        return '#photo-album-detail/advancedphoto_album/' + obj.get('aLink').iAlbumId;
    });

    notificationType.add([
        'comment_video',
        'video_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iVideoId) {
            return '#none';
        }
        return '#video/' + obj.get('aLink').iVideoId;
    });

    notificationType.add([
        'videochannel_like'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iVideoId) {
            return '#none';
        }
        return '#videochannel/' + obj.get('aLink').iVideoId;
    });

    notificationType.add([
        'comment_videochannel',
        'videochannel'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#videochannel/' + obj.get('iItemId');
    });

    notificationType.add([
        'pages_approved'
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').iPageId) {
            return '#none';
        }
        return '#pages/' + obj.get('aLink').iPageId;
    });

    notificationType.add([
        'pages_invite'
    ], function(obj) {
        if (!obj.get('iItemId') && (!obj.get('aLink') || !obj.get('aLink').iPageId)) {
            return '#none';
        }
        return '#pages/' + (obj.get('iItemId') || obj.get('aLink').iPageId);
    });

    notificationType.add([
        'blog_approved',
        'blog_like',
        'comment_blog'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#blog/' + obj.get('iItemId');
    });

    notificationType.add([
        'comment_poll',
        'poll',
        'poll_approved',
        'poll_like'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#poll/' + obj.get('iItemId');
    });

    notificationType.add([
        'comment_quiz',
        'quiz',
        'quiz_like'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#quiz/' + obj.get('iItemId');
    });

    notificationType.add([
        'forum_post_like',
        'forum_subscribed_post',
        'forum_thread_approved'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#forum_thread/' + obj.get('iItemId');
    });

    notificationType.add([
        'advancedmarketplace_approved',
        'advancedmarketplace_invite',
        'advancedmarketplace_like',
        'comment_advancedmarketplace'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#advancedmarketplace/' + obj.get('iItemId');
    });

    notificationType.add([
        'marketplace_approved',
        'comment_marketplace',
        'marketplace_invite',
        'marketplace_like'
    ], function(obj) {
        if (!obj.get('iItemId')) {
            return '#none';
        }
        return '#marketplace/' + obj.get('iItemId');
    });

    notificationType.add([
        'feed_mini_like' // like a comment
    ], function(obj) {
        if (!obj.get('aLink') || !obj.get('aLink').sCommentType) {
            return '#none';
        }

        var pattern = /i.*Id/;
        var iItemId = utils.helper.getObjPropByPatt(obj.get('aLink'), pattern);

        if (!iItemId) {
            return '#none';
        }

        return '#' + obj.get('aLink').sCommentType + '/' + iItemId;
    });

    return notificationType;
});
define('notification/model/notification',[
    'notification/plugin/notification-type'
], function(notificationType) {
    return Backbone.Model.extend({
        idAttribute: 'iNotificationId',
        defaults: {
            sResourceType: 'user',
            iResourceId: 0,
            sMessage: '',
            sUserImage: ''
        },
        getTypeId: function() {
            return this.get('sTypeId');
        },
        getItemUrl: function() {
            return notificationType.getItemDetailUrl(this);
        },
        getHeadline: function() {
            if (!this.get('sMessage')) {
                return '';
            }
            return this.get('sMessage').replace(/(<span [^>]+>)([^<]+)+(<\/span>?)+/ig, '<span class="text-anchor">$2</span>');
        },
        getPosterImageSrc: function() {
            return this.get('sUserImage');
        }
    });

});

define('text!notification/tpl/notification-box-item.html',[],function () { return '<!-- video/tpl/video-item -->\n<a href="<%= item.getItemUrl() %>">\n\t<div class="clearfix item-wrapper">\n\t\t<div class="item-image">\n\t\t\t<img src="<%= item.getPosterImageSrc() %>" />\n\t\t</div>\n\t\t<div class="item-headline">\n\t\t\t<%= item.getHeadline() %>\n\t\t</div>\n\t\t<div class="item-subline">\n\t\t\t<i class="icon icon-notification-type <%= item.getTypeId() %>"></i>\n\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t</div>\n\t</div>\n</a>\n';});

define('notification/view/notification-box-item',[
	'text!notification/tpl/notification-box-item.html'
],function(text){

	return Backbone.View.extend({
		region: {},
		className: 'box-notification-item',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(inject){
			inject(this.$el);
		},
		events: {
			"click a": "makeRead"
		},
		makeRead: function (evt) {
	        var self = this;
	        
	        var sendData = {
	        	"iNotificationId": this.model.getId()
	        }
	        
	        utils.api.post("notification/makeread", sendData)
	        .done(function (data) {
	        	if (data.hasOwnProperty('error_code') && data.error_code) {
	        		utils.modal.alert(data.error_message);
	        		return;
	        	}
	        	self.$el.remove();
	        });
	    },
	});
});


define('text!notification/tpl/notification-box-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading ... -->\n</div>';});

define('notification/view/notification-box-list',[
	'notification/model/notification',
	'notification/view/notification-box-item',
	'text!notification/tpl/notification-box-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			iPage: 1,
			iMinId: 0,
			iMaxId: 0,
			iLimit: 10
		},
		followById: true,
		api: 'notification/fetch_notification',
		phraseNotFound: 'အသိေပးခ်က္ မရွိပါ။',
		phraseNotMore: 'အသိေပးခ်က္ အသစ္မရွိပါ။',
		className: 'notification-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView,
		loadMoreSuccess: function(data){
			var items     = this.parseData(data, this.itemModel);
			var length = items.length;
			var $ele = this.$el;
			var that  = this;
			
			if(this.isFirst){
				if(!length){
					// tell the viewer there is no videos then disable load-more, load-less.
					$ele.html(utils.helper.notfound(_t(this.phraseNotFound)));
				}else{
					$ele.html('');
				}
			}	
			
			this.isFirst = false;
			
			var handleInjectDom = function(dom)
			{
				$ele.append(dom).trigger('injected');
			}
			
			_.each(items,function(item){
                // if notification has message
                if (item.getHeadline()) {
                    that.handleInjectItem(item, handleInjectDom);
                }
			});
			
			if(length && this.followById){
				var id1 = items[length-1].getId();
				var id2 = items[0].getId();
				
				this.query.iMinId  = Math.max(id1,id2,this.query.iMinId);
				this.query.iMaxId  =  this.query.iMaxId > 0 ? Math.min(id1, id2, this.query.iMaxId) : Math.min(id1, id2); 
				
			}else{
				this.query.iPage  =  (this.query.iPage || 0 ) + 1;
			}
			
			
			if(!length){
				// this.$scroller.trigger('loadmore:lock'); // lock or unlock
				if(!this.isFirst){
					if(this.settings.loadmore){
						this.$scroller.trigger('loadmore:lock');  // lock or unlock	
					}
					utils.modal.toast(_t(this.phraseNotMore));
				}
			}else{
				
				if(this.settings.loadmore){
					this.$scroller.trigger('loadmore:unlock'); // lock or unlock
				}
				if(this.settings.loadnew && this.followById){
					this.$scroller.trigger('loadnew:unlock');
				}
				
			}		
			
			this.$scroller
			.trigger('refresh')
			.trigger('query:changed', this.query);
			
			this.$scroller.trigger('loadmore:end');
		}
	});
});

define('notification/view/notification-box',[
	'core',
    'core/plugin/updater',
	'text!notification/tpl/notification-box.html',
	'notification/view/notification-box-list'
],function(core, updater, text, ListView){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#box-notification',
			indicator: '#beeber-notification-indicator',
			listViewHolder: '#notification_box_list_view_holder',
			scroller: '#box-notification-content'
		},
		events: {
			"click #mark_read_all_btn": "markReadAll"
		},
		markReadAll: function () {
			var self = this;
	        
	        utils.api.post("notification/markreadall")
	        .done(function (data) {
	        	updater.setNumberNewNotification(0);
                self.close();
	        });
		},
		template: _.template(text),
		viewAll: function()
		{
			utils.observer.trigger('router:changed');
			
			window.location.href = '#messages';
			
		},
		render: function(){
			this.$el.html(this.template());
			
			this.$scroller = this.$el.find(this.region.scroller);
			this.$listViewHolder = this.$el.find(this.region.listViewHolder);
			
			this.$wrapper = $(this.region.wrapper);
			this.$indicator = $(this.region.indicator);
			
			return this;
		},
		inject: function(){
			
			this.$wrapper.html(this.$el);

			var useSwiper   =  constants.os_version < '30';
			this.$scroller.ensureVerticalScroll(useSwiper);
			
			this.listView = new ListView({},
				this.$listViewHolder,
				this.$scroller,
				{loadnew: false, loadmore: true});
			
			this.listView.render(this.query).inject();
				
			return this;
		},
		open: function(){
			
			this.$wrapper.addClass('open');
			
			this.$indicator.find('.beeber-counter').addClass('hide');

			this.$indicator.addClass('active');
			
			core.updater.setNumberNewMessage(0);
			
			return this;
		},
		close: function(){
			var that = this;

			this.$wrapper.removeClass('open');
						
			this.$indicator.removeClass('active');
			
			window.setTimeout(function(){
				that.remove();
			},300);
			
			return this;
		}
	});
});
define('notification/plugin/notification-box',[
	'beeber_box',
	'notification/view/notification-box'
],function(beeber_box, BoxView){
	return new beeber_box(BoxView, '#beeber-notification-indicator');
});

define('notification/main',[
	//plugin
	'notification/plugin/notification-box'
],function(){
	return {
		enable: true
	};
});

define('notification', ['notification/main'], function (main) { return main; });


define('text!video/tpl/attachment-video.html',[],function () { return '<!-- video/tpl/attachment/video.html -->\n<a class="att-item-image" style="background-image: url(<%= video.sPhoto_Url %>)" href="#<%= video.sType %>/<%= video.iId %>">\n\t<div class="icon icon-item-mask"></div>\n</a>\n<div class="att-item-title" class="text-link">\n\t<a href="#<%= video.sType %>/<%= video.iId %>" ><%= video.sTitle%></a>\n</div>\n<div class="att-item-subline"><%= video.sOriginalLink_Url %></div>\n<div class="att-item-description">\n\t<%= utils.str.shorten(video.sDescription || \'\', 85 , false) %>\n</div>\n';});

define('video/view/attachment-video',[
	'text!video/tpl/attachment-video.html'
],function(text){
	return Backbone.View.extend({
		region: {},
		className: 'attachment-video',
		template: _.template(text),
		render: function(){
			
			var item = this.model;
			
			var video = item.getAttachments()[0];
			
			var duration = numeral(video.iDuration).format('00:00').replace(/^0:/,'');
			
			var fromDomain = video.sOriginalLink_Url;
			
			if(fromDomain=='www.uploaded.com'){
				fromDomain = '';
			}
			
			this.$el.html(this.template({feed:item,video:video, duration: video.sDuration || duration, fromDomain: fromDomain}));
			
			this.$el.attr({rel: 'link','data-url':'#' + video.sType + '/' + video.iId});
			
			return this;
		},
		inject: function(dom){
			dom.html(this.$el);
		}
	});
});

define('video/plugin/activity',[
    'video/view/attachment-video'
], function(VideoAttachmentView) {

    utils.headline.add([
        'comment_video',
        'comment_videochannel',
        'comment_ynvideo',
        'ynvideo_comment_video'
    ], function(item) {
        return _t('commented on video %s', item.getItemLink(22));
    });

    utils.headline.add([
        'video',
        'videochannel',
    ], function(item) {
        return _t('shared a video');
    });

    utils.headline.add([
        'video_new',
        'videochannel_new',
        'ynvideo_new'
    ], function(item) {
        return _t('posted new video %s', item.getItemLink(22));
    });

    utils.headline.add([
        'video_add_favorite',
        'videochannel_add_favorite',
        'ynvideo_add_favorite'
    ], function(item) {
        return _t('added video %s to his/her favourite playlist%s', item.getItemLink(22));
    });

    utils.headline.add([
        'video_playlist_new',
        'videochannel_playlist_new',
        'ynvideo_playlist_new'
    ], function(item) {
        return _t('posted a new video playlist', item.getItemLink(22));
    });


    utils.attachment.add(['video', 'ynvideo', 'videochannel'], VideoAttachmentView);

});

define('text!video/tpl/video-index.html',[],function () { return '<!-- video/tpl/index.html-->\n<div class="header">\n\t<div clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#videos/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n\t<!-- search box hear -->\n</div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align">\n\t\t\t\t<div id="video_list_view_holder">\n\n\t\t\t\t</div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n\t\t<a class="menu-item current" href="#videos">\n\t\t<div class="">\n\t\t\t<%= _t(\'all_videos\') %>\n\t\t</div> </a>\n\t\t<a class="menu-item" href="#videos/my">\n\t\t<div class="sibling">\n\t\t\t<%= _t(\'my_videos\') %>\n\t\t</div> </a>\n\t</div>\n</div>';});

define('video/model/video',[
    'core'
], function() {
    var Model = Backbone.Model.extend({
        idAttribute: 'iVideoId',
        defaults: {
            sModelType: 'video',
            bCanRate: true,
            bCanLike: true,
            bCanComment: true,
            bCanShare: true
        }
    });

    Model.prototype.isInProcess = function() {
        return this.get('bInProcess') || false;
    }


    Model.prototype.getEmbedHtml = function() {
        return this.get('sEmbed');
    }


    Model.prototype.getImageSrc = function() {
        return this.get('sVideoImage');
    }

    Model.prototype.getDuration = function() {
        return parseInt(this.get('iDuration', 10)) || 0;
    }

    Model.prototype.getDurationFormat = function() {
        return this.get('iDuration');
    }

    Model.prototype.canRate = function() {
        return true;
    }

    Model.prototype.getCategoryId = function() {
        return this.get('iCategoryId') || this.get('iCategory') || 0;
    }

    Model.prototype.getViewPrivacyVal = function() {
        return this.get('iPrivacy') || '0';
    }

    Model.prototype.getCommentPrivacyVal = function() {
        return this.get('iPrivacyComment') || '0';
    }

    Model.prototype.getDescriptionParsed = function() {

        var sDescription = this.get('sDescription') || '';

        return utils.helper.parseExternalLink(sDescription);
    }

    Model.prototype.getVideoUrl = function() {
        return this.get('sVideoUrl') || '';
    }

    Model.prototype.getVideoType = function() {
        return this.get('sType') || '';
    }

    return Model;
});

define('text!video/tpl/video-item.html',[],function () { return '<!-- video/tpl/video-item -->\n<div class="item-wrapper">\n\t<a class="item-image" style="background-image: url(<%= item.getImageSrc() %>)" href="<%= item.getUrl() %>">\n\t\t<div class="item-mask"></div>\n\t</a>\n\t<span class="item-video-length"><%= item.getDurationFormat() %></span>\n\t<div class="item-video-info">\n\t\t<div class="actions-justify gray">\n\t\t<div class="action-item can-rate <%= item.isRated()?\'rated\':\'\' %>" id="<%= item.getDataId(\'rate\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getRateValue() %></span>\n\t\t\t<i class="icon icon-activity-rate"></i>\n\t\t</div>\n\t\t<% if(item.canLike()){%>\n\t\t<div class="action-item <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t\t<i class="icon icon-activity-like"></i>\n\t\t\t</div>\n\t\t<%} %>\n\t\t<% if(item.canComment()){%>\n\t\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t</div>\n\t\t<div class="item-video-info-content">\n\t\t\t<div class="item-headline">\n\t\t\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t\t\t</div>\n\t\t\t<div class="item-subline">\n\t\t\t\t<%= _t(\'by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\t\n</div>\n<div class="pvm"></div>\n';});


define('text!video/tpl/video-my-item.html',[],function () { return '<!-- video/tpl/video-item -->\n<div class="item-wrapper">\n\t<a class="item-image" style="background-image: url(<%= item.getImageSrc() %>)" href="<%= item.getUrl() %>">\n\t\t<div class="item-mask"></div>\n\t</a>\n\t<div class="item-setting" id="<%= item.getDataId(\'setting\') %>" rel="delegate">\n\t\t<i class="icon icon-setting"></i>\n\t</div>\n\t<span class="item-video-length"><%= item.getDurationFormat() %></span>\n\t<div class="item-video-info">\n\t\t<div class="actions-justify gray">\n\t\t<div class="action-item can-rate <%= item.isRated()?\'rated\':\'\' %>" id="<%= item.getDataId(\'rate\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getRateValue() %></span>\n\t\t\t<i class="icon icon-activity-rate"></i>\n\t\t</div>\n\t\t<% if(item.canLike()){%>\n\t\t<div class="action-item <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t<% if(item.canComment()){%>\n\t\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t</div>\n\t\t<div class="item-video-info-content">\n\t\t\t<div class="item-headline">\n\t\t\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t\t\t</div>\n\t\t\t<div class="item-subline">\n\t\t\t\t<%= _t(\'by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\t\n</div>\n<div class="pvm"></div>';});


define('text!video/tpl/video-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canEdit()) {%>\n\t<a class="setting-item" href="#videos/edit/<%= item.getId() %>">\n\t\t<%= _t(\'edit_this_video\') %>\n\t</a>\n\t<%}%>\n\t<%if (item.canDelete()) {%>\n\t<a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n\t\t<%= _t(\'delete_this_video\') %>\n\t</a>\n\t<%}%>\n\t<%if (!item.isOwner()) {%>\n\t<a class="setting-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\n\t\t<%= _t(\'\') %>\n\t</a>\n\t<%}%>\n</div>\n';});

define('video/view/video-setting',[
	'text!video/tpl/video-setting.html'
], function(text){
	return Backbone.PopupView.extend({
		template: _.template(text)
	});
});

define('video/view/video-item',[
    'text!video/tpl/video-item.html',
    'text!video/tpl/video-my-item.html',
    'video/view/video-setting'
], function(text, text2, SettingView) {

    return Backbone.ItemView.extend({
        className: 'video-item',
        template: _.template(text),
        templateMy: _.template(text2),
        settingView: SettingView,
        events: {},
        render: function(context) {

            this.context = $.extend({
                sModule: null,
                iItemId: null
            }, context);

            if (!_.isUndefined(this.context.sView) && this.context.sView == 'my') {
                this.template = this.templateMy;
            }

            this.$el.html(this.template({
                context: this.context,
                item: this.model
            }));

            this.$el.attr('id', this.model.getDataId());

            return this;
        },
        inject: function(inject) {
            inject(this.$el);
            return this;
        },
        doDeleteConfirm: function() {

            var self = this;
            var msg = _t('Are you sure to delete this video?');

            utils.popup.close();

            utils.modal.confirm(msg, function(result) {
                if (result == 1) {
                    self.doDelete();
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]); // BUGS https://jira.younetco.com/browse/SEMOBI-1610
        },
        doDelete: function() {
            var self = this;

            this.$el.addClass('hide');

            utils.api.post('video/delete', {
                iVideoId: this.model.getId()
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    self.doDeleteFail(data);
                } else {
                    self.doDeleteSuccess(data);
                }
            }).fail(function() {
                self.doDeleteFail();
            });
        },
        doDeleteFail: function(data) {
            this.$el.removeClass('hide');
            utils.modal.alert(data.error_message || _t('Can not delete this video'));
        },
        doDeleteSuccess: function(data) {
            this.$el.remove();
            utils.modal.toast(data.message);
        }
    });
});

define('text!video/tpl/video-list.html',[],function () { return '<div id="video_list_holder">\n\t<div class="loading-initiator"></div>\n</div>\n';});

define('video/view/video-list',[
	'video/model/video',
	'video/view/video-item',
	'text!video/tpl/video-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: 'all',
			iPage: 1,
			sSearch: '',
			iCategory: 0,
			iAmountOfVideo: 5,
			sOrder: 'creation_date',
		},
		followById: false,
		api: 'video/search',
		phraseNotFound: 'ဗြီဒီယို မရွိပါ။',
		phraseNotMore: 'ေနာက္ထပ္ ဗြီဒီယို မရွိပါ။',
		className: 'video-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('text!video/tpl/video-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_video\') %>" value="">\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n                <option value="0" selected="true"><%= _t(\'all_categories\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n               <option value="creation_date" selected="true"><%= _t(\'most_recent\') %></option>\n               <option value="view_count"><%= _t(\'most_viewed\') %></option>\n               <option value="rating"><%= _t(\'highest_rated\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>">\n\t</div>\n</div>';});

define('video/view/video-search',[
	'text!video/tpl/video-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$categoryInput = this.$el.find('#search_category');
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(){
			utils.api.get('video/categories',{},{context: this}).done(this.updateView);
		},
		updateView: function(data){
			if (data.error_code) {
				return utils.modal.alert(data.error_message);
			}
			_.each(data, function (option) {
				this.$categoryInput.append(new Option(option.sName, option.iCategoryId));
			}, this);
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				iCategory: this.$categoryInput.val() || 0,
				sOrder: this.$orderInput.val() || 'creation_date'
			});
		}
	});
	
});

define('video/view/video-index',[
	'text!video/tpl/video-index.html',
	'video/view/video-list',
	'video/view/video-search'
],function(text){
	
	var ListView = require('video/view/video-list')
	  , SearchView = require('video/view/video-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(){
			
			this.$el.html(this.template());
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({}, 
				this.$el.find('#video_list_view_holder'),
				this.$scroller,
				{
					loadmore: true,
					loadnew: false,
				});
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		}
	});
});


define('text!video/tpl/video-my.html',[],function () { return '<!-- video/tpl/index.html-->\n<div class="header">\n\t<div clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#videos/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n\t<!-- search box hear -->\n</div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align">\n\t\t\t\t<div id="video_list_view_holder">\n\n\t\t\t\t</div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n\t\t<a class="menu-item" href="#videos">\n\t\t<div class="">\n\t\t\t<%= _t(\'all_videos\') %>\n\t\t</div> </a>\n\t\t<a class="menu-item current" href="#videos/my">\n\t\t<div class="sibling">\n\t\t\t<%= _t(\'my_videos\') %>\n\t\t</div> </a>\n\t</div>\n</div>';});


define('text!video/tpl/video-my-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading -->\n</div>';});

define('video/view/video-my-list',[
	'video/model/video',
	'video/view/video-item',
	'text!video/tpl/video-my-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: 'my',
			iPage: 1,
			sSearch: '',
			iCategory: 0,
			iAmountOfVideo: 5
		},
		api: 'video/search',
		phraseNotFound: 'ဗြီဒီယို မရွိပါ။',
		phraseNotMore: 'ေနာက္ထပ္ ဗြီဒီယို မရွိပါ။',
		className: 'video-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});

define('video/view/video-my',[
	'text!video/tpl/video-my.html',
	'video/view/video-my-list',
	'video/view/video-search'
],function(text){
	
	var ListView = require('video/view/video-my-list')
	  , SearchView = require('video/view/video-search'); 
	
	return Backbone.View.extend({
		region: {
			main: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(){
			
			this.$el.html(this.template());
			
			return this;
			
		},
		inject: function(){
			
			var main = $(this.region.main).html(this.$el);
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller)
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({}, 
				this.$el.find('#video_list_view_holder'),
				this.$scroller,
				{
					loadmore: true,
					loadnew: false,
				});
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		}
	});
});

define('video/controller/video-index',[
	'video/view/video-index',
	'video/view/video-my'
],function(IndexView, MyView){

	function IndexController ()
	{
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView()
			.render({
				sView: 'all'
			}).inject();
	}
	
	function MyController ()
	{
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new MyView()
			.render({
				sView: 'my'
			}).inject();

	}
	
	utils.router.route('videos', IndexController);
	
	utils.router.route('videos/my', MyController);
});

define('text!video/tpl/video-detail-info.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div class="content content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="pvs"></div>\n\t\t\t<div id="video_detail_info_holder" class="video-detail-info">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id="activity_extra_holder" class="hide"></div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!video/tpl/video-detail-info-update.html',[],function () { return '<!-- video/tpl/video-detail-info-update.html -->\n<div class="item-wrapper">\n\t<div id="video-player" class="video-player">\n\t\t<div id="video_in_process" class="in-process hide">\n\t\t\t<%= _t(\'video_is_being_processed\') %>\n\t\t</div>\n\t\t<div id="mp4_uploaded_player" class="mp4-uploaded-player hide">\n\t\t\t<!-- <video controls id="video_player_control" class="hide">\n\t            <source src="" type="video/mp4">\n\t        </video> -->\n\t\t</div>\n\t\t<div id="video_embed_iframe" class="video-embed-iframe hide">\n\t\t\t\n\t\t</div>\n\t</div>\n\t<div class="item-footer">\n\t\t<div class="item-headline">\n\t\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t\t</div>\n\t\t<div class="item-subline">\n\t\t\t<%= _t(\'by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n\t\t\t<div class="item-subline-time">\n\t\t\t\t<i class="icon icon-time"></i>\n\t\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="item-description">\n\t\t\t<%= utils.str.shorten(item.getDescriptionParsed(), 250, true) %>\n\t\t</div>\n\t</div>\n\t<div class="pvm"></div>\n\t<div class="actions-justify gray">\n\t\t<div class="action-item <%= item.isRated()?\'rated\':\'\' %>" id="<%= item.getDataId(\'rate\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getRateValue() %></span>\n\t\t\t<i class="icon icon-activity-rate"></i>\n\t\t</div>\n\t\t<div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n\t\t<% if(item.canComment()){%>\n\t\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\n\t\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<%} %>\n\t\t<% if(item.canShare()) { %>\n\t\t<div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate" data-fixtop="true">\n\t\t\t<i class="icon icon-activity-share"></i>\n\t\t</div>\n\t\t<%} %>\n\t</div>\n</div>\n';});


define('text!video/tpl/video-topmenu.html',[],function () { return '<div class="setting-list prevent-video-overlay">\n\t<%if (item.canDislike()) {%>\n\t<div class="setting-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="setting-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\n    </div>\n    <%}%>\n    <%if (item.canEdit()) {%>\n\t<a class="menu-item" href="#videos/edit/<%= item.getId()%>"><%= _t(\'edit\') %></a>\n\t<%}%>\n\t<%if (item.canDelete()) {%>\n\t<a class="menu-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>"><%= _t(\'delete\') %></a>\n\t<%}%>\n\t<%if (!item.isOwner()) {%>\n\t<a class="menu-item" id="<%= item.getDataId(\'report\') %>" rel="delegate"><%= _t(\'report\') %></a>\n\t<%}%>\n</div>';});

define('video/view/video-topmenu',[
	'text!video/tpl/video-topmenu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
],function(text, DislikeCollection, DislikeDetailView){
	return Backbone.TopMenuView.extend({
		template : _.template(text),
        render: function(){
			var self = this;
        	
			this.$el.html(this.template({item: this.model}));
            
            this.$dislikeHolder = this.$el.find('#dislike-list');
            
            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));
			
			this.model.on('change:iTotalDislike change:bIsDisliked', function () {
        		self.updateView();
        	});
			
			return this;
		},
        inject: function(){
            this.model.dislikes = new DislikeCollection();
			
			this.model.dislikes.add(this.model.getUserDislike());
            
            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);
            
			utils.popup.open(this.$el);
            
			return this;
		},
		hide: function(){
            utils.popup.close();
            
			return this;
		},
        updateView: function () {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
			this.$dislikeHolder.toggleClass('hide', bHide);
            
            var sText = this.model.isDisliked() ? _t('remove_dislike') : _t('dislike');
            this.$dislikeBtn.html(sText);
        }
	});
});

define('video/view/video-detail-info',[
    'video/view/video-item',
    'text!video/tpl/video-detail-info.html',
    'text!video/tpl/video-detail-info-update.html',
    'video/view/video-topmenu',
], function(VideoItemView, text, textUpdate, TopMenuView) {


    return VideoItemView.extend({
        events: {
            'click #top_menu_toggle': 'toggleTopMenu',
        },
        region: {
            holder: '#main',
            scroller: '#content',
            detailHolder: '#video_detail_info_holder',
            activityExtraHolder: '#activity_extra_holder',
            topMenu: '#top_menu_toggle'
        },
        className: 'video-detail-page',
        template: _.template(text),
        topMenuView: TopMenuView,
        templateDetail: _.template(textUpdate),
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $('#main');

            this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);

            this.$detailHolder = this.$el.find(this.region.detailHolder);

            this.$scroller = this.$el.find(this.region.scroller);

            this.$topMenuBtn = this.$el.find(this.region.topMenu);

            this.$el.attr({
                id: this.model.getDataId()
            });

            return this;

        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            // parallel these task
            this.fetchData();

            utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);

            return this;
        },
        fetchData: function() {

            var sendData = {
                iVideoId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('video/detail', sendData, settings).done(this.fetchDataComplete).fail(function() {
                utils.debug.log(arguments);
            });
        },
        fetchDataComplete: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message);
            } else {
                this.model.set(data);
                this.updateView();
            }
        },
        fetchDataFail: function(error, msg) {

            msg = msg || _t('Could not fetch data');

            utils.modal.alert(msg);
        },
        updateView: function() {

            if (!this.model.canView()) {
                return this.$el.html(utils.helper.privatepage());
            }

            this.$topMenuBtn.removeClass('hide');

            this.$el.find('#page_title').html(this.model.getTitle());

            this.$detailHolder.html(this.templateDetail({
                item: this.model
            }));

            if (this.model.isInProcess() || (this.model.getVideoType() == 'file' && !this.model.getVideoUrl())) {
                this.$el.find('#video_in_process').removeClass('hide');
            }

            if (this.model.getEmbedHtml() != '') {
                var sEmbed = this.model.getEmbedHtml();

                var video_width = this.$el.find('.item-wrapper').width() - 10;
                // fix responsive video 16:9 is default
                sEmbed = sEmbed.replace(/width=(\".*?\")/, 'width="' + video_width + '"').replace(/height=(\".*?\")/, 'height="' + (video_width * 9 / 16) + '"');

                var $iframe_holder = this.$el.find('#video_embed_iframe');
                $iframe_holder.html(sEmbed).removeClass('hide');
                $iframe_holder.find('iframe').bind('load', function() {
                    var $iframe = $(this);
                    setTimeout(function() {
                        $iframe.contents().find('.yt-uix-button-menu').remove(); // remove YouTube Context Menu
                    }, 500);
                });
            }

            if (!this.model.isInProcess() && this.model.getVideoUrl()) {
                var src = this.model.getVideoUrl();

                this.$mp4VideoPlayer = this.$el.find('#mp4_uploaded_player');
                this.$mp4VideoPlayer.html('<video controls id="video_player_control"><source src="' + src + '" type="video/mp4"></video>');
                this.$mp4VideoPlayer.removeClass('hide');
            }

            this.$activityExtraHolder.removeClass('hide');
        },
        toggleTopMenu: function() {
            utils.topMenu.toggle(this, this.model);
        },
        doDeleteConfirm: function() {

            var self = this;

            utils.modal.confirm(_t('Are you sure to delete this video?'), function(result) {
                if (result == 1) {
                    self.doDelete();
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
            // BUGS https://jira.younetco.com/browse/SEMOBI-1610
        },
        doDelete: function() {

            utils.observer.trigger('blockui');
            var sendData = {
                iVideoId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('video/delete', sendData, settings)
                .always(function() {
                    utils.observer.trigger('releaseui');
                })
                .done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        this.doDeleteFail(data);
                    } else {
                        this.doDeleteSuccess(data);
                    }
                })
                .fail(function() {
                    this.doDeleteFail();
                });
        },
        doDeleteSuccess: function(data) {
            utils.modal.toast(data.message);
            utils.history.back();
        },
        doDeleteFail: function(data) {
            utils.modal.alert(data.error_message || _t('Can not load data from server'));
        }
    });
});
define('video/controller/video-detail',[
	'video/model/video',
	'video/view/video-detail-info',
],function(VideoModel, InfoView){

	function InfoController(id, action)
	{
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new InfoView({model: new VideoModel({iVideoId: id})}).render().inject();

	}

	function InfoVideoChannelController(id, action)
	{
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new InfoView({model: new VideoModel({
            iVideoId: id,
            sModelType: 'videochannel'
        })}).render().inject();

	}
	
	utils.router.route('video/(:id)(/:comment)', InfoController);
	
	utils.router.route('ynvideo/(:id)(/:comment)', InfoController);
	utils.router.route('videochannel/(:id)(/:comment)', InfoVideoChannelController);
});


define('text!video/tpl/video-add-form.html',[],function () { return '<div class="form-general">\n    <div class="form-title">\n        *<%= _t(\'video_title\') %>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full" id="video_form_title" placeholder="<%= _t(\'video_title\') %>"/>\n    </div>\n    \n    <div class="form-title">\n        <%= _t(\'description\') %>\n    </div>\n    <div class="form-group">\n        <textarea class="control-full textarea" id="video_form_description" placeholder="<%= _t(\'description\') %>"></textarea>\n    </div>\n    \n    <div class="form-title">\n        <%= _t(\'category\') %>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="video_form_category">\n            <option value=""><%= _t(\'select_category\') %></option>\n            <%_.each(data.category_options, function (category) {%>\n            <option value="<%=category.iCategoryId%>"><%=category.sName%></option>\n            <%});%>\n        </select>\n    </div>\n   \n    <div class="form-title">\n        <%= _t(\'privacy\') %>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="video_form_privacy">\n            <%_.each(data.view_options, function (option) {%>\n            <option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n            <%});%>\n        </select>\n    </div>\n   \n    <div class="form-title">\n        <%= _t(\'comment_privacy\') %>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="video_form_privacy_comment">\n            <%_.each(data.comment_options, function (option) {%>\n            <option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n            <%});%>\n        </select>\n    </div>\n\n    <div class="form-title">\n        *<%= _t(\'source\') %>\n    </div>\n    <div class="form-group <%if (!data.bCanUploadVideo) {%>hide<%}%>">\n        <select class="control-full" id="video_form_type">\n            <option value=""><%= _t(\'select_type\') %></option>\n            <option value="youtube"><%= _t(\'YouTube\') %></option>\n            <option value="file"><%= _t(\'file_upload\') %></option>\n        </select>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full <%if (data.bCanUploadVideo) {%>hide<%}%>" id="video_form_url" placeholder="<%= _t(\'URL\') %>"/>\n    </div>\n\n    <div class="form-group attach-video-url-stage hide" id="video_form_file_preview" >\n        <input type="hidden" id="video_form_file_path" />\n        <span><%=_t(\'video_from_device\')%></span>\n        <i class="icon icon-remove" id="remove_file_btn"></i>\n    </div>\n</div>';});


define('text!video/tpl/video-add.html',[],function () { return '<!-- video/tpl/video-add.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled" id="save_btn">\n\t\t\t<%= _t(\'save\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%=_t(\'upload_video\')%>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="video_add_form">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});

define('video/view/video-add',[
    'video/model/video',
    'text!video/tpl/video-add-form.html',
    'text!video/tpl/video-add.html'
], function(Model, formText, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            form_holder: '#video_add_form'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function() {

            this.$el.html(this.template());

            this.$form_holder = this.$el.find(this.region.form_holder);
            this.$save_btn = this.$el.find('#save_btn');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            utils.api.get('video/formadd', {}, {
                context: this
            }).done(this.fetchDataDone).fail(this.fetchDataFail);
        },
        fetchDataDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;
            this.updateView();
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.log(arguments);
            utils.modal.alert(_t('Can not load data from server'));
            utils.history.back();
        },
        updateView: function() {

            this.$form_holder.html(this.formTemplate({
                data: this.formData || {}
            }));

            this.$form_title = this.$el.find('#video_form_title');
            this.$form_description = this.$el.find('#video_form_description');
            this.$form_category = this.$el.find('#video_form_category');
            this.$form_privacy = this.$el.find('#video_form_privacy');
            this.$form_privacy_comment = this.$el.find('#video_form_privacy_comment');
            this.$form_type = this.$el.find('#video_form_type');
            this.$form_url = this.$el.find('#video_form_url');
            this.$form_file_path = this.$el.find('#video_form_file_path');
            this.$form_file_preview = this.$el.find('#video_form_file_preview');

            var self = this;
            this.$el.find('input').bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        events: {
            'change #video_form_type': 'onChangeVideoType',
            'click #remove_file_btn': 'resetSource',
            'click #save_btn': 'onSaveClick'
        },
        onChangeVideoType: function(evt) {

            if (!this.$form_type.val()) {
                return this.resetSource();
            }

            if (this.$form_type.val() == 'file') {
                this.onChangeTypeToFile();
            } else {
                this.onChangeTypeToURL();
            }
        },
        onChangeTypeToFile: function() {

            var self = this;

            var onSuccess = function(fileURI) {
                self.onGetVideoSuccess(fileURI);
            };

            var onFail = function(msg) {
                self.onGetVideoFail(msg);
            };

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                mediaType: Camera.MediaType.VIDEO
            });
        },
        onChangeTypeToURL: function() {

            this.$form_file_path.val('');
            this.$form_file_preview.addClass('hide');
            this.$form_url.val('').removeClass('hide');

            this.toggleSaveBtn();
        },
        onGetVideoSuccess: function(fileURI) {

            this.$form_url.val('').addClass('hide');
            this.$form_file_path.val(fileURI);
            this.$form_file_preview.removeClass('hide');

            this.toggleSaveBtn();
        },
        onGetVideoFail: function(msg) {

            utils.debug.log(msg);
            this.resetSource();
        },
        resetSource: function(evt) {

            this.$form_type.val('');
            this.$form_url.val('').addClass('hide');
            this.$form_file_path.val('');
            this.$form_file_preview.addClass('hide');

            this.toggleSaveBtn();
        },
        onSaveClick: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            // validate
            if (!this.$form_title.val().trim()) {
                return utils.modal.alert(_t('Video title is required.'));
            }

            if (!this.$form_url.val() && !this.$form_file_path.val()) {
                return utils.modal.alert(_t('Please select video to upload.'));
            }

            // passed
            if (this.$form_type.val() == 'file') {
                this.uploadVideo();
            } else {
                this.saveVideo();
            }
        },
        uploadVideo: function() {

            var postData = {
                sTitle: this.$form_title.val(),
                sDescription: this.$form_description.val(),
                iCategoryId: this.$form_category.val() || 0,
                iPrivacy: this.$form_privacy.val() || 0,
                iPrivacyComment: this.$form_privacy_comment.val() || 0
            };

            var self = this;
            utils.api.uploadVideo('video/upload', this.$form_file_path.val(), postData).done(function(data) {
                self.postConvertVideo(data.iVideoId);
                self.saveDone(data);
            });
        },
        postConvertVideo: function(iVideoId) {

            var postData = {
                iVideoId: iVideoId
            };
            var settings = {
                timeout: 0
            }

            utils.api.post('video/convert', postData, settings); // ignore result
        },
        saveVideo: function() {

            var postData = {
                title: this.$form_title.val(),
                description: this.$form_description.val(),
                category_id: this.$form_category.val() || 0,
                auth_view: this.$form_privacy.val() || 0,
                auth_comment: this.$form_privacy_comment.val() || 0,
                sUrl: this.$form_url.val()
            };

            var settings = {
                context: this
            };

            this.$save_btn.addClass('processing');

            utils.api.post('video/create', postData, settings).done(this.saveDone).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.message) {
                utils.modal.toast(data.message);
            }

            var item = new Model(data);
            window.location.href = item.getUrl();
        },
        toggleSaveBtn: function(evt) {

            var bDisable = !this.$form_title.val().trim() || (!this.$form_url.val() && !this.$form_file_path.val());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});

define('text!video/tpl/video-edit.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn">\n\t\t\t<%= _t(\'save\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'edit_video\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="video-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!video/tpl/video-edit-update.html',[],function () { return '<div class="form-general">\n\t<div class="form-title">\n\t\t*<%= _t(\'video_title\') %>\n\t</div>\n\t<div class="form-group form-input-control">\n\t\t<input type="text" class="control-full" id="ftitle" placeholder="<%= _t(\'video_title\') %>" value="<%=model.getTitle()%>" />\n\t</div>\n\t\n\t<div class="form-title">\n\t\t<%= _t(\'description\') %>\n\t</div>\n\t<div class="form-group form-input-control">\n\t\t<textarea class="control-full textarea" id="fdescription" placeholder="<%= _t(\'description\') %>"><%=model.getDescription()%></textarea>\n\t</div>\n\t\n\t\n\t<div class="form-title">\n\t\t<%= _t(\'categories\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="fcategory_id">\n\t\t\t<option value=""><%= _t(\'select_category\') %></option>\n\t\t\t<%_.each(category_options, function (category) {%>\n\t\t\t<option value="<%=category.iCategoryId%>" <%if (category.iCategoryId == model.getCategoryId()) {%>selected="selected"<%}%>><%=category.sName%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="fauth_view">\n\t\t\t<%_.each(view_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == model.getViewPrivacyVal()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'comment_privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="fauth_comment">\n\t\t\t<%_.each(comment_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == model.getCommentPrivacyVal()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n</div>';});

define('video/view/video-edit',[
	'text!video/tpl/video-edit.html',
	'text!video/tpl/video-edit-update.html'
], function(text, textUpdate) {

	return Backbone.View.extend({
		region : {
			holder : '#main',
			scroller : '#content',
			updateHolder: '#video-edit'
		},
		events : {
			"click #save_btn" : "saveVideo"
		},
		className : 'video-add',
		template : _.template(text),
		templateUpdate: _.template(textUpdate),
		// Render HTML page
		render : function(context) {

			this.$el.html(this.template({
				item: this.model
			}));
			
			this.$holder = $(this.region.holder);
			
			this.$scroller  = this.$el.find(this.region.scroller);

			this.$saveBtn = this.$el.find('#save_btn');
			
			this.$updateHolder =  this.$el.find(this.region.updateHolder);
			
			this.$videoTitleInput = this.$el.find('#ftitle');

			return this;
		},
		inject : function() {
			
			this.$holder.html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
						
			this.fetchData();

			return this;
		},
		fetchData: function(){
			
			var self = this;
			
			var $ajax1 = utils.api.get('video/categories');
				
			var $ajax2 = utils.api.get('privacy/privacy');
			
			var $ajax3 =  utils.api.get('privacy/privacycomment');
			
			var sendData =  {iVideoId: this.model.getId()};
			
			var $ajax4 = utils.api.get('video/detail', sendData);
			
			$.when($ajax1, $ajax2, $ajax3, $ajax4)
			.done(function(data1, data2, data3, data4){
				
				var data1 = data1[0], data2 = data2[0], data3 = data3[0], data4 = data4[0];
				// error
				if (data1.error_code && data1.error_code > 0) {
					return utils.modal.alert(data1.error_message || _t('Can not load data from server'));
				}
				
				if (data2.error_code && data2.error_code > 0) {
					return utils.modal.alert(data2.error_message || _t('Can not load data from server'));
				}
				
				if (data3.error_code && data3.error_code > 0) {
					return utils.modal.alert(data3.error_message || _t('Can not load data from server'));
				}
				
				if (data4.error_code && data4.error_code > 0) {
					return utils.modal.alert(data4.error_message || _t('Can not load data from server'));
				}
				
				self.model.set(data4);
				
				// success
				self.updateContext = {
					category_options: data1,
					view_options: data2,
					comment_options: data3,
					model: self.model
				};
				self.updateView();
				
			}).fail(function(){
				
			});
		},
		updateView: function(){
			this.$updateHolder.html(this.templateUpdate(this.updateContext));
		},
		collectFormData: function(){
			return {
				iVideoId: this.model.getId(),
				iCategoryId : this.$el.find('#fcategory_id').val() || 0,
				title : this.$el.find('#ftitle').val(),
				description : this.$el.find('#fdescription').val(),
				tags : this.$el.find('#ftag').val(),
				auth_view : this.$el.find('#fauth_view').val() || '0', // authentication
				auth_comment : this.$el.find('#fauth_comment').val() || '0', 
				search : 1
			}
		},
		saveVideo : function() {
			
			if(this.$saveBtn.hasClass('processing')){
				return ;
			}
			
			var sendData = this.collectFormData();
			var settings = {context: this};
			
			if (utils.validator.isEmpty(sendData.title)) {
				utils.modal.alert(_t('Video title is required'));
				return false;
			}
			
			this.$saveBtn.addClass('processing');
			
			utils.api.post('video/edit', sendData)
			.done(this.doSaveComplete).fail(this.doSaveFail);
			
		},
		doSaveComplete: function(data){
			if (data.error_code && data.error_code > 0) {
				return utils.modal.alert(data.error_message || _t('Can not load data from server'));
			}else{
				utils.modal.toast(data.message);
				utils.history.back();
			}
			
		},
		doSaveFail: function(err, msg){
			msg  = msg || _t('Could not save data');
			this.$saveBtn.removeClass('processing');
			utils.modal.alert(msg);
		}
	});
});

define('video/controller/video-edit',[
    'video/model/video',
    'video/view/video-add',
    'video/view/video-edit'
], function(VideoModel, AddView, EditView) {

    function AddController(module, item) {

        utils.observer.trigger('router:changed');

        new AddView({
            model: new VideoModel({})
        }).render({
            iItemId: item,
            sModule: module || 'video'
        }).inject();
    }

    function EditController(id) {

        utils.observer.trigger('router:changed');

        new EditView({
            model: new VideoModel({
                iVideoId: id
            })
        }).render().inject();
    }

    utils.router.route('videos/add(/:module/:item)', AddController);

    utils.router.route('videos/edit/:id', EditController);
});
define('video/main',[
	'core',
	// plugin
	'video/plugin/activity',
	// controller
	'video/controller/video-index',
	'video/controller/video-detail',
	'video/controller/video-edit'
],function(core){
	core.sidebar.configs.set('video',{
 		icon: 'icon-sidebar-video',
 		label: 'Videos',
 		url: '#videos',
 	});
});

define('video', ['video/main'], function (main) { return main; });


define('text!photo/tpl/attachment-album.html',[],function () { return '<div>\n\tattachment album\n</div>';});

define('photo/view/attachment-album',[
	'text!photo/tpl/attachment-album.html'
],function(){
	
	return Backbone.View.extend({
		region: {},
		render: function(item){
			this.$el.html('text translate albums');
			return this;
		},
		inject: function(dom){
			dom.html(this.el);
			return this;
		}
	});
});


define('text!photo/tpl/attachment-photo.html',[],function () { return '<div class="swiper-container">\n\t<div class="swiper-wrapper">\n\t<% _.each(attachments,function(attachment){ %>\n        <%if (attachment.getImgSrc()) {%>\n    \t<div rel="link" data-url="<%=attachment.getUrl()%>" class="swiper-slide attachment-photo-item">\n    \t\t<span class="attachment-photo-item-thumb" style="background-image: url(<%= attachment.getImgSrc() %>)">\n    \t\t</span>\n\t\t</div>\n        <%}%>\n\t<%}); %>\n\t</div>\n</div>\n';});

define('photo/view/attachment-photo',[
	'text!photo/tpl/attachment-photo.html',
    'photo/model/photo'
],function(text){
	
    var PhotoModel = require('photo/model/photo')
	
	return Backbone.View.extend({
		className: 'attachment-photo',
		template: _.template(text),
		count: 0,
		render: function(){
			var item = this.model;
			
			var attachments = item.getAttachments();
			
            attachments = attachments.map(function(attachment) {
				if (!parseInt(attachment.iAlbumId)) {
					attachment.iParentId = item.get('iObjectOwnerId');
					attachment.sParentType = item.get('sObjectOwnerType');
				}
                return new PhotoModel(attachment);
            });
            
			var count = this.count  = attachments.length;
			var limit = utils.setting.get('mfox_limit_photo_to_scroll');
            if (limit > 0) {
                attachments = attachments.slice(0, limit);
            }
            
			this.$el.html(this.template({item: this.model, attachments: attachments,count: count, elementId: $.newElenentId() }));
			
			return this;
		},
		inject: function(dom){
			
			dom.html(this.el);
			
			if(this.count > 1){
				
				var container = $(dom).find('.swiper-container');

				var item_width = container.width();

				// add width fix slideshow width content
				container.find('.attachment-photo-item').css({ width: item_width });
				
				// check and add class for album photo
				container.addClass('swiper-album-photo');
				
				container.swiper({
					// scrollContainer: true,
					mode: 'horizontal',
					slidesPerView: 'auto'
				});
				
				container.trigger('refresh');
			}
			
			return this;
		}
	});
});

define('photo/plugin/activity',[
    'photo/view/attachment-album',
    'photo/view/attachment-photo'
], function(AlbumView, PhotoView) {

    utils.headline.add(['photo', 'advancedphoto'], function(item) {
        if (item.hasAttachment()) {

            if (!item.hasParentUser()) {
                var aAttachments = item.getAttachments();
                if (aAttachments.length > 1) {
                    return _t('shared_a_few_photos');
                } else {
                    return _t('shared_a_photo');
                }
            } else {
                return '<i class="activity-post-via"> &rarr; </i> ' + item.getParentLink();
            }
        } else {
            return '';
        }
    });

    utils.attachment.add(['photo', 'advancedphoto'], PhotoView);
});

define('text!photo/tpl/album-index.html',[],function () { return '<!-- photo/tpl/album-index.html-->\n<div class="header">\n\t<div clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t<%if(!iUserId || iUserId == iViewerId){ %>\n\t\t<a class="btn-top btn-add" href="#photos/add-album"></a>\n\t<%}%>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n\t<!-- search holder -->\n</div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list" id="album_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <%if(!iUserId){ %>\n\t        <a class="menu-item current" href="#albums">\n\t        \t<div class=""><%= _t(\'albums\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#photos">\n\t        \t<div class="sibling"><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#albums/my">\n\t        \t<div class="sibling"><%= _t(\'My Albums\') %></div>\n\t        </a>\n            <div class="menu-item" id="footer_more_btn">\n\t        \t<div class="sibling"><%= _t(\'more\') %></div>\n\t        </div>\n        <%}else{%>\n\t        <a class="menu-item" href="#photos-of/user/<%=iUserId%>">\n\t        \t<div class=""><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#albums-of/<%=iUserId%>">\n\t        \t<div class="sibling"><%= _t(\'albums\') %></div>\n\t        </a>\n        <%}%>\n    </div>\n</div>\n';});


define('text!photo/tpl/album-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_albums\') %>" value="<%=sSearch%>" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'latest\') %></option>\n                <option value="most_disscussed"><%= _t(\'most_discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\n\t</div>\n</div>\n';});

define('photo/view/album-search',[
	'text!photo/tpl/album-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(query){
			
			this.query  =  $.extend({sView: 'all',sSearch: ''}, query);
			
			this.$el.html(this.template(this.query));
			
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			$(this.region.holder).html(this.$el);
			
			return this;
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				sOrder: this.$orderInput.val() || 'latest'
			});
		}
	});
	
});


define('text!photo/tpl/photo-more-menu.html',[],function () { return '<div class="setting-list">\n    <a class="setting-item" href="#photos/my">\n    \t<%= _t(\'my_photos\') %>\n    </a>\n</div>\n';});

define('photo/view/photo-more-menu',[
    'text!photo/tpl/photo-more-menu.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        events: {
            'touchend a': 'hideMenu'
        },
        hideMenu: function (evt) {
            if (utils.popup.isShown()) {
                utils.popup.close();
            }
        }
    });
});

define('photo/view/album-index',[
	'core',
	'text!photo/tpl/album-index.html',
	'photo/view/album-list',
	'photo/view/album-search',
    'photo/view/photo-more-menu'
],function(core, text){
	
	var ListView = require('photo/view/album-list')
	  , SearchView = require('photo/view/album-search')
      , MoreMenuView = require('photo/view/photo-more-menu');
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(query){
			
			this.query =  $.extend({
				iViewerId: core.viewer.getId(),
				iUserId: 0
			}, query);
			
			this.$el.html(this.template(this.query));
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({}, 
				this.$el.find('#album_list_view_holder'),
				this.$scroller,
				{
					loadmore: true,
					loadnew: false,
				});
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		},
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function (evt) {
            this.moreMenu = new MoreMenuView();
            this.moreMenu.render().inject();
        }
	});
});

define('photo/controller/album-index',[
	'photo/view/album-index'
],function(IndexView){
	
	/*
	*	Controller is called when user album tab to see all albums.
	*/
	function AlbumIndexController(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({}).inject();
	}

	/*
	*	Controller is called when user selects friend's album tab.
	*/
	function FriendAlbumController(id){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			iUserId: id
		}).inject();
		
	}
		
	utils.router.route('albums', AlbumIndexController);

	utils.router.route('albums-of/:id', FriendAlbumController);
});

define('text!photo/tpl/photo-index.html',[],function () { return '<!-- friend/tpl/index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n\n\t<div class="header-right">\n\t<%if(!iUserId || iUserId == iViewerId){ %>\n\t\t<a class="btn-top btn-add" href="#photos/add-album"></a>\n\t<%}%>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n\t<!-- search here -->\n</div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list clearfix" id="photo_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <%if(!iUserId){ %>\n\t        <a class="menu-item" href="#albums">\n\t        \t<div class=""><%= _t(\'albums\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#photos">\n\t        \t<div class="sibling"><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#albums/my">\n\t        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n\t        </a>\n            <div class="menu-item" id="footer_more_btn">\n\t        \t<div class="sibling"><%= _t(\'more\') %></div>\n\t        </div>\n        <%}else{%>\n\t        <a class="menu-item" href="#photos-of/user/<%=iUserId%>">\n\t        \t<div class=""><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#albums-of/<%=iUserId%>">\n\t        \t<div class="sibling"><%= _t(\'albums\') %></div>\n\t        </a>\n        <%}%>\n    </div>\n</div>\n';});


define('text!photo/tpl/photo-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_photos\') %>" value="<%=sSearch%>" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n\t\t\t\t<option value="0" selected="true"><%= _t(\'all_categories\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%=_t(\'latest\')%></option>\n                <option value="most_viewed"><%=_t(\'most_viewed\')%></option>\n                <option value="most_disscussed"><%=_t(\'most_discussed\')%></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\n\t</div>\n</div>';});

define('photo/ipad/view/photo-search',['require'],function(text){
	return {
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		}
	};
});

define('photo/view/photo-search',[
	'text!photo/tpl/photo-search.html',
	'photo/ipad/view/photo-search'
], function(text){
	
	return Backbone.PolyplatformView.extend({
		moduleId: 'photo/view/photo-search',
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(query){
			
			this.query  =  $.extend({sView: 'all',sSearch: ''}, query);
			
			this.$el.html(this.template(this.query));
			
			this.$categoryInput = this.$el.find('#search_category');
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords');
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(){
			utils.api.get('photo/categories',{},{context: this}).done(this.updateView);
		},
		updateView: function(data){
			if (data.error_code) {
				return utils.modal.alert(data.error_message);
			}
			_.each(data, function (option) {
				if(option.iCategoryId == 0) return ; // skip all categories 
				this.$categoryInput.append(new Option(option.sName, option.iId));
			}, this);
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				iCategoryId: this.$categoryInput.val() || 0,
				sOrder: this.$orderInput.val() || 'latest'
			});
		}
	});
	
});

define('photo/view/photo-index',[
    'core',
    'text!photo/tpl/photo-index.html',
    'photo/view/photo-list',
    'photo/view/photo-search',
    'photo/view/photo-more-menu'
], function(core, text) {

    var ListView = require('photo/view/photo-list'),
        SearchView = require('photo/view/photo-search'),
        MoreMenuView = require('photo/view/photo-more-menu');

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function() {

        },
        render: function(query) {

            this.query = $.extend({
                type: 'user',
                iUserId: 0
            }, query);

            this.$el.html(this.template({ //do NOT mix query and template param
                iUserId: query.iUserId || null,
                iViewerId: core.viewer.getId(),
            }));

            return this;

        },
        inject: function() {

            var $holder = $(this.region.holder).html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable
            // render search iew

            this.listView = new ListView({},
                this.$el.find('#photo_list_view_holder'),
                this.$scroller, {
                    loadmore: true,
                    loadnew: false,
                    iParentId: 0,
                    iAlbumId: 0
                });

            this.searchView = new SearchView();

            this.searchView.render().inject();

            // render list view
            this.listView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery(data);
            });

            return this;
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {
            this.moreMenu = new MoreMenuView();
            this.moreMenu.render().inject();
        }
    });
});

define('text!photo/tpl/photo-detail-item.html',[],function () { return '<div class="photo_display" id="photo_zoom_<%= item.getId() %>" style="line-height: <%= (Math.max(window.screen.height/ window.devicePixelRatio, window.innerHeight) - 100) + \'px\' %>;">\r\n    <img class="lazy" id="img_slide_<%= item.getId() %>" src="<%= item.get(\'sPhotoUrl\') %>" style="width:100%;"/>\r\n</div>';});


define('text!photo/tpl/photo-detail-action.html',[],function () { return '<div class="photo_detail_info" style="z-index:9999;" id="photo_title_<%= item.getId() %>">\n    <div class="photo-headline">\n        <span class="photo-title"><%=utils.str.shorten(item.getTitle(), 20, false)%></span>\n        <%if (item.hasAlbum()) {%>\n            <%=_t(\'in\')%> <a class="album-title" href="<%=item.getAlbumUrl()%>"><%=utils.str.shorten(item.getAlbumTitle(), 20, false)%></a>\n        <%}%>\n    </div>\n    <% if (item.getDescription()) { %>\n    <div class="photo-status <% if ( item.getDescription() ) { %> margin-bottom <% } %>">\n        <%= utils.str.shorten(item.getDescription(), 50, true) %>\n    </div>\n    <% } %>\n    <div class="photo-info-author">\n        <div class="photo-time">\n            <i class="icon icon-time"></i>\n            <span data-utime="<%= item.getTimestamp() %>" class="livetimestamp"><%= item.getLivetime() %></span>\n        </div>\n        <div class="photo-author">\n            <img src="<%= _.escape(item.getPosterImageSrc()) %>" />\n            <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\n        </div>        \n    </div>\n    <div class="clear clearfix"></div>\n</div>\n<div class="footer" style="z-index:9999;">\n    <div class="clearfix menu-justify grid-5 gray">\n        <div class="item-like menu-item <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n            <div class="sibling">\n                <span class="text-info"><%= item.getLikeCount() %></span>\n                <i class="icon icon-activity-like"></i>\n            </div>\n        </div>\n        <% if(item.canComment()){%>\n        <div class="item-comment menu-item" data-display="page" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n            <div class="sibling">\n                <span class="text-info"><%= item.getCommentCount() %></span>\n                <i class="icon icon-activity-comment"></i>\n            </div>\n        </div>\n        <%} %>\n        <% if(item.canShare()) { %>\n        <div class="item-share menu-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\n            <div class="sibling">\n                <i class="icon icon-activity-share"></i>\n            </div>\n        </div>\n        <%} %>\n        <div class="item-more menu-item item-setting" id="<%= item.getDataId(\'setting\') %>" rel="delegate">\n            <div class="sibling">\n                <%=_t(\'More\') %>\n            </div>\n        </div>\n    </div>\n    <div class="clear clearfix"></div>\n</div>\n';});


define('text!photo/tpl/photo-detail-setting.html',[],function () { return '<div class="setting-list">\n    <%if (item.canDislike()) {%>\n    <div class="setting-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="setting-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\n    </div>\n    <%}%>\n    <%if (item.canEdit()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'edit\') %>"><%= _t(\'edit_photo\') %></a>\n    <%}%>\n    <%if (item.canDelete()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>"><%= _t(\'delete_photo\') %></a>\n    <%}%>\n    <%if (item.isOwner()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'makeProfile\') %>" ><%= _t(\'make_profile_photo\') %></a>\n    <%} else {%>\n    <a class="setting-item" id="<%= item.getDataId(\'report\') %>" rel="delegate"><%= _t(\'report_this_photo\') %></a>\n    <%}%>\n    <a class="processing-status hide"> </a>\n</div>\n\n';});

define('photo/view/photo-detail-setting',[
    'text!photo/tpl/photo-detail-setting.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
], function(text, DislikeCollection, DislikeDetailView) {
	
    return Backbone.View.extend({
        template: _.template(text),
        render: function(){
			var self = this;
			
			this.$el.html(this.template({item: this.model}));
            
            this.$dislikeHolder = this.$el.find('#dislike-list');
            
            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));
			
			this.model.on('change:iTotalDislike change:bIsDisliked', function () {
        		self.updateView();
        	});
            
			return this;
		},
        inject: function(){
            this.model.dislikes = new DislikeCollection();
			
			this.model.dislikes.add(this.model.getUserDislike());
			            
            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);
			
			utils.popup.open(this.$el);
			
			return this;
		},
        updateView: function () {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
			this.$dislikeHolder.toggleClass('hide', bHide);
            
            var sText = this.model.isDisliked() ? _t('Remove Dislike') : _t('Dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});



define('text!photo/tpl/photo-edit.html',[],function () { return '<div class="form-general">\n    <div class="form-title">\n       *<%= _t(\'title\') %>\n    </div>\n\t<div class="form-group ">\n        <input class="control-full" type="text" name="sTitle" id="title" value="<%= item.getTitle() %>" />\n\t</div>\n\n    <div class="form-title">\n       <%= _t(\'description\') %>\n    </div>\n\n\t<div class="form-group ">\n        <textarea class="control-full textarea" type="text" name="sDescription" id="description"><%= item.getDescription() %></textarea>\n\t</div>\n\n    <input class="btn btn-active btn-small-fluid" type="submit" id="save_photo" value="<%= _t(\'save\') %>">\n\n</div>\n';});

define('photo/view/photo-edit',[
    'text!photo/tpl/photo-edit.html'
], function(text) { 
	
    return Backbone.View.extend({
        template: _.template(text),
        events: {
            'click #save_photo': 'savePhoto'
        },
        render: function() {
            // I always think the context is too ambiguous
            this.$el.html(this.template({item: this.model}));

            this.$title = $('#title', this.$el);
            this.$description = $('#description', this.$el);
            this.$postBtn = $('#save_photo', this.$el);
            return this;
        },

        inject: function() {
            utils.popup.open(this.$el);
        },
        savePhoto: function() {

            if (this.$postBtn.isProcessing()) return;

            if(!this.isValidate()) {
                return ;
            }

            var data = {
                "iPhotoId": this.model.getId(),
                "sItemType": this.model.getType(),
                "sTitle": this.$title.val(),
                "sDescription": this.$description.val()

            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            utils.api.post('photo/edit', data, settings).done(this.postDone).always(this.postComplete);
            
        },
        
        isValidate: function() {
            if(this.$title.val().trim() == '') {
                utils.modal.alert(_t('Please provide title for your photo'));
                return false;
            }

            return true;

        },

       /**
        * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
        */
       postComplete: function() {
           this.$postBtn.isProcessing(false);
           this.$postBtn.val(_t('Save'));
       },

       /**
        * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
        */
       beforeSend: function() {
           this.$postBtn.isProcessing(true);
           this.$postBtn.val(_t('Saving...'));
       },

       /**
        * It is called when having a response returned.
        * Note that it will not be called if server returns status !== 200
        */
       postDone: function(data, status, jqXHR) {
           if(data.error_code > 0) {
               utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
               return false;
           } else {
               this.postSuccess(data);
           }
       },

       /** 
        * It should be called when the response has error_code == 0 
        */
       postSuccess: function (data) {
           utils.popup.close();
           utils.modal.toast(_t('Edit photo successfully'));
           this.model.set( {
               'sTitle': this.$title.val(),
               'sDescription': this.$description.val()
           });

       },
       
    });
});


define('photo/view/photo-detail-action',[
	'text!photo/tpl/photo-detail-action.html',
	'comment/view/comment-page',
    'photo/view/photo-detail-setting',
    'photo/view/photo-edit',
],function(text, CommentView, SettingView){

	return Backbone.ItemView.extend({
		region: {
			holder: '#photo_detail_action_view_holder'
		},
		events: {
			'edit': 'onEditClick',
            'makeProfile': 'onMakePhotoProfileClick'
		},
		template: _.template(text),
		settingView: SettingView,
		editView: require('photo/view/photo-edit'),
		render: function(){
			
			this.$processingStatus = this.$el.find('.processing-status');
			
			this.$holder =  $('#photo_detail_action_view_holder');
			
			this.$el.html(this.template({item: this.model}));
			
			this.$el.prop('id', this.model.getDataId());

            this.model.on('change', this.updateView, this);
			
			return this;
		},
		inject: function(){
			
			this.$holder.html(this.$el);
			
			return this;
		},
		updateView: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		onEditClick: function() {
            new this.editView({model: this.model}).render().inject();
        },

        doDeleteConfirm: function() {
        	
            if(this.$processingStatus.isProcessing()) return;

            var self = this;
            var msg = _t('Do you want to delete this photo');
            utils.modal.confirm(msg, function(select) {
                if(select == 1) {
            		self.doDelete();
                }
            });
        },
        doDelete: function(){
        	
            var data = {
                iPhotoId: this.model.getId(),
                iItemId: this.model.getId(),
                sItemType: this.model.getType(),
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSendDelete
            };

            utils.api.post('photo/delete', data, settings).done(this.postDeleteDone).always(this.postDeleteComplete);
        	
        },
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postDeleteComplete: function() {
            this.$processingStatus.isProcessing(false);
            this.$processingStatus.html('');
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSendDelete: function() {
            this.$processingStatus.isProcessing(true);
            this.$processingStatus.html('Deleting...');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDeleteDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postDeleteSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postDeleteSuccess: function (data) {
            utils.popup.close();
            utils.modal.toast(_t('Photo deleted successfully'));
            utils.history.back();
        },
        
        onMakePhotoProfileClick: function() {
            if(this.$processingStatus.isProcessing()) return;

			var msg = _t('Do you want to make this photo your profile photo');
            var self = this;
            
            utils.modal.confirm(msg, function(select) {
                if(select == 1) {
                    self.doMakeProfilePhoto();
                }
            });

        },
        
        doMakeProfilePhoto: function(){
        	var data = {
                iPhotoId: this.model.getId(),
                iItemId: this.model.getId(),
                sItemType: this.model.getType(),
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSendMakeProfile
            };

            utils.api.post('photo/setprofile', data, settings).done(this.postMakeProfileDone).always(this.postMakeProfileComplete);	
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postMakeProfileComplete: function() {
            this.$processingStatus.isProcessing(false);
            this.$processingStatus.html('');
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSendMakeProfile: function() {
            this.$processingStatus.isProcessing(true);
            this.$processingStatus.html('Setting profile...');
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postMakeProfileDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postMakeProfileSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postMakeProfileSuccess: function (data) {
            utils.popup.close();
            utils.modal.toast(_t('Set as profile photo successfully'));
            utils.observer.trigger('user:update');
        },
	});
});

define('photo/view/photo-detail-item',[
    'text!photo/tpl/photo-detail-item.html',
    'photo/view/photo-detail-action',
], function(text, ActionView) {

    return Backbone.ItemView.extend({
        className: 'content-slide',
        template: _.template(text),
        actionView: ActionView,
        render: function(context) {

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {
            inject(this.el);
        },
        events: {
            'active': 'onActive',
        },
        onActive: function() {
            new this.actionView({
                model: this.model
            }).render().inject();
        }
    });
});

define('text!photo/tpl/photo-detail-page.html',[],function () { return '<!-- swiper -->\r\n<div class="content content-background content-photo-detail swiper-container" style="z-index:9998;" id="content">\r\n\t<div class="swiper-wrapper photo-loading photo-detail-paged" id="photo-detail" style="width:100%;height:100%;">\r\n\t</div>\r\n</div>\r\n<div id="photo_detail_action_view_holder" style="z-index:9999;">\r\n\t\r\n</div>\r\n<div class="btn-close-photo-detail" style="z-index:9999;" ></div>';});


define('text!photo/tpl/photo-detail-slide.html',[],function () { return '<div class="swiper-slide photo-loading" style="width:100%;"></div>';});

define('photo/view/photo-details',[
    'photo/view/photo-detail-item',
    'text!photo/tpl/photo-detail-page.html',
    'text!photo/tpl/photo-detail-slide.html',
    'photo/model/photo',
    'photo/view/photo-detail-action'
], function(ItemView, text, textSlide, Model, ActionView) {

    return Backbone.View.extend({
        region: {
            main: '#main',
            content: '#content',
            list: '#photo-detail'
        },
        className: 'photo-detail-popup-container',
        isFirst: true,
        template: _.template(text),
        templateSlide: _.template(textSlide),
        events: {
            "click .btn-close-photo-detail" : "closePhotoDetailPopup"
        },
        render: function(context) {

            this.context = $.extend({
                sType: null,
                iInDetails: 1,
                serviceUrl: null,
                iAmountOfPhoto: 100,
                iItemId: null,
                sModule: null
            }, context);

            this.isFirst = true;

            this.renderLimit = 20;

            this.$el.html(this.template(this.context));

            return this;

        },
        inject: function() {
            var self = this;
       
            $(this.region.main).append(this.el); // append() here coz we don't want to remove existing newsfeed stream while viewing image << Nay

            this.$content = this.$el.find(this.region.content);

            this.$list = this.$el.find(this.region.list);



            this.fetchData();
        },
        fetchData: function() {

            var postData = this.getQuery();
            var settings = {
                context: this
            };

            utils.api.get(this.context.serviceUrl, postData, settings).done(function(data) {

                if (data.error_code && data.error_code > 0) {
                    utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    return utils.history.back();
                }


                this.items = data.map(function(item) {
                    return new Model(item);
                });

                this.addItems();

            }).fail(function(err) {

                utils.debug.error(err);
                return utils.history.back();
            });
        },
        getQuery: function() {

            this.context.serviceUrl = 'photo/fullphotoslide';

            var query = {
                iCurrentPhotoId: this.context.iPhotoId,
                iAmountOfPhoto: this.context.iAmountOfPhoto,
                iInDetails: this.context.iInDetails
            };

            if (this.context.sModule && this.context.sModule != 'photo') {
                query.iItemId = this.context.iItemId;
                query.sModule = this.context.sModule;
            } else if (this.context.iParentId != 0) {
                switch (this.context.sType) {
                    case 'photo':
                    case 'advancedphoto':
                        this.context.serviceUrl = 'photo/fullalbumslide';
                        query.iAlbumId = this.context.iParentId;
                        break;
                    case 'event_photo':
                    case 'fevent_photo':
                        this.context.serviceUrl = 'event/listphotos';
                        query.iEventId = this.context.iParentId;
                        break;
                    case 'profile_photo':
                        query.iUserId = this.context.iParentId;
                        break;
                    case 'user':
                        this.context.serviceUrl = 'photo/onephotoslide';
                        query.iAmountOfPhoto = 1;
                        query.iUserId = this.context.iParentId;
                        query.sAction = 'current';
                        break;
                    default:
                        break;
                }
            }

            return query;
        },
        addItems: function() {
            
            this.$list.removeClass('photo-loading');

           

            for (var i = 0; i < this.items.length; i++) {
                this.$list.append(this.templateSlide());
            }



            var initIndex = this.getIndex(this.items, this.context.iPhotoId);

            var self = this;

            this.oSwiper = new Swiper('#content', {
                noSwiping: true, // So swiping can be disabled with a class,
                initialSlide: initIndex,
                onSlideChangeEnd: function(swiper) {
                    self.onSlideChangeEnd(self);
                }
            });

            this.updateSlides();
            this.enableZoom();
        },
        getIndex: function(items, id) {

            for (var i = 0; i < items.length; i++) {
                if (items[i].getId() == id) {
                    return i;
                }
            }

            return 0;
        },
        updateSlides: function() {

            var activeIndex = this.oSwiper.activeIndex;

            this.firstIndex = Math.max(0, activeIndex - (this.renderLimit / 2 - 1));
            this.lastIndex = Math.min(this.items.length - 1, activeIndex + (this.renderLimit / 2));

            if (this.firstIndex > 0) {
                this.emptySlides(0, this.firstIndex - 1);
            }

            this.fillSlides(this.firstIndex, this.lastIndex);
           
            if (this.lastIndex < this.oSwiper.slides.length - 1) {
                this.emptySlides(this.lastIndex + 1, this.oSwiper.slides.length - 1);
            }


        },
        emptySlides: function(from, to) {

            for (var i = from; i <= to; i++) {
                this.$list.children().eq(i).empty();
            }
        },
        fillSlides: function(from, to) {
            
            for (var i = from; i <= to; i++) {
                var $slide = this.$list.children().eq(i);

                if (!$slide.html()) {
                  
                    $slide.html(new ItemView({
                        model: this.items[i]
                    }).render().el);
                }
            }

        },
        enableZoom: function() {

            var activeSlide = this.oSwiper.activeSlide();
                activeSlide = $(".photo-detail-paged").find(".swiper-slide"); //patched << Nay

            // update activity extra block
            var activeItem = $(activeSlide).find('.content-slide');
            activeItem.trigger('active');

            var inScroll = $(activeSlide).find('.photo_display').get(0);
            this.oZoom = new iScroll(inScroll, {
                hideScrollbar: true,
                hScrollbar: false,
                vScrollbar: false,
                zoom: true,
                // topOffset: 100,
                // So Swiper will not swipe/slide when zooming is enabled
                onZoomEnd: function(e) {
                    var slide = $(this.wrapper);

                    if (parseInt(this.scale) == 1) {
                        slide.removeClass('swiper-no-swiping');
                    } else {
                        slide.addClass('swiper-no-swiping');
                    }
                },
                // Since the images are inside of the swiper slide it
                // got a huge left offset, but the offset isn't really
                // part of the page/image since the page is completely
                // shown within the viewable area of the viewport. So
                // simply remove the wrapperOffsetLeft from the
                // calculation and be happy.
                //
                // touchstart: When pinch-zooming
                // touchend: When double-tap zooming
                onZoomStart: function(e) {
                    if (e.type === 'touchstart') {
                        this.originX = Math.abs(e.touches[0].pageX + e.touches[1].pageX) / 2 - this.x;
                    } else if (e.type === 'touchend') {
                        this.wrapperOffsetLeft = 0;
                    }
                }
            });
        },
        onSlideChangeEnd: function(self) {

            var activeIndex = self.oSwiper.activeIndex;
            var prevSlide = self.$list.children().eq(Math.max(0, activeIndex - 1));
            var nextSlide = self.$list.children().eq(Math.min(self.oSwiper.slides.length - 1, activeIndex + 1));

            if ((activeIndex > 0 && !prevSlide.html()) || (activeIndex < self.oSwiper.slides.length - 1 && !nextSlide.html())) {
                self.updateSlides();
            }

            if (activeIndex == 0 && !self.fetchingPrevItems && !self.addingPrevItems) {
                self.fetchPrevItems();
            }

            if (activeIndex == self.oSwiper.slides.length - 1 && !self.fetchingNextItems && !self.addingNextItems) {
                self.fetchNextItems();
            }

            this.enableZoom();
        },
        fetchPrevItems: function(swiper) {

            this.fetchingPrevItems = true;

            var postData = $.extend(this.getQuery(), {
                iCurrentPhotoId: this.items[0].getId(),
                sAction: 'previous'
            });
            var settings = {
                context: this
            };

            utils.api.get(this.context.serviceUrl, postData, settings).done(function(data) {

                if (data.error_code && data.error_code > 0) {
                    utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    return utils.history.back();
                }

                var newitems = data.map(function(item) {
                    return new Model(item);
                });

                this.items = newitems.concat(this.items);

                if (newitems.length > 0) {
                    this.addPrevItems(newitems);
                }

            }).fail(function(err) {

                utils.debug.error(err);
                utils.modal.alert(_t('Can not load data from server'));

            }).always(function() {

                var self = this;

                setTimeout(function() {
                    self.fetchingPrevItems = false;
                }, 500);

            });
        },
        addPrevItems: function(newitems) {

            this.$list.addClass('swiper-no-swiping'); // prevent swipe action during adding slides

            this.addingPrevItems = true;

            var activeIndex = this.oSwiper.activeIndex + newitems.length;

            for (var i = 0; i < newitems.length; i++) {
                var newSlide = document.createElement('div');
                newSlide.className = 'swiper-slide';

                this.oSwiper.prependSlide(newSlide);
            }

            this.oSwiper.swipeTo(activeIndex, 0);

            var self = this;

            setTimeout(function() {
                self.updateSlides();
                self.addingPrevItems = false;
                self.$list.removeClass('swiper-no-swiping');
            }, 500);
        },
        fetchNextItems: function() {

            this.fetchingNextItems = true;

            var postData = $.extend(this.getQuery(), {
                iCurrentPhotoId: this.items[this.items.length - 1].getId(),
                sAction: 'next'
            });
            var settings = {
                context: this
            };

            utils.api.get(this.context.serviceUrl, postData, settings).done(function(data) {

                if (data.error_code && data.error_code > 0) {
                    utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    return utils.history.back();
                }

                var newitems = data.map(function(item) {
                    return new Model(item);
                });

                this.items = this.items.concat(newitems);

                if (newitems.length > 0) {
                    this.addNextItems(newitems);
                }

            }).fail(function(err) {

                utils.debug.error(err);
                utils.modal.alert(_t('Can not load data from server'));

            }).always(function() {

                this.fetchingNextItems = false;

            });
        },
        addNextItems: function(newitems) {
            alert("...");
            this.addingNextItems = true;

            for (var i = 0; i < newitems.length; i++) {
                var newSlide = document.createElement('div');
                newSlide.className = 'swiper-slide';
                

                this.oSwiper.appendSlide(newSlide);
            }

            this.updateSlides();

            this.addingNextItems = false;
        },
        closePhotoDetailPopup: function (){
     
            utils.router.previous();
            $("."+this.className).remove();

        }
    });
});
define('photo/controller/photo-index',[
    'core',
    'photo/view/photo-index',
    'photo/view/photo-details'
], function(core, IndexView, DetailView) {

    function IndexController() {

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({}).inject();
    }

    function FriendPhotoController(type, id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new IndexView().render({
            type: type,
            iUserId: id
        }).inject();
    }

    function DetailController(type, iParentId, id, module, item) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView().render({
            iPhotoId: id,
            iParentId: iParentId,
            sType: type,
            iItemId: item,
            sModule: module
        }).inject();
    }

    function PhotoDetailController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView().render({
            iPhotoId: id,
            iParentId: Backbone.iUserId,
            sType: 'user',
            iItemId: null,
            sModule: null
        }).inject();
    }

    function AdvancedPhotoDetailController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView().render({
            iPhotoId: id,
            iParentId: Backbone.iUserId,
            sType: 'user',
            iItemId: null,
            sModule: null
        }).inject();
    }

    utils.router.route('photos', IndexController);

    utils.router.route('photos-of/:type/:id(/:act)', FriendPhotoController);

    utils.router.route('photo-detail/:type/:parentid/:id(/:module/:item)', DetailController);
    utils.router.route('photo/:id', PhotoDetailController);
    utils.router.route('advancedphoto/:id', AdvancedPhotoDetailController);
});

define('text!photo/tpl/album-my.html',[],function () { return '<!-- photo/tpl/album-index.html-->\n<div class="header">\n\t<div clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n        <a class="btn-top btn-add" href="#photos/add-album"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list photo-album-list" id="album_my_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <%if(!iUserId){ %>\n\t        <a class="menu-item" href="#albums">\n\t        \t<div class=""><%= _t(\'albums\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#photos">\n\t        \t<div class="sibling"><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#albums/my">\n\t        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n\t        </a>\n            <div class="menu-item" id="footer_more_btn">\n\t        \t<div class="sibling"><%= _t(\'more\') %></div>\n\t        </div>\n        <%}else{%>\n\t        <a class="menu-item" href="#photos-of/user/<%=iUserId%>">\n\t        \t<div class=""><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#albums-of/<%=iUserId%>">\n\t        \t<div class="sibling"><%= _t(\'albums\') %></div>\n\t        </a>\n        <%}%>\n    </div>\n</div>\n';});


define('text!photo/tpl/album-my-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading ...  -->\n</div>';});

define('photo/view/album-my-list',[
	'photo/model/album',
	'photo/view/album-my-item',
	'text!photo/tpl/album-my-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: '',
			iPage: 1,
			sSearch: '',
			sOrder: 'recent',
			iUserId: null,
			iCategoryId: 0,
			iAmountOfAlbum: 8 // 2 x4 items
		},
		followById: false,
		api: 'photo/myalbum',
		phraseNotFound: 'အယ္လဘမ္ မေတြ.ပါ။',
		phraseNotMore: 'ေနာက္ထပ္ အယ္လဘမ္ မေတြ.ပါ။',
		className: 'album-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});
define('photo/view/album-my',[
	'core',
	'text!photo/tpl/album-my.html',
	'photo/view/album-my-list',
    'photo/view/photo-more-menu'
],function(core, text){
	
	var ListView = require('photo/view/album-my-list')
      , MoreMenuView = require('photo/view/photo-more-menu');
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(query){
			
			this.query =  $.extend({iUserId: 0}, query);
			
			this.$el.html(this.template(this.query));
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			
			this.listView  = new ListView({}, 
				this.$el.find('#album_my_list_view_holder'),
				this.$scroller,
				{
					loadmore: true,
					loadnew: false,
				});
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			return this;
		},
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function (evt) {
            this.moreMenu = new MoreMenuView();
            this.moreMenu.render().inject();
        }
	});
});

define('photo/controller/album-my',[
	'core',
	'photo/view/album-my'
], function(core, MyAlbumView){
	
	/*
	*	Controller is called when user selects his/her album tab.
	*/
	function MyAlbumController(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new MyAlbumView().render({}).inject();
	}
	
	utils.router.route('albums/my', MyAlbumController);
});


define('text!photo/tpl/photo-my.html',[],function () { return '<!-- friend/tpl/index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#photos/add-album"></a>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list clearfix" id="photo_list_view_holder"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <%if(!iUserId){ %>\n\t        <a class="menu-item" href="#albums">\n\t        \t<div class=""><%= _t(\'albums\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#photos">\n\t        \t<div class="sibling"><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item" href="#albums/my">\n\t        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n\t        </a>\n            <div class="menu-item current" id="footer_more_btn">\n\t        \t<div class="sibling"><%= _t(\'more\') %></div>\n\t        </div>\n        <%}else{%>\n\t        <a class="menu-item" href="#photos-of/user/<%=iUserId%>">\n\t        \t<div class=""><%= _t(\'photos\') %></div>\n\t        </a>\n\t        <a class="menu-item current" href="#albums-of/<%=iUserId%>">\n\t        \t<div class="sibling"><%= _t(\'albums\') %></div>\n\t        </a>\n        <%}%>\n    </div>\n</div>\n';});


define('text!photo/tpl/photo-my-item.html',[],function () { return '<div class="item-wrapper">\n\t<a href="<%= item.getUrl() %>" class="item-image" style="background-image: url(<%= item.getImgSrc() %>)">\n\t</a>\n    <%if (item.hasAlbum()) {%>\n    <div class="item-footer-my">\n        <div class="item-parent">\n            <span><%=_t(\'in\')%> </span><a href="<%=item.getAlbumUrl()%>"><%=item.getAlbumTitle()%></a>\n        </div>\n    </div>\n    <%}%>\n</div>\n';});

define('photo/view/photo-my-item',[
	'text!photo/tpl/photo-my-item.html'
],function(text){
	return Backbone.ItemView.extend({
		events: {},
		className: 'photo-item',
		template: _.template(text),
		render: function(){
			this.$el.attr('id',this.model.getDataId());
            this.$el.html(this.template({item: this.model}));
			return this;
		},
		inject: function(inject){
			inject(this.el);
		},
	});
});


define('text!photo/tpl/photo-my-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading -->\n</div>';});

define('photo/view/photo-my-list',[
	'photo/model/photo',
	'photo/view/photo-my-item',
	'text!photo/tpl/photo-my-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			iPage: 1,
			iInDetails: 1,
			sOrder: "latest",
			iAmountOfPhoto: 12 // 4 rows, 3 photos per rows
		},
		followById: false,
		api: 'photo/my',
		phraseNotFound: 'ဓာတ္ပံု မရွိပါ။',
		phraseNotMore: 'ဓာတ္ပံု မရွိပါ။',
		className: 'clearfix photo-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView,
        parseData: function(data, ItemModel) {
			return data.map(function(item){
                item.iParentId = Backbone.iUserId;
                item.sParentType = 'profile_photo';
				return new ItemModel(item);
			});
        }
	});
});

define('photo/view/photo-my',[
    'core',
    'text!photo/tpl/photo-my.html',
    'photo/view/photo-my-list',
    'photo/view/photo-more-menu'
], function(core, text) {

    var ListView = require('photo/view/photo-my-list'),
        MoreMenuView = require('photo/view/photo-more-menu');

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function() {

        },
        render: function(query) {

            this.query = $.extend({
                type: 'user',
                iUserId: 0
            }, query);

            this.$el.html(this.template(this.query));

            return this;

        },
        inject: function() {

            var $holder = $(this.region.holder).html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.listView = new ListView({},
                this.$el.find('#photo_list_view_holder'),
                this.$scroller, {
                    loadmore: true,
                    loadnew: false,
                    iParentId: 0,
                    iAlbumId: 0
                });

            // render list view
            this.listView.render(this.query).inject();

            return this;
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {
            this.moreMenu = new MoreMenuView();
            this.moreMenu.render().inject();
        }
    });
});
define('photo/controller/photo-my',[
	'core',
	'photo/view/photo-my'
], function(core, View){
	
	/*
	*	Controller is called when user selects his/her album tab.
	*/
	function Controller(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new View().render({}).inject();
	}
	
	utils.router.route('photos/my', Controller);
});


define('text!photo/tpl/album-add-index.html',[],function () { return '<!-- photo/tpl/album-add-index.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back"><%=_t(\'cancel\')%></div>\n\t</div>\n\t<div class="header-right">\n        <div class="btn-top" id="save_btn"><%=_t(\'save\') %></div>\n\t</div>\n\t<div class="header-center">\n        <div class="title"><% typeForm == \'edit\' ? print(_t(\'edit_album\')) :  print(_t(\'create_album\')) %></div>\n\t</div>\n</div>\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="photo-album-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading ...  -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\t\n</div>\n';});


define('text!photo/tpl/album-add-form.html',[],function () { return '<div class="form-general">\n\t<div class="form-title">\n\t\t<%= _t(\'album_name\') %>\n\t</div>\n\t<div class="form-group">\n\t    <input class="control-full" type="text" name="sTitle" id="sTitle" value="<%= data.sTitle %>" placeholder="<%= _t(\'album_name\')%>"  />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'description\') %>\n\t</div>\n\t<div class="form-group">\n\t    <input class="control-full" type="text" name="sDescription" id="sDescription" value="<%= data.sDescription %>" placeholder="<%= _t(\'description\') %>"  />\n\t</div>\n\n\t<%if (context.typeForm != \'create\' || context.sModule != \'pages\') {%>\n\t<div class="form-title">\n\t\t<%= _t(\'album_priviacy\') %>\n\t</div>\n\t<div class="form-group">\n\t    <select class="control-full" name="iPrivacy" id="iPrivacy">\n\t        <%_.each(data.view_options, function (option) {%>\n                <option value="<%=option.sValue%>" <% if(option.sValue == data.sViewPrivacy) print(\'selected="selected"\') %> >\n                    <%=option.sPhrase%>\n                </option>\n\t\t\t<%}, this);%>\n\t    </select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'comment_privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" name="iPrivacyComment" id="iPrivacyComment">\n\t        <%_.each(data.comment_options, function (option) {%>\n                <option value="<%=option.sValue%>" <% if(option.sValue == data.sCommentPrivacy) print(\'selected="selected"\') %> >\n                    <%=option.sPhrase%>\n                </option>\n\t\t\t<%}, this);%>\n\t    </select>\n\t</div>\n\t<%}%>\n\t\n\t<div id="photo_upload_list" class="photo-upload-list">\n        <div id="photo_add_btn" class="btn-form-photo"></div>\n    </div>\n</div>\n';});

define('photo/collection/photo',['photo/model/photo'], function(PhotoModel){
	
	return Backbone.Collection.extend({
		model: PhotoModel
	});
});
define('photo/view/album-add-index',[
    'text!photo/tpl/album-add-index.html',
    'text!photo/tpl/album-add-form.html',
    'photo/view/attachment-album-photo-item',
    'photo/collection/photo',
    'photo/view/photo-add-actions'
], function(text, textForm, ItemView, PhotoCollection, PhotoAddActionsView) {

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            photo_list: '#photo_upload_list',
            edit_form: '#photo-album-edit'
        },

        template: _.template(text),

        templateForm: _.template(textForm),

        initialize: function() {
            this.photos = new PhotoCollection();
        },

        render: function(context) {

            this.context = $.extend({
                aPhotoListId: [],
                iItemId: null,
                sModule: null,
                typeForm: null
            }, context);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template(this.context));

            this.$postBtn = $('#save_btn', this.$el);

            this.$scroller = this.$el.find(this.region.scroller);

            return this;

        },

        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            this.$scroller.trigger('refresh');
        },

        events: {
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #save_btn': 'createAlbum',
            'click .close_button': 'deletePhoto',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },

        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },

        addPhotoItem: function(photoid, path) {

            var self = this;

            var inject = function(dom) {
                self.$photoAddBtn.before(dom);
            };

            new ItemView().render({
                PhotoId: photoid,
                ImgSrc: path
            }).inject(inject);

            this.$scroller.trigger('refresh');
        },

        fetchData: function() {
            var tasks = [];
            var self = this;
            this.dataInfo = {
                typeForm: this.context.typeForm
            };


            var $ajax2 = utils.api.get('photo/formadd', {}).done(function(data) {
                self.dataInfo = $.extend(self.dataInfo, data);
            }).fail(function() {});

            if (this.context.typeForm == 'edit') {
                // Get album detail info
                var $ajax1 = utils.api.get("photo/albumview", {
                    iAlbumId: this.model.getId()
                }).done(function(data) {
                    // self.dataInfo.sDescription = data.sDescription;
                    self.dataInfo = $.extend(self.dataInfo, data);
                }).fail(function(data) {
                    utils.debug.log(data);
                });


                var $ajax3 = utils.api.get('photo/listalbumphoto', {
                    iAlbumId: this.model.getId(),
                    iAmountOfPhoto: 500
                }, this.context).done(function(data) {
                    self.photos.add(data);
                }).fail(function() {
                    utils.debug.log(arguments);
                });

                $.when($ajax1, $ajax3, $ajax2).done(function() {
                    self.updateView();
                });

            } else {
                $.when($ajax2).done(function() {
                    self.updateView();
                });
            }


        },

        updateView: function() {

            // var self = this;

            var $actionBarHodler = this.$el.find('#photo-album-edit');

            $actionBarHodler.html(this.templateForm({
                context: this.context,
                data: this.dataInfo
            }));

            this.$photoAddBtn = this.$el.find('#photo_add_btn');

            if (this.context.typeForm == 'edit') {
                _.each(this.photos.models, function(item) {
                    this.addPhotoItem(item.getId(), item.getImgSrc());
                }, this);
            }

            var self = this;

            window.setTimeout(function() {
                self.$scroller.trigger('refresh');
            }, 1000);
        },

        createAlbum: function() {
            if (this.$postBtn.isProcessing()) {
                return;
            }

            this.context.sTitle = $('#sTitle').val();
            this.context.sDescription = $('#sDescription').val();
            this.context.iCategoryId = $('#category_select').val();
            this.context.sAuthView = $('#iPrivacy').val() || "everyone";
            this.context.sAuthComment = $('#iPrivacyComment').val() || "everyone";

            if (!this.context.sTitle) {
                return utils.modal.alert(_t('Provide a name for your album.'));
            }

            var totalPhotos = $(this.region.photo_list + " div.attachment-photo-item").size();
            if (totalPhotos <= 0) {
                return utils.modal.alert(_t('Album must have at least one photo.'));
            }

            var self = this;

            // Create album

            var api = (this.context.typeForm == 'create') ? 'photo/albumcreate' : 'photo/albumedit',
                data = $.extend(this.context, {
                    iAlbumId: this.model.getId()
                }),
                settings = {
                    'context': this,
                    'beforeSend': this.beforeSend
                };

            utils.api.post(api, data, settings).done(this.postDone).always(this.postComplete);

        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.isProcessing(false);
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.isProcessing(true);
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {
            var totalPhotos = $(this.region.photo_list + " div.attachment-photo-item").size();;
            this.model.set('iAlbumId', data.iAlbumId);
            if (totalPhotos <= 0) {
                this.createFeed();
            } else {
                this.uploadPhotos(0, totalPhotos);
            }

        },

        uploadPhotos: function(index, total) {
            var photoUploadList = $('#photo_upload_list > div').eq(index);

            var path = photoUploadList.find("span.attachment-photo-image").data('src');

            var photoid = photoUploadList.find("span.attachment-photo-image").data('photoid');

            var self = this;

            if (photoid == 0) {

                var postData = $.extend(this.context, {
                    iAlbumId: this.model.getId()
                });

                utils.api.uploadImage("photo/upload", path, postData).done(function(result) {
                    self.context.aPhotoListId.push(result.iPhotoId);
                    if ((index + 1) >= total) {
                        self.createFeed();
                    } else {
                        self.uploadPhotos((index + 1), total);
                    }
                });

            } else if (photoid > 0) {

                if ((index + 1) >= total) {
                    self.createFeed();
                } else {
                    self.uploadPhotos((index + 1), total);
                }
            }
        },

        createFeed: function() {
            var params;

            params = $.extend(this.context, {
                sPhotoIds: this.context.aPhotoListId.join(','),
                iAlbumId: this.model.getId()
            });

            if (this.context.typeForm == 'edit') {
                utils.modal.toast('You have edited the album successfully');
            } else {
                utils.modal.toast('You have created the album successfully');
            }

            if (this.context.aPhotoListId.length == 0) { // do NOT create feed if there is no photo
            } else {
                utils.api.get('photo/postfeed', params).done(function(data) {});
            }

            utils.history.back();

        },

        capturePhoto: function() {

            var self = this;

            navigator.device.capture.captureImage(onSuccess, onFail, {
                limit: 1
            });

            function onSuccess(mediaFiles) {
                var imageURI = mediaFiles[0].fullPath;
                self.addPhotoItem(0, imageURI);
            }

            function onFail(msg) {
                self.$scroller.trigger('refresh');
            }
        },

        browsePhoto: function() {

            var self = this;

            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                correctOrientation: true
            });

            function onSuccess(imageURI) {
                var flag = true


                if ($("#photo_upload_list").find("span.attachment-photo-image").length > 0) {
                    $("#photo_upload_list").find("span.attachment-photo-image").each(function() {
                        if ($(this).data('src') == imageURI) {
                            utils.modal.alert(_t("The image has been selected!"));
                            flag = false
                        }
                    });
                }

                if (flag) {
                    self.addPhotoItem(0, imageURI);
                }
            }

            function onFail(msg) {
                self.$scroller.trigger('refresh');
            }
        },

        deletePhoto: function(event) {
            var totalPhotos = $(this.region.photo_list + " div.attachment-photo-item").size();
            if (totalPhotos == 1) {
                return utils.modal.alert(_t('Album must have at least one photo.'));
            }

            var el = $(event.target).parents('.attachment-photo-item');
            var photoId = $(event.target).find('#remove_att').data('photoid') || 0;

            if (photoId) {
                var jData = {
                    iPhotoId: photoId
                };

                utils.modal.confirm(_t('Are you sure to delete this photo? (*Note: This action cannot rollback)'), function(confirm) {
                    if (confirm == 1) {
                        el.parent().remove();
                        utils.api.get("photo/delete", jData).done(function(data) {
                            utils.modal.toast("The photo has been deleted successfully.");
                        }).fail(function(data) {
                            utils.debug.log(arguments);
                        });
                    }
                }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
            } else {
                el.parent().remove();
                var totalAdded = window.localStorage.getItem('album.totalAdded') || 0;
                if (totalAdded > 0) {
                    totalAdded--;
                    window.localStorage.setItem('album.totalAdded', totalAdded);
                }
            }
        }
    });
});
define('photo/controller/album-add',[
    'photo/model/album',
    'photo/view/album-add-index'
], function(Model, View) {

    /*
     *   Controller is called when user selects create a new album.
     */
    function AddController(module, item) {

        // utils.history.push();

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iAlbumId: 0
            })
        }).render({
            typeForm: 'create',
            iItemId: item,
            sModule: module || 'photo'
        }).inject();
    }

    /*
     *   Controller is called when user selects edit his/her album.
     */
    function EditController(id) {

        // utils.history.push();

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iAlbumId: id
            })
        }).render({
            typeForm: 'edit'
        }).inject();
    }

    utils.router.route('photos/add-album(/:module/:item)', AddController);

    utils.router.route('photos/edit-album/:id', EditController);
});

define('text!photo/tpl/album-detail-index.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="album_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div class="content content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="album-detail-info" class="album-detail-info padding-base">\n\t\t\t\t<div id="photo_list_holder" class="photo-list clearfix">\n\t\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>\n\t\t\t\t<div id="album_action_bar_holder" class="album-action-bar"></div>\t\t\t\t\n\t\t\t</div>\n\t\t\t<div id="activity_extra_holder" class="hide">\n\t\t\t\t<!-- loading activity extra -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!photo/tpl/album-detail-photos.html',[],function () { return '<% items.each(function(item){%>\n\t<div class="album-detail-photo-item">\n\t\t<div rel="link" data-url="<%= item.getUrl() %>" class="item-image" style="background-image: url(<%= item.get(\'sPhotoUrl\') %>)"></div>\n\t</div>\n<% })%>';});


define('text!photo/tpl/album-add-action-bar.html',[],function () { return '<div class="actions-justify gray">\r\n\t<div class="action-item <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n\t\t<span class="text-info"><%= item.getLikeCount() %></span>\r\n\t\t<i class="icon icon-activity-like"></i>\r\n\t</div>\r\n\t\r\n\t<% if(item.canComment()){%>\r\n\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\r\n\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\r\n\t\t<i class="icon icon-activity-comment"></i>\r\n\t</div>\r\n\t<%} %>\r\n\t<% if(item.canShare()) { %>\r\n\t<div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\r\n\t\t<i class="icon icon-activity-share"></i>\r\n\t</div>\r\n\t<%} %>\r\n    <%if (!item.isOwner()) {%>\r\n    <div class="action-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\r\n\t\t<i class="icon icon-activity-report"></i>\r\n\t</div>\r\n    <%}%>\r\n</div>';});


define('text!photo/tpl/album-detail-menu.html',[],function () { return '<div class="setting-list">\r\n    <%if (item.canEdit()) {%>\r\n\t<a class="menu-item" href="#photos/edit-album/<%= item.getId() %>"><%= _t(\'edit\') %></a>\r\n\t<%}%>\r\n    <%if (item.canDelete() && !item.isProfilePictureAlbum()) {%>\r\n    <a class="menu-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>"><%= _t(\'delete\') %></a>\r\n\t<%}%>\r\n</div>';});

define('photo/view/album-detail-menu',[
	'text!photo/tpl/album-detail-menu.html'
],function(text){

    return Backbone.TopMenuView.extend({
    	template: _.template(text),
        inject: function(){
			utils.popup.open(this.$el);
			return this;
		},
		hide: function(){
            utils.popup.close();
			return this;
		}
    });
});

define('photo/view/album-detail-index',[
    'utils',
    'text!photo/tpl/album-detail-index.html',
    'text!photo/tpl/album-detail-photos.html',
    'text!photo/tpl/album-add-action-bar.html',
    'photo/view/album-list',
    'photo/view/album-detail-menu',
    'photo/view/album-my-item',
    'photo/collection/photo'
], function(utils, text, text2, barTpl) {


    var PhotoCollection = require('photo/collection/photo'),
        TopMenuView = require('photo/view/album-detail-menu'),
        ItemView = require('photo/view/album-my-item');

    return ItemView.extend({
        region: {
            main: '#main',
            content: '#content',
            barTplId: '#album-action-bar'
        },
        className: 'album-detail-index',
        template: _.template(text),
        events: {
            'click #top_menu_toggle': 'toggleTopMenu'
        },
        topMenuView: TopMenuView,
        initialize: function() {
            this.photos = new PhotoCollection();
            Backbone.DetailView.prototype.initialize.apply(this, arguments);
        },
        render: function(context) {

            this.context = $.extend({
                iAlbumId: 0,
                iAmountOfPhoto: 500,
                iInDetails: 1
            }, context);

            this.$el.html(this.template(this.context));

            this.$el.attr('id', this.model.getDataId());

            this.$scroller = this.$el.find(this.region.content);
            this.$pageTitle = this.$el.find('#album_title');
            this.topMenuToggleBtn = this.$el.find('#top_menu_toggle');
            this.$actionBarHodler = this.$el.find('#album_action_bar_holder');
            this.$photoListHolder = this.$el.find('#photo_list_holder');
            this.$activityExtraHolder = this.$el.find('#activity_extra_holder');

            this.fetchData();

            return this;

        },
        toggleTopMenu: function() {

            utils.topMenu.toggle(this, this.model);
        },
        inject: function() {

            $(this.region.main).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            return this;
        },
        fetchData: function() {
            var self = this;

            // Get album detail info
            var $ajax1 = utils.api.get('photo/albumview', {
                iAlbumId: this.context.iAlbumId
            }).done(function(data) {
                self.model.set(data);
            }).fail(function() {
                utils.debug.log(arguments);
            });

            var $ajax2 = utils.api.get('photo/listalbumphoto', this.context).done(function(data) {
                var photos = data.map(function(item) {
                    return $.extend({
                        iAlbumId: self.context.iAlbumId
                    }, item);
                });
                self.photos.add(photos);
                // self.update(data);
            }).fail(function() {
                utils.debug.log(arguments);
            });

            $.when($ajax1, $ajax2).done(function() {
                if (self.model.get('bCanView') == 1) {
                    self.updateView();
                } else {
                    self.$pageTitle.html(_t('Private Page'));
                    $(self.region.content).html("<div class='not-found'>You don't have permission to view this album</div>");
                }

            }).fail(function() {

            });

        },
        updateView: function() {

            var self = this;

            // change page header into album name
            this.$pageTitle.html(this.model.getTitle());

            if (this.model.canEdit() || this.model.canDelete()) {
                this.topMenuToggleBtn.removeClass('hide');
            }

            this.$actionBarHodler.html(_.template(require('text!photo/tpl/album-add-action-bar.html'))({
                item: this.model
            }));

            this.$photoListHolder.html(_.template(require('text!photo/tpl/album-detail-photos.html'))({
                items: this.photos
            }));

            this.$activityExtraHolder.removeClass('hide');

            utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);
        },
        deleteSuccess: function(data) {
            utils.modal.toast(_t("The album has been deleted successfully."));
            window.location = '#albums';
        }
    });
});
define('photo/controller/album-detail',[
    'utils',
    'photo/model/album',
    'photo/view/album-detail-index'
], function(utils, Model, DetailView) {

    function DetailController(type, id, act) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iAlbumId: id,
                sModelType: type
            })
        }).render({
            iAlbumId: id
        }).inject();
    }

    function PhotoAlbumDetailController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iAlbumId: id,
                sModelType: 'photo_album'
            })
        }).render({
            iAlbumId: id
        }).inject();
    }

    function AdvancedPhotoAlbumDetailController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iAlbumId: id,
                sModelType: 'advancedphoto_album'
            })
        }).render({
            iAlbumId: id
        }).inject();
    }

    utils.router.route('photo-album-detail/:type/:id(/:act)', DetailController);
    utils.router.route('photo_album/:id', PhotoAlbumDetailController);
    utils.router.route('advancedphoto_album/:id', AdvancedPhotoAlbumDetailController);
});
define('photo/main',[
	'core',
	// plugin
	'photo/plugin/activity',
	// plugin
	'photo/controller/album-index',
	'photo/controller/photo-index',
	'photo/controller/album-my',
    'photo/controller/photo-my',
	'photo/controller/album-add',
	'photo/controller/album-detail'
],function(core){

	core.sidebar.configs.set('photo',{
 		icon: 'icon-sidebar-photo',
 		label: 'Albums',
 		url: '#albums',
 	});
 	
});

define('photo', ['photo/main'], function (main) { return main; });


define('text!music/tpl/attachment-music-playlist.html',[],function () { return '<div class="att-item-wrapper">\n\t<div class="table">\n\t\t<div class="table-cell att-col-image">\n\t\t\t<a href="<%= linkUrl %>">\n\t\t\t\t<img class="att-item-image" src="<%= photoUrl%>" />\n\t\t\t</a>\n\t\t</div>\n\t\t<div class="table-cell att-col-info">\n\t\t\t<div class="att-item-title">\n\t\t\t\t<a href="<%= linkUrl %>">\n\t\t\t\t\t<%= title %>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class="att-item-description"><%= description %></div>\n\t\t</div>\n\t</div>\n</div>';});

define('music/view/attachment-music-playlist',[
	'text!music/tpl/attachment-music-playlist.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'attachment-music-playlist',
		template: _.template(text),
		render: function(){
			
			var item = this.model;
			var att = item.getAttachments()[0];
			
			var context = {
				item: item,
				attachment: att,
				photoUrl: att.sPhoto_Url || att.sFeedIcon,
				title: att.sTitle,
				description: att.sDescription,
				linkUrl: '#music_song/' + att.iId
			};
			
			this.$el.html(this.template(context));
			
			return this;
		},
		inject: function(dom){
			dom.html(this.el);
		}
	});
});

define('music/plugin/activity',[
    'music/view/attachment-music-playlist'
], function(PlaylistAttachmentView) {

    utils.headline.add(['music_playlist_new'], function(item) {
        return _t('created a new playlist %s', item.getItemLink());
    });

    utils.headline.add(['music_song', 'music_album'], function(item) {
        return _t('shared a song');
    });

    utils.attachment.add(['music_playlist', 'music_song', 'music_album', 'music'], PlaylistAttachmentView);
});

define('text!music/tpl/action-more.html',[],function () { return '\n<div class="setting-list">\n    <a class="setting-item" href="#music_songs/my">\n\t\t<%= _t(\'my_songs\') %>\n\t</a>\n</div>\n';});

define('music/view/more-action',[
    'text!music/tpl/action-more.html'
], function(text) { 

    var MoreAction = Backbone.View.extend({
        template: _.template(text),
        events: {
            'click .setting-item': 'close'
        },
        render: function() {
            this.$el.html(this.template());

            return this;
        },

        inject: function() { 
            
            utils.popup.open(this.$el);
			
			return this;
        },
        
        close: function() {
		    utils.popup.close();	
			
			return this;
        },
    });

    return MoreAction;
});


define('music/plugin/open-more',[
    'music/view/more-action'
],function(MoreActionView){
	
	// init sidebar plugin
	/* var sidebarView = new SidebarView().render().inject(); */
	
	utils.observer.on('music:open-more',function(){
        new MoreActionView().render().inject();
	});
	
	
	// return sidebarView;
});



define('text!music/tpl/playlist-index.html',[],function () { return '<!-- music/tpl/music-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n<!-- Add search box in here -->\n</div>\n\n<div class="content with-header-footer with-search body-bg swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="not_found" class="not-found hide"><%= _t(\'no_albums_found\') %></div>\n\t\t\t<div class="swiper-list vertical-align">\n\t\t\t\t<div id="playlist_list_view_holder">\n\t\t\t\t</div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item current" href="#music_playlists">\n        \t<div class=""><%= _t(\'albums\') %></div>\n        </a>\n        <a class="menu-item" href="#music_songs">\n        \t<div class="sibling"><%= _t(\'songs\') %></div>\n        </a>\n        <a class="menu-item" href="#music_playlists/my">\n        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n        </a>\n        <a class="menu-item" href="#" clickable="true" data-click="music:open-more">\n        \t<div class="sibling"><%= _t(\'more\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!music/tpl/playlist-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading Initiator -->\n</div>';});

define('music/model/playlist',[
	'core'
],function(core) {
	return Backbone.Model.extend({
		idAttribute : 'iAlbumId',
		defaults : {
			sModelType : 'music_album',
			bCanPostComment : 1,
			bCanLike : true,
			bCanShare : true
		},
		getTitle : function() {
			return this.get('sName');
		},
		getAlbumName : function() {
			return this.get('sAlbumName');
		},
		getLink : function() {
			return '<a href="' + this.getUrl() + '">' + this.getTitle() + '</a>';
		},
		getImageSrc : function() {
			return this.get('sImagePath');
		},
		getTrackCount : function() {
			return this.get('iTotalTrack') || 0;
		},
		getPlayCount : function() {
			return this.get('iTotalPlay') || 0;
		},
		getDescription : function() {
			return this.get('sDescription') || '';
		},
		isOwner: function(){
	        return core.viewer.getId() == this.getPosterId();
	    },
	    
        getSocialShareUrl: function(){
            return constants.siteUrl + 'index.php?do=/music/album/'+ this.getId();
        }
	});
});


define('text!music/tpl/playlist-item.html',[],function () { return '<!-- friend/tpl/friend-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<a href="<%= item.getUrl() %>">\n\t\t\t<span style="background-image: url(\'<%= item.getImageSrc() %>\');"></span>\n\t\t</a>\n\t</div>\n\t<div class="item-headline">\n\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t</div>\n\t<div class="item-subline">\n\t\t  <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>  <%= _t(\' | \') %>\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %><%= _t(\'ago\') %><%= _t(\'created1\') %></span>\t\n\t</div>\n\t<div class="item-stats-group prevent">\n\t\t<div class="separator"></div>\n\t\t<div class="item-stats <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n        <% if(item.canComment()){%>\n\t\t<div class="item-stats" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<% } %>\n\t\t<div class="item-stats">\n\t\t\t<span class="text-info"><%= item.getTrackCount() %></span>\n\t\t\t<i class="icon icon-music-track"></i>\n\t\t</div>\n\t\t<div class="item-stats">\n\t\t\t<span class="text-info"><%= item.getPlayCount() %></span>\n\t\t\t<i class="icon icon-music-listen"></i>\n\t\t</div>\n\t</div>\n</div>\n';});

define('music/view/playlist-item',[
	'text!music/tpl/playlist-item.html'
],function(text){
	
	return Backbone.ItemView.extend({
		className: 'music-playlist-item',
		template: _.template(text),
		events: {},
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			this.$el.attr({
				'id': this.model.getDataId(),
				'rel': 'link',
				'data-url': this.model.getUrl(),
			});
			
			return this;
		},
		inject: function(inject){
			inject(this.$el);
		}
	});
});
define('music/view/playlist-list',[
	'text!music/tpl/playlist-list.html',
	'music/model/playlist',
	'music/view/playlist-item',
],function(text, Model, ItemView)
{
	
	return Backbone.ListView.extend({
		defaults: {
			sSearch: '',
			sView: 'all',
            iMaxId: 0,
            iMinId: 0,
            iLimit: 5,
            iPage: 1
		},
		followById: true,
		api: 'album/fetch',
		phraseNotFound: 'အယ္လဘမ္ မေတြ.ပါ',
		phraseNotMore: 'အယ္လဘမ္ မေတြ.ပါ',
		className: 'music-playlist-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});



define('text!music/tpl/playlist-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_albums\') %>" value="">\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n               <option value="latest" selected="true"><%= _t(\'latest\') %></option>\n               <option value="most_viewed"><%= _t(\'most_viewed\') %></option>\n               <option value="most_liked"><%= _t(\'most_liked\') %></option>\n               <option value="most_discussed"><%= _t(\'most_discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>">\n\t</div>\n</div>\n\n';});

define('music/view/playlist-search',[
	'text!music/tpl/playlist-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$categoryInput = this.$el.find('#search_category');
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			// this.fetchData();/
			
			return this;
		},
		fetchData: function(){
			utils.api.get('video/categories',{},{context: this}).done(this.updateView);
		},
		updateView: function(data){
			if (data.error_code) {
				return utils.modal.alert(data.error_message);
			}
			_.each(data, function (option) {
				this.$categoryInput.append(new Option(option.sName, option.iCategoryId));
			}, this);
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				iCategoryId: this.$categoryInput.val() || 0,
				sOrder: this.$orderInput.val() || 'creation_date'
			});
		}
	});
	
});

define('music/view/playlist-index',[
	'text!music/tpl/playlist-index.html',
	'music/view/playlist-list',
	'music/view/playlist-search'
],function(text){
	
	var ListView	= require('music/view/playlist-list')
	  , SearchView	= require('music/view/playlist-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
	
		render: function(){
			
			this.$el.html(this.template());
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({},this.$el.find('#playlist_list_view_holder'), this.$scroller,{loadnew: false});
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		}
	});
});


define('text!music/tpl/playlist-my.html',[],function () { return '<!-- music/tpl/music-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n<!-- Add search box in here -->\n</div>\n\n<div class="content with-header-footer with-search body-bg swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="not_found" class="not-found hide"><%= _t(\'no_albums_found.\') %></div>\n\t\t\t<div class="swiper-list vertical-align">\n\t\t\t\t<div id="playlist_list_view_holder">\n\t\t\t\t</div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="#music_playlists">\n        \t<div class=""><%= _t(\'albums\') %></div>\n        </a>\n        <a class="menu-item" href="#music_songs">\n        \t<div class="sibling"><%= _t(\'songs\') %></div>\n        </a>\n        <a class="menu-item current" href="#music_playlists/my">\n        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n        </a>\n        <a class="menu-item" href="#" clickable="true" data-click="music:open-more">\n        \t<div class="sibling"><%= _t(\'more\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!music/tpl/playlist-my-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading Initiator -->\n</div>';});


define('text!music/tpl/playlist-my-item.html',[],function () { return '<!-- friend/tpl/friend-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<a href="<%= item.getUrl() %>">\n\t\t\t<span style="background-image: url(\'<%= item.getImageSrc() %>\');"></span>\n\t\t</a>\n\t</div>\n\t<div class="item-headline">\n\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t</div>\n\t<div class="item-subline">\n\t\t<%= _t(\'created\') %> <span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span> \n\t</div>\n\t<div class="item-stats-group prevent">\n\t\t<div class="separator"></div>\n\t\t<div class="item-stats <%= item.isLiked()?\'liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n        <% if(item.canComment()){%>\n\t\t<div class="item-stats" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<% } %>\n\t\t<div class="item-stats">\n\t\t\t<span class="text-info"><%= item.getTrackCount() %></span>\n\t\t\t<i class="icon icon-music-track"></i>\n\t\t</div>\n\t\t<div class="item-stats">\n\t\t\t<span class="text-info"><%= item.getPlayCount() %></span>\n\t\t\t<i class="icon icon-music-listen"></i>\n\t\t</div>\n\t</div>\n</div>\n';});

define('music/view/playlist-my-item',[
	'text!music/tpl/playlist-my-item.html'
],function(text){
	
	return Backbone.ItemView.extend({
		className: 'music-playlist-item',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({item: this.model }));
			
			this.$el.attr({
				'id': this.model.getDataId(),
				'rel': 'link',
				'data-url': this.model.getUrl(),
			});
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		},
		events: {
			"click .icon-pencil": "editAlbum"
		},
		editAlbum: function(event){
			var el = $(event.target).parents('.music-playlist-item');
	        var playlistid = $(event.target).data('playlistid') || 0;
	        window.location.href = "#musics/edit-playlist/"+playlistid;
		},
		doDeleteClick: function(event){
			var msg = _t('Are you sure to delete this playlist? (*Note: This action cannot rollback)');
			var self = this;
			
			utils.modal.confirm(msg, function(confirm) {
                if (confirm == 1) {
                	self.doDelete();
			    }
	        }, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
		},
		doDelete: function(){
			
			this.$el.addClass('hide');
			
            utils.api.post("album/delete", {iAlbumId: this.model.getId()}, {context: this})
 		    .done(function(data){
 		    	if(data.error_code && data.error_code > 0){
 		    		this.doDeleteFail(data);
 		    	}else{
 		    		this.doDeleteSuccess();
 		    	}
	        })
	        .fail(function(data){
	        	this.$el.removeClass('hide');
	        });
		},
		doDeleteFail: function(data){
			utils.modal.alert(data.error_message);
			this.$el.removeClass('hide');
		},
		doDeleteSuccess: function(){
			this.$el.remove();
			utils.modal.toast(_t("Playlist successfully deleted."));
		}
	});
});


define('text!search/tpl/search.html',[],function () { return '<div class="search-area">\r\n\t<div class="search-simple">\r\n\t\t<%if (bAdvanced) {%>\r\n\t\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\r\n\t\t<%}%>\r\n\t\t<div class="form-search-group">\r\n\t\t\t<span class="icon-search" id="search-button"></span>\r\n\t\t\t<input type="text" class="input-search control-full" id="search-textbox-item" placeholder="<%=sPlaceHolder%>" />\r\n\t\t</div>\r\n\t</div>\r\n\t<%if (bAdvanced) {%>\r\n\t<div id="adv_search_holder" class="search-advanced hide">\r\n\t\t<div class="form-search-group inline">\r\n\t\t\t<div class="form-group">\r\n\t\t\t\t<select class="control-full" name="select-category" id="search_category">\r\n                    <option value="0"><%= _t(\'all_categories\') %></option>\r\n                </select>\r\n            </div>\r\n            <div class="form-group">\r\n\t\t\t\t<select class="control-full" name="select-category" id="search_event_browseby">\r\n                    <option value="starttime"><%= _t(\'start_time\') %></option>\r\n                </select>\r\n            </div>\r\n\t\t</div>\r\n\t\t<div class="form-search-submit">\r\n\t\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\r\n\t\t</div>\r\n\t</div>\r\n\t<%}%>\r\n</div>';});

define('search/view/search',[
	'text!search/tpl/search.html'
],function(text){

	return Backbone.View.extend({
		region:{
			searchbox: "#searchbox"
		},
		className: 'search-item',
		template: _.template(text),
		render: function(context){
        	this.context = $.extend({
        		bAdvanced: true,
        		sPlaceHolder: _t('Keywords...')
        	}, context);

        	this.$el.html(this.template(this.context));
			return this;
		},
		inject: function(){
        	$(this.region.searchbox).append(this.el);
		},
        events: {
        	"click #adv_search_toggle_btn": "toggleAdvSearch",
        	'click #search-button': 'doSearch'
        },
        toggleAdvSearch: function (evt) {
			$('#adv_search_holder').toggleClass("hide");
		},
        doSearch: function(){
        	this.context.callBack($('#search-textbox-item').val());
        }
	});
});

define('music/view/playlist-my-list',[
	'text!music/tpl/playlist-my-list.html',
	'music/model/playlist',
	'music/view/playlist-my-item',
	'search/view/search'
],function(text, Model, ItemView, searchView)
{
	return Backbone.ListView.extend({
		defaults: {
			sSearch: '',
			sView: 'my',
            iMaxId: 0,
            iMinId: 0,
            iLimit: 5,
            iPage: 1
		},
		followById: true,
		api: 'album/fetch',
		phraseNotFound: 'အယ္လဘမ္ မေတြ.ပါ',
		phraseNotMore: 'အယ္လဘမ္ မေတြ.ပါ',
		className: 'music-playlist-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('music/view/playlist-my',[
	'text!music/tpl/playlist-my.html',
	'music/view/playlist-my-list',
	'music/view/playlist-search'
],function(text){
	
	var ListView	= require('music/view/playlist-my-list')
	  , SearchView	= require('music/view/playlist-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){
			
		},
		render: function(){
			
			this.$el.html(this.template());
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({}, this.$el.find('#playlist_list_view_holder'), this.$scroller);
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		}
	});
});

define('music/controller/playlist-index',[
	'music/view/playlist-index',
	'music/view/playlist-my',
],function(IndexView, MyView){
	
	function PlaylistIndexController(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({}).inject();
	}
	
	function MyPlaylistController(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new MyView().render({}).inject();
	}
	
	utils.router.route('music_playlists/my', MyPlaylistController);
	
	utils.router.route('music_playlists', PlaylistIndexController);
});

/*!
* MediaElement.js
* HTML5 <video> and <audio> shim and player
* http://mediaelementjs.com/
*
* Creates a JavaScript object that mimics HTML5 MediaElement API
* for browsers that don't understand HTML5 or can't play the provided codec
* Can play MP4 (H.264), Ogg, WebM, FLV, WMV, WMA, ACC, and MP3
*
* Copyright 2010-2013, John Dyer (http://j.hn)
* License: MIT
*
*/
// Namespace
var mejs = mejs || {};

// version number
mejs.version = '2.12.0';

// player number (for missing, same id attr)
mejs.meIndex = 0;

// media types accepted by plugins
mejs.plugins = {
	silverlight: [
		{version: [3,0], types: ['video/mp4','video/m4v','video/mov','video/wmv','audio/wma','audio/m4a','audio/mp3','audio/wav','audio/mpeg']}
	],
	flash: [
		{version: [9,0,124], types: ['video/mp4','video/m4v','video/mov','video/flv','video/rtmp','video/x-flv','audio/flv','audio/x-flv','audio/mp3','audio/m4a','audio/mpeg', 'video/youtube', 'video/x-youtube']}
		//,{version: [12,0], types: ['video/webm']} // for future reference (hopefully!)
	],
	youtube: [
		{version: null, types: ['video/youtube', 'video/x-youtube', 'audio/youtube', 'audio/x-youtube']}
	],
	vimeo: [
		{version: null, types: ['video/vimeo', 'video/x-vimeo']}
	]
};

/*
Utility methods
*/
mejs.Utility = {
	encodeUrl: function(url) {
		return encodeURIComponent(url); //.replace(/\?/gi,'%3F').replace(/=/gi,'%3D').replace(/&/gi,'%26');
	},
	escapeHTML: function(s) {
		return s.toString().split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
	},
	absolutizeUrl: function(url) {
		var el = document.createElement('div');
		el.innerHTML = '<a href="' + this.escapeHTML(url) + '">x</a>';
		return el.firstChild.href;
	},
	getScriptPath: function(scriptNames) {
		var
			i = 0,
			j,
			codePath = '',
			testname = '',
			slashPos,
			filenamePos,
			scriptUrl,
			scriptPath,			
			scriptFilename,
			scripts = document.getElementsByTagName('script'),
			il = scripts.length,
			jl = scriptNames.length;
			
		// go through all <script> tags
		for (; i < il; i++) {
			scriptUrl = scripts[i].src;
			slashPos = scriptUrl.lastIndexOf('/');
			if (slashPos > -1) {
				scriptFilename = scriptUrl.substring(slashPos + 1);
				scriptPath = scriptUrl.substring(0, slashPos + 1);
			} else {
				scriptFilename = scriptUrl;
				scriptPath = '';			
			}
			
			// see if any <script> tags have a file name that matches the 
			for (j = 0; j < jl; j++) {
				testname = scriptNames[j];
				filenamePos = scriptFilename.indexOf(testname);
				if (filenamePos > -1) {
					codePath = scriptPath;
					break;
				}
			}
			
			// if we found a path, then break and return it
			if (codePath !== '') {
				break;
			}
		}
		
		// send the best path back
		return codePath;
	},
	secondsToTimeCode: function(time, forceHours, showFrameCount, fps) {
		//add framecount
		if (typeof showFrameCount == 'undefined') {
		    showFrameCount=false;
		} else if(typeof fps == 'undefined') {
		    fps = 25;
		}
	
		var hours = Math.floor(time / 3600) % 24,
			minutes = Math.floor(time / 60) % 60,
			seconds = Math.floor(time % 60),
			frames = Math.floor(((time % 1)*fps).toFixed(3)),
			result = 
					( (forceHours || hours > 0) ? (hours < 10 ? '0' + hours : hours) + ':' : '')
						+ (minutes < 10 ? '0' + minutes : minutes) + ':'
						+ (seconds < 10 ? '0' + seconds : seconds)
						+ ((showFrameCount) ? ':' + (frames < 10 ? '0' + frames : frames) : '');
	
		return result;
	},
	
	timeCodeToSeconds: function(hh_mm_ss_ff, forceHours, showFrameCount, fps){
		if (typeof showFrameCount == 'undefined') {
		    showFrameCount=false;
		} else if(typeof fps == 'undefined') {
		    fps = 25;
		}
	
		var tc_array = hh_mm_ss_ff.split(":"),
			tc_hh = parseInt(tc_array[0], 10),
			tc_mm = parseInt(tc_array[1], 10),
			tc_ss = parseInt(tc_array[2], 10),
			tc_ff = 0,
			tc_in_seconds = 0;
		
		if (showFrameCount) {
		    tc_ff = parseInt(tc_array[3])/fps;
		}
		
		tc_in_seconds = ( tc_hh * 3600 ) + ( tc_mm * 60 ) + tc_ss + tc_ff;
		
		return tc_in_seconds;
	},
	

	convertSMPTEtoSeconds: function (SMPTE) {
		if (typeof SMPTE != 'string') 
			return false;

		SMPTE = SMPTE.replace(',', '.');
		
		var secs = 0,
			decimalLen = (SMPTE.indexOf('.') != -1) ? SMPTE.split('.')[1].length : 0,
			multiplier = 1;
		
		SMPTE = SMPTE.split(':').reverse();
		
		for (var i = 0; i < SMPTE.length; i++) {
			multiplier = 1;
			if (i > 0) {
				multiplier = Math.pow(60, i); 
			}
			secs += Number(SMPTE[i]) * multiplier;
		}
		return Number(secs.toFixed(decimalLen));
	},	
	
	/* borrowed from SWFObject: http://code.google.com/p/swfobject/source/browse/trunk/swfobject/src/swfobject.js#474 */
	removeSwf: function(id) {
		var obj = document.getElementById(id);
		if (obj && /object|embed/i.test(obj.nodeName)) {
			if (mejs.MediaFeatures.isIE) {
				obj.style.display = "none";
				(function(){
					if (obj.readyState == 4) {
						mejs.Utility.removeObjectInIE(id);
					} else {
						setTimeout(arguments.callee, 10);
					}
				})();
			} else {
				obj.parentNode.removeChild(obj);
			}
		}
	},
	removeObjectInIE: function(id) {
		var obj = document.getElementById(id);
		if (obj) {
			for (var i in obj) {
				if (typeof obj[i] == "function") {
					obj[i] = null;
				}
			}
			obj.parentNode.removeChild(obj);
		}		
	}
};


// Core detector, plugins are added below
mejs.PluginDetector = {

	// main public function to test a plug version number PluginDetector.hasPluginVersion('flash',[9,0,125]);
	hasPluginVersion: function(plugin, v) {
		var pv = this.plugins[plugin];
		v[1] = v[1] || 0;
		v[2] = v[2] || 0;
		return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
	},

	// cached values
	nav: window.navigator,
	ua: window.navigator.userAgent.toLowerCase(),

	// stored version numbers
	plugins: [],

	// runs detectPlugin() and stores the version number
	addPlugin: function(p, pluginName, mimeType, activeX, axDetect) {
		this.plugins[p] = this.detectPlugin(pluginName, mimeType, activeX, axDetect);
	},

	// get the version number from the mimetype (all but IE) or ActiveX (IE)
	detectPlugin: function(pluginName, mimeType, activeX, axDetect) {

		var version = [0,0,0],
			description,
			i,
			ax;

		// Firefox, Webkit, Opera
		if (typeof(this.nav.plugins) != 'undefined' && typeof this.nav.plugins[pluginName] == 'object') {
			description = this.nav.plugins[pluginName].description;
			if (description && !(typeof this.nav.mimeTypes != 'undefined' && this.nav.mimeTypes[mimeType] && !this.nav.mimeTypes[mimeType].enabledPlugin)) {
				version = description.replace(pluginName, '').replace(/^\s+/,'').replace(/\sr/gi,'.').split('.');
				for (i=0; i<version.length; i++) {
					version[i] = parseInt(version[i].match(/\d+/), 10);
				}
			}
		// Internet Explorer / ActiveX
		} else if (typeof(window.ActiveXObject) != 'undefined') {
			try {
				ax = new ActiveXObject(activeX);
				if (ax) {
					version = axDetect(ax);
				}
			}
			catch (e) { }
		}
		return version;
	}
};

// Add Flash detection
mejs.PluginDetector.addPlugin('flash','Shockwave Flash','application/x-shockwave-flash','ShockwaveFlash.ShockwaveFlash', function(ax) {
	// adapted from SWFObject
	var version = [],
		d = ax.GetVariable("$version");
	if (d) {
		d = d.split(" ")[1].split(",");
		version = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
	}
	return version;
});

// Add Silverlight detection
mejs.PluginDetector.addPlugin('silverlight','Silverlight Plug-In','application/x-silverlight-2','AgControl.AgControl', function (ax) {
	// Silverlight cannot report its version number to IE
	// but it does have a isVersionSupported function, so we have to loop through it to get a version number.
	// adapted from http://www.silverlightversion.com/
	var v = [0,0,0,0],
		loopMatch = function(ax, v, i, n) {
			while(ax.isVersionSupported(v[0]+ "."+ v[1] + "." + v[2] + "." + v[3])){
				v[i]+=n;
			}
			v[i] -= n;
		};
	loopMatch(ax, v, 0, 1);
	loopMatch(ax, v, 1, 1);
	loopMatch(ax, v, 2, 10000); // the third place in the version number is usually 5 digits (4.0.xxxxx)
	loopMatch(ax, v, 2, 1000);
	loopMatch(ax, v, 2, 100);
	loopMatch(ax, v, 2, 10);
	loopMatch(ax, v, 2, 1);
	loopMatch(ax, v, 3, 1);

	return v;
});
// add adobe acrobat
/*
PluginDetector.addPlugin('acrobat','Adobe Acrobat','application/pdf','AcroPDF.PDF', function (ax) {
	var version = [],
		d = ax.GetVersions().split(',')[0].split('=')[1].split('.');

	if (d) {
		version = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
	}
	return version;
});
*/
// necessary detection (fixes for <IE9)
mejs.MediaFeatures = {
	init: function() {
		var
			t = this,
			d = document,
			nav = mejs.PluginDetector.nav,
			ua = mejs.PluginDetector.ua.toLowerCase(),
			i,
			v,
			html5Elements = ['source','track','audio','video'];

		// detect browsers (only the ones that have some kind of quirk we need to work around)
		t.isiPad = (ua.match(/ipad/i) !== null);
		t.isiPhone = (ua.match(/iphone/i) !== null);
		t.isiOS = t.isiPhone || t.isiPad;
		t.isAndroid = (ua.match(/android/i) !== null);
		t.isBustedAndroid = (ua.match(/android 2\.[12]/) !== null);
		t.isBustedNativeHTTPS = (location.protocol === 'https:' && (ua.match(/android [12]\./) !== null || ua.match(/macintosh.* version.* safari/) !== null));
		t.isIE = (nav.appName.toLowerCase().indexOf("microsoft") != -1);
		t.isChrome = (ua.match(/chrome/gi) !== null);
		t.isFirefox = (ua.match(/firefox/gi) !== null);
		t.isWebkit = (ua.match(/webkit/gi) !== null);
		t.isGecko = (ua.match(/gecko/gi) !== null) && !t.isWebkit;
		t.isOpera = (ua.match(/opera/gi) !== null);
		t.hasTouch = ('ontouchstart' in window);
		
		// borrowed from Modernizr
		t.svg = !! document.createElementNS &&
				!! document.createElementNS('http://www.w3.org/2000/svg','svg').createSVGRect;

		// create HTML5 media elements for IE before 9, get a <video> element for fullscreen detection
		for (i=0; i<html5Elements.length; i++) {
			v = document.createElement(html5Elements[i]);
		}
		
		t.supportsMediaTag = (typeof v.canPlayType !== 'undefined' || t.isBustedAndroid);

		// Fix for IE9 on Windows 7N / Windows 7KN (Media Player not installer)
		try{
			v.canPlayType("video/mp4");
		}catch(e){
			t.supportsMediaTag = false;
		}

		// detect native JavaScript fullscreen (Safari/Firefox only, Chrome still fails)
		
		// iOS
		t.hasSemiNativeFullScreen = (typeof v.webkitEnterFullscreen !== 'undefined');
		
		// Webkit/firefox
		t.hasWebkitNativeFullScreen = (typeof v.webkitRequestFullScreen !== 'undefined');
		t.hasMozNativeFullScreen = (typeof v.mozRequestFullScreen !== 'undefined');
		
		t.hasTrueNativeFullScreen = (t.hasWebkitNativeFullScreen || t.hasMozNativeFullScreen);
		t.nativeFullScreenEnabled = t.hasTrueNativeFullScreen;
		if (t.hasMozNativeFullScreen) {
			t.nativeFullScreenEnabled = v.mozFullScreenEnabled;
		}
		
		
		if (this.isChrome) {
			t.hasSemiNativeFullScreen = false;
		}
		
		if (t.hasTrueNativeFullScreen) {
			t.fullScreenEventName = (t.hasWebkitNativeFullScreen) ? 'webkitfullscreenchange' : 'mozfullscreenchange';
			
			
			t.isFullScreen = function() {
				if (v.mozRequestFullScreen) {
					return d.mozFullScreen;
				} else if (v.webkitRequestFullScreen) {
					return d.webkitIsFullScreen;
				}
			}
					
			t.requestFullScreen = function(el) {
		
				if (t.hasWebkitNativeFullScreen) {
					el.webkitRequestFullScreen();
				} else if (t.hasMozNativeFullScreen) {
					el.mozRequestFullScreen();
				}
			}
			
			t.cancelFullScreen = function() {				
				if (t.hasWebkitNativeFullScreen) {
					document.webkitCancelFullScreen();
				} else if (t.hasMozNativeFullScreen) {
					document.mozCancelFullScreen();
				}
			}	
			
		}
		
		
		// OS X 10.5 can't do this even if it says it can :(
		if (t.hasSemiNativeFullScreen && ua.match(/mac os x 10_5/i)) {
			t.hasNativeFullScreen = false;
			t.hasSemiNativeFullScreen = false;
		}
		
	}
};
mejs.MediaFeatures.init();

/*
extension methods to <video> or <audio> object to bring it into parity with PluginMediaElement (see below)
*/
mejs.HtmlMediaElement = {
	pluginType: 'native',
	isFullScreen: false,

	setCurrentTime: function (time) {
		this.currentTime = time;
	},

	setMuted: function (muted) {
		this.muted = muted;
	},

	setVolume: function (volume) {
		this.volume = volume;
	},

	// for parity with the plugin versions
	stop: function () {
		this.pause();
	},

	// This can be a url string
	// or an array [{src:'file.mp4',type:'video/mp4'},{src:'file.webm',type:'video/webm'}]
	setSrc: function (url) {
		
		// Fix for IE9 which can't set .src when there are <source> elements. Awesome, right?
		var 
			existingSources = this.getElementsByTagName('source');
		while (existingSources.length > 0){
			this.removeChild(existingSources[0]);
		}
	
		if (typeof url == 'string') {
			this.src = url;
		} else {
			var i, media;

			for (i=0; i<url.length; i++) {
				media = url[i];
				if (this.canPlayType(media.type)) {
					this.src = media.src;
					break;
				}
			}
		}
	},

	setVideoSize: function (width, height) {
		this.width = width;
		this.height = height;
	}
};

/*
Mimics the <video/audio> element by calling Flash's External Interface or Silverlights [ScriptableMember]
*/
mejs.PluginMediaElement = function (pluginid, pluginType, mediaUrl) {
	this.id = pluginid;
	this.pluginType = pluginType;
	this.src = mediaUrl;
	this.events = {};
	this.attributes = {};
};

// JavaScript values and ExternalInterface methods that match HTML5 video properties methods
// http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/fl/video/FLVPlayback.html
// http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html
mejs.PluginMediaElement.prototype = {

	// special
	pluginElement: null,
	pluginType: '',
	isFullScreen: false,

	// not implemented :(
	playbackRate: -1,
	defaultPlaybackRate: -1,
	seekable: [],
	played: [],

	// HTML5 read-only properties
	paused: true,
	ended: false,
	seeking: false,
	duration: 0,
	error: null,
	tagName: '',

	// HTML5 get/set properties, but only set (updated by event handlers)
	muted: false,
	volume: 1,
	currentTime: 0,

	// HTML5 methods
	play: function () {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
				this.pluginApi.playVideo();
			} else {
				this.pluginApi.playMedia();
			}
			this.paused = false;
		}
	},
	load: function () {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
			} else {
				this.pluginApi.loadMedia();
			}
			
			this.paused = false;
		}
	},
	pause: function () {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
				this.pluginApi.pauseVideo();
			} else {
				this.pluginApi.pauseMedia();
			}			
			
			
			this.paused = true;
		}
	},
	stop: function () {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
				this.pluginApi.stopVideo();
			} else {
				this.pluginApi.stopMedia();
			}	
			this.paused = true;
		}
	},
	canPlayType: function(type) {
		var i,
			j,
			pluginInfo,
			pluginVersions = mejs.plugins[this.pluginType];

		for (i=0; i<pluginVersions.length; i++) {
			pluginInfo = pluginVersions[i];

			// test if user has the correct plugin version
			if (mejs.PluginDetector.hasPluginVersion(this.pluginType, pluginInfo.version)) {

				// test for plugin playback types
				for (j=0; j<pluginInfo.types.length; j++) {
					// find plugin that can play the type
					if (type == pluginInfo.types[j]) {
						return 'probably';
					}
				}
			}
		}

		return '';
	},
	
	positionFullscreenButton: function(x,y,visibleAndAbove) {
		if (this.pluginApi != null && this.pluginApi.positionFullscreenButton) {
			this.pluginApi.positionFullscreenButton(Math.floor(x),Math.floor(y),visibleAndAbove);
		}
	},
	
	hideFullscreenButton: function() {
		if (this.pluginApi != null && this.pluginApi.hideFullscreenButton) {
			this.pluginApi.hideFullscreenButton();
		}		
	},	
	

	// custom methods since not all JavaScript implementations support get/set

	// This can be a url string
	// or an array [{src:'file.mp4',type:'video/mp4'},{src:'file.webm',type:'video/webm'}]
	setSrc: function (url) {
		if (typeof url == 'string') {
			this.pluginApi.setSrc(mejs.Utility.absolutizeUrl(url));
			this.src = mejs.Utility.absolutizeUrl(url);
		} else {
			var i, media;

			for (i=0; i<url.length; i++) {
				media = url[i];
				if (this.canPlayType(media.type)) {
					this.pluginApi.setSrc(mejs.Utility.absolutizeUrl(media.src));
					this.src = mejs.Utility.absolutizeUrl(url);
					break;
				}
			}
		}

	},
	setCurrentTime: function (time) {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
				this.pluginApi.seekTo(time);
			} else {
				this.pluginApi.setCurrentTime(time);
			}				
			
			
			
			this.currentTime = time;
		}
	},
	setVolume: function (volume) {
		if (this.pluginApi != null) {
			// same on YouTube and MEjs
			if (this.pluginType == 'youtube') {
				this.pluginApi.setVolume(volume * 100);
			} else {
				this.pluginApi.setVolume(volume);
			}
			this.volume = volume;
		}
	},
	setMuted: function (muted) {
		if (this.pluginApi != null) {
			if (this.pluginType == 'youtube') {
				if (muted) {
					this.pluginApi.mute();
				} else {
					this.pluginApi.unMute();
				}
				this.muted = muted;
				this.dispatchEvent('volumechange');
			} else {
				this.pluginApi.setMuted(muted);
			}
			this.muted = muted;
		}
	},

	// additional non-HTML5 methods
	setVideoSize: function (width, height) {
		
		//if (this.pluginType == 'flash' || this.pluginType == 'silverlight') {
			if ( this.pluginElement.style) {
				this.pluginElement.style.width = width + 'px';
				this.pluginElement.style.height = height + 'px';
			}
			if (this.pluginApi != null && this.pluginApi.setVideoSize) {
				this.pluginApi.setVideoSize(width, height);
			}
		//}
	},

	setFullscreen: function (fullscreen) {
		if (this.pluginApi != null && this.pluginApi.setFullscreen) {
			this.pluginApi.setFullscreen(fullscreen);
		}
	},
	
	enterFullScreen: function() {
		if (this.pluginApi != null && this.pluginApi.setFullscreen) {
			this.setFullscreen(true);
		}		
		
	},
	
	exitFullScreen: function() {
		if (this.pluginApi != null && this.pluginApi.setFullscreen) {
			this.setFullscreen(false);
		}
	},	

	// start: fake events
	addEventListener: function (eventName, callback, bubble) {
		this.events[eventName] = this.events[eventName] || [];
		this.events[eventName].push(callback);
	},
	removeEventListener: function (eventName, callback) {
		if (!eventName) { this.events = {}; return true; }
		var callbacks = this.events[eventName];
		if (!callbacks) return true;
		if (!callback) { this.events[eventName] = []; return true; }
		for (i = 0; i < callbacks.length; i++) {
			if (callbacks[i] === callback) {
				this.events[eventName].splice(i, 1);
				return true;
			}
		}
		return false;
	},	
	dispatchEvent: function (eventName) {
		var i,
			args,
			callbacks = this.events[eventName];

		if (callbacks) {
			args = Array.prototype.slice.call(arguments, 1);
			for (i = 0; i < callbacks.length; i++) {
				callbacks[i].apply(null, args);
			}
		}
	},
	// end: fake events
	
	// fake DOM attribute methods
	hasAttribute: function(name){
		return (name in this.attributes);  
	},
	removeAttribute: function(name){
		delete this.attributes[name];
	},
	getAttribute: function(name){
		if (this.hasAttribute(name)) {
			return this.attributes[name];
		}
		return '';
	},
	setAttribute: function(name, value){
		this.attributes[name] = value;
	},

	remove: function() {
		mejs.Utility.removeSwf(this.pluginElement.id);
		mejs.MediaPluginBridge.unregisterPluginElement(this.pluginElement.id);
	}
};

// Handles calls from Flash/Silverlight and reports them as native <video/audio> events and properties
mejs.MediaPluginBridge = {

	pluginMediaElements:{},
	htmlMediaElements:{},

	registerPluginElement: function (id, pluginMediaElement, htmlMediaElement) {
		this.pluginMediaElements[id] = pluginMediaElement;
		this.htmlMediaElements[id] = htmlMediaElement;
	},

	unregisterPluginElement: function (id) {
		delete this.pluginMediaElements[id];
		delete this.htmlMediaElements[id];
	},

	// when Flash/Silverlight is ready, it calls out to this method
	initPlugin: function (id) {

		var pluginMediaElement = this.pluginMediaElements[id],
			htmlMediaElement = this.htmlMediaElements[id];

		if (pluginMediaElement) {
			// find the javascript bridge
			switch (pluginMediaElement.pluginType) {
				case "flash":
					pluginMediaElement.pluginElement = pluginMediaElement.pluginApi = document.getElementById(id);
					break;
				case "silverlight":
					pluginMediaElement.pluginElement = document.getElementById(pluginMediaElement.id);
					pluginMediaElement.pluginApi = pluginMediaElement.pluginElement.Content.MediaElementJS;
					break;
			}
	
			if (pluginMediaElement.pluginApi != null && pluginMediaElement.success) {
				pluginMediaElement.success(pluginMediaElement, htmlMediaElement);
			}
		}
	},

	// receives events from Flash/Silverlight and sends them out as HTML5 media events
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html
	fireEvent: function (id, eventName, values) {

		var
			e,
			i,
			bufferedTime,
			pluginMediaElement = this.pluginMediaElements[id];

		// fake event object to mimic real HTML media event.
		e = {
			type: eventName,
			target: pluginMediaElement
		};

		// attach all values to element and event object
		for (i in values) {
			pluginMediaElement[i] = values[i];
			e[i] = values[i];
		}

		// fake the newer W3C buffered TimeRange (loaded and total have been removed)
		bufferedTime = values.bufferedTime || 0;

		e.target.buffered = e.buffered = {
			start: function(index) {
				return 0;
			},
			end: function (index) {
				return bufferedTime;
			},
			length: 1
		};

		pluginMediaElement.dispatchEvent(e.type, e);
	}
};

/*
Default options
*/
mejs.MediaElementDefaults = {
	// allows testing on HTML5, flash, silverlight
	// auto: attempts to detect what the browser can do
	// auto_plugin: prefer plugins and then attempt native HTML5
	// native: forces HTML5 playback
	// shim: disallows HTML5, will attempt either Flash or Silverlight
	// none: forces fallback view
	mode: 'auto',
	// remove or reorder to change plugin priority and availability
	plugins: ['flash','silverlight','youtube','vimeo'],
	// shows debug errors on screen
	enablePluginDebug: false,
	// overrides the type specified, useful for dynamic instantiation
	type: '',
	// path to Flash and Silverlight plugins
	pluginPath: mejs.Utility.getScriptPath(['mediaelement.js','mediaelement.min.js','mediaelement-and-player.js','mediaelement-and-player.min.js']),
	// name of flash file
	flashName: 'flashmediaelement.swf',
	// streamer for RTMP streaming
	flashStreamer: '',
	// turns on the smoothing filter in Flash
	enablePluginSmoothing: false,
	// enabled pseudo-streaming (seek) on .mp4 files
	enablePseudoStreaming: false,
	// start query parameter sent to server for pseudo-streaming
	pseudoStreamingStartQueryParam: 'start',
	// name of silverlight file
	silverlightName: 'silverlightmediaelement.xap',
	// default if the <video width> is not specified
	defaultVideoWidth: 480,
	// default if the <video height> is not specified
	defaultVideoHeight: 270,
	// overrides <video width>
	pluginWidth: -1,
	// overrides <video height>
	pluginHeight: -1,
	// additional plugin variables in 'key=value' form
	pluginVars: [],	
	// rate in milliseconds for Flash and Silverlight to fire the timeupdate event
	// larger number is less accurate, but less strain on plugin->JavaScript bridge
	timerRate: 250,
	// initial volume for player
	startVolume: 0.8,
	success: function () { },
	error: function () { }
};

/*
Determines if a browser supports the <video> or <audio> element
and returns either the native element or a Flash/Silverlight version that
mimics HTML5 MediaElement
*/
mejs.MediaElement = function (el, o) {
	return mejs.HtmlMediaElementShim.create(el,o);
};

mejs.HtmlMediaElementShim = {

	create: function(el, o) {
		var
			options = mejs.MediaElementDefaults,
			htmlMediaElement = (typeof(el) == 'string') ? document.getElementById(el) : el,
			tagName = htmlMediaElement.tagName.toLowerCase(),
			isMediaTag = (tagName === 'audio' || tagName === 'video'),
			src = (isMediaTag) ? htmlMediaElement.getAttribute('src') : htmlMediaElement.getAttribute('href'),
			poster = htmlMediaElement.getAttribute('poster'),
			autoplay =  htmlMediaElement.getAttribute('autoplay'),
			preload =  htmlMediaElement.getAttribute('preload'),
			controls =  htmlMediaElement.getAttribute('controls'),
			playback,
			prop;

		// extend options
		for (prop in o) {
			options[prop] = o[prop];
		}

		// clean up attributes
		src = 		(typeof src == 'undefined' 	|| src === null || src == '') ? null : src;		
		poster =	(typeof poster == 'undefined' 	|| poster === null) ? '' : poster;
		preload = 	(typeof preload == 'undefined' 	|| preload === null || preload === 'false') ? 'none' : preload;
		autoplay = 	!(typeof autoplay == 'undefined' || autoplay === null || autoplay === 'false');
		controls = 	!(typeof controls == 'undefined' || controls === null || controls === 'false');

		// test for HTML5 and plugin capabilities
		playback = this.determinePlayback(htmlMediaElement, options, mejs.MediaFeatures.supportsMediaTag, isMediaTag, src);
		playback.url = (playback.url !== null) ? mejs.Utility.absolutizeUrl(playback.url) : '';

		if (playback.method == 'native') {
			// second fix for android
			if (mejs.MediaFeatures.isBustedAndroid) {
				htmlMediaElement.src = playback.url;
				htmlMediaElement.addEventListener('click', function() {
					htmlMediaElement.play();
				}, false);
			}
		
			// add methods to native HTMLMediaElement
			return this.updateNative(playback, options, autoplay, preload);
		} else if (playback.method !== '') {
			// create plugin to mimic HTMLMediaElement
			
			return this.createPlugin( playback,  options, poster, autoplay, preload, controls);
		} else {
			// boo, no HTML5, no Flash, no Silverlight.
			this.createErrorMessage( playback, options, poster );
			
			return this;
		}
	},
	
	determinePlayback: function(htmlMediaElement, options, supportsMediaTag, isMediaTag, src) {
		var
			mediaFiles = [],
			i,
			j,
			k,
			l,
			n,
			type,
			result = { method: '', url: '', htmlMediaElement: htmlMediaElement, isVideo: (htmlMediaElement.tagName.toLowerCase() != 'audio')},
			pluginName,
			pluginVersions,
			pluginInfo,
			dummy,
			media;
			
		// STEP 1: Get URL and type from <video src> or <source src>

		// supplied type overrides <video type> and <source type>
		if (typeof options.type != 'undefined' && options.type !== '') {
			
			// accept either string or array of types
			if (typeof options.type == 'string') {
				mediaFiles.push({type:options.type, url:src});
			} else {
				
				for (i=0; i<options.type.length; i++) {
					mediaFiles.push({type:options.type[i], url:src});
				}
			}

		// test for src attribute first
		} else if (src !== null) {
			type = this.formatType(src, htmlMediaElement.getAttribute('type'));
			mediaFiles.push({type:type, url:src});

		// then test for <source> elements
		} else {
			// test <source> types to see if they are usable
			for (i = 0; i < htmlMediaElement.childNodes.length; i++) {
				n = htmlMediaElement.childNodes[i];
				if (n.nodeType == 1 && n.tagName.toLowerCase() == 'source') {
					src = n.getAttribute('src');
					type = this.formatType(src, n.getAttribute('type'));
					media = n.getAttribute('media');

					if (!media || !window.matchMedia || (window.matchMedia && window.matchMedia(media).matches)) {
						mediaFiles.push({type:type, url:src});
					}
				}
			}
		}
		
		// in the case of dynamicly created players
		// check for audio types
		if (!isMediaTag && mediaFiles.length > 0 && mediaFiles[0].url !== null && this.getTypeFromFile(mediaFiles[0].url).indexOf('audio') > -1) {
			result.isVideo = false;
		}
		

		// STEP 2: Test for playback method
		
		// special case for Android which sadly doesn't implement the canPlayType function (always returns '')
		if (mejs.MediaFeatures.isBustedAndroid) {
			htmlMediaElement.canPlayType = function(type) {
				return (type.match(/video\/(mp4|m4v)/gi) !== null) ? 'maybe' : '';
			};
		}		
		

		// test for native playback first
		if (supportsMediaTag && (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'native')  && !(mejs.MediaFeatures.isBustedNativeHTTPS)) {
						
			if (!isMediaTag) {

				// create a real HTML5 Media Element 
				dummy = document.createElement( result.isVideo ? 'video' : 'audio');			
				htmlMediaElement.parentNode.insertBefore(dummy, htmlMediaElement);
				htmlMediaElement.style.display = 'none';
				
				// use this one from now on
				result.htmlMediaElement = htmlMediaElement = dummy;
			}
				
			for (i=0; i<mediaFiles.length; i++) {
				// normal check
				if (htmlMediaElement.canPlayType(mediaFiles[i].type).replace(/no/, '') !== '' 
					// special case for Mac/Safari 5.0.3 which answers '' to canPlayType('audio/mp3') but 'maybe' to canPlayType('audio/mpeg')
					|| htmlMediaElement.canPlayType(mediaFiles[i].type.replace(/mp3/,'mpeg')).replace(/no/, '') !== '') {
					result.method = 'native';
					result.url = mediaFiles[i].url;
					break;
				}
			}			
			
			if (result.method === 'native') {
				if (result.url !== null) {
					htmlMediaElement.src = result.url;
				}
			
				// if `auto_plugin` mode, then cache the native result but try plugins.
				if (options.mode !== 'auto_plugin') {
					return result;
				}
			}
		}

		// if native playback didn't work, then test plugins
		if (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'shim') {
			for (i=0; i<mediaFiles.length; i++) {
				type = mediaFiles[i].type;

				// test all plugins in order of preference [silverlight, flash]
				for (j=0; j<options.plugins.length; j++) {

					pluginName = options.plugins[j];
			
					// test version of plugin (for future features)
					pluginVersions = mejs.plugins[pluginName];				
					
					for (k=0; k<pluginVersions.length; k++) {
						pluginInfo = pluginVersions[k];
					
						// test if user has the correct plugin version
						
						// for youtube/vimeo
						if (pluginInfo.version == null || 
							
							mejs.PluginDetector.hasPluginVersion(pluginName, pluginInfo.version)) {

							// test for plugin playback types
							for (l=0; l<pluginInfo.types.length; l++) {
								// find plugin that can play the type
								if (type == pluginInfo.types[l]) {
									result.method = pluginName;
									result.url = mediaFiles[i].url;
									return result;
								}
							}
						}
					}
				}
			}
		}
		
		// at this point, being in 'auto_plugin' mode implies that we tried plugins but failed.
		// if we have native support then return that.
		if (options.mode === 'auto_plugin' && result.method === 'native') {
			return result;
		}

		// what if there's nothing to play? just grab the first available
		if (result.method === '' && mediaFiles.length > 0) {
			result.url = mediaFiles[0].url;
		}

		return result;
	},

	formatType: function(url, type) {
		var ext;

		// if no type is supplied, fake it with the extension
		if (url && !type) {		
			return this.getTypeFromFile(url);
		} else {
			// only return the mime part of the type in case the attribute contains the codec
			// see http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#the-source-element
			// `video/mp4; codecs="avc1.42E01E, mp4a.40.2"` becomes `video/mp4`
			
			if (type && ~type.indexOf(';')) {
				return type.substr(0, type.indexOf(';')); 
			} else {
				return type;
			}
		}
	},
	
	getTypeFromFile: function(url) {
		url = url.split('?')[0];
		var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();
		return (/(mp4|m4v|ogg|ogv|webm|webmv|flv|wmv|mpeg|mov)/gi.test(ext) ? 'video' : 'audio') + '/' + this.getTypeFromExtension(ext);
	},
	
	getTypeFromExtension: function(ext) {
		
		switch (ext) {
			case 'mp4':
			case 'm4v':
				return 'mp4';
			case 'webm':
			case 'webma':
			case 'webmv':	
				return 'webm';
			case 'ogg':
			case 'oga':
			case 'ogv':	
				return 'ogg';
			default:
				return ext;
		}
	},

	createErrorMessage: function(playback, options, poster) {
		var 
			htmlMediaElement = playback.htmlMediaElement,
			errorContainer = document.createElement('div');
			
		errorContainer.className = 'me-cannotplay';

		try {
			errorContainer.style.width = htmlMediaElement.width + 'px';
			errorContainer.style.height = htmlMediaElement.height + 'px';
		} catch (e) {}

    if (options.customError) {
      errorContainer.innerHTML = options.customError;
    } else {
      errorContainer.innerHTML = (poster !== '') ?
        '<a href="' + playback.url + '"><img src="' + poster + '" width="100%" height="100%" /></a>' :
        '<a href="' + playback.url + '"><span>' + mejs.i18n.t('Download File') + '</span></a>';
    }

		htmlMediaElement.parentNode.insertBefore(errorContainer, htmlMediaElement);
		htmlMediaElement.style.display = 'none';

		options.error(htmlMediaElement);
	},

	createPlugin:function(playback, options, poster, autoplay, preload, controls) {
		var 
			htmlMediaElement = playback.htmlMediaElement,
			width = 1,
			height = 1,
			pluginid = 'me_' + playback.method + '_' + (mejs.meIndex++),
			pluginMediaElement = new mejs.PluginMediaElement(pluginid, playback.method, playback.url),
			container = document.createElement('div'),
			specialIEContainer,
			node,
			initVars;

		// copy tagName from html media element
		pluginMediaElement.tagName = htmlMediaElement.tagName

		// copy attributes from html media element to plugin media element
		for (var i = 0; i < htmlMediaElement.attributes.length; i++) {
			var attribute = htmlMediaElement.attributes[i];
			if (attribute.specified == true) {
				pluginMediaElement.setAttribute(attribute.name, attribute.value);
			}
		}

		// check for placement inside a <p> tag (sometimes WYSIWYG editors do this)
		node = htmlMediaElement.parentNode;
		while (node !== null && node.tagName.toLowerCase() != 'body') {
			if (node.parentNode.tagName.toLowerCase() == 'p') {
				node.parentNode.parentNode.insertBefore(node, node.parentNode);
				break;
			}
			node = node.parentNode;
		}

		if (playback.isVideo) {
			width = (options.pluginWidth > 0) ? options.pluginWidth : (options.videoWidth > 0) ? options.videoWidth : (htmlMediaElement.getAttribute('width') !== null) ? htmlMediaElement.getAttribute('width') : options.defaultVideoWidth;
			height = (options.pluginHeight > 0) ? options.pluginHeight : (options.videoHeight > 0) ? options.videoHeight : (htmlMediaElement.getAttribute('height') !== null) ? htmlMediaElement.getAttribute('height') : options.defaultVideoHeight;
		
			// in case of '%' make sure it's encoded
			width = mejs.Utility.encodeUrl(width);
			height = mejs.Utility.encodeUrl(height);
		
		} else {
			if (options.enablePluginDebug) {
				width = 320;
				height = 240;
			}
		}

		// register plugin
		pluginMediaElement.success = options.success;
		mejs.MediaPluginBridge.registerPluginElement(pluginid, pluginMediaElement, htmlMediaElement);

		// add container (must be added to DOM before inserting HTML for IE)
		container.className = 'me-plugin';
		container.id = pluginid + '_container';
		
		if (playback.isVideo) {
				htmlMediaElement.parentNode.insertBefore(container, htmlMediaElement);
		} else {
				document.body.insertBefore(container, document.body.childNodes[0]);
		}

		// flash/silverlight vars
		initVars = [
			'id=' + pluginid,
			'isvideo=' + ((playback.isVideo) ? "true" : "false"),
			'autoplay=' + ((autoplay) ? "true" : "false"),
			'preload=' + preload,
			'width=' + width,
			'startvolume=' + options.startVolume,
			'timerrate=' + options.timerRate,
			'flashstreamer=' + options.flashStreamer,
			'height=' + height,
      'pseudostreamstart=' + options.pseudoStreamingStartQueryParam];

		if (playback.url !== null) {
			if (playback.method == 'flash') {
				initVars.push('file=' + mejs.Utility.encodeUrl(playback.url));
			} else {
				initVars.push('file=' + playback.url);
			}
		}
		if (options.enablePluginDebug) {
			initVars.push('debug=true');
		}
		if (options.enablePluginSmoothing) {
			initVars.push('smoothing=true');
		}
    if (options.enablePseudoStreaming) {
      initVars.push('pseudostreaming=true');
    }
		if (controls) {
			initVars.push('controls=true'); // shows controls in the plugin if desired
		}
		if (options.pluginVars) {
			initVars = initVars.concat(options.pluginVars);
		}		

		switch (playback.method) {
			case 'silverlight':
				container.innerHTML =
'<object data="data:application/x-silverlight-2," type="application/x-silverlight-2" id="' + pluginid + '" name="' + pluginid + '" width="' + width + '" height="' + height + '" class="mejs-shim">' +
'<param name="initParams" value="' + initVars.join(',') + '" />' +
'<param name="windowless" value="true" />' +
'<param name="background" value="black" />' +
'<param name="minRuntimeVersion" value="3.0.0.0" />' +
'<param name="autoUpgrade" value="true" />' +
'<param name="source" value="' + options.pluginPath + options.silverlightName + '" />' +
'</object>';
					break;

			case 'flash':

				if (mejs.MediaFeatures.isIE) {
					specialIEContainer = document.createElement('div');
					container.appendChild(specialIEContainer);
					specialIEContainer.outerHTML =
'<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" ' +
'id="' + pluginid + '" width="' + width + '" height="' + height + '" class="mejs-shim">' +
'<param name="movie" value="' + options.pluginPath + options.flashName + '?x=' + (new Date()) + '" />' +
'<param name="flashvars" value="' + initVars.join('&amp;') + '" />' +
'<param name="quality" value="high" />' +
'<param name="bgcolor" value="#000000" />' +
'<param name="wmode" value="transparent" />' +
'<param name="allowScriptAccess" value="always" />' +
'<param name="allowFullScreen" value="true" />' +
'</object>';

				} else {

					container.innerHTML =
'<embed id="' + pluginid + '" name="' + pluginid + '" ' +
'play="true" ' +
'loop="false" ' +
'quality="high" ' +
'bgcolor="#000000" ' +
'wmode="transparent" ' +
'allowScriptAccess="always" ' +
'allowFullScreen="true" ' +
'type="application/x-shockwave-flash" pluginspage="//www.macromedia.com/go/getflashplayer" ' +
'src="' + options.pluginPath + options.flashName + '" ' +
'flashvars="' + initVars.join('&') + '" ' +
'width="' + width + '" ' +
'height="' + height + '" ' +
'class="mejs-shim"></embed>';
				}
				break;
			
			case 'youtube':
			
				
				var
					videoId = playback.url.substr(playback.url.lastIndexOf('=')+1);
					youtubeSettings = {
						container: container,
						containerId: container.id,
						pluginMediaElement: pluginMediaElement,
						pluginId: pluginid,
						videoId: videoId,
						height: height,
						width: width	
					};				
				
				if (mejs.PluginDetector.hasPluginVersion('flash', [10,0,0]) ) {
					mejs.YouTubeApi.createFlash(youtubeSettings);
				} else {
					mejs.YouTubeApi.enqueueIframe(youtubeSettings);		
				}
				
				break;
			
			// DEMO Code. Does NOT work.
			case 'vimeo':
				//console.log('vimeoid');
				
				pluginMediaElement.vimeoid = playback.url.substr(playback.url.lastIndexOf('/')+1);
				
				container.innerHTML ='<iframe src="http://player.vimeo.com/video/' + pluginMediaElement.vimeoid + '?portrait=0&byline=0&title=0" width="' + width +'" height="' + height +'" frameborder="0" class="mejs-shim"></iframe>';
				
				/*
				container.innerHTML =
					'<object width="' + width + '" height="' + height + '" class="mejs-shim">' +
						'<param name="allowfullscreen" value="true" />' +
						'<param name="allowscriptaccess" value="always" />' +
						'<param name="flashvars" value="api=1" />' + 
						'<param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=' + pluginMediaElement.vimeoid  + '&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" />' +
						'<embed src="//vimeo.com/moogaloop.swf?api=1&amp;clip_id=' + pluginMediaElement.vimeoid + '&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="' + width + '" height="' + height + '" class="mejs-shim"></embed>' +
					'</object>';
					*/
									
				break;			
		}
		// hide original element
		htmlMediaElement.style.display = 'none';

		// FYI: options.success will be fired by the MediaPluginBridge
		
		return pluginMediaElement;
	},

	updateNative: function(playback, options, autoplay, preload) {
		
		var htmlMediaElement = playback.htmlMediaElement,
			m;
		
		
		// add methods to video object to bring it into parity with Flash Object
		for (m in mejs.HtmlMediaElement) {
			htmlMediaElement[m] = mejs.HtmlMediaElement[m];
		}

		/*
		Chrome now supports preload="none"
		if (mejs.MediaFeatures.isChrome) {
		
			// special case to enforce preload attribute (Chrome doesn't respect this)
			if (preload === 'none' && !autoplay) {
			
				// forces the browser to stop loading (note: fails in IE9)
				htmlMediaElement.src = '';
				htmlMediaElement.load();
				htmlMediaElement.canceledPreload = true;

				htmlMediaElement.addEventListener('play',function() {
					if (htmlMediaElement.canceledPreload) {
						htmlMediaElement.src = playback.url;
						htmlMediaElement.load();
						htmlMediaElement.play();
						htmlMediaElement.canceledPreload = false;
					}
				}, false);
			// for some reason Chrome forgets how to autoplay sometimes.
			} else if (autoplay) {
				htmlMediaElement.load();
				htmlMediaElement.play();
			}
		}
		*/

		// fire success code
		options.success(htmlMediaElement, htmlMediaElement);
		
		return htmlMediaElement;
	}
};

/*
 - test on IE (object vs. embed)
 - determine when to use iframe (Firefox, Safari, Mobile) vs. Flash (Chrome, IE)
 - fullscreen?
*/

// YouTube Flash and Iframe API
mejs.YouTubeApi = {
	isIframeStarted: false,
	isIframeLoaded: false,
	loadIframeApi: function() {
		if (!this.isIframeStarted) {
			var tag = document.createElement('script');
			tag.src = "//www.youtube.com/player_api";
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
			this.isIframeStarted = true;
		}
	},
	iframeQueue: [],
	enqueueIframe: function(yt) {
		
		if (this.isLoaded) {
			this.createIframe(yt);
		} else {
			this.loadIframeApi();
			this.iframeQueue.push(yt);
		}
	},
	createIframe: function(settings) {
		
		var
		pluginMediaElement = settings.pluginMediaElement,	
		player = new YT.Player(settings.containerId, {
			height: settings.height,
			width: settings.width,
			videoId: settings.videoId,
			playerVars: {controls:0},
			events: {
				'onReady': function() {
					
					// hook up iframe object to MEjs
					settings.pluginMediaElement.pluginApi = player;
					
					// init mejs
					mejs.MediaPluginBridge.initPlugin(settings.pluginId);
					
					// create timer
					setInterval(function() {
						mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');
					}, 250);					
				},
				'onStateChange': function(e) {
					
					mejs.YouTubeApi.handleStateChange(e.data, player, pluginMediaElement);
					
				}
			}
		});
	},
	
	createEvent: function (player, pluginMediaElement, eventName) {
		var obj = {
			type: eventName,
			target: pluginMediaElement
		};

		if (player && player.getDuration) {
			
			// time 
			pluginMediaElement.currentTime = obj.currentTime = player.getCurrentTime();
			pluginMediaElement.duration = obj.duration = player.getDuration();
			
			// state
			obj.paused = pluginMediaElement.paused;
			obj.ended = pluginMediaElement.ended;			
			
			// sound
			obj.muted = player.isMuted();
			obj.volume = player.getVolume() / 100;
			
			// progress
			obj.bytesTotal = player.getVideoBytesTotal();
			obj.bufferedBytes = player.getVideoBytesLoaded();
			
			// fake the W3C buffered TimeRange
			var bufferedTime = obj.bufferedBytes / obj.bytesTotal * obj.duration;
			
			obj.target.buffered = obj.buffered = {
				start: function(index) {
					return 0;
				},
				end: function (index) {
					return bufferedTime;
				},
				length: 1
			};
			
		}
		
		// send event up the chain
		pluginMediaElement.dispatchEvent(obj.type, obj);
	},	
	
	iFrameReady: function() {
		
		this.isLoaded = true;
		this.isIframeLoaded = true;
		
		while (this.iframeQueue.length > 0) {
			var settings = this.iframeQueue.pop();
			this.createIframe(settings);
		}	
	},
	
	// FLASH!
	flashPlayers: {},
	createFlash: function(settings) {
		
		this.flashPlayers[settings.pluginId] = settings;
		
		/*
		settings.container.innerHTML =
			'<object type="application/x-shockwave-flash" id="' + settings.pluginId + '" data="//www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0" ' +
				'width="' + settings.width + '" height="' + settings.height + '" style="visibility: visible; " class="mejs-shim">' +
				'<param name="allowScriptAccess" value="always">' +
				'<param name="wmode" value="transparent">' +
			'</object>';
		*/

		var specialIEContainer,
			youtubeUrl = '//www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0';
			
		if (mejs.MediaFeatures.isIE) {
			
			specialIEContainer = document.createElement('div');
			settings.container.appendChild(specialIEContainer);
			specialIEContainer.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" ' +
'id="' + settings.pluginId + '" width="' + settings.width + '" height="' + settings.height + '" class="mejs-shim">' +
	'<param name="movie" value="' + youtubeUrl + '" />' +
	'<param name="wmode" value="transparent" />' +
	'<param name="allowScriptAccess" value="always" />' +
	'<param name="allowFullScreen" value="true" />' +
'</object>';
		} else {
		settings.container.innerHTML =
			'<object type="application/x-shockwave-flash" id="' + settings.pluginId + '" data="' + youtubeUrl + '" ' +
				'width="' + settings.width + '" height="' + settings.height + '" style="visibility: visible; " class="mejs-shim">' +
				'<param name="allowScriptAccess" value="always">' +
				'<param name="wmode" value="transparent">' +
			'</object>';
		}		
		
	},
	
	flashReady: function(id) {
		var
			settings = this.flashPlayers[id],
			player = document.getElementById(id),
			pluginMediaElement = settings.pluginMediaElement;
		
		// hook up and return to MediaELementPlayer.success	
		pluginMediaElement.pluginApi = 
		pluginMediaElement.pluginElement = player;
		mejs.MediaPluginBridge.initPlugin(id);
		
		// load the youtube video
		player.cueVideoById(settings.videoId);
		
		var callbackName = settings.containerId + '_callback';
		
		window[callbackName] = function(e) {
			mejs.YouTubeApi.handleStateChange(e, player, pluginMediaElement);
		}
		
		player.addEventListener('onStateChange', callbackName);
		
		setInterval(function() {
			mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');
		}, 250);
	},
	
	handleStateChange: function(youTubeState, player, pluginMediaElement) {
		switch (youTubeState) {
			case -1: // not started
				pluginMediaElement.paused = true;
				pluginMediaElement.ended = true;
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'loadedmetadata');
				//createYouTubeEvent(player, pluginMediaElement, 'loadeddata');
				break;
			case 0:
				pluginMediaElement.paused = false;
				pluginMediaElement.ended = true;
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'ended');
				break;
			case 1:
				pluginMediaElement.paused = false;
				pluginMediaElement.ended = false;				
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'play');
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'playing');
				break;
			case 2:
				pluginMediaElement.paused = true;
				pluginMediaElement.ended = false;				
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'pause');
				break;
			case 3: // buffering
				mejs.YouTubeApi.createEvent(player, pluginMediaElement, 'progress');
				break;
			case 5:
				// cued?
				break;						
			
		}			
		
	}
}
// IFRAME
function onYouTubePlayerAPIReady() {
	mejs.YouTubeApi.iFrameReady();
}
// FLASH
function onYouTubePlayerReady(id) {
	mejs.YouTubeApi.flashReady(id);
}

window.mejs = mejs;
window.MediaElement = mejs.MediaElement;

/*!
 * Adds Internationalization and localization to objects.
 *
 * What is the concept beyond i18n?
 *   http://en.wikipedia.org/wiki/Internationalization_and_localization
 *
 *
 * This file both i18n methods and locale which is used to translate
 * strings into other languages.
 *
 * Default translations are not available, you have to add them
 * through locale objects which are named exactly as the langcode
 * they stand for. The default language is always english (en).
 *
 *
 * Wrapper built to be able to attach the i18n object to
 * other objects without changing more than one line.
 *
 *
 * LICENSE:
 *
 *   The i18n file uses methods from the Drupal project (drupal.js):
 *     - i18n.methods.t() (modified)
 *     - i18n.methods.checkPlain() (full copy)
 *     - i18n.methods.formatString() (full copy)
 *
 *   The Drupal project is (like mediaelementjs) licensed under GPLv2.
 *    - http://drupal.org/licensing/faq/#q1
 *    - https://github.com/johndyer/mediaelement
 *    - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 *
 *
 * @author
 *   Tim Latz (latz.tim@gmail.com)
 *
 * @see
 *   me-i18n-locale.js
 *
 * @params
 *  - context - document, iframe ..
 *  - exports - CommonJS, window ..
 *
 */
;(function(context, exports, undefined) {
    
    var i18n = {
        "locale": {
            "strings" : {}
        },
        "methods" : {}
    };
// start i18n


    /**
     * Get the current browser's language
     *
     * @see: i18n.methods.t()
     */
    i18n.locale.getLanguage = function () {
        return i18n.locale || {
            "language" : navigator.language
        };
    };

    /**
     * Store the language the locale object was initialized with
     */
    i18n.locale.INIT_LANGUAGE = i18n.locale.getLanguage();


    /**
     * Encode special characters in a plain-text string for display as HTML.
     */
    i18n.methods.checkPlain = function (str) {
        var character, regex,
        replace = {
            '&': '&amp;',
            '"': '&quot;',
            '<': '&lt;',
            '>': '&gt;'
        };
        str = String(str);
        for (character in replace) {
            if (replace.hasOwnProperty(character)) {
                regex = new RegExp(character, 'g');
                str = str.replace(regex, replace[character]);
            }
        }
        return str;
    };

    /**
     * Replace placeholders with sanitized values in a string.
     *
     * @param str
     *   A string with placeholders.
     * @param args
     *   An object of replacements pairs to make. Incidences of any key in this
     *   array are replaced with the corresponding value. Based on the first
     *   character of the key, the value is escaped and/or themed:
     *    - !variable: inserted as is
     *    - @variable: escape plain text to HTML (i18n.methods.checkPlain)
     *    - %variable: escape text and theme as a placeholder for user-submitted
     *      content (checkPlain + <em class="placeholder" > )
     *
     * @see i18n.methods.t()
     */
    i18n.methods.formatString = function(str, args) {
        // Transform arguments before inserting them.
        for (var key in args) {
            switch (key.charAt(0)) {
                // Escaped only.
                case '@':
                    args[key] = i18n.methods.checkPlain(args[key]);
                    break;
                // Pass-through.
                case '!':
                    break;
                // Escaped and placeholder.
                case '%':
                default:
                    args[key] = '<em class="placeholder">' + i18n.methods.checkPlain(args[key]) + '</em>';
                    break;
            }
            str = str.replace(key, args[key]);
        }
        return str;
    };

    /**
     * Translate strings to the page language or a given language.
     *
     * See the documentation of the server-side t() function for further details.
     *
     * @param str
     *   A string containing the English string to translate.
     * @param args
     *   An object of replacements pairs to make after translation. Incidences
     *   of any key in this array are replaced with the corresponding value.
     *   See i18n.methods.formatString().
     *
     * @param options
     *   - 'context' (defaults to the default context): The context the source string
     *     belongs to.
     *
     * @return
     *   The translated string.
     */
    i18n.methods.t = function (str, args, options) {

        // Fetch the localized version of the string.
        if (i18n.locale.strings && i18n.locale.strings[options.context] && i18n.locale.strings[options.context][str]) {
            str = i18n.locale.strings[options.context][str];
        }

        if (args) {
            str = i18n.methods.formatString(str, args);
        }
        return str;
    };


    /**
     * Wrapper for i18n.methods.t()
     *
     * @see i18n.methods.t()
     * @throws InvalidArgumentException
     */
    i18n.t = function(str, args, options) {

        if (typeof str === 'string' && str.length > 0) {

            // check every time due languge can change for
            // different reasons (translation, lang switcher ..)
            var lang = i18n.locale.getLanguage();

            options = options || {
                "context" : lang.language
            };

            return i18n.methods.t(str, args, options);
        }
        else {
            throw {
                "name" : 'InvalidArgumentException',
                "message" : 'First argument is either not a string or empty.'
            }
        }
    };

// end i18n
    exports.i18n = i18n;
}(document, mejs));

;(function(exports, undefined) {

	

	if ( mejs.i18n.locale.language && mejs.i18n.locale.strings ) {
		exports[mejs.i18n.locale.language] = mejs.i18n.locale.strings;
	}

}(mejs.i18n.locale.strings));

/*!
 * This is a i18n.locale language object.
 *
 *<de> German translation by Tim Latz, latz.tim@gmail.com
 *
 * @author
 *   Tim Latz (latz.tim@gmail.com)
 *
 * @see
 *   me-i18n.js
 *
 * @params
 *  - exports - CommonJS, window ..
 */
;(function(exports, undefined) {

    

    exports.de = {
        "Fullscreen" : "Vollbild",
        "Go Fullscreen" : "Vollbild an",
        "Turn off Fullscreen" : "Vollbild aus",
        "Close" : "Schließen"
    };

}(mejs.i18n.locale.strings));
/*!
 * This is a i18n.locale language object.
 *
 *<de> Traditional chinese translation by Tim Latz, latz.tim@gmail.com
 *
 * @author
 *   Tim Latz (latz.tim@gmail.com)
 *
 * @see
 *   me-i18n.js
 *
 * @params
 *  - exports - CommonJS, window ..
 */
;(function(exports, undefined) {

    

    exports.zh = {
        "Fullscreen" : "全螢幕",
        "Go Fullscreen" : "全屏模式",
        "Turn off Fullscreen" : "退出全屏模式",
        "Close" : "關閉"
    };

}(mejs.i18n.locale.strings));


/*!
 * MediaElementPlayer
 * http://mediaelementjs.com/
 *
 * Creates a controller bar for HTML5 <video> add <audio> tags
 * using jQuery and MediaElement.js (HTML5 Flash/Silverlight wrapper)
 *
 * Copyright 2010-2013, John Dyer (http://j.hn/)
 * License: MIT
 *
 */
if (typeof jQuery != 'undefined') {
	mejs.$ = jQuery;
} else if (typeof ender != 'undefined') {
	mejs.$ = ender;
}
(function ($) {

	// default player values
	mejs.MepDefaults = {
		// url to poster (to fix iOS 3.x)
		poster: '',
		// default if the <video width> is not specified
		defaultVideoWidth: 480,
		// default if the <video height> is not specified
		defaultVideoHeight: 270,
		// if set, overrides <video width>
		videoWidth: -1,
		// if set, overrides <video height>
		videoHeight: -1,
		// default if the user doesn't specify
		defaultAudioWidth: 400,
		// default if the user doesn't specify
		defaultAudioHeight: 30,

		// default amount to move back when back key is pressed
		defaultSeekBackwardInterval: function(media) {
			return (media.duration * 0.05);
		},
		// default amount to move forward when forward key is pressed
		defaultSeekForwardInterval: function(media) {
			return (media.duration * 0.05);
		},

		// width of audio player
		audioWidth: -1,
		// height of audio player
		audioHeight: -1,
		// initial volume when the player starts (overrided by user cookie)
		startVolume: 0.8,
		// useful for <audio> player loops
		loop: false,
		// rewind to beginning when media ends
                autoRewind: true,
		// resize to media dimensions
		enableAutosize: true,
		// forces the hour marker (##:00:00)
		alwaysShowHours: false,

		// show framecount in timecode (##:00:00:00)
		showTimecodeFrameCount: false,
		// used when showTimecodeFrameCount is set to true
		framesPerSecond: 25,

		// automatically calculate the width of the progress bar based on the sizes of other elements
		autosizeProgress : true,
		// Hide controls when playing and mouse is not over the video
		alwaysShowControls: false,
		// Display the video control
		hideVideoControlsOnLoad: false,
        // Enable click video element to toggle play/pause
        clickToPlayPause: true,
		// force iPad's native controls
		iPadUseNativeControls: false,
		// force iPhone's native controls
		iPhoneUseNativeControls: false,
		// force Android's native controls
		AndroidUseNativeControls: false,
		// features to show
		features: ['playpause','current','progress','duration','tracks','volume','fullscreen'],
		// only for dynamic
		isVideo: true,

		// turns keyboard support on and off for this instance
		enableKeyboard: true,

		// whenthis player starts, it will pause other players
		pauseOtherPlayers: true,

		// array of keyboard actions such as play pause
		keyActions: [
				{
						keys: [
								32, // SPACE
								179 // GOOGLE play/pause button
							  ],
						action: function(player, media) {
								if (media.paused || media.ended) {
										media.play();
								} else {
										media.pause();
								}
						}
				},
				{
						keys: [38], // UP
						action: function(player, media) {
								var newVolume = Math.min(media.volume + 0.1, 1);
								media.setVolume(newVolume);
						}
				},
				{
						keys: [40], // DOWN
						action: function(player, media) {
								var newVolume = Math.max(media.volume - 0.1, 0);
								media.setVolume(newVolume);
						}
				},
				{
						keys: [
								37, // LEFT
								227 // Google TV rewind
						],
						action: function(player, media) {
								if (!isNaN(media.duration) && media.duration > 0) {
										if (player.isVideo) {
												player.showControls();
												player.startControlsTimer();
										}

										// 5%
										var newTime = Math.max(media.currentTime - player.options.defaultSeekBackwardInterval(media), 0);
										media.setCurrentTime(newTime);
								}
						}
				},
				{
						keys: [
								39, // RIGHT
								228 // Google TV forward
						],
						action: function(player, media) {
								if (!isNaN(media.duration) && media.duration > 0) {
										if (player.isVideo) {
												player.showControls();
												player.startControlsTimer();
										}

										// 5%
										var newTime = Math.min(media.currentTime + player.options.defaultSeekForwardInterval(media), media.duration);
										media.setCurrentTime(newTime);
								}
						}
				},
				{
						keys: [70], // f
						action: function(player, media) {
								if (typeof player.enterFullScreen != 'undefined') {
										if (player.isFullScreen) {
												player.exitFullScreen();
										} else {
												player.enterFullScreen();
										}
								}
						}
				}
		]
	};

	mejs.mepIndex = 0;

	mejs.players = {};

	// wraps a MediaElement object in player controls
	mejs.MediaElementPlayer = function(node, o) {
		// enforce object, even without "new" (via John Resig)
		if ( !(this instanceof mejs.MediaElementPlayer) ) {
			return new mejs.MediaElementPlayer(node, o);
		}

		var t = this;

		// these will be reset after the MediaElement.success fires
		t.$media = t.$node = $(node);
		t.node = t.media = t.$media[0];

		// check for existing player
		if (typeof t.node.player != 'undefined') {
			return t.node.player;
		} else {
			// attach player to DOM node for reference
			t.node.player = t;
		}


		// try to get options from data-mejsoptions
		if (typeof o == 'undefined') {
			o = t.$node.data('mejsoptions');
		}

		// extend default options
		t.options = $.extend({},mejs.MepDefaults,o);

		// unique ID
		t.id = 'mep_' + mejs.mepIndex++;

		// add to player array (for focus events)
		mejs.players[t.id] = t;

		// start up
		t.init();

		return t;
	};

	// actual player
	mejs.MediaElementPlayer.prototype = {

		hasFocus: false,

		controlsAreVisible: true,

		init: function() {

			var
				t = this,
				mf = mejs.MediaFeatures,
				// options for MediaElement (shim)
				meOptions = $.extend(true, {}, t.options, {
					success: function(media, domNode) { t.meReady(media, domNode); },
					error: function(e) { t.handleError(e);}
				}),
				tagName = t.media.tagName.toLowerCase();

			t.isDynamic = (tagName !== 'audio' && tagName !== 'video');

			if (t.isDynamic) {
				// get video from src or href?
				t.isVideo = t.options.isVideo;
			} else {
				t.isVideo = (tagName !== 'audio' && t.options.isVideo);
			}

			// use native controls in iPad, iPhone, and Android
			if ((mf.isiPad && t.options.iPadUseNativeControls) || (mf.isiPhone && t.options.iPhoneUseNativeControls)) {

				// add controls and stop
				t.$media.attr('controls', 'controls');

				// attempt to fix iOS 3 bug
				//t.$media.removeAttr('poster');
                                // no Issue found on iOS3 -ttroxell

				// override Apple's autoplay override for iPads
				if (mf.isiPad && t.media.getAttribute('autoplay') !== null) {
					t.media.load();
					t.media.play();
				}

			} else if (mf.isAndroid && t.options.AndroidUseNativeControls) {

				// leave default player

			} else {

				// DESKTOP: use MediaElementPlayer controls

				// remove native controls
				t.$media.removeAttr('controls');

				// build container
				t.container =
					$('<div id="' + t.id + '" class="mejs-container ' + (mejs.MediaFeatures.svg ? 'svg' : 'no-svg') + '">'+
						'<div class="mejs-inner">'+
							'<div class="mejs-mediaelement"></div>'+
							'<div class="mejs-layers"></div>'+
							'<div class="mejs-controls"></div>'+
							'<div class="mejs-clear"></div>'+
						'</div>' +
					'</div>')
					.addClass(t.$media[0].className)
					.insertBefore(t.$media);

				// add classes for user and content
				t.container.addClass(
					(mf.isAndroid ? 'mejs-android ' : '') +
					(mf.isiOS ? 'mejs-ios ' : '') +
					(mf.isiPad ? 'mejs-ipad ' : '') +
					(mf.isiPhone ? 'mejs-iphone ' : '') +
					(t.isVideo ? 'mejs-video ' : 'mejs-audio ')
				);


				// move the <video/video> tag into the right spot
				if (mf.isiOS) {

					// sadly, you can't move nodes in iOS, so we have to destroy and recreate it!
					var $newMedia = t.$media.clone();

					t.container.find('.mejs-mediaelement').append($newMedia);

					t.$media.remove();
					t.$node = t.$media = $newMedia;
					t.node = t.media = $newMedia[0]

				} else {

					// normal way of moving it into place (doesn't work on iOS)
					t.container.find('.mejs-mediaelement').append(t.$media);
				}

				// find parts
				t.controls = t.container.find('.mejs-controls');
				t.layers = t.container.find('.mejs-layers');

				// determine the size

				/* size priority:
					(1) videoWidth (forced),
					(2) style="width;height;"
					(3) width attribute,
					(4) defaultVideoWidth (for unspecified cases)
				*/

				var tagType = (t.isVideo ? 'video' : 'audio'),
					capsTagName = tagType.substring(0,1).toUpperCase() + tagType.substring(1);


				if (t.options[tagType + 'Width'] > 0 || t.options[tagType + 'Width'].toString().indexOf('%') > -1) {
					t.width = t.options[tagType + 'Width'];
				} else if (t.media.style.width !== '' && t.media.style.width !== null) {
					t.width = t.media.style.width;
				} else if (t.media.getAttribute('width') !== null) {
					t.width = t.$media.attr('width');
				} else {
					t.width = t.options['default' + capsTagName + 'Width'];
				}

				if (t.options[tagType + 'Height'] > 0 || t.options[tagType + 'Height'].toString().indexOf('%') > -1) {
					t.height = t.options[tagType + 'Height'];
				} else if (t.media.style.height !== '' && t.media.style.height !== null) {
					t.height = t.media.style.height;
				} else if (t.$media[0].getAttribute('height') !== null) {
					t.height = t.$media.attr('height');
				} else {
					t.height = t.options['default' + capsTagName + 'Height'];
				}

				// set the size, while we wait for the plugins to load below
				t.setPlayerSize(t.width, t.height);

				// create MediaElementShim
				meOptions.pluginWidth = t.width;
				meOptions.pluginHeight = t.height;
			}

			// create MediaElement shim
			mejs.MediaElement(t.$media[0], meOptions);

			if (typeof(t.container) != 'undefined'){
			    // controls are shown when loaded
			    t.container.trigger('controlsshown');
			}
		},

		showControls: function(doAnimation) {
			var t = this;

			doAnimation = typeof doAnimation == 'undefined' || doAnimation;

			if (t.controlsAreVisible)
				return;

			if (doAnimation) {
				t.controls
					.css('visibility','visible')
					.stop(true, true).fadeIn(200, function() {
					      t.controlsAreVisible = true;
					      t.container.trigger('controlsshown');
					});

				// any additional controls people might add and want to hide
				t.container.find('.mejs-control')
					.css('visibility','visible')
					.stop(true, true).fadeIn(200, function() {t.controlsAreVisible = true;});

			} else {
				t.controls
					.css('visibility','visible')
					.css('display','block');

				// any additional controls people might add and want to hide
				t.container.find('.mejs-control')
					.css('visibility','visible')
					.css('display','block');

				t.controlsAreVisible = true;
				t.container.trigger('controlsshown');
			}

			t.setControlsSize();

		},

		hideControls: function(doAnimation) {
			var t = this;

			doAnimation = typeof doAnimation == 'undefined' || doAnimation;

			if (!t.controlsAreVisible)
				return;

			if (doAnimation) {
				// fade out main controls
				t.controls.stop(true, true).fadeOut(200, function() {
					$(this)
						.css('visibility','hidden')
						.css('display','block');

					t.controlsAreVisible = false;
					t.container.trigger('controlshidden');
				});

				// any additional controls people might add and want to hide
				t.container.find('.mejs-control').stop(true, true).fadeOut(200, function() {
					$(this)
						.css('visibility','hidden')
						.css('display','block');
				});
			} else {

				// hide main controls
				t.controls
					.css('visibility','hidden')
					.css('display','block');

				// hide others
				t.container.find('.mejs-control')
					.css('visibility','hidden')
					.css('display','block');

				t.controlsAreVisible = false;
				t.container.trigger('controlshidden');
			}
		},

		controlsTimer: null,

		startControlsTimer: function(timeout) {

			var t = this;

			timeout = typeof timeout != 'undefined' ? timeout : 1500;

			t.killControlsTimer('start');

			t.controlsTimer = setTimeout(function() {
				//console.log('timer fired');
				t.hideControls();
				t.killControlsTimer('hide');
			}, timeout);
		},

		killControlsTimer: function(src) {

			var t = this;

			if (t.controlsTimer !== null) {
				clearTimeout(t.controlsTimer);
				delete t.controlsTimer;
				t.controlsTimer = null;
			}
		},

		controlsEnabled: true,

		disableControls: function() {
			var t= this;

			t.killControlsTimer();
			t.hideControls(false);
			this.controlsEnabled = false;
		},

		enableControls: function() {
			var t= this;

			t.showControls(false);

			t.controlsEnabled = true;
		},


		// Sets up all controls and events
		meReady: function(media, domNode) {


			var t = this,
				mf = mejs.MediaFeatures,
				autoplayAttr = domNode.getAttribute('autoplay'),
				autoplay = !(typeof autoplayAttr == 'undefined' || autoplayAttr === null || autoplayAttr === 'false'),
				featureIndex,
				feature;

			// make sure it can't create itself again if a plugin reloads
			if (t.created) {
				return;
			} else {
				t.created = true;
			}

			t.media = media;
			t.domNode = domNode;

			if (!(mf.isAndroid && t.options.AndroidUseNativeControls) && !(mf.isiPad && t.options.iPadUseNativeControls) && !(mf.isiPhone && t.options.iPhoneUseNativeControls)) {

				// two built in features
				t.buildposter(t, t.controls, t.layers, t.media);
				t.buildkeyboard(t, t.controls, t.layers, t.media);
				t.buildoverlays(t, t.controls, t.layers, t.media);

				// grab for use by features
				t.findTracks();

				// add user-defined features/controls
				for (featureIndex in t.options.features) {
					feature = t.options.features[featureIndex];
					if (t['build' + feature]) {
						try {
							t['build' + feature](t, t.controls, t.layers, t.media);
						} catch (e) {
							// TODO: report control error
							//throw e;
							//console.log('error building ' + feature);
							//console.log(e);
						}
					}
				}

				t.container.trigger('controlsready');

				// reset all layers and controls
				t.setPlayerSize(t.width, t.height);
				t.setControlsSize();


				// controls fade
				if (t.isVideo) {

					if (mejs.MediaFeatures.hasTouch) {

						// for touch devices (iOS, Android)
						// show/hide without animation on touch

						t.$media.bind('touchstart', function() {


							// toggle controls
							if (t.controlsAreVisible) {
								t.hideControls(false);
							} else {
								if (t.controlsEnabled) {
									t.showControls(false);
								}
							}
						});

					} else {

						// create callback here since it needs access to current
						// MediaElement object
						mejs.MediaElementPlayer.prototype.clickToPlayPauseCallback = function() {
							console.log('media clicked', t.media, t.media.paused);

							if (t.options.clickToPlayPause) {
								if (t.media.paused) {
									t.media.play();
								} else {
									t.media.pause();
								}
							}
						};

			            // click to play/pause
			            t.media.addEventListener('click', t.clickToPlayPauseCallback);

						// show/hide controls
						t.container
							.bind('mouseenter mouseover', function () {
								if (t.controlsEnabled) {
									if (!t.options.alwaysShowControls) {
										t.killControlsTimer('enter');
										t.showControls();
										t.startControlsTimer(2500);
									}
								}
							})
							.bind('mousemove', function() {
								if (t.controlsEnabled) {
									if (!t.controlsAreVisible) {
										t.showControls();
									}
									//t.killControlsTimer('move');
									if (!t.options.alwaysShowControls) {
										t.startControlsTimer(2500);
									}
								}
							})
							.bind('mouseleave', function () {
								if (t.controlsEnabled) {
									if (!t.media.paused && !t.options.alwaysShowControls) {
										t.startControlsTimer(1000);
									}
								}
							});
					}

					if(t.options.hideVideoControlsOnLoad) {
						t.hideControls(false);
					}

					// check for autoplay
					if (autoplay && !t.options.alwaysShowControls) {
						t.hideControls();
					}

					// resizer
					if (t.options.enableAutosize) {
						t.media.addEventListener('loadedmetadata', function(e) {
							// if the <video height> was not set and the options.videoHeight was not set
							// then resize to the real dimensions
							if (t.options.videoHeight <= 0 && t.domNode.getAttribute('height') === null && !isNaN(e.target.videoHeight)) {
								t.setPlayerSize(e.target.videoWidth, e.target.videoHeight);
								t.setControlsSize();
								t.media.setVideoSize(e.target.videoWidth, e.target.videoHeight);
							}
						}, false);
					}
				}

				// EVENTS

				// FOCUS: when a video starts playing, it takes focus from other players (possibily pausing them)
				media.addEventListener('play', function() {
					var playerIndex;

					// go through all other players
					for (playerIndex in mejs.players) {
						var p = mejs.players[playerIndex];
						if (p.id != t.id && t.options.pauseOtherPlayers && !p.paused && !p.ended) {
							p.pause();
						}
						p.hasFocus = false;
					}

					t.hasFocus = true;
				},false);


				// ended for all
				t.media.addEventListener('ended', function (e) {
					if(t.options.autoRewind) {
						try{
							t.media.setCurrentTime(0);
						} catch (exp) {

						}
					}
					t.media.pause();

					if (t.setProgressRail) {
						t.setProgressRail();
					}
					if (t.setCurrentRail) {
						t.setCurrentRail();
					}

					if (t.options.loop) {
						t.media.play();
					} else if (!t.options.alwaysShowControls && t.controlsEnabled) {
						t.showControls();
					}
				}, false);

				// resize on the first play
				t.media.addEventListener('loadedmetadata', function(e) {
					if (t.updateDuration) {
						t.updateDuration();
					}
					if (t.updateCurrent) {
						t.updateCurrent();
					}

					if (!t.isFullScreen) {
						t.setPlayerSize(t.width, t.height);
						t.setControlsSize();
					}
				}, false);


				// webkit has trouble doing this without a delay
				setTimeout(function () {
					t.setPlayerSize(t.width, t.height);
					t.setControlsSize();
				}, 50);

				// adjust controls whenever window sizes (used to be in fullscreen only)
				t.globalBind('resize', function() {

					// don't resize for fullscreen mode
					if ( !(t.isFullScreen || (mejs.MediaFeatures.hasTrueNativeFullScreen && document.webkitIsFullScreen)) ) {
						t.setPlayerSize(t.width, t.height);
					}

					// always adjust controls
					t.setControlsSize();
				});

				// TEMP: needs to be moved somewhere else
				if (t.media.pluginType == 'youtube') {
					t.container.find('.mejs-overlay-play').hide();
				}
			}

			// force autoplay for HTML5
			if (autoplay && media.pluginType == 'native') {
				media.load();
				media.play();
			}


			if (t.options.success) {

				if (typeof t.options.success == 'string') {
					window[t.options.success](t.media, t.domNode, t);
				} else {
					t.options.success(t.media, t.domNode, t);
				}
			}
		},

		handleError: function(e) {
			var t = this;

			t.controls.hide();

			// Tell user that the file cannot be played
			if (t.options.error) {
				t.options.error(e);
			}
		},

		setPlayerSize: function(width,height) {
			var t = this;

			if (typeof width != 'undefined') {
				t.width = width;
			}

			if (typeof height != 'undefined') {
				t.height = height;
			}

			// detect 100% mode - use currentStyle for IE since css() doesn't return percentages
      		if (t.height.toString().indexOf('%') > 0 || t.$node.css('max-width') === '100%' || (t.$node[0].currentStyle && t.$node[0].currentStyle.maxWidth === '100%')) {

				// do we have the native dimensions yet?
				var
					nativeWidth = t.isVideo ? ((t.media.videoWidth && t.media.videoWidth > 0) ? t.media.videoWidth : t.options.defaultVideoWidth) : t.options.defaultAudioWidth,
					nativeHeight = t.isVideo ? ((t.media.videoHeight && t.media.videoHeight > 0) ? t.media.videoHeight : t.options.defaultVideoHeight) : t.options.defaultAudioHeight,
					parentWidth = t.container.parent().closest(':visible').width(),
					newHeight = t.isVideo || !t.options.autosizeProgress ? parseInt(parentWidth * nativeHeight/nativeWidth, 10) : nativeHeight;

				if (t.container.parent()[0].tagName.toLowerCase() === 'body') { // && t.container.siblings().count == 0) {
					parentWidth = $(window).width();
					newHeight = $(window).height();
				}

				if ( newHeight != 0 && parentWidth != 0 ) {
					// set outer container size
					t.container
						.width(parentWidth)
						.height(newHeight);

					// set native <video> or <audio> and shims
					t.$media.add(t.container.find('.mejs-shim'))
						.width('100%')
						.height('100%');

					// if shim is ready, send the size to the embeded plugin
					if (t.isVideo) {
						if (t.media.setVideoSize) {
							t.media.setVideoSize(parentWidth, newHeight);
						}
					}

					// set the layers
					t.layers.children('.mejs-layer')
						.width('100%')
						.height('100%');
				}


			} else {

				t.container
					.width(t.width)
					.height(t.height);

				t.layers.children('.mejs-layer')
					.width(t.width)
					.height(t.height);

			}

			// special case for big play button so it doesn't go over the controls area
			var playLayer = t.layers.find('.mejs-overlay-play'),
				playButton = playLayer.find('.mejs-overlay-button');

			playLayer.height(t.container.height() - t.controls.height());
			playButton.css('margin-top', '-' + (playButton.height()/2 - t.controls.height()/2).toString() + 'px'  );

		},

		setControlsSize: function() {
			var t = this,
				usedWidth = 0,
				railWidth = 0,
				rail = t.controls.find('.mejs-time-rail'),
				total = t.controls.find('.mejs-time-total'),
				current = t.controls.find('.mejs-time-current'),
				loaded = t.controls.find('.mejs-time-loaded'),
				others = rail.siblings();


			// allow the size to come from custom CSS
			if (t.options && !t.options.autosizeProgress) {
				// Also, frontends devs can be more flexible
				// due the opportunity of absolute positioning.
				railWidth = parseInt(rail.css('width'));
			}

			// attempt to autosize
			if (railWidth === 0 || !railWidth) {

				// find the size of all the other controls besides the rail
				others.each(function() {
					var $this = $(this);
					if ($this.css('position') != 'absolute' && $this.is(':visible')) {
						usedWidth += $(this).outerWidth(true);
					}
				});

				// fit the rail into the remaining space
				railWidth = t.controls.width() - usedWidth - (rail.outerWidth(true) - rail.width());
			}

			// outer area
			rail.width(railWidth);
			// dark space
			total.width(railWidth - (total.outerWidth(true) - total.width()));

			if (t.setProgressRail)
				t.setProgressRail();
			if (t.setCurrentRail)
				t.setCurrentRail();
		},


		buildposter: function(player, controls, layers, media) {
			var t = this,
				poster =
				$('<div class="mejs-poster mejs-layer">' +
				'</div>')
					.appendTo(layers),
				posterUrl = player.$media.attr('poster');

			// prioriy goes to option (this is useful if you need to support iOS 3.x (iOS completely fails with poster)
			if (player.options.poster !== '') {
				posterUrl = player.options.poster;
			}

			// second, try the real poster
			if (posterUrl !== '' && posterUrl != null) {
				t.setPoster(posterUrl);
			} else {
				poster.hide();
			}

			media.addEventListener('play',function() {
				poster.hide();
			}, false);
		},

		setPoster: function(url) {
			var t = this,
				posterDiv = t.container.find('.mejs-poster'),
				posterImg = posterDiv.find('img');

			if (posterImg.length == 0) {
				posterImg = $('<img width="100%" height="100%" />').appendTo(posterDiv);
			}

			posterImg.attr('src', url);
			posterDiv.css({'background-image' : 'url(' + url + ')'});
		},

		buildoverlays: function(player, controls, layers, media) {
            var t = this;
			if (!player.isVideo)
				return;

			var
			loading =
				$('<div class="mejs-overlay mejs-layer">'+
					'<div class="mejs-overlay-loading"><span></span></div>'+
				'</div>')
				.hide() // start out hidden
				.appendTo(layers),
			error =
				$('<div class="mejs-overlay mejs-layer">'+
					'<div class="mejs-overlay-error"></div>'+
				'</div>')
				.hide() // start out hidden
				.appendTo(layers),
			// this needs to come last so it's on top
			bigPlay =
				$('<div class="mejs-overlay mejs-layer mejs-overlay-play">'+
					'<div class="mejs-overlay-button"></div>'+
				'</div>')
				.appendTo(layers)
				.click(function() {
                    if (t.options.clickToPlayPause) {
                        if (media.paused) {
                            media.play();
                        } else {
                            media.pause();
                        }
                    }
				});

			/*
			if (mejs.MediaFeatures.isiOS || mejs.MediaFeatures.isAndroid) {
				bigPlay.remove();
				loading.remove();
			}
			*/


			// show/hide big play button
			media.addEventListener('play',function() {
				bigPlay.hide();
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.hide();
			}, false);

			media.addEventListener('playing', function() {
				bigPlay.hide();
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.hide();
			}, false);

			media.addEventListener('seeking', function() {
				loading.show();
				controls.find('.mejs-time-buffering').show();
			}, false);

			media.addEventListener('seeked', function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
			}, false);

			media.addEventListener('pause',function() {
				if (!mejs.MediaFeatures.isiPhone) {
					bigPlay.show();
				}
			}, false);

			media.addEventListener('waiting', function() {
				loading.show();
				controls.find('.mejs-time-buffering').show();
			}, false);


			// show/hide loading
			media.addEventListener('loadeddata',function() {
				// for some reason Chrome is firing this event
				//if (mejs.MediaFeatures.isChrome && media.getAttribute && media.getAttribute('preload') === 'none')
				//	return;

				loading.show();
				controls.find('.mejs-time-buffering').show();
			}, false);
			media.addEventListener('canplay',function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
			}, false);

			// error handling
			media.addEventListener('error',function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.show();
				error.find('mejs-overlay-error').html("Error loading this resource");
			}, false);
		},

		buildkeyboard: function(player, controls, layers, media) {

				var t = this;

				// listen for key presses
				t.globalBind('keydown', function(e) {

						if (player.hasFocus && player.options.enableKeyboard) {

								// find a matching key
								for (var i=0, il=player.options.keyActions.length; i<il; i++) {
										var keyAction = player.options.keyActions[i];

										for (var j=0, jl=keyAction.keys.length; j<jl; j++) {
												if (e.keyCode == keyAction.keys[j]) {
														e.preventDefault();
														keyAction.action(player, media, e.keyCode);
														return false;
												}
										}
								}
						}

						return true;
				});

				// check if someone clicked outside a player region, then kill its focus
				t.globalBind('click', function(event) {
						if ($(event.target).closest('.mejs-container').length == 0) {
								player.hasFocus = false;
						}
				});

		},

		findTracks: function() {
			var t = this,
				tracktags = t.$media.find('track');

			// store for use by plugins
			t.tracks = [];
			tracktags.each(function(index, track) {

				track = $(track);

				t.tracks.push({
					srclang: (track.attr('srclang')) ? track.attr('srclang').toLowerCase() : '',
					src: track.attr('src'),
					kind: track.attr('kind'),
					label: track.attr('label') || '',
					entries: [],
					isLoaded: false
				});
			});
		},
		changeSkin: function(className) {
			this.container[0].className = 'mejs-container ' + className;
			this.setPlayerSize(this.width, this.height);
			this.setControlsSize();
		},
		play: function() {
			this.media.play();
		},
		pause: function() {
			this.media.pause();
		},
		load: function() {
			this.media.load();
		},
		setMuted: function(muted) {
			this.media.setMuted(muted);
		},
		setCurrentTime: function(time) {
			this.media.setCurrentTime(time);
		},
		getCurrentTime: function() {
			return this.media.currentTime;
		},
		setVolume: function(volume) {
			this.media.setVolume(volume);
		},
		getVolume: function() {
			return this.media.volume;
		},
		setSrc: function(src) {
			this.media.setSrc(src);
		},
		remove: function() {
			var t = this, featureIndex, feature;

			// invoke features cleanup
			for (featureIndex in t.options.features) {
				feature = t.options.features[featureIndex];
				if (t['clean' + feature]) {
					try {
						t['clean' + feature](t);
					} catch (e) {
						// TODO: report control error
						//throw e;
						//console.log('error building ' + feature);
						//console.log(e);
					}
				}
			}

			if (t.media.pluginType === 'native') {
				t.$media.prop('controls', true);
			} else {
				t.media.remove();
			}

			// grab video and put it back in place
			if (!t.isDynamic) {
				if (t.media.pluginType === 'native') {
					// detach events from the video
					// TODO: detach event listeners better than this;
					//       also detach ONLY the events attached by this plugin!
					//t.$node.clone().insertBefore(t.container);
					//t.$node.remove();
				}
				/*else*/ t.$node.insertBefore(t.container)
			}

			// Remove the player from the mejs.players object so that pauseOtherPlayers doesn't blow up when trying to pause a non existance flash api.
			delete mejs.players[t.id];

			t.container.remove();
			t.globalUnbind();
			delete t.node.player;
		}
	};

	(function(){
		var rwindow = /^((after|before)print|(before)?unload|hashchange|message|o(ff|n)line|page(hide|show)|popstate|resize|storage)\b/;

		function splitEvents(events, id) {
			// add player ID as an event namespace so it's easier to unbind them all later
			var ret = {d: [], w: []};
			$.each((events || '').split(' '), function(k, v){
				var eventname = v + '.' + id;
				if (eventname.indexOf('.') === 0) {
					ret.d.push(eventname);
					ret.w.push(eventname);
				}
				else {
					ret[rwindow.test(v) ? 'w' : 'd'].push(eventname);
				}
			});
			ret.d = ret.d.join(' ');
			ret.w = ret.w.join(' ');
			return ret;
		}

		mejs.MediaElementPlayer.prototype.globalBind = function(events, data, callback) {
			var t = this;
			events = splitEvents(events, t.id);
			if (events.d) $(document).bind(events.d, data, callback);
			if (events.w) $(window).bind(events.w, data, callback);
		};

		mejs.MediaElementPlayer.prototype.globalUnbind = function(events, callback) {
			var t = this;
			events = splitEvents(events, t.id);
			if (events.d) $(document).unbind(events.d, callback);
			if (events.w) $(window).unbind(events.w, callback);
		};
	})();

	// turn into jQuery plugin
	if (typeof jQuery != 'undefined') {
		jQuery.fn.mediaelementplayer = function (options) {
			if (options === false) {
				this.each(function () {
					var player = jQuery(this).data('mediaelementplayer');
					if (player) {
						player.remove();
					}
					jQuery(this).removeData('mediaelementplayer');
				});
			}
			else {
				this.each(function () {
					jQuery(this).data('mediaelementplayer', new mejs.MediaElementPlayer(this, options));
				});
			}
			return this;
		};
	}

	$(document).ready(function() {
		// auto enable using JSON attribute
		$('.mejs-player').mediaelementplayer();
	});

	// push out to window
	window.MediaElementPlayer = mejs.MediaElementPlayer;

})(mejs.$);

(function($) {

	$.extend(mejs.MepDefaults, {
		playpauseText: mejs.i18n.t('Play/Pause')
	});

	// PLAY/pause BUTTON
	$.extend(MediaElementPlayer.prototype, {
		buildplaypause: function(player, controls, layers, media) {
			var t = this,
				cover_rotation = $('.music-cover-image'),
				play = 
				$('<div class="mejs-button mejs-playpause-button mejs-play" >' +
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.playpauseText + '" aria-label="' + t.options.playpauseText + '"></button>' +
				'</div>')
				.appendTo(controls)
				.click(function(e) {
					e.preventDefault();

					if (media.paused) {
						media.play();
					} else {
						media.pause();
					}

					return false;
				});

			media.addEventListener('play',function() {
				cover_rotation.addClass('rotation');
				play.removeClass('mejs-play').addClass('mejs-pause');				
			}, false);
			media.addEventListener('playing',function() {
				cover_rotation.addClass('rotation');
				play.removeClass('mejs-play').addClass('mejs-pause');				
			}, false);
			media.addEventListener('pause',function() {
				cover_rotation.removeClass('rotation');
				play.removeClass('mejs-pause').addClass('mejs-play');				
			}, false);
			media.addEventListener('paused',function() {
				cover_rotation.removeClass('rotation');
				play.removeClass('mejs-pause').addClass('mejs-play');				
			}, false);
		}
	});
	
})(mejs.$);

(function($) {

	$.extend(mejs.MepDefaults, {
		stopText: 'Stop'
	});

	// STOP BUTTON
	$.extend(MediaElementPlayer.prototype, {
		buildstop: function(player, controls, layers, media) {
			var t = this,
				stop = 
				$('<div class="mejs-button mejs-stop-button mejs-stop">' +
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.stopText + '" aria-label="' + t.options.stopText + '"></button>' +
				'</div>')
				.appendTo(controls)
				.click(function() {
					if (!media.paused) {
						media.pause();
					}
					if (media.currentTime > 0) {
						media.setCurrentTime(0);
                        media.pause();
						controls.find('.mejs-time-current').width('0px');
						controls.find('.mejs-time-handle').css('left', '0px');
						controls.find('.mejs-time-float-current').html( mejs.Utility.secondsToTimeCode(0) );
						controls.find('.mejs-currenttime').html( mejs.Utility.secondsToTimeCode(0) );					
						layers.find('.mejs-poster').show();
					}
				});
		}
	});
	
})(mejs.$);

(function($) {
	// progress/loaded bar
	$.extend(MediaElementPlayer.prototype, {
		buildprogress: function(player, controls, layers, media) {

			$('<div class="mejs-time-rail">'+
				'<span class="mejs-time-total">'+
					'<span class="mejs-time-buffering"></span>'+
					'<span class="mejs-time-loaded"></span>'+
					'<span class="mejs-time-current"><span class="mejs-time-current-pointer"></span></span>'+
					'<span class="mejs-time-handle"></span>'+
					'<span class="mejs-time-float">' + 
						'<span class="mejs-time-float-current">00:00</span>' + 
						'<span class="mejs-time-float-corner"></span>' + 
					'</span>'+
				'</span>'+
			'</div>')
				.appendTo(controls);
				controls.find('.mejs-time-buffering').hide();
			$('.yn_bg_song').css({'display':'block'});
			var 
				t = this,
				total = controls.find('.mejs-time-total'),
				loaded  = controls.find('.mejs-time-loaded'),
				current  = controls.find('.mejs-time-current'),
				handle  = controls.find('.mejs-time-handle'),
				timefloat  = controls.find('.mejs-time-float'),
				timefloatcurrent  = controls.find('.mejs-time-float-current'),
				handleMouseMove = function (e) {
					// mouse position relative to the object
					var x = e.pageX,
						offset = total.offset(),
						width = total.outerWidth(true),
						percentage = 0,
						newTime = 0,
						pos = 0;


					if (media.duration) {
						if (x < offset.left) {
							x = offset.left;
						} else if (x > width + offset.left) {
							x = width + offset.left;
						}
						
						pos = x - offset.left;
						percentage = (pos / width);
						newTime = (percentage <= 0.02) ? 0 : percentage * media.duration;

						// seek to where the mouse is
						if (mouseIsDown && newTime !== media.currentTime) {
							media.setCurrentTime(newTime);
						}

						// position floating time box
						if (!mejs.MediaFeatures.hasTouch) {
								timefloat.css('left', pos);
								timefloatcurrent.html( mejs.Utility.secondsToTimeCode(newTime) );
								timefloat.show();
						}
					}
				},
				mouseIsDown = false,
				mouseIsOver = false;

			// handle clicks
			//controls.find('.mejs-time-rail').delegate('span', 'click', handleMouseMove);
			total
				.bind('mousedown', function (e) {
					// only handle left clicks
					if (e.which === 1) {
						mouseIsDown = true;
						handleMouseMove(e);
						t.globalBind('mousemove.dur', function(e) {
							handleMouseMove(e);
						});
						t.globalBind('mouseup.dur', function (e) {
							mouseIsDown = false;
							timefloat.hide();
							t.globalUnbind('.dur');
						});
						return false;
					}
				})
				.bind('mouseenter', function(e) {
					mouseIsOver = true;
					t.globalBind('mousemove.dur', function(e) {
						handleMouseMove(e);
					});
					if (!mejs.MediaFeatures.hasTouch) {
						timefloat.show();
					}
				})
				.bind('mouseleave',function(e) {
					mouseIsOver = false;
					if (!mouseIsDown) {
						t.globalUnbind('.dur');
						timefloat.hide();
					}
				});

			// loading
			media.addEventListener('progress', function (e) {
				player.setProgressRail(e);
				player.setCurrentRail(e);
			}, false);

			// current time
			media.addEventListener('timeupdate', function(e) {
				player.setProgressRail(e);
				player.setCurrentRail(e);
			}, false);
			
			
			// store for later use
			t.loaded = loaded;
			t.total = total;
			t.current = current;
			t.handle = handle;
		},
		setProgressRail: function(e) {

			var
				t = this,
				target = (e != undefined) ? e.target : t.media,
				percent = null;			

			// newest HTML5 spec has buffered array (FF4, Webkit)
			if (target && target.buffered && target.buffered.length > 0 && target.buffered.end && target.duration) {
				// TODO: account for a real array with multiple values (only Firefox 4 has this so far) 
				percent = target.buffered.end(0) / target.duration;
			} 
			// Some browsers (e.g., FF3.6 and Safari 5) cannot calculate target.bufferered.end()
			// to be anything other than 0. If the byte count is available we use this instead.
			// Browsers that support the else if do not seem to have the bufferedBytes value and
			// should skip to there. Tested in Safari 5, Webkit head, FF3.6, Chrome 6, IE 7/8.
			else if (target && target.bytesTotal != undefined && target.bytesTotal > 0 && target.bufferedBytes != undefined) {
				percent = target.bufferedBytes / target.bytesTotal;
			}
			// Firefox 3 with an Ogg file seems to go this way
			else if (e && e.lengthComputable && e.total != 0) {
				percent = e.loaded/e.total;
			}

			// finally update the progress bar
			if (percent !== null) {
				percent = Math.min(1, Math.max(0, percent));
				// update loaded bar
				if (t.loaded && t.total) {
					t.loaded.width(t.total.width() * percent);
				}
			}
		},
		setCurrentRail: function() {

			var t = this;
		
			if (t.media.currentTime != undefined && t.media.duration) {

				// update bar and handle
				if (t.total && t.handle) {
					var 
						newWidth = Math.round(t.total.width() * t.media.currentTime / t.media.duration),
						handlePos = newWidth - Math.round(t.handle.outerWidth(true) / 2);

					t.current.width(newWidth);
					t.handle.css('left', handlePos);
				}
			}

		}	
	});
})(mejs.$);

(function($) {
	
	// options
	$.extend(mejs.MepDefaults, {
		duration: -1,
		timeAndDurationSeparator: ' <span> / </span> '
	});


	// current and duration 00:00 / 00:00
	$.extend(MediaElementPlayer.prototype, {
		buildcurrent: function(player, controls, layers, media) {
			var t = this;
			
			$('<div class="mejs-time">'+
					'<span class="mejs-currenttime">' + (player.options.alwaysShowHours ? '00:' : '')
					+ (player.options.showTimecodeFrameCount? '00:00:00':'00:00')+ '</span>'+
					'</div>')
					.appendTo(controls);
			
			t.currenttime = t.controls.find('.mejs-currenttime');

			media.addEventListener('timeupdate',function() {
				player.updateCurrent();
			}, false);
		},


		buildduration: function(player, controls, layers, media) {
			var t = this;
			
			if (controls.children().last().find('.mejs-currenttime').length > 0) {
				$(t.options.timeAndDurationSeparator +
					'<span class="mejs-duration">' + 
						(t.options.duration > 0 ? 
							mejs.Utility.secondsToTimeCode(t.options.duration, t.options.alwaysShowHours || t.media.duration > 3600, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25) :
				   			((player.options.alwaysShowHours ? '00:' : '') + (player.options.showTimecodeFrameCount? '00:00:00':'00:00')) 
				   		) + 
					'</span>')
					.appendTo(controls.find('.mejs-time'));
			} else {

				// add class to current time
				controls.find('.mejs-currenttime').parent().addClass('mejs-currenttime-container');
				
				$('<div class="mejs-time mejs-duration-container">'+
					'<span class="mejs-duration">' + 
						(t.options.duration > 0 ? 
							mejs.Utility.secondsToTimeCode(t.options.duration, t.options.alwaysShowHours || t.media.duration > 3600, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25) :
				   			((player.options.alwaysShowHours ? '00:' : '') + (player.options.showTimecodeFrameCount? '00:00:00':'00:00')) 
				   		) + 
					'</span>' +
				'</div>')
				.appendTo(controls);
			}
			
			t.durationD = t.controls.find('.mejs-duration');

			media.addEventListener('timeupdate',function() {
				player.updateDuration();
			}, false);
		},
		
		updateCurrent:  function() {
			var t = this;

			if (t.currenttime) {
				t.currenttime.html(mejs.Utility.secondsToTimeCode(t.media.currentTime, t.options.alwaysShowHours || t.media.duration > 3600, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25));
			}
		},
		
		updateDuration: function() {
			var t = this;

			//Toggle the long video class if the video is longer than an hour.
			t.container.toggleClass("mejs-long-video", t.media.duration > 3600);
			
			if (t.durationD && (t.options.duration > 0 || t.media.duration)) {
				t.durationD.html(mejs.Utility.secondsToTimeCode(t.options.duration > 0 ? t.options.duration : t.media.duration, t.options.alwaysShowHours, t.options.showTimecodeFrameCount, t.options.framesPerSecond || 25));
			}		
		}
	});

})(mejs.$);

(function($) {

	$.extend(mejs.MepDefaults, {
		muteText: mejs.i18n.t('Mute Toggle'),
		hideVolumeOnTouchDevices: true,
		
		audioVolume: 'horizontal',
		videoVolume: 'vertical'
	});

	$.extend(MediaElementPlayer.prototype, {
		buildvolume: function(player, controls, layers, media) {
				
			// Android and iOS don't support volume controls
			if (mejs.MediaFeatures.hasTouch && this.options.hideVolumeOnTouchDevices)
				return;
			
			var t = this,
				mode = (t.isVideo) ? t.options.videoVolume : t.options.audioVolume,
				mute = (mode == 'horizontal') ?
				
				// horizontal version
				$('<div class="mejs-button mejs-volume-button mejs-mute">'+
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.muteText + '" aria-label="' + t.options.muteText + '"></button>'+
				'</div>' +
				'<div class="mejs-horizontal-volume-slider">'+ // outer background
					'<div class="mejs-horizontal-volume-total"></div>'+ // line background
					'<div class="mejs-horizontal-volume-current"></div>'+ // current volume
					'<div class="mejs-horizontal-volume-handle"></div>'+ // handle
				'</div>'
				)
					.appendTo(controls) :
				
				// vertical version
				$('<div class="mejs-button mejs-volume-button mejs-mute">'+
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.muteText + '" aria-label="' + t.options.muteText + '"></button>'+
					'<div class="mejs-volume-slider">'+ // outer background
						'<div class="mejs-volume-total"></div>'+ // line background
						'<div class="mejs-volume-current"></div>'+ // current volume
						'<div class="mejs-volume-handle"></div>'+ // handle
					'</div>'+
				'</div>')
					.appendTo(controls),
			volumeSlider = t.container.find('.mejs-volume-slider, .mejs-horizontal-volume-slider'),
			volumeTotal = t.container.find('.mejs-volume-total, .mejs-horizontal-volume-total'),
			volumeCurrent = t.container.find('.mejs-volume-current, .mejs-horizontal-volume-current'),
			volumeHandle = t.container.find('.mejs-volume-handle, .mejs-horizontal-volume-handle'),

			positionVolumeHandle = function(volume, secondTry) {

				if (!volumeSlider.is(':visible') && typeof secondTry == 'undefined') {
					volumeSlider.show();
					positionVolumeHandle(volume, true);
					volumeSlider.hide()
					return;
				}
			
				// correct to 0-1
				volume = Math.max(0,volume);
				volume = Math.min(volume,1);					
				
				// ajust mute button style
				if (volume == 0) {
					mute.removeClass('mejs-mute').addClass('mejs-unmute');
				} else {
					mute.removeClass('mejs-unmute').addClass('mejs-mute');
				}				

				// position slider 
				if (mode == 'vertical') {
					var 
					
						// height of the full size volume slider background
						totalHeight = volumeTotal.height(),
						
						// top/left of full size volume slider background
						totalPosition = volumeTotal.position(),
						
						// the new top position based on the current volume
						// 70% volume on 100px height == top:30px
						newTop = totalHeight - (totalHeight * volume);
	
					// handle
					volumeHandle.css('top', Math.round(totalPosition.top + newTop - (volumeHandle.height() / 2)));
	
					// show the current visibility
					volumeCurrent.height(totalHeight - newTop );
					volumeCurrent.css('top', totalPosition.top + newTop);
				} else {
					var 
					
						// height of the full size volume slider background
						totalWidth = volumeTotal.width(),
						
						// top/left of full size volume slider background
						totalPosition = volumeTotal.position(),
						
						// the new left position based on the current volume
						newLeft = totalWidth * volume;
	
					// handle
					volumeHandle.css('left', Math.round(totalPosition.left + newLeft - (volumeHandle.width() / 2)));
	
					// rezize the current part of the volume bar
					volumeCurrent.width( Math.round(newLeft) );
				}
			},
			handleVolumeMove = function(e) {
				
				var volume = null,
					totalOffset = volumeTotal.offset();
				
				// calculate the new volume based on the moust position
				if (mode == 'vertical') {
				
					var
						railHeight = volumeTotal.height(),
						totalTop = parseInt(volumeTotal.css('top').replace(/px/,''),10),
						newY = e.pageY - totalOffset.top;
						
					volume = (railHeight - newY) / railHeight;
						
					// the controls just hide themselves (usually when mouse moves too far up)
					if (totalOffset.top == 0 || totalOffset.left == 0)
						return;
					
				} else {
					var
						railWidth = volumeTotal.width(),
						newX = e.pageX - totalOffset.left;
						
					volume = newX / railWidth;
				}
				
				// ensure the volume isn't outside 0-1
				volume = Math.max(0,volume);
				volume = Math.min(volume,1);
				
				// position the slider and handle			
				positionVolumeHandle(volume);
				
				// set the media object (this will trigger the volumechanged event)
				if (volume == 0) {
					media.setMuted(true);
				} else {
					media.setMuted(false);
				}
				media.setVolume(volume);			
			},
			mouseIsDown = false,
			mouseIsOver = false;

			// SLIDER
			
			mute
				.hover(function() {
					volumeSlider.show();
					mouseIsOver = true;
				}, function() {
					mouseIsOver = false;	
						
					if (!mouseIsDown && mode == 'vertical')	{
						volumeSlider.hide();
					}
				});
			
			volumeSlider
				.bind('mouseover', function() {
					mouseIsOver = true;	
				})
				.bind('mousedown', function (e) {
					handleVolumeMove(e);
					t.globalBind('mousemove.vol', function(e) {
						handleVolumeMove(e);
					});
					t.globalBind('mouseup.vol', function () {
						mouseIsDown = false;
						t.globalUnbind('.vol');

						if (!mouseIsOver && mode == 'vertical') {
							volumeSlider.hide();
						}
					});
					mouseIsDown = true;
						
					return false;
				});


			// MUTE button
			mute.find('button').click(function() {
				media.setMuted( !media.muted );
			});

			// listen for volume change events from other sources
			media.addEventListener('volumechange', function(e) {
				if (!mouseIsDown) {
					if (media.muted) {
						positionVolumeHandle(0);
						mute.removeClass('mejs-mute').addClass('mejs-unmute');
					} else {
						positionVolumeHandle(media.volume);
						mute.removeClass('mejs-unmute').addClass('mejs-mute');
					}
				}
			}, false);

			if (t.container.is(':visible')) {
				// set initial volume
				positionVolumeHandle(player.options.startVolume);

				// mutes the media and sets the volume icon muted if the initial volume is set to 0
        if (player.options.startVolume === 0) {
          media.setMuted(true);
        }

				// shim gets the startvolume as a parameter, but we have to set it on the native <video> and <audio> elements
				if (media.pluginType === 'native') {
					media.setVolume(player.options.startVolume);
				}
			}
		}
	});
	
})(mejs.$);

(function($) {

	$.extend(mejs.MepDefaults, {
		usePluginFullScreen: true,
		newWindowCallback: function() { return '';},
		fullscreenText: mejs.i18n.t('Fullscreen')
	});

	$.extend(MediaElementPlayer.prototype, {

		isFullScreen: false,

		isNativeFullScreen: false,

		docStyleOverflow: null,

		isInIframe: false,

		buildfullscreen: function(player, controls, layers, media) {

			if (!player.isVideo)
				return;

			player.isInIframe = (window.location != window.parent.location);

			// native events
			if (mejs.MediaFeatures.hasTrueNativeFullScreen) {

				// chrome doesn't alays fire this in an iframe
				var func = function(e) {

					if (mejs.MediaFeatures.isFullScreen()) {
						player.isNativeFullScreen = true;
						// reset the controls once we are fully in full screen
						player.setControlsSize();
					} else {
						player.isNativeFullScreen = false;
						// when a user presses ESC
						// make sure to put the player back into place
						player.exitFullScreen();
					}
				};

				if (mejs.MediaFeatures.hasMozNativeFullScreen) {
					player.globalBind(mejs.MediaFeatures.fullScreenEventName, func);
				} else {
					player.container.bind(mejs.MediaFeatures.fullScreenEventName, func);
				}
			}

			var t = this,
				normalHeight = 0,
				normalWidth = 0,
				container = player.container,
				fullscreenBtn =
					$('<div class="mejs-button mejs-fullscreen-button">' +
						'<button type="button" aria-controls="' + t.id + '" title="' + t.options.fullscreenText + '" aria-label="' + t.options.fullscreenText + '"></button>' +
					'</div>')
					.appendTo(controls);

				if (t.media.pluginType === 'native' || (!t.options.usePluginFullScreen && !mejs.MediaFeatures.isFirefox)) {

					fullscreenBtn.click(function() {
						var isFullScreen = (mejs.MediaFeatures.hasTrueNativeFullScreen && mejs.MediaFeatures.isFullScreen()) || player.isFullScreen;

						if (isFullScreen) {
							player.exitFullScreen();
						} else {
							player.enterFullScreen();
						}
					});

				} else {

					var hideTimeout = null,
						supportsPointerEvents = (function() {
							// TAKEN FROM MODERNIZR
							var element = document.createElement('x'),
								documentElement = document.documentElement,
								getComputedStyle = window.getComputedStyle,
								supports;
							if(!('pointerEvents' in element.style)){
								return false;
							}
							element.style.pointerEvents = 'auto';
							element.style.pointerEvents = 'x';
							documentElement.appendChild(element);
							supports = getComputedStyle &&
								getComputedStyle(element, '').pointerEvents === 'auto';
							documentElement.removeChild(element);
							return !!supports;
						})();

					//console.log('supportsPointerEvents', supportsPointerEvents);

					if (supportsPointerEvents && !mejs.MediaFeatures.isOpera) { // opera doesn't allow this :(

						// allows clicking through the fullscreen button and controls down directly to Flash

						/*
						 When a user puts his mouse over the fullscreen button, the controls are disabled
						 So we put a div over the video and another one on iether side of the fullscreen button
						 that caputre mouse movement
						 and restore the controls once the mouse moves outside of the fullscreen button
						*/

						var fullscreenIsDisabled = false,
							restoreControls = function() {
								if (fullscreenIsDisabled) {
									// hide the hovers
									for (var i in hoverDivs) {
										hoverDivs[i].hide();
									}

									// restore the control bar
									fullscreenBtn.css('pointer-events', '');
									t.controls.css('pointer-events', '');

									// prevent clicks from pausing video
									t.media.removeEventListener('click', t.clickToPlayPauseCallback);

									// store for later
									fullscreenIsDisabled = false;
								}
							},
							hoverDivs = {},
							hoverDivNames = ['top', 'left', 'right', 'bottom'],
							i, len,
							positionHoverDivs = function() {
								var fullScreenBtnOffsetLeft = fullscreenBtn.offset().left - t.container.offset().left,
									fullScreenBtnOffsetTop = fullscreenBtn.offset().top - t.container.offset().top,
									fullScreenBtnWidth = fullscreenBtn.outerWidth(true),
									fullScreenBtnHeight = fullscreenBtn.outerHeight(true),
									containerWidth = t.container.width(),
									containerHeight = t.container.height();

								for (i in hoverDivs) {
									hoverDivs[i].css({position: 'absolute', top: 0, left: 0}); //, backgroundColor: '#f00'});
								}

								// over video, but not controls
								hoverDivs['top']
									.width( containerWidth )
									.height( fullScreenBtnOffsetTop );

								// over controls, but not the fullscreen button
								hoverDivs['left']
									.width( fullScreenBtnOffsetLeft )
									.height( fullScreenBtnHeight )
									.css({top: fullScreenBtnOffsetTop});

								// after the fullscreen button
								hoverDivs['right']
									.width( containerWidth - fullScreenBtnOffsetLeft - fullScreenBtnWidth )
									.height( fullScreenBtnHeight )
									.css({top: fullScreenBtnOffsetTop,
										 left: fullScreenBtnOffsetLeft + fullScreenBtnWidth});

								// under the fullscreen button
								hoverDivs['bottom']
									.width( containerWidth )
									.height( containerHeight - fullScreenBtnHeight - fullScreenBtnOffsetTop )
									.css({top: fullScreenBtnOffsetTop + fullScreenBtnHeight});
							};

						t.globalBind('resize', function() {
							positionHoverDivs();
						});

						for (i = 0, len = hoverDivNames.length; i < len; i++) {
							hoverDivs[hoverDivNames[i]] = $('<div class="mejs-fullscreen-hover" />').appendTo(t.container).mouseover(restoreControls).hide();
						}

						// on hover, kill the fullscreen button's HTML handling, allowing clicks down to Flash
						fullscreenBtn.on('mouseover',function() {

							if (!t.isFullScreen) {

								var buttonPos = fullscreenBtn.offset(),
									containerPos = player.container.offset();

								// move the button in Flash into place
								media.positionFullscreenButton(buttonPos.left - containerPos.left, buttonPos.top - containerPos.top, false);

								// allows click through
								fullscreenBtn.css('pointer-events', 'none');
								t.controls.css('pointer-events', 'none');

								// restore click-to-play
								t.media.addEventListener('click', t.clickToPlayPauseCallback);

								// show the divs that will restore things
								for (i in hoverDivs) {
									hoverDivs[i].show();
								}

								positionHoverDivs();

								fullscreenIsDisabled = true;
							}

						});

						// restore controls anytime the user enters or leaves fullscreen
						media.addEventListener('fullscreenchange', function(e) {
							t.isFullScreen = !t.isFullScreen;
							// don't allow plugin click to pause video - messes with
							// plugin's controls
							if (t.isFullScreen) {
								t.media.removeEventListener('click', t.clickToPlayPauseCallback);
							} else {
								t.media.addEventListener('click', t.clickToPlayPauseCallback);
							}
							restoreControls();
						});


						// the mouseout event doesn't work on the fullscren button, because we already killed the pointer-events
						// so we use the document.mousemove event to restore controls when the mouse moves outside the fullscreen button

						t.globalBind('mousemove', function(e) {

							// if the mouse is anywhere but the fullsceen button, then restore it all
							if (fullscreenIsDisabled) {

								var fullscreenBtnPos = fullscreenBtn.offset();


								if (e.pageY < fullscreenBtnPos.top || e.pageY > fullscreenBtnPos.top + fullscreenBtn.outerHeight(true) ||
									e.pageX < fullscreenBtnPos.left || e.pageX > fullscreenBtnPos.left + fullscreenBtn.outerWidth(true)
									) {

									fullscreenBtn.css('pointer-events', '');
									t.controls.css('pointer-events', '');

									fullscreenIsDisabled = false;
								}
							}
						});



					} else {

						// the hover state will show the fullscreen button in Flash to hover up and click

						fullscreenBtn
							.on('mouseover', function() {

								if (hideTimeout !== null) {
									clearTimeout(hideTimeout);
									delete hideTimeout;
								}

								var buttonPos = fullscreenBtn.offset(),
									containerPos = player.container.offset();

								media.positionFullscreenButton(buttonPos.left - containerPos.left, buttonPos.top - containerPos.top, true);

							})
							.on('mouseout', function() {

								if (hideTimeout !== null) {
									clearTimeout(hideTimeout);
									delete hideTimeout;
								}

								hideTimeout = setTimeout(function() {
									media.hideFullscreenButton();
								}, 1500);


							});
					}
				}

			player.fullscreenBtn = fullscreenBtn;

			t.globalBind('keydown',function (e) {
				if (((mejs.MediaFeatures.hasTrueNativeFullScreen && mejs.MediaFeatures.isFullScreen()) || t.isFullScreen) && e.keyCode == 27) {
					player.exitFullScreen();
				}
			});

		},

		cleanfullscreen: function(player) {
			player.exitFullScreen();
		},

        containerSizeTimeout: null,

		enterFullScreen: function() {

			var t = this;

			// firefox+flash can't adjust plugin sizes without resetting :(
			if (t.media.pluginType !== 'native' && (mejs.MediaFeatures.isFirefox || t.options.usePluginFullScreen)) {
				//t.media.setFullscreen(true);
				//player.isFullScreen = true;
				return;
			}

			// store overflow
			docStyleOverflow = document.documentElement.style.overflow;
			// set it to not show scroll bars so 100% will work
			document.documentElement.style.overflow = 'hidden';

			// store sizing
			normalHeight = t.container.height();
			normalWidth = t.container.width();

			// attempt to do true fullscreen (Safari 5.1 and Firefox Nightly only for now)
			if (t.media.pluginType === 'native') {
				if (mejs.MediaFeatures.hasTrueNativeFullScreen) {

					mejs.MediaFeatures.requestFullScreen(t.container[0]);
					//return;

					if (t.isInIframe) {
						// sometimes exiting from fullscreen doesn't work
						// notably in Chrome <iframe>. Fixed in version 17
						setTimeout(function checkFullscreen() {

							if (t.isNativeFullScreen) {

								// check if the video is suddenly not really fullscreen
								if ($(window).width() !== screen.width) {
									// manually exit
									t.exitFullScreen();
								} else {
									// test again
									setTimeout(checkFullscreen, 500);
								}
							}


						}, 500);
					}

				} else if (mejs.MediaFeatures.hasSemiNativeFullScreen) {
					t.media.webkitEnterFullscreen();
					return;
				}
			}

			// check for iframe launch
			if (t.isInIframe) {
				var url = t.options.newWindowCallback(this);


				if (url !== '') {

					// launch immediately
					if (!mejs.MediaFeatures.hasTrueNativeFullScreen) {
						t.pause();
						window.open(url, t.id, 'top=0,left=0,width=' + screen.availWidth + ',height=' + screen.availHeight + ',resizable=yes,scrollbars=no,status=no,toolbar=no');
						return;
					} else {
						setTimeout(function() {
							if (!t.isNativeFullScreen) {
								t.pause();
								window.open(url, t.id, 'top=0,left=0,width=' + screen.availWidth + ',height=' + screen.availHeight + ',resizable=yes,scrollbars=no,status=no,toolbar=no');
							}
						}, 250);
					}
				}

			}

			// full window code



			// make full size
			t.container
				.addClass('mejs-container-fullscreen')
				.width('100%')
				.height('100%');
				//.css({position: 'fixed', left: 0, top: 0, right: 0, bottom: 0, overflow: 'hidden', width: '100%', height: '100%', 'z-index': 1000});

			// Only needed for safari 5.1 native full screen, can cause display issues elsewhere
			// Actually, it seems to be needed for IE8, too
			//if (mejs.MediaFeatures.hasTrueNativeFullScreen) {
				t.containerSizeTimeout = setTimeout(function() {
					t.container.css({width: '100%', height: '100%'});
					t.setControlsSize();
				}, 500);
			//}

			if (t.media.pluginType === 'native') {
				t.$media
					.width('100%')
					.height('100%');
			} else {
				t.container.find('.mejs-shim')
					.width('100%')
					.height('100%');

				//if (!mejs.MediaFeatures.hasTrueNativeFullScreen) {
					t.media.setVideoSize($(window).width(),$(window).height());
				//}
			}

			t.layers.children('div')
				.width('100%')
				.height('100%');

			if (t.fullscreenBtn) {
				t.fullscreenBtn
					.removeClass('mejs-fullscreen')
					.addClass('mejs-unfullscreen');
			}

			t.setControlsSize();
			t.isFullScreen = true;
		},

		exitFullScreen: function() {

			var t = this;

            // Prevent container from attempting to stretch a second time
            clearTimeout(t.containerSizeTimeout);

			// firefox can't adjust plugins
			if (t.media.pluginType !== 'native' && mejs.MediaFeatures.isFirefox) {
				t.media.setFullscreen(false);
				//player.isFullScreen = false;
				return;
			}

			// come outo of native fullscreen
			if (mejs.MediaFeatures.hasTrueNativeFullScreen && (mejs.MediaFeatures.isFullScreen() || t.isFullScreen)) {
				mejs.MediaFeatures.cancelFullScreen();
			}

			// restore scroll bars to document
			document.documentElement.style.overflow = docStyleOverflow;

			t.container
				.removeClass('mejs-container-fullscreen')
				.width(normalWidth)
				.height(normalHeight);
				//.css({position: '', left: '', top: '', right: '', bottom: '', overflow: 'inherit', width: normalWidth + 'px', height: normalHeight + 'px', 'z-index': 1});

			if (t.media.pluginType === 'native') {
				t.$media
					.width(normalWidth)
					.height(normalHeight);
			} else {
				t.container.find('.mejs-shim')
					.width(normalWidth)
					.height(normalHeight);

				t.media.setVideoSize(normalWidth, normalHeight);
			}

			t.layers.children('div')
				.width(normalWidth)
				.height(normalHeight);

			t.fullscreenBtn
				.removeClass('mejs-unfullscreen')
				.addClass('mejs-fullscreen');

			t.setControlsSize();
			t.isFullScreen = false;
		}
	});

})(mejs.$);

(function($) {

	// add extra default options 
	$.extend(mejs.MepDefaults, {
		// this will automatically turn on a <track>
		startLanguage: '',

		tracksText: mejs.i18n.t('Captions/Subtitles'),
		
		// option to remove the [cc] button when no <track kind="subtitles"> are present
		hideCaptionsButtonWhenEmpty: true,

		// If true and we only have one track, change captions to popup
		toggleCaptionsButtonWhenOnlyOne: false,

		// #id or .class		
		slidesSelector: ''
	});

	$.extend(MediaElementPlayer.prototype, {
	
		hasChapters: false,

		buildtracks: function(player, controls, layers, media) {
			if (player.tracks.length == 0)
				return;

			var t = this, 
				i, 
				options = '';

			player.chapters = 
					$('<div class="mejs-chapters mejs-layer"></div>')
						.prependTo(layers).hide();
			player.captions = 
					$('<div class="mejs-captions-layer mejs-layer"><div class="mejs-captions-position mejs-captions-position-hover"><span class="mejs-captions-text"></span></div></div>')
						.prependTo(layers).hide();
			player.captionsText = player.captions.find('.mejs-captions-text');
			player.captionsButton = 
					$('<div class="mejs-button mejs-captions-button">'+
						'<button type="button" aria-controls="' + t.id + '" title="' + t.options.tracksText + '" aria-label="' + t.options.tracksText + '"></button>'+
						'<div class="mejs-captions-selector">'+
							'<ul>'+
								'<li>'+
									'<input type="radio" name="' + player.id + '_captions" id="' + player.id + '_captions_none" value="none" checked="checked" />' +
									'<label for="' + player.id + '_captions_none">' + mejs.i18n.t('None') +'</label>'+
								'</li>'	+
							'</ul>'+
						'</div>'+
					'</div>')
						.appendTo(controls);
			
						
			var subtitleCount = 0;
			for (i=0; i<player.tracks.length; i++) {
				if (player.tracks[i].kind == 'subtitles') {
					subtitleCount++;
				}
			}

			// if only one language then just make the button a toggle
			if (t.options.toggleCaptionsButtonWhenOnlyOne && subtitleCount == 1){
				// click
				player.captionsButton.on('click',function() {
					if (player.selectedTrack == null) {
						var lang = player.tracks[0].srclang;
					} else {
						var lang = 'none';
					}
					player.setTrack(lang);
				});
			} else {
				// hover
				player.captionsButton.hover(function() {
					$(this).find('.mejs-captions-selector').css('visibility','visible');
				}, function() {
					$(this).find('.mejs-captions-selector').css('visibility','hidden');
				})

				// handle clicks to the language radio buttons
				.on('click','input[type=radio]',function() {
					lang = this.value;
					player.setTrack(lang);
				});

			}

			if (!player.options.alwaysShowControls) {
				// move with controls
				player.container
					.bind('controlsshown', function () {
						// push captions above controls
						player.container.find('.mejs-captions-position').addClass('mejs-captions-position-hover');

					})
					.bind('controlshidden', function () {
						if (!media.paused) {
							// move back to normal place
							player.container.find('.mejs-captions-position').removeClass('mejs-captions-position-hover');
						}
					});
			} else {
				player.container.find('.mejs-captions-position').addClass('mejs-captions-position-hover');
			}

			player.trackToLoad = -1;
			player.selectedTrack = null;
			player.isLoadingTrack = false;

			

			// add to list
			for (i=0; i<player.tracks.length; i++) {
				if (player.tracks[i].kind == 'subtitles') {
					player.addTrackButton(player.tracks[i].srclang, player.tracks[i].label);
				}
			}

			// start loading tracks
			player.loadNextTrack();


			media.addEventListener('timeupdate',function(e) {
				player.displayCaptions();
			}, false);
			
			if (player.options.slidesSelector != '') {
				player.slidesContainer = $(player.options.slidesSelector);

				media.addEventListener('timeupdate',function(e) {
					player.displaySlides();	
				}, false);
			
			}

			media.addEventListener('loadedmetadata', function(e) {
				player.displayChapters();
			}, false);

			player.container.hover(
				function () {
					// chapters
					if (player.hasChapters) {
						player.chapters.css('visibility','visible');
						player.chapters.fadeIn(200).height(player.chapters.find('.mejs-chapter').outerHeight());
					}
				},
				function () {
					if (player.hasChapters && !media.paused) {
						player.chapters.fadeOut(200, function() {
							$(this).css('visibility','hidden');
							$(this).css('display','block');
						});
					}
				});
				
			// check for autoplay
			if (player.node.getAttribute('autoplay') !== null) {
				player.chapters.css('visibility','hidden');
			}
		},
		
		setTrack: function(lang){
		
			var t = this,
				i;
		
			if (lang == 'none') {
				t.selectedTrack = null;
				t.captionsButton.removeClass('mejs-captions-enabled');
			} else {
				for (i=0; i<t.tracks.length; i++) {
					if (t.tracks[i].srclang == lang) {
						if (t.selectedTrack == null)
						    t.captionsButton.addClass('mejs-captions-enabled');
						t.selectedTrack = t.tracks[i];
						t.captions.attr('lang', t.selectedTrack.srclang);
						t.displayCaptions();
						break;
					}
				}
			}
		},

		loadNextTrack: function() {
			var t = this;

			t.trackToLoad++;
			if (t.trackToLoad < t.tracks.length) {
				t.isLoadingTrack = true;
				t.loadTrack(t.trackToLoad);
			} else {
				// add done?
				t.isLoadingTrack = false;
				
				t.checkForTracks();	
			}
		},

		loadTrack: function(index){
			var
				t = this,
				track = t.tracks[index],
				after = function() {

					track.isLoaded = true;

					// create button
					//t.addTrackButton(track.srclang);
					t.enableTrackButton(track.srclang, track.label);

					t.loadNextTrack();

				};


			$.ajax({
				url: track.src,
				dataType: "text",
				success: function(d) {

					// parse the loaded file
					if (typeof d == "string" && (/<tt\s+xml/ig).exec(d)) {
						track.entries = mejs.TrackFormatParser.dfxp.parse(d);					
					} else {	
						track.entries = mejs.TrackFormatParser.webvvt.parse(d);
					}
					
					after();

					if (track.kind == 'chapters') {
						t.media.addEventListener('play', function(e) {
							if (t.media.duration > 0) {
								t.displayChapters(track);
							}
						}, false);
					}
					
					if (track.kind == 'slides') {
						t.setupSlides(track);
					}					
				},
				error: function() {
					t.loadNextTrack();
				}
			});
		},

		enableTrackButton: function(lang, label) {
			var t = this;
			
			if (label === '') {
				label = mejs.language.codes[lang] || lang;
			}			

			t.captionsButton
				.find('input[value=' + lang + ']')
					.prop('disabled',false)
				.siblings('label')
					.html( label );

			// auto select
			if (t.options.startLanguage == lang) {
				$('#' + t.id + '_captions_' + lang).click();
			}

			t.adjustLanguageBox();
		},

		addTrackButton: function(lang, label) {
			var t = this;
			if (label === '') {
				label = mejs.language.codes[lang] || lang;
			}

			t.captionsButton.find('ul').append(
				$('<li>'+
					'<input type="radio" name="' + t.id + '_captions" id="' + t.id + '_captions_' + lang + '" value="' + lang + '" disabled="disabled" />' +
					'<label for="' + t.id + '_captions_' + lang + '">' + label + ' (loading)' + '</label>'+
				'</li>')
			);

			t.adjustLanguageBox();

			// remove this from the dropdownlist (if it exists)
			t.container.find('.mejs-captions-translations option[value=' + lang + ']').remove();
		},

		adjustLanguageBox:function() {
			var t = this;
			// adjust the size of the outer box
			t.captionsButton.find('.mejs-captions-selector').height(
				t.captionsButton.find('.mejs-captions-selector ul').outerHeight(true) +
				t.captionsButton.find('.mejs-captions-translations').outerHeight(true)
			);
		},
		
		checkForTracks: function() {
			var
				t = this,
				hasSubtitles = false;
			
			// check if any subtitles
			if (t.options.hideCaptionsButtonWhenEmpty) {
				for (i=0; i<t.tracks.length; i++) {
					if (t.tracks[i].kind == 'subtitles') {
						hasSubtitles = true;
						break;
					}
				}	
					
				if (!hasSubtitles) {
					t.captionsButton.hide();
					t.setControlsSize();
				}													
			}		
		},

		displayCaptions: function() {

			if (typeof this.tracks == 'undefined')
				return;

			var
				t = this,
				i,
				track = t.selectedTrack;

			if (track != null && track.isLoaded) {
				for (i=0; i<track.entries.times.length; i++) {
					if (t.media.currentTime >= track.entries.times[i].start && t.media.currentTime <= track.entries.times[i].stop){
						t.captionsText.html(track.entries.text[i]);
						t.captions.show().height(0);
						return; // exit out if one is visible;
					}
				}
				t.captions.hide();
			} else {
				t.captions.hide();
			}
		},
		
		setupSlides: function(track) {
			var t = this;
				
			t.slides = track;
			t.slides.entries.imgs = [t.slides.entries.text.length];
			t.showSlide(0);
			
		},
		
		showSlide: function(index) {
			if (typeof this.tracks == 'undefined' || typeof this.slidesContainer == 'undefined') {
				return;			
			}
								
			var t = this,
				url = t.slides.entries.text[index],
				img = t.slides.entries.imgs[index];
				
			if (typeof img == 'undefined' || typeof img.fadeIn == 'undefined') {

				t.slides.entries.imgs[index] = img = $('<img src="' + url + '">')
						.on('load', function() {
							img.appendTo(t.slidesContainer)
								.hide()
								.fadeIn()
								.siblings(':visible')
									.fadeOut();							
						
						});
			
			} else {
			
				if (!img.is(':visible') && !img.is(':animated')) {
				
					console.log('showing existing slide');			
					
					img.fadeIn()
						.siblings(':visible')
							.fadeOut();			
				}
			}
				
		},
		
		displaySlides: function() {
		
			if (typeof this.slides == 'undefined')
				return;	
				
			var 
				t = this,
				slides = t.slides,
				i;				
		
			for (i=0; i<slides.entries.times.length; i++) {
				if (t.media.currentTime >= slides.entries.times[i].start && t.media.currentTime <= slides.entries.times[i].stop){
				
					t.showSlide(i);
					
					return; // exit out if one is visible;
				}
			}
		},

		displayChapters: function() {
			var 
				t = this,
				i;

			for (i=0; i<t.tracks.length; i++) {
				if (t.tracks[i].kind == 'chapters' && t.tracks[i].isLoaded) {
					t.drawChapters(t.tracks[i]);
					t.hasChapters = true;
					break;
				}
			}
		},

		drawChapters: function(chapters) {
			var 
				t = this,
				i,
				dur,
				//width,
				//left,
				percent = 0,
				usedPercent = 0;

			t.chapters.empty();

			for (i=0; i<chapters.entries.times.length; i++) {
				dur = chapters.entries.times[i].stop - chapters.entries.times[i].start;
				percent = Math.floor(dur / t.media.duration * 100);
				if (percent + usedPercent > 100 || // too large
					i == chapters.entries.times.length-1 && percent + usedPercent < 100) // not going to fill it in
					{
					percent = 100 - usedPercent;
				}
				//width = Math.floor(t.width * dur / t.media.duration);
				//left = Math.floor(t.width * chapters.entries.times[i].start / t.media.duration);
				//if (left + width > t.width) {
				//	width = t.width - left;
				//}

				t.chapters.append( $(
					'<div class="mejs-chapter" rel="' + chapters.entries.times[i].start + '" style="left: ' + usedPercent.toString() + '%;width: ' + percent.toString() + '%;">' + 
						'<div class="mejs-chapter-block' + ((i==chapters.entries.times.length-1) ? ' mejs-chapter-block-last' : '') + '">' + 
							'<span class="ch-title">' + chapters.entries.text[i] + '</span>' + 
							'<span class="ch-time">' + mejs.Utility.secondsToTimeCode(chapters.entries.times[i].start) + '&ndash;' + mejs.Utility.secondsToTimeCode(chapters.entries.times[i].stop) + '</span>' + 
						'</div>' +
					'</div>'));
				usedPercent += percent;
			}

			t.chapters.find('div.mejs-chapter').click(function() {
				t.media.setCurrentTime( parseFloat( $(this).attr('rel') ) );
				if (t.media.paused) {
					t.media.play(); 
				}
			});

			t.chapters.show();
		}
	});



	mejs.language = {
		codes:  {
			af:'Afrikaans',
			sq:'Albanian',
			ar:'Arabic',
			be:'Belarusian',
			bg:'Bulgarian',
			ca:'Catalan',
			zh:'Chinese',
			'zh-cn':'Chinese Simplified',
			'zh-tw':'Chinese Traditional',
			hr:'Croatian',
			cs:'Czech',
			da:'Danish',
			nl:'Dutch',
			en:'English',
			et:'Estonian',
			tl:'Filipino',
			fi:'Finnish',
			fr:'French',
			gl:'Galician',
			de:'German',
			el:'Greek',
			ht:'Haitian Creole',
			iw:'Hebrew',
			hi:'Hindi',
			hu:'Hungarian',
			is:'Icelandic',
			id:'Indonesian',
			ga:'Irish',
			it:'Italian',
			ja:'Japanese',
			ko:'Korean',
			lv:'Latvian',
			lt:'Lithuanian',
			mk:'Macedonian',
			ms:'Malay',
			mt:'Maltese',
			no:'Norwegian',
			fa:'Persian',
			pl:'Polish',
			pt:'Portuguese',
			//'pt-pt':'Portuguese (Portugal)',
			ro:'Romanian',
			ru:'Russian',
			sr:'Serbian',
			sk:'Slovak',
			sl:'Slovenian',
			es:'Spanish',
			sw:'Swahili',
			sv:'Swedish',
			tl:'Tagalog',
			th:'Thai',
			tr:'Turkish',
			uk:'Ukrainian',
			vi:'Vietnamese',
			cy:'Welsh',
			yi:'Yiddish'
		}
	};

	/*
	Parses WebVVT format which should be formatted as
	================================
	WEBVTT
	
	1
	00:00:01,1 --> 00:00:05,000
	A line of text

	2
	00:01:15,1 --> 00:02:05,000
	A second line of text
	
	===============================

	Adapted from: http://www.delphiki.com/html5/playr
	*/
	mejs.TrackFormatParser = {
		webvvt: {
			// match start "chapter-" (or anythingelse)
			pattern_identifier: /^([a-zA-z]+-)?[0-9]+$/,
			pattern_timecode: /^([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{1,3})?) --\> ([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{3})?)(.*)$/,

			parse: function(trackText) {
				var 
					i = 0,
					lines = mejs.TrackFormatParser.split2(trackText, /\r?\n/),
					entries = {text:[], times:[]},
					timecode,
					text;
				for(; i<lines.length; i++) {
					// check for the line number
					if (this.pattern_identifier.exec(lines[i])){
						// skip to the next line where the start --> end time code should be
						i++;
						timecode = this.pattern_timecode.exec(lines[i]);				

						if (timecode && i<lines.length){
							i++;
							// grab all the (possibly multi-line) text that follows
							text = lines[i];
							i++;
							while(lines[i] !== '' && i<lines.length){
								text = text + '\n' + lines[i];
								i++;
							}
							text = $.trim(text).replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig, "<a href='$1' target='_blank'>$1</a>");
							// Text is in a different array so I can use .join
							entries.text.push(text);
							entries.times.push(
							{
								start: (mejs.Utility.convertSMPTEtoSeconds(timecode[1]) == 0) ? 0.200 : mejs.Utility.convertSMPTEtoSeconds(timecode[1]),
								stop: mejs.Utility.convertSMPTEtoSeconds(timecode[3]),
								settings: timecode[5]
							});
						}
					}
				}
				return entries;
			}
		},
		// Thanks to Justin Capella: https://github.com/johndyer/mediaelement/pull/420
		dfxp: {
			parse: function(trackText) {
				trackText = $(trackText).filter("tt");
				var 
					i = 0,
					container = trackText.children("div").eq(0),
					lines = container.find("p"),
					styleNode = trackText.find("#" + container.attr("style")),
					styles,
					begin,
					end,
					text,
					entries = {text:[], times:[]};


				if (styleNode.length) {
					var attributes = styleNode.removeAttr("id").get(0).attributes;
					if (attributes.length) {
						styles = {};
						for (i = 0; i < attributes.length; i++) {
							styles[attributes[i].name.split(":")[1]] = attributes[i].value;
						}
					}
				}

				for(i = 0; i<lines.length; i++) {
					var style;
					var _temp_times = {
						start: null,
						stop: null,
						style: null
					};
					if (lines.eq(i).attr("begin")) _temp_times.start = mejs.Utility.convertSMPTEtoSeconds(lines.eq(i).attr("begin"));
					if (!_temp_times.start && lines.eq(i-1).attr("end")) _temp_times.start = mejs.Utility.convertSMPTEtoSeconds(lines.eq(i-1).attr("end"));
					if (lines.eq(i).attr("end")) _temp_times.stop = mejs.Utility.convertSMPTEtoSeconds(lines.eq(i).attr("end"));
					if (!_temp_times.stop && lines.eq(i+1).attr("begin")) _temp_times.stop = mejs.Utility.convertSMPTEtoSeconds(lines.eq(i+1).attr("begin"));
					if (styles) {
						style = "";
						for (var _style in styles) {
							style += _style + ":" + styles[_style] + ";";					
						}
					}
					if (style) _temp_times.style = style;
					if (_temp_times.start == 0) _temp_times.start = 0.200;
					entries.times.push(_temp_times);
					text = $.trim(lines.eq(i).html()).replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig, "<a href='$1' target='_blank'>$1</a>");
					entries.text.push(text);
					if (entries.times.start == 0) entries.times.start = 2;
				}
				return entries;
			}
		},
		split2: function (text, regex) {
			// normal version for compliant browsers
			// see below for IE fix
			return text.split(regex);
		}
	};
	
	// test for browsers with bad String.split method.
	if ('x\n\ny'.split(/\n/gi).length != 3) {
		// add super slow IE8 and below version
		mejs.TrackFormatParser.split2 = function(text, regex) {
			var 
				parts = [], 
				chunk = '',
				i;

			for (i=0; i<text.length; i++) {
				chunk += text.substring(i,i+1);
				if (regex.test(chunk)) {
					parts.push(chunk.replace(regex, ''));
					chunk = '';
				}
			}
			parts.push(chunk);
			return parts;
		}
	}	

})(mejs.$);

/*
* ContextMenu Plugin
* 
*
*/

(function($) {

$.extend(mejs.MepDefaults,
	{ 'contextMenuItems': [
		// demo of a fullscreen option
		{ 
			render: function(player) {
				
				// check for fullscreen plugin
				if (typeof player.enterFullScreen == 'undefined')
					return null;
			
				if (player.isFullScreen) {
					return mejs.i18n.t('Turn off Fullscreen');
				} else {
					return mejs.i18n.t('Go Fullscreen');
				}
			},
			click: function(player) {
				if (player.isFullScreen) {
					player.exitFullScreen();
				} else {
					player.enterFullScreen();
				}
			}
		}
		,
		// demo of a mute/unmute button
		{ 
			render: function(player) {
				if (player.media.muted) {
					return mejs.i18n.t('Unmute');
				} else {
					return mejs.i18n.t('Mute');
				}
			},
			click: function(player) {
				if (player.media.muted) {
					player.setMuted(false);
				} else {
					player.setMuted(true);
				}
			}
		},
		// separator
		{
			isSeparator: true
		}
		,
		// demo of simple download video
		{ 
			render: function(player) {
				return mejs.i18n.t('Download Video');
			},
			click: function(player) {
				window.location.href = player.media.currentSrc;
			}
		}	
	]}
);


	$.extend(MediaElementPlayer.prototype, {
		buildcontextmenu: function(player, controls, layers, media) {
			
			// create context menu
			player.contextMenu = $('<div class="mejs-contextmenu"></div>')
								.appendTo($('body'))
								.hide();
			
			// create events for showing context menu
			player.container.bind('contextmenu', function(e) {
				if (player.isContextMenuEnabled) {
					e.preventDefault();
					player.renderContextMenu(e.clientX-1, e.clientY-1);
					return false;
				}
			});
			player.container.bind('click', function() {
				player.contextMenu.hide();
			});	
			player.contextMenu.bind('mouseleave', function() {

				//console.log('context hover out');
				player.startContextMenuTimer();
				
			});		
		},

		cleancontextmenu: function(player) {
			player.contextMenu.remove();
		},
		
		isContextMenuEnabled: true,
		enableContextMenu: function() {
			this.isContextMenuEnabled = true;
		},
		disableContextMenu: function() {
			this.isContextMenuEnabled = false;
		},
		
		contextMenuTimeout: null,
		startContextMenuTimer: function() {
			//console.log('startContextMenuTimer');
			
			var t = this;
			
			t.killContextMenuTimer();
			
			t.contextMenuTimer = setTimeout(function() {
				t.hideContextMenu();
				t.killContextMenuTimer();
			}, 750);
		},
		killContextMenuTimer: function() {
			var timer = this.contextMenuTimer;
			
			//console.log('killContextMenuTimer', timer);
			
			if (timer != null) {				
				clearTimeout(timer);
				delete timer;
				timer = null;
			}
		},		
		
		hideContextMenu: function() {
			this.contextMenu.hide();
		},
		
		renderContextMenu: function(x,y) {
			
			// alway re-render the items so that things like "turn fullscreen on" and "turn fullscreen off" are always written correctly
			var t = this,
				html = '',
				items = t.options.contextMenuItems;
			
			for (var i=0, il=items.length; i<il; i++) {
				
				if (items[i].isSeparator) {
					html += '<div class="mejs-contextmenu-separator"></div>';
				} else {
				
					var rendered = items[i].render(t);
				
					// render can return null if the item doesn't need to be used at the moment
					if (rendered != null) {
						html += '<div class="mejs-contextmenu-item" data-itemindex="' + i + '" id="element-' + (Math.random()*1000000) + '">' + rendered + '</div>';
					}
				}
			}
			
			// position and show the context menu
			t.contextMenu
				.empty()
				.append($(html))
				.css({top:y, left:x})
				.show();
				
			// bind events
			t.contextMenu.find('.mejs-contextmenu-item').each(function() {
							
				// which one is this?
				var $dom = $(this),
					itemIndex = parseInt( $dom.data('itemindex'), 10 ),
					item = t.options.contextMenuItems[itemIndex];
				
				// bind extra functionality?
				if (typeof item.show != 'undefined')
					item.show( $dom , t);
				
				// bind click action
				$dom.click(function() {			
					// perform click action
					if (typeof item.click != 'undefined')
						item.click(t);
					
					// close
					t.contextMenu.hide();				
				});				
			});	
			
			// stop the controls from hiding
			setTimeout(function() {
				t.killControlsTimer('rev3');	
			}, 100);
						
		}
	});
	
})(mejs.$);
/**
 * Postroll plugin
 */
(function($) {

	$.extend(mejs.MepDefaults, {
		postrollCloseText: mejs.i18n.t('Close')
	});

	// Postroll
	$.extend(MediaElementPlayer.prototype, {
		buildpostroll: function(player, controls, layers, media) {
			var
				t = this,
				postrollLink = t.container.find('link[rel="postroll"]').attr('href');

			if (typeof postrollLink !== 'undefined') {
				player.postroll =
					$('<div class="mejs-postroll-layer mejs-layer"><a class="mejs-postroll-close" onclick="$(this).parent().hide();return false;">' + t.options.postrollCloseText + '</a><div class="mejs-postroll-layer-content"></div></div>').prependTo(layers).hide();

				t.media.addEventListener('ended', function (e) {
					$.ajax({
						dataType: 'html',
						url: postrollLink,
						success: function (data, textStatus) {
							layers.find('.mejs-postroll-layer-content').html(data);
						}
					});
					player.postroll.show();
				}, false);
			}
		}
	});

})(mejs.$);


define("MediaElelementPlayer", function(){});

if (typeof CONTROLLER_PLAYER == 'undefined')
{
    CONTROLLER_PLAYER = {
         arHTML5Player: {},
        iNumber: 0,
        
        initialize: function(){
            // Init all players.
            this.arHTML5Player = $('.younet_html5_player.init');
			this.mobileHTMLPlayer = $('.younet_html5_player.mobile');
            var sType = 'big';
            // Check if HTML5 player exist.
            if (this.arHTML5Player.length == 0)
            {
				if(this.mobileHTMLPlayer.length == 0){
					this.arHTML5Player = $('.younet_html5_player_profile.init');
					sType = 'small';
					 if (this.arHTML5Player.length == 0)
					{
						return false;
					}
					
				}else{	
					this.arHTML5Player = $('.younet_html5_player.mobile');
					sType = 'mobile';
					 if (this.arHTML5Player.length == 0)
					{
						return false;
					}
				}
               
            }
            ++this.iNumber;
            // Build extension for HTML5 player.
            this.buildCol();
            this.buildLoop();
            this.buildNext();
            this.buildPrev();
			this.buildClear();
            this.buildShuffle();
            if (sType == 'big')
            {
                this.initBig();
				 this.buildSelectSong();
				
            }else if(sType == 'mobile'){
				this.initMobilePlayer();
				this.buildSelectSongMobile()
				this.autoplayMobile();
			}
            else
            {
                this.initSmall();
				 this.buildSelectSong();
            }
			
            this.arHTML5Player.each(function(i){
                $(this).removeClass('init');
            });
        },
    
       
		initMobilePlayer: function(){
			var t = this;
            this.arHTML5Player.each(function(i){
                var oPlayer = $(this);
                // Call init for each media element player.
                oPlayer.find('video,audio').mediaelementplayer({
                    // If success, when the song is over, call to play next song.
                    success: function (mediaElement, domObject) {
                        mediaElement.addEventListener('ended', function(e){
                            t.mejsPlayNext(e.target, oPlayer);
                        }, false);
                    },
                    
				   features: ['prev','playpause','next','clear','current','progress','duration'],
                    // List key actions.
                    keyActions: [],
                    startVolume: 0.8,
                    pauseOtherPlayers: true
                });
            });
		},
		
       
		autoplayMobile: function(){
			this.arHTML5Player.each(function(i){
				var oPlayer = $(this);
				oPlayer.find('audio').each(function(){	
					this.play();
				});
			});
		},
        // Select a song
        buildSelectSong: function(){
            var t = this;
			
            // Get all players.
            this.arHTML5Player.each(function(i){
			
                var oPlayer = $(this);
				
                oPlayer.find('.mejs-list li span.song-title').click(function(){
					
                    var oItem = $(this);
                    // Title.
                    oItem.parent().addClass('current').siblings().removeClass('current');
                    var strType = 1;
                    // For HTML5 player.
                    var oHTML5PlayerType = oPlayer.find('.html5_player_type');
                    if (oHTML5PlayerType.length > 0)
                    {
                        switch (oHTML5PlayerType.val())
                        {
                            case 'playlist':
                                strType = 0;
                                break;
                            case 'album':
                                strType = 1;
                                break;
                            default:
                                strType = 1;
                        }
                    }
                    var strSongTitle = oItem.text();
                    var strAudioSrc = oItem.parent().children(".link").text();	
					
                    var iSongId = oItem.parent().children(".song_id").text();
                    var oTitleHead = oPlayer.find('.song-title-head');
                    oPlayer.find('audio').each(function(){	
                        this.player.pause(); 
                        // Fix bug can not change song on Firefox and IE.
                        
                        oTitleHead.html(strSongTitle);
						$(this).attr('src', strAudioSrc);
                        this.player.setSrc(strAudioSrc);
                        
                        // Change the move text.
                        this.player.play();
                    });
                    
                    t.onSongChange();
                });
            });
        },
        buildSelectSongMobile: function(){
            var t = this;
			
            // Get all players.
            this.arHTML5Player.each(function(i){
			
                var oPlayer = $(this);
				
                oPlayer.find('.mejs-list li span.song-title').click(function(){
					
                    var oItem = $(this);
                    // Title.
                    oItem.parent().addClass('current').siblings().removeClass('current');
                    var strType = 1;
                    // For HTML5 player.
                    var oHTML5PlayerType = oPlayer.find('.html5_player_type');
                    if (oHTML5PlayerType.length > 0)
                    {
                        switch (oHTML5PlayerType.val())
                        {
                            case 'playlist':
                                strType = 0;
                                break;
                            case 'album':
                                strType = 1;
                                break;
                            default:
                                strType = 1;
                        }
                    }
                    var strSongTitle = oItem.text();
                    var strAudioSrc = oItem.parent().children(".link").text();	
					
                    var iSongId = oItem.parent().children(".song_id").text();
                    var oTitleHead = oPlayer.find('.song-title-head');
                    oPlayer.find('audio').each(function(){	
                        this.pause(); 
                        // Fix bug can not change song on Firefox and IE.
                        
                        oTitleHead.html(strSongTitle);
						$(this).attr('src', strAudioSrc);
                        this.setSrc(strAudioSrc);
                        
                        // Change the move text.
                        this.play();
                    });
                    
                    t.onSongChange();
                });
            });
        },
        //Get an random number
        getRandomInt: function(iMin, iMax) {
            return Math.floor(Math.random() * (iMax - iMin + 1)) + iMin;
        },

        getNextSong: function(oCurrentItem, oHTML5Player){
            var t = this;
            //get next li to get song
            var oNextItem;
            var oControlList = oHTML5Player.find('.song-list');
            var iCount = oControlList.children('li').size();
            if (oHTML5Player.find('.mejs-shuffle-on').length > 0)
            {
                oNextItem = oHTML5Player.find(".mejs-list li").eq(t.getRandomInt(0, iCount - 1));
            }
            else if(oHTML5Player.find('.mejs-loop-on').length > 0)
            {
                // 1 song only.
                if (iCount == 1)
                {
                    oNextItem = $(oCurrentItem);
                }
                else
                {
                    // Multi-song: get the next song.
                    oNextItem = $(oCurrentItem).parent().next();
                    // If the next song does not exist, get the first one.
                    if (oNextItem.length == 0)
                    {
                        // If it is the last song.
                        oNextItem = oHTML5Player.find('.mejs-list li:first');
                    }
                }
            }
            else
            {
                oNextItem = $(oCurrentItem).parent().next();
            }
			//console.log(oNextItem);
            return oNextItem;
        },

        //get next song's link 
        nextSong: function(oCurrentItem, oHTML5Player){
            var oNextItem;
            oNextItem = this.getNextSong(oCurrentItem, oHTML5Player);//get next song
            var oControlList = oHTML5Player.find(".song-list");
            /*Scroll */
            var strAudioSrc = oNextItem.children(".link").text();
            var oTitleHead = oHTML5Player.find('.song-title-head');
            if (oTitleHead.length > 0)
            {
                oTitleHead.html(oNextItem.children(".song-title").text());
            }
            oNextItem.addClass('current').siblings().removeClass('current');
            this.onSongChange();
            return oNextItem;
        },

        //play new playlist
        newPlay: function(oCurrentItem, oHTML5Player){
            var oNextItem = null;
            oNextItem = this.getNextSong(oCurrentItem, oHTML5Player);//get next song
            var strAudioSrc = oNextItem.next().text();
            $(oCurrentItem).next().addClass('current').siblings().removeClass('current');
            return strAudioSrc;
        },

        //Choose next song
        mejsPlayNext: function(oCurrentPlayer, oHTML5Player){
            var oCurrentItem = '';
            var strAudioSrcItem = '';
            if (oHTML5Player.find('.mejs-list li.current').length > 0)
            { 
                // get the .current song	
                oCurrentItem = oHTML5Player.find('.mejs-list li.current:first span.link'); // :first is added if we have few .current classes
                strAudioSrcItem = this.nextSong(oCurrentItem, oHTML5Player);
				strAudioSrc = strAudioSrcItem.children(".link").text();
            }
            else
            {
                var oControlList = oHTML5Player.find('.song-list');
                var iCount = oControlList.children('li').size();
                // If the first song does not exist (That means the list is empty) or play one song.
                if (iCount == 0 || iCount == 1)
                {
                    // Repeat if user click on shuffle or loop, otherwise pause.
                    if (oHTML5Player.find('.mejs-shuffle-on').length > 0 || oHTML5Player.find('.mejs-loop-on').length > 0)
                    {
                        oCurrentPlayer.play();
                    }
                    else
                    {
                        oCurrentPlayer.pause();
                    }
                    // End this function.
                    return;
                }
                // if there is no .current class
                oCurrentItem = oHTML5Player.find('.mejs-list li:first .link'); // get :first if we don't have .current class
                // Set the audio source.
                strAudioSrcItem = this.newPlay(oCurrentItem, oHTML5Player);
				strAudioSrc = strAudioSrcItem.children(".link").text();
            }
            // If this is the last song.
            if( $(oCurrentItem.parent()).is(':last-child') ) 
            {
                var oControlList = oHTML5Player.find(".song-list");
                // if it is last - and user click on loop, repeat the list.
                if (oHTML5Player.find('.mejs-loop-on').size() > 0)
                {
                    var iCount = oControlList.children('li').size();
                    var strSongTitle = '';
                    var oTitleHead = oHTML5Player.find('.song-title-head');
                    if (iCount == 1)
                    {
                        strAudioSrc = oCurrentItem.text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oCurrentItem.parent().children(".song-title").text();
                        }
                    }
                    else
                    {
                        oCurrentItem = oHTML5Player.find('.mejs-list li:first span.link');
                    
                        oHTML5Player.find('.mejs-list .current').removeClass("current");
                        oHTML5Player.find('.mejs-list li:first').addClass("current");
                    
                        strAudioSrc = oCurrentItem.text();
                    
                        if (oTitleHead.length > 0)
                        {
                            strSongTitle = oCurrentItem.parent().children(".song-title").text()
                        }
                    }
                    if (oTitleHead.length > 0)
                    {
                        oTitleHead.innerHTML = strSongTitle;
                    }
					oCurrentPlayer.pause();
                    oCurrentPlayer.setSrc(strAudioSrc);
                    oCurrentPlayer.play();
                }
                else if(oHTML5Player.find('.mejs-shuffle-on').size() > 0)
                {
                    oCurrentItem = this.nextSong(oCurrentItem, oHTML5Player);
                    strAudioSrc = oCurrentItem.text();
                    oCurrentPlayer.setSrc(strAudioSrc);
                    oCurrentPlayer.play();
                    oControlList.scrollTo(oCurrentItem);
                }
                else
                {
                    oHTML5Player.find(oCurrentItem).removeClass('current');
                }
            }
            else
            {
				oCurrentPlayer.pause();
                oCurrentPlayer.setSrc(strAudioSrc);
                oCurrentPlayer.play();
            }
			console.log(strAudioSrc);
        },

        //Build Next Button
        buildNext: function() {
            var t = this;
        
            // next button
            MediaElementPlayer.prototype.buildnext =function(oPlayer, oControls, layers, media) {
                // create the next button
                var strNextButton = '<div class="mejs-button mejs-next-button ' + ((oPlayer.options.next) ? 'mejs-next-on' : 'mejs-next-off') + '">' +
                '<button type="button"></button>' +
                '</div>';
            
                var next = $(strNextButton)
                // append it to the toolbar
                .appendTo(oControls)
                //Click on next button
                .click(function(evt){
                    var oNextSong;
                    var strAudioSrc = '';
                    var strSongTitle = '';
                    var oControlPlayer = oControls.parent().parent().parent().parent();
                    var oHTML5Player = oControlPlayer.parent();
                    var oControlList = oHTML5Player.find('.song-list');
                    var oCurrentItem = oControlList.find('li.current');
                    var oTitleHead = oControlPlayer.find('.song-title-head');
                    if (oControlPlayer.find('.mejs-shuffle-on').size() > 0) 
                    {
                        //check shuffle mode
                        var ul = oControlList;
                        var li = ul.children('li').size();
                        var nextItemGet;
                        if (li <= 1) 
                        {
                            nextItemGet = 0;
                        } 
                        else 
                        {
                            while((nextItemGet = t.getRandomInt(0, li - 1)) == oCurrentItem.index()) 
                            {
                            }
                        }
                        oNextSong = oHTML5Player.find(".mejs-list li").eq(nextItemGet);
                        oCurrentItem.removeClass('current');
                        strAudioSrc = oNextSong.children(".link").text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oNextSong.children(".song-title").text();
                        }
                        oNextSong.addClass('current');
                    }
                    else if (oCurrentItem.is(':last-child'))
                    {
                        var oSongLink = oHTML5Player.find('.mejs-list li:first span.link');
                        strAudioSrc = oSongLink.text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oSongLink.parent().children(".song-title").text(); 
                        }
                        oCurrentItem.removeClass('current');
                        // Get the first song.
                        oNextSong = oHTML5Player.find('.mejs-list li:first');
                        oNextSong.addClass('current');
                    }
                    else 
                    {
                        oNextSong = oCurrentItem.next();
                        if (!oNextSong.size()) 
                        {
                            return true;
                        }
                        oCurrentItem.removeClass('current');
                        strAudioSrc = oNextSong.children(".link").text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oNextSong.children(".song-title").text();
                        }
                        oNextSong.addClass('current');
                    }
                   
                    oPlayer.pause();
                    oPlayer.setSrc(strAudioSrc);
                    if (oTitleHead.size() > 0)
                    {
                        oTitleHead.html(oNextSong.children(".song-title").text());
                    }
                    oPlayer.play();
                    
                    t.onSongChange();
                    // console.log(oControlList);
                    // oControlList.scrollTo(oNextSong);
                });
            // add a click toggle event
            }
        },

        //Build Previous button
        buildPrev: function() {
            var t = this;
            // prev button
            MediaElementPlayer.prototype.buildprev = function(oPlayer, oControls, layers, media) {
                var strHTMLPrev = '<div class="mejs-button mejs-prev-button ' + ((oPlayer.options.prev) ? 'mejs-prev-on' : 'mejs-prev-off') + '">' +
                '<button type="button"></button>' +
                '</div>';
                // create the prev button
                var prev = $(strHTMLPrev)
                // append it to the toolbar
                .appendTo(oControls)
                // add a click toggle event
                .click(function(evt){
                    var oPrevSong = '';
                    var strAudioSrc = '';
                    var strSongTitle = '';
                    var oControlPlayer = oControls.parent().parent().parent().parent();
                    var oHTML5Player = oControlPlayer.parent();
                    var oTitleHead = oControlPlayer.find('.song-title-head');
                    var oControlList = oHTML5Player.find('.song-list');
                    var oCurrentItem = oControlList.find('li.current');
                    if (oControlPlayer.find('.mejs-shuffle-on').size() > 0)
                    { 
                        //check shuffle mode
                        var ul = oControlList;
                        var li= ul.children('li').size();
                        var iNextItem;

                        if (li <= 1)
                        {
                            iNextItem = 0;
                        }
                        else
                        {
                            while ((iNextItem = t.getRandomInt(0,li - 1)) == oCurrentItem.index())
                            {
                            }
                        }
                        oPrevSong = oHTML5Player.find(".mejs-list li").eq(iNextItem);
                        oCurrentItem.removeClass('current');
                        strAudioSrc = oPrevSong.children(".link").text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oPrevSong.children(".song-title").text();
                        }
                        oPrevSong.addClass('current');
                    } 
                    else 
                    {
                        oPrevSong = oCurrentItem.prev();
                        if (!oPrevSong.size())
                        {
                            return true;
                        }
                        oCurrentItem.removeClass('current');
                        strAudioSrc = oPrevSong.children(".link").text();
                        if (oTitleHead.size() > 0)
                        {
                            strSongTitle = oPrevSong.children(".song-title").text()
                        }
                        oPrevSong.addClass('current');
                    }

                    
                    oPlayer.pause();
                    oPlayer.setSrc(strAudioSrc);
                    if (oTitleHead.size() > 0)
                    {
                        oTitleHead.html(oPrevSong.children(".song-title").text())
                    }
                    oPlayer.play();
                    
                    t.onSongChange();
                    // oControlList.scrollTo(oPrevSong);
                });  
            }
        },

        //Build repeat button
        buildLoop: function(){
            // prev button
            MediaElementPlayer.prototype.buildloop = function(oPlayer, oControls, layers, media) {
                var strHTMLLoop = '<div class="mejs-button mejs-loop-button ' + ((oPlayer.options.loop) ? 'mejs-loop-on' : 'mejs-loop-off') + '">' +
                '<button type="button"></button>' +
                '</div>';
                // create the prev button
                var oLoop = $(strHTMLLoop)
                // append it to the toolbar
                .appendTo(oControls)
                // add a click toggle event
                .click(function(){
                    oPlayer.options.loop = !oPlayer.options.loop;
                    if (oPlayer.options.loop)
                    {
                        oLoop.removeClass('mejs-loop-off').addClass('mejs-loop-on');
                        oPlayer.options.shuffle = false;
                        oControls.find('.mejs-shuffle-button').removeClass('mejs-shuffle-on').addClass('mejs-shuffle-off');
                    }
                    else
                    {
                        oLoop.removeClass('mejs-loop-on').addClass('mejs-loop-off');
                    }
                });     
            }
        },

        //Build Shuffle button
        buildShuffle: function() {
            // prev button
            MediaElementPlayer.prototype.buildshuffle = function(oPlayer, oControls, layers, media) {
                var strShuffle = '<div class="mejs-button mejs-shuffle-button ' + ((oPlayer.options.shuffle) ? 'mejs-shuffle-on' : 'mejs-shuffle-off') + '">' +
                '<button type="button"></button>' +
                '</div>';
                // create the prev button
                var oShuffle = $(strShuffle)
                // append it to the toolbar
                .appendTo(oControls)
                // add a click toggle event
                .click(function(){
                    oPlayer.options.shuffle = !oPlayer.options.shuffle;
                    if (oPlayer.options.shuffle)
                    {
                        oShuffle.removeClass('mejs-shuffle-off').addClass('mejs-shuffle-on');
                        oPlayer.options.loop = false;
                        oControls.find('.mejs-loop-button').removeClass('mejs-loop-on').addClass('mejs-loop-off');
                    }
                    else
                    {
                        oShuffle.removeClass('mejs-shuffle-on').addClass('mejs-shuffle-off');
                    }
                });
            }
        },

        buildCol: function() {
            // prev button
            MediaElementPlayer.prototype.buildcol = function(player, controls, layers, media) {
                var strHTMLCol = '<div class="col-vol">' +
                '<span></span>' +
                '</div>';
                // create the prev button
                $(strHTMLCol)
                // append it to the toolbar
                .appendTo(controls)
            // add a click toggle event            
            }
        },
		buildClear: function(){
			 MediaElementPlayer.prototype.buildclear = function(player, controls, layers, media) {
                var strHTMLClear = '<div class="clear">' +
                '</div>';
                // create the prev button
                $(strHTMLClear)
                // append it to the toolbar
                .appendTo(controls)
            // add a click toggle event            
            }
		},
		
		// action when play other song
		onSongChange: function (evt) {
			var $current = $('.song-list li.current');
			var $prev_btn = $('.mejs-prev-button');
			var bDisablePrevBtn = $current.is(':first-child');
			
			$prev_btn.toggleClass('disabled', bDisablePrevBtn);
		}
    }
}

;
define("CONTROLLER_PLAYER", ["MediaElelementPlayer"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.CONTROLLER_PLAYER;
    };
}(this)));


define('text!music/tpl/playlist-detail.html',[],function () { return '<!-- music/tpl/album-detail.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n        <div class="btn-top btn-more hide" id="top_menu_toggle">\n        </div>\n    </div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div class="content with-header content-background swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="music-playlist-detail">\n\t\t\t</div>\n\t\t\t<div id="activity_extra_holder" class="hide">\n                <!-- activity detail -->\n            </div>\n\t\t</div>\n\t</div>\n</div>';});


define('text!music/tpl/playlist-detail-update.html',[],function () { return '<div class="swiper-list padding-base">\n\t<div class="music-playlist-detail-info">\n\t    <div class="item-headline"><%= _t(\'uploaded_by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a></div>\n\t    <div class="item-subline">\n\t        <div class="item-stats next">\n\t            <!--<i class="icon-headphones"></i>&nbsp;<=iTotalPlay%> plays-->\n\t\t\t\t<span class="text-info"><%= item.getTrackCount() %></span>\n\t\t\t\t<i class="icon icon-music-track"></i>\n\t        </div>\n\t        <div class="item-stats next">\n\t            <!--<i class="icon-calendar"></i>&nbsp;<=sFullTimeStamp%>-->\n\t\t\t\t<span class="text-info"><%= item.getPlayCount() %></span>\n\t\t\t\t<i class="icon icon-music-listen"></i>\n\t        </div>\n\t    </div>\n\t</div>\n\n\t<div class="music-playlist-detail-description">\n\t\t<%= utils.str.shorten(item.getDescription(), 200, true) %>\n\t</div>\n\t\n\t<!-- music player -->\n\t<div class="musicContent miniplayer-content">\n\t\t<div class="music-player music-cover-image">\n\t    \t<div class="music-player-image" style="background-image:url(<%= item.getImageSrc() %>)"></div>\n\t    </div>\n\t    <div class="younet_html5_player mobile">\t\t\n\t        <div class="title-info" id="id_player">\t        \t\n\t            <!--<p class="song-title-head"><=sTitle%></p>-->\n\t            <!--audio src="http://product-dev.younetco.com/mobile/se460/public/music_song/23/0c/0c17_6c20.mp4?c=d518" width="100%" autoplay="true"></audio-->\n\t        </div>\n\t        <div id="listsong">\n\t            <ul class="mejs-list scroll-pane song-list">\n\t        \t<% songs.each(function(song){ %>\n\t        \t\t<li class="">\n\t\t        \t\t<!-- song item of song list -->\n\t\t\t\t\t\t<p class="song-order"><%= song.getOrderNumber() %>.</p>\n\t\t\t\t\t\t<p class="play-icon"></p>\n\t\t\t\t\t\t<span class="link"><%= song.getSongPath() %></span>\n\t\t\t\t\t\t<span class="song-title"><%= song.getTitle() %>\n\t\t\t\t\t\t\t<!--span class="song-author">Linkin Park</span-->\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\t        \t<%}) %>\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n<div id="music-action-bar">\n\t<div class="actions-justify gray">\n\t<div class="action-item <%= item.isRated()?\'rated\':\'\' %>" id="<%= item.getDataId(\'rate\') %>" rel="delegate">\n\t\t<span class="text-info"><%= item.getRateValue() %></span>\n\t\t<i class="icon icon-activity-rate"></i>\n\t</div>\n\t<div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t<i class="icon icon-activity-like"></i>\n\t</div>\n\t<% if(item.canComment()){%>\n\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\n\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\n\t\t<i class="icon icon-activity-comment"></i>\n\t</div>\n\t<%} %>\n</div>\n</div>\n';});

define('music/model/song',[],function() {
    return Backbone.Model.extend({
        idAttribute: 'iSongId',
        defaults: {
            sModelType: 'music_song',
            bCanLike: true
        },
        getSongPath: function() {
            return this.get('sSongPath');
        },
        getOrderNumber: function() {
            return parseInt(this.get('iOrdering'), 10) + 1;
        },
        getAlbumId: function() {
            return parseInt(this.get('iAlbumId')) || 0;
        },
        hasAlbum: function() {
            return this.getAlbumId();
        },
        getAlbumUrl: function() {
            return '#music_album/' + this.getAlbumId();
        },
        getAlbumName: function() {
            return this.get('sAlbumName');
        },
        getPlayCount: function() {
            return this.get('iTotalPlay') || 0;
        },
        getAlbumImageSrc: function() {
            return this.get('sAlbumImage');
        },
        getGenre: function() {
            return this.get('sGenre');
        },
        getTitle: function() {
            return this.get('sTitle');
        },
        getSocialShareUrl: function(){
            return constants.siteUrl + 'index.php?do=/music/'+ this.getId();
        }
    });

});
define('music/collection/song',[
	'music/model/song'
],function(SongModel){
	return Backbone.Collection.extend({
		model: SongModel
	});
});


define('text!music/tpl/playlist-topmenu.html',[],function () { return '<div class="setting-list">\n    <%if (!item.isOwner()) {%>\n    <a class="menu-item" id="<%= item.getDataId(\'report\') %>" rel="delegate"><%= _t(\'report_this_album\') %></a>\n    <%}%>\n</div>\n\n';});

define('music/view/playlist-topmenu',[
	'text!music/tpl/playlist-topmenu.html'
],function(text){
	return Backbone.TopMenuView.extend({
		template : _.template(text),
        inject: function(){
			utils.popup.open(this.$el);
            
			return this;
		},
		hide: function(){
            utils.popup.close();
            
			return this;
		}
	});
});


define('music/view/playlist-detail',[
    'CONTROLLER_PLAYER',
	'text!music/tpl/playlist-detail.html',
    'text!music/tpl/playlist-detail-update.html',
	'music/collection/song',
    'music/view/playlist-topmenu'
], function(CONTROLLER_PLAYER, text, textUpdate, SongCollection, TopMenuView) {
	
	var SongCollection = require('music/collection/song');
	    
	return Backbone.DetailView.extend({
		template : _.template(text),
		templateUpdate: _.template(textUpdate),
        topMenuView: TopMenuView,
		initialize: function(){
			this.model.songs =  new SongCollection();
			Backbone.DetailView.prototype.initialize.apply(this, arguments);

            $(document).one("backbutton", function () {

                var music = $('audio').attr('src', '').get(0);
                music.load();
                music.play();
                music.pause();

            });
		},
		region: {
			wrapper: '#main',
			scroller: '#content',
			activityExtraHolder: '#activity_extra_holder',
		},
		events: {
			'click #top_menu_toggle': 'toggleTopMenu',
		},
		toggleTopMenu: function() {
			utils.topMenu.toggle(this, this.model);
		},
        render : function() {
        	
			this.$el.html(this.template({item: this.model}));
			
			this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);
			
			this.$scroller =  this.$el.find(this.region.scroller);
            
            this.$topMenuBtn = this.$el.find('#top_menu_toggle');
			
			this.$el.attr({id: this.model.getDataId()});
			
			return this;			
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(query){
			var iAlbumId =  this.model.getId();
			var self = this;
			
			this.errMsg1 = "";
			this.errMsg2 = "";
			
			var $ajax1  = utils.api.get('album/detail',{iAlbumId: this.model.getId()}, {context: this})
				.done(function(data){
					if(data.error_code && data.error_code > 0){
						self.errMsg1 = data.error_message;
						return;
					}
					this.model.set(data);									
				}).fail(function(){
					utils.debug.log(arguments);
				});
			
			var $ajax2 = utils.api.get('album/list_songs',{iAlbumId: this.model.getId()},{context: this})
				.done(function(data){
					if(data.error_code && data.error_code > 0){
						self.errMsg2 = data.error_message;
						return;
					}
					this.model.songs.add(data);
				});
				
			$.when($ajax1, $ajax2).done(function(){
				self.updateView();
			}).fail(function(){
				
			});
		},
		updateView: function(){
			
			// cannot get album detail
			if (this.errMsg1 != "") {
				utils.modal.alert(this.errMsg1);
				return;
			}
			
			// don't have view permission
			if (!this.model.canView()) {
				this.$el.find('#page_title').html(_t('Private Page'));
				this.$scroller.html(utils.helper.permission_deny());
				return;
			}
			
			// cannot get song list
			if (this.errMsg2 != "") {
				utils.modal.alert(this.errMsg1);
				return;
			}
            
            if (!this.model.isOwner()) {
                this.$topMenuBtn.removeClass('hide');
            }
			
			this.$el.find('#page_title').html(this.model.getAlbumName());
			
			this.$el.find('#music-playlist-detail')
			.html(this.templateUpdate({songs: this.model.songs, item: this.model}));
			
			// load extra block after have model to check permission
			utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);
			
			this.$activityExtraHolder.removeClass('hide');
			
			if(this.model.songs.length){
				var firstSong =  this.model.songs.at(0);
				// Init Player with a song
				this.$el.find('#id_player').html('<audio src="'+firstSong.getSongPath()+'" width="100%" autoplay="false"></audio>');
	            this.$el.find('#listsong li').first().addClass('current'); // require to initialize
	            
	            CONTROLLER_PLAYER.initialize();
	            
	            this.$el.find('.mejs-prev-button').addClass('disabled');
			}else{
				this.$el.find('.music-player').first().addClass('no-songs');
			}
		}
	});
});

define('music/controller/playlist-detail',[
	'music/view/playlist-detail',
	'music/model/playlist'
], function(DetailView, PlaylistModel) {

	function DetailController(id, action) {

		utils.history.push();

		utils.observer.trigger('router:changed');

		new DetailView({
			model : new PlaylistModel({
				iAlbumId : id
			})
		}).render().inject();
	}
	
	utils.router.route('music_playlist/:id(/:action)', DetailController);
	utils.router.route('music_album/:id(/:action)', DetailController);
});


define('text!music/tpl/song-detail.html',[],function () { return '<!-- music/tpl/album-detail.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n    <div class="header-right">\n        <div class="btn-top btn-more hide" id="top_menu_toggle">\n        </div>\n    </div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div class="content with-header content-background swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="music-song-detail">\n\t\t\t</div>\n\t\t\t<div id="activity_extra_holder" class="hide">\n                <!-- activity detail -->\n            </div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!music/tpl/song-detail-update.html',[],function () { return '<div class="swiper-list padding-base">\n\t<div class="music-song-detail-info">\n\t    <div class="item-headline"><%= _t(\'uploaded_by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a></div>\n\t    <div class="item-subline">\n\t        <div class="item-stats next">\n\t            <!--<i class="icon-calendar"></i>&nbsp;<=sFullTimeStamp%>-->\n\t\t\t\t<span class="text-info"><%= item.getPlayCount() %></span>\n\t\t\t\t<i class="icon icon-music-listen"></i>\n\t        </div>\n\t        <% if (item.getGenre()) { %>\n\t        <div class="item-stats next">\n\t\t\t\t<i class="icon icon-music-genre"></i>\n\t\t\t\t<span class="text-info"><%= item.getGenre() %></span>\n\t        </div>\n\t        <% } %>\n\t    </div>\n\t</div>\n\n\t<div class="music-song-detail-description">\n        <%= item.getDescription() %>\n\t</div>\n\t\n\t<!-- music player -->\n\t<div class="musicContent miniplayer-content">\n\t\t<div class="music-player music-cover-image">\n\t    \t<div class="music-player-image" style="background-image:url(<%= item.getAlbumImageSrc() %>)"></div>\n\t    </div>\n\t    <div class="younet_html5_player mobile">\t\t\n\t        <div class="title-info" id="id_player">\t        \t\n\t            <!--<p class="song-title-head"><=sTitle%></p>-->\n\t            <!--audio src="http://product-dev.younetco.com/mobile/se460/public/music_song/23/0c/0c17_6c20.mp4?c=d518" width="100%" autoplay="true"></audio-->\n\t        </div>\n\t        <div id="listsong">\n\t            <ul class="mejs-list scroll-pane song-list">\n\t            </ul>\n\t        </div>\n\t    </div>\n\t</div>\n</div>\n<div id="music-action-bar">\n\t<div class="actions-justify gray">\n\t<div class="action-item <%= item.isRated()?\'rated\':\'\' %>" id="<%= item.getDataId(\'rate\') %>" rel="delegate">\n\t\t<span class="text-info"><%= item.getRateValue() %></span>\n\t\t<i class="icon icon-activity-rate"></i>\n\t</div>\n\t<div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t<i class="icon icon-activity-like"></i>\n\t</div>\n\t<% if(item.canComment()){%>\n\t<div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\n\t\t<span class="text-anchor"><%= item.getCommentCount() %></span>\n\t\t<i class="icon icon-activity-comment"></i>\n\t</div>\n\t<%} %>\n\t<% if(item.canShare()) { %>\n\t<div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\n\t\t<i class="icon icon-activity-share"></i>\n\t</div>\n\t<%} %>\n</div>\n</div>\n';});


define('text!music/tpl/song-topmenu.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canDislike()) {%>\n    <div class="setting-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="setting-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\n    </div>\n    <%}%>\n    <%if (!item.isOwner()) {%>\n    <div class="menu-item" id="<%= item.getDataId(\'report\') %>" rel="delegate"><%= _t(\'report_this_album\') %></div>\n    <%}%>\n</div>\n\n';});

define('music/view/song-topmenu',[
	'text!music/tpl/song-topmenu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
],function(text, DislikeCollection, DislikeDetailView){
	return Backbone.TopMenuView.extend({
		template : _.template(text),
        render: function(){
			var self = this;
        	
			this.$el.html(this.template({item: this.model}));
            
            this.$dislikeHolder = this.$el.find('#dislike-list');
            
            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));
			
			this.model.on('change:iTotalDislike change:bIsDisliked', function () {
        		self.updateView();
        	});
			
			return this;
		},
        inject: function(){
            this.model.dislikes = new DislikeCollection();
			
			this.model.dislikes.add(this.model.getUserDislike());
            
            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);
            
			utils.popup.open(this.$el);
            
			return this;
		},
		hide: function(){
            utils.popup.close();
            
			return this;
		},
        updateView: function () {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
			this.$dislikeHolder.toggleClass('hide', bHide);
            
            var sText = this.model.isDisliked() ? _t('remove_dislike') : _t('dislike');
            this.$dislikeBtn.html(sText);
        }
	});
});


define('music/view/song-detail',[
    'CONTROLLER_PLAYER',
	'text!music/tpl/song-detail.html',
    'text!music/tpl/song-detail-update.html',
	'music/collection/song',
    'music/view/song-topmenu'
], function(CONTROLLER_PLAYER, text, textUpdate) {
	
	var SongCollection = require('music/collection/song'),
        TopMenuView = require('music/view/song-topmenu');
	    
	return Backbone.DetailView.extend({
		template : _.template(text),
		templateUpdate: _.template(textUpdate),
		topMenuView : TopMenuView,
		initialize: function(){
			this.model.songs =  new SongCollection();
			Backbone.DetailView.prototype.initialize.apply(this, arguments);
            $(document).one("backbutton", function () {

                var music = $('audio').attr('src', '').get(0);
                music.load();
                music.play();
                music.pause();

            });
		},
		events : {
			'click #top_menu_toggle' : 'toggleTopMenu',
		},
		toggleTopMenu : function() {
			utils.topMenu.toggle(this, this.model);
		},
		region: {
			wrapper: '#main',
			scroller: '#content',
			activityExtraHolder: '#activity_extra_holder',
		},
        render : function() {
        	
			this.$el.html(this.template({item: this.model}));
			
			this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);
			
			this.$scroller =  this.$el.find(this.region.scroller);
            
            this.$topMenuBtn = this.$el.find('#top_menu_toggle');
			
			this.$el.attr({id: this.model.getDataId()});
			
			return this;			
		},
		inject: function(){
			
			$(this.region.wrapper).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(query){
			var iAlbumId =  this.model.getId();
			var self = this;
			
			this.errMsg1 = "";
			this.errMsg2 = "";
			
			var $ajax1  = utils.api.get('song/detail',{iSongId: this.model.getId()}, {context: this})
				.done(function(data){
					if(data.error_code && data.error_code > 0){
						self.errMsg1 = data.error_message;
						return;
					}
					this.model.set(data);									
				}).fail(function(){
					utils.debug.log(arguments);
				});
			
			// var $ajax2 = utils.api.get('album/list_songs',{iAlbumId: this.model.getId()},{context: this})
			// 	.done(function(data){
			// 		if(data.error_code && data.error_code > 0){
			// 			self.errMsg2 = data.error_message;
			// 			return;
			// 		}
			// 		this.model.songs.add(data);
			// 	});
				
			// $.when($ajax1, $ajax2).done(function(){
			$.when($ajax1).done(function(){
				self.updateView();
			}).fail(function(){
				
			});
		},
		updateView: function(){
			
			// cannot get album detail
			if (this.errMsg1 != "") {
				utils.modal.alert(this.errMsg1);
				return;
			}
			
			// don't have view permission
			if (!this.model.canView()) {
				this.$el.find('#page_title').html(_t('Private Page'));
				this.$scroller.html(utils.helper.permission_deny());
				return;
			}
			
			// cannot get song list
			if (this.errMsg2 != "") {
				utils.modal.alert(this.errMsg1);
				return;
			}
            
			this.$el.find('#page_title').html(this.model.getTitle());
			
            this.$topMenuBtn.removeClass('hide');
			
			this.$el.find('#music-song-detail')
			.html(this.templateUpdate({item: this.model}));
			
			// load extra block after have model to check permission
			utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);
			
			this.$activityExtraHolder.removeClass('hide');
			
            // Init Player with a song
            this.$el.find('#id_player').html('<audio src="'+this.model.getSongPath()+'" width="100%" autoplay="false"></audio>');
            // this.$el.find('#listsong li').first().addClass('current'); // require to initialize
            
            CONTROLLER_PLAYER.initialize();
            
            this.$el.find('.mejs-prev-button').addClass('hide');
            this.$el.find('.mejs-next-button').addClass('hide');
		}
	});
});

define('music/controller/song-detail',[
	'music/view/song-detail',
	'music/model/song'
], function(DetailView, PlaylistModel) {

	function DetailController(id, action) {

		utils.history.push();

		utils.observer.trigger('router:changed');

		new DetailView({
			model : new PlaylistModel({
				iSongId : id
			})
		}).render().inject();
	}
	
	utils.router.route('music_song/:id(/:action)', DetailController);
});


define('text!music/tpl/song-index.html',[],function () { return '<!-- music/tpl/music-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n<div id="search_view_holder">\n<!-- Add search box in here -->\n</div>\n<div class="content with-header-footer with-search body-bg swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="not_found" class="not-found hide"><%= _t(\'no_albums_found\') %></div>\n\t\t\t<div class="swiper-list vertical-align">\n\t\t\t\t<div id="song_list_view_holder">\n\t\t\t\t</div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="#music_playlists">\n        \t<div class=""><%= _t(\'albums\') %></div>\n        </a>\n        <a class="menu-item <% if(sView == \'all\') print(\'current\') %>" href="#music_songs">\n        \t<div class="sibling"><%= _t(\'songs\') %></div>\n        </a>\n        <a class="menu-item" href="#music_playlists/my">\n        \t<div class="sibling"><%= _t(\'my_albums\') %></div>\n        </a>\n        <a class="menu-item <% if(sView == \'my\') print(\'current\') %>" href="#" clickable="true" data-click="music:open-more">\n        \t<div class="sibling"><%= _t(\'more\') %></div>\n        </a>\n    </div>\n</div>\n';});


define('text!music/tpl/song-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- Loading Initiator -->\n</div>';});


define('text!music/tpl/song-item.html',[],function () { return '<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<a href="<%= item.getUrl() %>">\n\t\t\t<span style="background-image: url(\'<%= item.getAlbumImageSrc() %>\');"></span>\n\t\t</a>\n\t</div>\n\t<div class="item-headline">\n\t\t<a href="<%= item.getUrl() %>"><%= item.getTitle() %></a>\n\t</div>\n\t<div class="item-subline">\n\t\t<%if (item.hasAlbum()) {%>\n        <%= _t(\'in\') %> <span class="primary-text"> <a href="<%= item.getAlbumUrl() %>"> <%= item.getAlbumName() %>  </a> </span>\n        <%}%>\n        <% if(sView != \'my\'){%>\n        </span> <%= _t(\'by\') %> <a href="<%= item.getPosterUrl() %>"><%= item.getPosterTitle() %></a>\t\t\n        <% } %>\n\t</div>\n\t<div class="item-stats-group prevent">\n\t\t<div class="separator"></div>\n\t\t<div class="item-stats <%= item.isLiked() ? \'liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getLikeCount() %></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n        <% if(item.canComment()){%>\n\t\t<div class="item-stats" id="<%= item.getDataId(\'comment\') %>" rel="delegate">\n\t\t\t<span class="text-info"><%= item.getCommentCount() %></span>\n\t\t\t<i class="icon icon-activity-comment"></i>\n\t\t</div>\n\t\t<% } %>\n\t\t<div class="item-stats">\n\t\t\t<span class="text-info"><%= item.getPlayCount() %></span>\n\t\t\t<i class="icon icon-music-listen"></i>\n\t\t</div>\n\t</div>\n</div>\n\n';});

define('music/view/song-item',[
	'text!music/tpl/song-item.html'
],function(text){
	
	return Backbone.ItemView.extend({
		className: 'music-song-item',
		template: _.template(text),
		events: {},
		render: function(){
			
            var sView = 'all';
            if(document.URL.match(/my/)) {
                sView = 'my';
            }
			this.$el.html(this.template({
                item: this.model,
                sView: sView
            }));
			
			this.$el.attr({
				'id': this.model.getDataId(),
				'rel': 'link',
				'data-url': this.model.getUrl(),
			});
			
			return this;
		},
		inject: function(inject){
			inject(this.$el);
		}
	});
});

define('music/view/song-list',[
	'text!music/tpl/song-list.html',
	'music/model/song',
	'music/view/song-item',
],function(text, Model, ItemView)
{
	
	return Backbone.ListView.extend({
		defaults: {
			sSearch: '',
			sView: 'all',
            iMaxId: 0,
            iMinId: 0,
            iLimit: 5,
            iPage: 1
		},
		followById: true,
		api: 'song/fetch',
		phraseNotFound: 'သီခ်င္း မေတြ.ပါ',
		phraseNotMore: 'သီခ်င္း မေတြ.ပါ',
		className: 'music-song-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView,
        init: function() {
            if(this.settings.sView) {
                this.defaults.sView = this.settings.sView;
            }
        }
	});
});



define('text!music/tpl/song-search.html',[],function () { return '\n<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_songs\') %>" value="">\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n\t\t\t\t<option value="0" selected="true"><%= _t(\'genres\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n               <option value="latest" selected="true"><%= _t(\'latest\') %></option>\n               <option value="most_viewed"><%= _t(\'most_viewed\') %></option>\n               <option value="most_liked"><%= _t(\'most_liked\') %></option>\n               <option value="most_discussed"><%= _t(\'most_discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>">\n\t</div>\n</div>\n\n';});

define('music/view/song-search',[
	'text!music/tpl/song-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$categoryInput = this.$el.find('#search_category');
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(){
			utils.api.get('song/getgenre',{},{context: this}).done(this.updateView);
		},
		updateView: function(data){
			if (data.error_code) {
				return utils.modal.alert(data.error_message);
			}
			_.each(data, function (option) {
				this.$categoryInput.append(new Option(option.name, option.genre_id));
			}, this);
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				iCategoryId: this.$categoryInput.val() || 0,
				sOrder: this.$orderInput.val() || 'creation_date'
			});
		}
	});
	
});

define('music/view/song-index',[
	'text!music/tpl/song-index.html',
	'music/view/song-list',
	'music/view/song-search'
],function(text){
	
	var ListView	= require('music/view/song-list')
	  , SearchView	= require('music/view/song-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
	
		render: function(param){
            this.sView = (param && param.sView) ? param.sView : 'all' ;
			
			this.$el.html(this.template({
                sView: this.sView
            }));
			
			return this;
			
		},
		inject: function(param){


			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({},this.$el.find('#song_list_view_holder'), this.$scroller,{
                loadnew: false,
                sView: this.sView
            });
			
			this.searchView = new SearchView();
			
			this.searchView.render().inject();
			
			// render list view
			this.listView.render({}).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery(data);
			});
			
			return this;
		}
	});
});


define('music/controller/song-index',[
	'music/view/song-index',
	// 'music/view/song-my',
],function(IndexView, MyView){
	
	function SongIndexController(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({}).inject();
	}
	
	function MySongController(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
            sView: 'my'
        }).inject();
	}
	
	utils.router.route('music_songs/my', MySongController);
	
	utils.router.route('music_songs', SongIndexController);
});

define('music/main',[
	'core',
	// plugin
	'music/plugin/activity',
	'music/plugin/open-more',
	// plugin
	'music/controller/playlist-index',
	'music/controller/playlist-detail',
	'music/controller/song-detail',
	'music/controller/song-index'
],function(core){
	
	core.sidebar.configs.set('music',{
 		icon: 'icon-sidebar-music',
 		label: 'Music',
 		url: '#music_playlists',
 	});
});

define('music', ['music/main'], function (main) { return main; });


define('text!event/tpl/attachment-event.html',[],function () { return '<div class="att-item-wrapper">\n\t<a class="att-item-image" style="background-image: url(<%= attachment.sPhoto_Url %>)" href="<%= attUrl%>"></a>\n\t<div class="table">\n\t\t<div class="table-cell att-col-cal">\n\t\t\t<div class="att-item-month"><%= month %></div>\n\t\t\t<div class="att-item-date"><%= day %></div>\n\t\t</div>\n\t\t<div class="table-cell att-col-info">\n\t\t\t<a class="att-item-title" href="<%= attUrl%>"><%= attachment.sTitle %></a>\n\t\t\t<div class="att-item-description"><%= time %>\n                <% if(attachment.sLocation != \'\'){%>\n                <%= _t(\'at\') %> <%= attachment.sLocation %>\n                <%}%>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});

define('event/view/attachment-event',[
    'underscore.string',
	'text!event/tpl/attachment-event.html'
],function(STR, text){
	
	return Backbone.View.extend({
		region: {},
		className: 'attachment-event',
		template: _.template(text),
		render: function(){
			
			var item = this.model;
			var att = item.getAttachments()[0];

            // use user setting timezone returned from server
            var local_date = new Date(att.iStartTime * 1e3);
            var utc_date = local_date.getTime() + (local_date.getTimezoneOffset() * 60000);
            var date = new Date(utc_date + (3600000*item.getTimezoneOffset()));

			var maps = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','DEC','NOV'];
			var hour = date.getHours();
			var minute = date.getMinutes();
			
			if(hour < 10){
				hour = '0' + hour;
			}
			
			if(minute < 10){
				minute = '0' + minute;
			}
            
            var shortDescription = '';
            if (att.sDescription) {
                var strippedStr = STR.stripTags(att.sDescription);
                shortDescription = utils.str.shorten(strippedStr, 120, false);
            }
			
			var context = {
				item: item,
				attachment: att,
				month: maps[date.getMonth()],
				day: date.getDate(),
				time:  hour+':' + minute,
                totalGuest: att.iTotalGuest + ' ' + (att.iTotalGuest == 1 ? _t('guest') : _t('guests')),
                shortDescription: shortDescription,
				attUrl: '#event-detail/' + att.sType + '/' + att.iId
			};
			
			this.$el.html(this.template(context));
			
			return this;
		},
		inject: function(dom){
			dom.html(this.el);
		}
	});
});

define('event/plugin/activity',[
    'event/view/attachment-event'
], function(EventView) {

    utils.headline.add([
        'event',
        'fevent'
    ], function(item) {
        return _t('created an event');
    });

    utils.headline.add(['event_comment', 'fevent_comment'], function(item, context) {

        var headline = item.getPosterLink();

        if (item.hasParentUser()) {
            return headline += '<i class="activity-post-via"> &rarr; </i> ' + item.getParentLink();
        }

        return headline;
    });

    utils.attachment.add(['event', 'fevent'], EventView);
});
define('event/model/event',[
    'underscore.string'
], function(STR) {
	return Backbone.Model.extend({
		idAttribute : 'iEventId',
		defaults : {
			sModelType : 'event'
		},
		getFullTimeEnd : function() {
			return this.get('sEndFullTime');
		},
		getFullTimeStart : function() {
			return this.get('sStartFullTime');
		},
		getPosterImageSrc : function() {
			return this.get('sUserImageUrl') || '';
		},
		getShortStartTime : function() {
			return this.get('sShortStartTime') || '00:OO';
		},
		getTimezoneOffset: function () {
			return parseFloat(this.get('sUserTimezone')) || 0;
		},
		getDate : function(bEnd) {
			var local_date = bEnd ? new Date(this.getEndTime() * 1e3) : new Date(this.getStartTime() * 1e3);
			var utc_date = local_date.getTime() + (local_date.getTimezoneOffset() * 60000);
			var date = new Date(utc_date + (3600000*this.getTimezoneOffset()));

			var fullMonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
			var maps = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'DEC', 'NOV'];
			var M = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec', 'Nov'];
			var m = (date.getMonth() + 1) < 10 ? '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
			var d = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
			var weekDay = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
			var D = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
			var hour = date.getHours();
			var H = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
			var h = (hour > 12) ? (hour - 12) : (hour == 0 ? 12 : hour);
			var minute = date.getMinutes();
			var i = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
			var a = (hour > 11) ? "pm" : "am";
			var A = (hour > 11) ? "PM" : "AM";

			if (hour < 10) {
				hour = '0' + hour;
			}

			if (minute < 10) {
				minute = '0' + minute;
			}
			
			var returnData = {
				fullYear : date.getFullYear(),
				fullMonth : fullMonth[date.getMonth()],
				month : maps[date.getMonth()],
				M : M[date.getMonth()],
				m : m,
				d: d,
				date : date.getDate(),
				weekDay : weekDay[date.getDay()],
				D : D[date.getDay()],
				time : this.get('getShortStartTime'),
				hour : hour,
				H : H,
				h : h,
				minute : minute,
				i : i,
				a : a,
				A : A
			};

			return returnData;
		},
		getStartTime : function() {
			return this.get('iStartTime');
		},
		getTextStartTime : function() {
			var date = this.getDate();
			return date.weekDay + ", " + date.fullMonth + " " + date.date + ", " + date.fullYear + " at " + date.h + ":" + date.minute + " " + date.a;
		},
		getTextShortStartTime : function() {
			var date = this.getDate();
			return date.h + ":" + date.minute + " " + date.A;
		},
		hasDescription : function() {
			return this.get('sDescription') != '';
		},
        getShortDescription: function (len) {
            len = len || 120;
            var strippedStr = STR.stripTags(this.getDescription());
            return utils.str.shorten(strippedStr, len, false);
        },
		hasHost : function() {
			return this.get('sHost') != '';
		},
		hasLocation : function() {
			return this.get('sLocation') != '';
		},
		hasCategory : function() {
			return this.get('sCategory') != '';
		},
		getLink : function() {
			return '<a href="' + this.getUrl() + '">' + this.getName() + '</a>';
		},
		getMultualFriendCount : function() {
			return this.get('iMutualFriends');
		},
		isFriend : function() {
			return this.get('isFriend');
		},
		getLocation : function() {
			return this.get('sLocation');
		},
		getImageSrc : function() {
			return this.get('sEventImageUrl');
		},
		getBigImageSrc : function() {
			return this.get('sEventBigImageUrl');
		},
		canInvite : function() {
			return this.get('bCanInvite');
		},
		getHost : function() {
			return this.get('sHost');
		},
		getTimestamp : function() {
			return this.get('iTimeStamp');
		},
		getTotalMember : function() {
			return this.get('iNumOfMember');
		},
		getTextTotalMember : function() {
			var iNumber = this.getTotalMember();
			return iNumber + (iNumber == 1 ? " guest" : " guests");
		},
		getTotalGuest : function() {
			return this.get('aGuestStatistic').iNumAll;
		},
		getTotalGoing : function() {
			return this.get('aGuestStatistic').iNumGoing;
		},
		getTotalMaybe : function() {
			return this.get('aGuestStatistic').iNumMaybe;
		},
		getTotalNotAttend : function() {
			return this.get('aGuestStatistic').iNumNotAttending;
		},
		getGoingList : function() {
			return this.get('aGuestList').going;
		},
		getMaybeList : function() {
			return this.get('aGuestList').maybe;
		},
		getNotAttendList : function() {
			return this.get('aGuestList').notAttend;
		},
		isMember : function() {
			return this.get('bIsMember');
		},
		isResourceApproval : function() {
			return this.get('bIsResourceApproval');
		},
		isOnRequest : function() {
			return this.get('bOnRequest');
		},
		canView : function() {
			return this.get('bCanView');
		},
		getRSVP : function() {
			return this.get('iRsvp');
		},
		getEndTime : function() {
			return this.get('iEndTime');
		},
		getTextEndTime : function() {
			var date = this.getDate(true);
			return date.weekDay + ", " + date.fullMonth + " " + date.date + ", " + date.fullYear + " at " + date.h + ":" + date.minute + " " + date.a;
		},
		getCategory: function(){
			return this.get('sCategory');
		},
        getCategoryId: function () {
            return this.get('iCategory');
        },
		getCategoryOptions: function () {
			return this.get('category_options');
		},
		getViewOptions: function () {
			return this.get('view_options');
		},
		getCommentOptions: function () {
			return this.get('comment_options');
		},
		getViewPrivacy: function () {
			return this.get('sViewPrivacy');
		},
		getCommentPrivacy: function () {
			return this.get('sCommentPrivacy');
		},
        getUrl: function () {
            return '#event-detail/' + this.getType() + '/' + this.getId();
        }
	});

});


define('text!event/tpl/event-add-update.html',[],function () { return '<div class="form-general">\n\t<!-- form content -->\n\t<div class="form-title">\n\t\t<%= _t(\'event_name\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<input type="text" class="control-full" id="event_form_name" placeholder="<%= _t(\'Event Name\') %>" value="" maxlength="100" />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'description\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<textarea id="event_form_description" class="control-full textarea" placeholder="<%= _t(\'Description\') %>"></textarea>\n\n\t</div>\n\t<!-- Start Date -->\n\t<div class="form-title">\n\t\t<%= _t(\'starting_date\') %>\n\t</div>\n\t<!-- Start Date -->\n\t<div class="form-group form-group-flex clearfix">\n\t\t<input class="input-datetime" type="text" id="event_form_start_date" value="<%=_t(\'Start Date\')%>" readonly />\n\t\t<input class="input-datetime" type="text" id="event_form_start_time" value="<%=_t(\'Start Time\')%>" readonly />\n\t</div>\n\t<!-- End date -->\n\t<div class="form-title">\n\t\t<%= _t(\'ending_date\') %>\n\t</div>\n\t<!-- End date -->\n\t<div class="form-group form-group-flex clearfix">\n        <input class="input-datetime" type="text" id="event_form_end_date" value="<%=_t(\'End Date\')%>" readonly />\n        <input class="input-datetime" type="text" id="event_form_end_time" value="<%=_t(\'End Time\')%>" readonly />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'location\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<input type="text" class="control-full" id="event_form_location" placeholder="<%= _t(\'Location\') %>" />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'category\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_category">\n            <option value=""><%= _t(\'select_category\') %></option>\n\t\t\t<%_.each(data.category_options, function (category) {%>\n\t\t\t<option value="<%=category.iCategoryId%>"><%=category.sName%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_privacy">\n\t\t\t<%_.each(data.view_options, function (option) {%>\n\t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'comment_privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_privacy_comment">\n\t\t\t<%_.each(data.comment_options, function (option) {%>\n\t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n    \n\t<div class="form-title">\n\t\t<%= _t(\'main_photo\') %>\n\t</div>\n    <div class="form-group">\n\t\t<div id="event_form_photo_holder">\n\t\t\t<!-- event photo will be add here -->\n\t\t</div>\n\t\t<input class="btn btn-form-photo" type="button" id="event_form_photo_browse" />\n\t</div>\n</div>\n';});

define('event/view/event-add-update',[
	'text!event/tpl/event-add-update.html'
], function (text) {
	return Backbone.View.extend({
		region: {
			main: '#event-add',
			content: '#content'
		},
		className: 'event-add-form',
		template: _.template(text),
		render: function(context){
			
			this.context = $.extend({}, context);
			
			this.$el.html(this.template(this.context));
			
			return this;
		},
		inject: function(){
			
			var main = $(this.region.main);
			
			main.html(this.el);
			
			var content = $(this.region.content);
			
			content.trigger('refresh');
		}
	});
});


define('text!event/tpl/event-add.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'ceate_event\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="event-add">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!event/tpl/event-attachment-photo.html',[],function () { return '<div class="attachment-photo-item">\n\t<span class="attachment-photo-image" id="event_form_photo" data-src="<%= imageURI %>">\n        <img src="<%=imageURI%>" />\n    </span>\n\t<div id="event_form_photo_remove" class="close_button"></div>\n</div>';});

define('event/view/event-add',[
    'event/view/event-add-update',
    'photo/view/photo-add-actions',
    'text!event/tpl/event-add.html',
    'text!event/tpl/event-attachment-photo.html'
], function(UpdateView, PhotoAddActionsView, text, tplAttachPhoto) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({}, context);

            this.$el.attr('id', 'event_add');

            this.$el.html(this.template(this.context));

            return this;
        },
        inject: function() {

            var self = this;

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            utils.api.get('event/formadd').done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    return utils.history.back();
                }

                self.updateView(data);
            }).fail(function() {
                utils.debug.log(arguments);
            });

            return this;
        },
        updateView: function(data) {

            new UpdateView().render({
                data: data
            }).inject();

            this.$photo_browse_btn = this.$el.find('#event_form_photo_browse');
            this.$photo_holder = this.$el.find('#event_form_photo_holder');
        },
        events: {
            "click #event_form_end_date": "handleDates",
            "click #event_form_end_time": "handleTime",
            "click #event_form_photo_browse": "onAddPhotoClick",
            "click #event_form_photo_remove": "removePhoto",
            "click #event_form_start_date": "handleDates",
            "click #event_form_start_time": "handleTime",
            "click #save_btn": "saveData",
            "onCamera": "capturePhoto",
            "onGallery": "browsePhoto",
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.addPhoto(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.addPhoto(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        addPhoto: function(imageURI) {

            var photo_item = _.template(tplAttachPhoto, {
                imageURI: imageURI
            });

            this.$photo_holder.html(photo_item);

            this.$photo_browse_btn.addClass('hide');
        },
        removePhoto: function() {

            this.$photo_holder.empty();

            this.$photo_browse_btn.removeClass('hide');
        },
        saveData: function(evt) {
            if ($('#save_btn').hasClass("processing")) {
                return;
            }

            // form var
            var event_name = $('#event_form_name').val();
            var event_description = $('#event_form_description').val();
            var event_start_date = $('#event_form_start_date').val();
            var event_start_time = $('#event_form_start_time').val();
            var event_end_date = $('#event_form_end_date').val();
            var event_end_time = $('#event_form_end_time').val();
            var event_location = $('#event_form_location').val();
            var event_category = $('#event_form_category').val();
            var event_privacy = $('#event_form_privacy').val() || "everyone";
            var event_privacy_comment = $('#event_form_privacy_comment').val() || "everyone";

            // validate
            if (!event_name) {
                utils.modal.alert("Event Name is required.");
                return;
            }
            var datePatt = /(\d{4}-\d{2}-\d{2})$/;
            var timePatt = /(\d{2}:\d{2}:\d{2})$/;
            if (!datePatt.test(event_start_date)) {
                utils.modal.alert("Please select start date.");
                return;
            }
            if (!timePatt.test(event_start_time)) {
                utils.modal.alert("Please select start time.");
                return;
            }
            if (!datePatt.test(event_end_date)) {
                utils.modal.alert("Please select end date.");
                return;
            }
            if (!timePatt.test(event_end_time)) {
                utils.modal.alert("Please select end time.");
                return;
            }
            if (!event_location) {
                utils.modal.alert("Location is required.");
                return;
            }

            var event_start = new Date((event_start_date + ' ' + event_start_time).replace(/-/g, '/'));
            var event_end = new Date((event_end_date + ' ' + event_end_time).replace(/-/g, '/'));
            if (event_start.getTime() >= event_end.getTime()) {
                utils.modal.alert("Start time must be before end time.");
                return;
            }

            // passed validate
            var data = $.extend(this.context,{
                "title": event_name,
                "description": event_description,
                "location": event_location,
                "start_date": event_start_date,
                "start_time": event_start_time,
                "end_date": event_end_date,
                "end_time": event_end_time,
                "category_id": event_category,
                "auth_view": event_privacy,
                "auth_comment": event_privacy_comment
            });

            var settings = {
                "beforeSend": this.beforeSave,
                "complete": this.saveComplete
            };

            var event_photo_el = $('#event_form_photo');
            if (event_photo_el.length > 0) {
                var event_photo_src = event_photo_el.data("src");
                this.saveEventWithPhoto(data, settings, event_photo_src);
            } else {
                this.saveEvent(data, settings);
            }
        },
        saveEvent: function(data, settings) {
            utils.api.post('event/create', data, settings).done(this.saveDone);
        },
        saveEventWithPhoto: function(data, settings, path) {
            utils.api.uploadImage('event/create', path, data).done(this.saveDone);
        },
        beforeSave: function() {
            $('#save_btn').addClass("processing");
        },
        saveComplete: function() {
            $('#save_btn').removeClass("processing");
        },
        saveDone: function(data) {
            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }

            // save success
            utils.modal.toast("Event has been created successfully.");
            window.location.href = "#event-detail/" + data.sModelType + '/' + data.iEventId;
        },
        handleDates: function(evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if (typeof myNewDate === "number") {
                myNewDate = new Date(myNewDate);
            }

            currentField.val(utils.moment(myNewDate.getTime()).format('YYYY-MM-DD'));

            datePicker.show({
                date: myNewDate,
                mode: 'date'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        handleTime: function(evt) {
            var currentField = $(evt.currentTarget);
            var time = currentField.val();
            var myNewTime = new Date();

            if (/(\d{2}:\d{2}:\d{2})$/.test(time)) {
                myNewTime.setHours(time.substr(0, 2));
                myNewTime.setMinutes(time.substr(3, 2));
            }

            currentField.val(utils.moment(myNewTime.getTime()).format('HH:mm:00'));

            datePicker.show({
                date: myNewTime,
                mode: 'time'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    currentField.val(utils.moment(newDate.getTime()).format('HH:mm:00'));
                }
                currentField.blur();
            });
        }
    });
});
define('event/controller/event-add',[
	'event/model/event', 
	'event/view/event-add'
], function(EventModel, AddEventView) {

	function AddEventController(module, item) {
		/**
		 * push current page to history
		 */
		// utils.history.push();

		utils.observer.trigger('router:changed');

		new AddEventView({
			model : new EventModel({})
		}).render({
                iItemId: item,
                sModule: module || 'event'
            }).inject();
	}


	utils.router.route('events/add(/:module/:item)', AddEventController);
});


define('text!event/tpl/event-index.html',[],function () { return '<!-- event/tpl/event-index.html-->\n<div class="header">\n\t<div clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#events/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder">\n\t<!-- search view here\t -->\n</div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align" id="event_list_view_holder">\n\t\t\t</div>\n\t\t\t<div class="pvs"></div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item <%= sView == \'upcomming\'?\'current\':\'\' %>" href="#events">\n        \t<div class=""><%= _t(\'all_events\') %></div>\n        </a>\n        <a class="menu-item <%= sView == \'my\'?\'current\':\'\' %>" href="#events/my">\n        \t<div class="sibling"><%= _t(\'my_events\') %></div>\n        </a>\n    </div>\n</div>\n';});


define('text!event/tpl/event-item.html',[],function () { return '<!-- event/tpl/event-item.html -->\n<div class="item-wrapper event-item">\n\t<div class="item-content-top">\n\t\t<a class="item-image" style="background-image: url(<%= item.getBigImageSrc() %>)" href="<%= item.getUrl() %>"></a>\n\t\t<div class="item-profile">\n\t\t\t<a href="<%=item.getPosterUrl()%>" class="item-profile-link">\n\t\t\t\t<img src="<%=item.getPosterImageSrc()%>" />\n\t\t\t\t<span class="item-profile-name"><%=item.getPosterTitle()%></span>\n\t\t\t</a>\n\t\t</div>\n\t\t<%if (item.canEdit() || item.canDelete()) {%>\n\t\t<span class="item-setting" id="<%= item.getDataId(\'setting\') %>" rel="delegate"></span>\n\t\t<%}%>\n\t</div>\n\t<div class="item-content-bottom">\n\t\t<div class="item-cal">\n\t\t\t<div class="item-month"><%= date.month %></div>\n\t\t\t<div class="item-date"><%= date.date %></div>\n\t\t</div>\t\t\n\t\t<div id="rsvp_btn" class="item-rvsp prevent">\n\t\t</div>\n\t\t<div class="item-info">\n\t\t\t<div>\n\t\t\t\t<a href="<%=item.getUrl()%>" class="item-title"><%= item.getTitle() %></a> | <span class="text-total-member"><%=item.getTextTotalMember()%></span>\n\t\t\t</div>\n\t\t\t<div class="item-description"><%= item.getTextShortStartTime() %>\n\t\t\t\t<% if(item.hasLocation()){ %>\n\t\t\t\t <%= _t(\'at\') %> <%= item.getLocation() %>\n\t\t\t\t<% } %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n<div class="event-rsvp-dropdown-wrapper hide"></div>\n<div class="pvm"></div>';});


define('text!event/tpl/event-setting.html',[],function () { return '<div class="setting-list">\n    <%if (item.canEdit()) {%>\n    <a class="setting-item" href="#events/edit/<%=item.getId()%>">\n    \t<%= _t(\'edit\') %>\n    </a>\n    <%}%>\n    <%if (item.canDelete()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n    \t<%= _t(\'delete\') %>\n    </a>\n    <%}%>\n</div>';});

define('event/view/event-setting',[
	'text!event/tpl/event-setting.html'
],function(text){
	return Backbone.PopupView.extend({
		template: _.template(text)
	});
});


define('text!event/tpl/event-rsvp.html',[],function () { return '<div class="rsvp-dropdown-content prevent">\n    <div rel="delegate" id="<%= item.getDataId(\'rsvp\') %>" data-rsvp="1" class="rsvp-dropdown-item <%if (item.getRSVP() == "1") {%>active<%}%>">\n        <i class="icon event-icon-join"></i>\n        <span><%= _t(\'attend\') %></span>\n    </div>\n    <div rel="delegate" id="<%= item.getDataId(\'rsvp\') %>" data-rsvp="2" class="rsvp-dropdown-item <%if (item.getRSVP() == "2") {%>active<%}%>">\n        <i class="icon event-icon-maybe"></i>\n        <span><%= _t(\'maybe\') %></span>\n    </div>\n    <div rel="delegate" id="<%= item.getDataId(\'rsvp\') %>" data-rsvp="3" class="rsvp-dropdown-item <%if (item.getRSVP() == "3") {%>active<%}%>">\n        <i class="icon event-icon-decline"></i>\n        <span><%= _t(\'decline\') %></span>\n    </div>\n</div>';});

define('event/view/event-rsvp',[
    'text!event/tpl/event-rsvp.html',
],function(text){
	return Backbone.InlineView.extend({
		template: _.template(text),
		className: 'rsvp-dropdown-stage',
	});
});


define('text!event/tpl/event-guest.html',[],function () { return '<!-- event/tpl/event-guest.html -->\n<div class="event-guest-list">\n\t<div class="popup-header">\n\t\t<div class="popup-title">\n\t\t\t<%=_t(\'guest_list\')%>\n\t\t</div>\n\t</div>\n\n\t<div class="popup-content swiper-container native-vscroll" id="popup-content">\n\t\t<div class="swiper-wrapper">\n\t\t\t<div class="swiper-slide">\n\t\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'no_guests_found\') %></div>\n\t\t\t\t<div id="event-guest-list">\n\t\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!event/tpl/event-guest-item.html',[],function () { return '<a href="<%=item.getUrl()%>">\n\t<div class="item-image" style="background-image:url(\'<%=item.getImageSrc()%>\')"></div>\n\t<div class="item-title"><%=item.getTitle()%></div>\n</a>';});

define('event/view/event-guest-item',[
	'text!event/tpl/event-guest-item.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'event-guest-item',
		template: _.template(text),
		render: function(item){
			
			this.$el.html(this.template({item: item}));
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});

define('event/view/event-guest-list',[
	'event/view/event-guest-item'
], function (ItemView) {
	return Backbone.View.extend({
		region: {
			content: '#popup-content',
			list: '#event-guest-list'
		},
		template: null,
		render: function(context){
			
			this.context = $.extend({}, context);

			this.$scroller = this.$el.find(this.region.scroller);
			
			return this;
		},
		inject: function(){
			
			var content = $(this.region.content);
			var list = $(this.region.list);
			
			content.find('.loading-initiator').remove();
			
			if (this.context.items.length > 0) {
				function inject(dom) {
	                list['append'](dom);
	            }
				
				_.each(this.context.items, function (item) {
					new ItemView().render(item).inject(inject);
				});
			} else {
				$('#not_found').removeClass("hide");
			}
			
			if(constants.os_version < '30'){
				var that = this;
				window.setTimeout(function(){
					that.$scroller.trigger('refresh');
				},1000);
			}

		}
	});
});

define('event/view/event-guest',[
	'text!event/tpl/event-guest.html',
	'event/view/event-guest-list',
	'user/model/user'
], function(text, ListView, UserModel){
	
	return Backbone.View.extend({
		region: {
			main: '#simple-popup',
            content: '#popup-content'
		},
        
        template: _.template(text),
        
        render: function(context){
        	
        	this.context = $.extend({}, context);
        	
        	this.$el.html(this.template(this.context));

			this.$scroller = this.$el.find(this.region.scroller);
			
			return this;
		},
		
        inject: function(){
			var main = $(this.region.main);
			
			main.html(this.el);
			
			var content = $(this.region.content);
			
			content.vscroll();
			
			// get user list
			this.appendList();
			
			utils.popup.open(this.$el);

			if(constants.os_version < '30'){
				this.$scroller.ensureSwiper();
			}
			
			return this;
		},
		
		appendList: function () {
			var self = this;
            
            var sendData = {
                iEventId: this.context.iEventId,
	            iRSVP: this.context.iRSVP,
	            iAmountOfMember: 9999
            };
            
            utils.api.get('event/viewguestlist', sendData)
			.done(function(data){
				if (data.error_code && data.error_code > 0) {
					return utils.modal.alert(data.error_message || _t('Can not load data from server'));
				}
				
				var items = data.map(function(item){
					return new UserModel(item);
				});
				
				new ListView().render({
					items: items
				}).inject();
			});
		}
	});
});

define('event/ipad/view/event-item',[],function(){
	return {
	    postRSVP: function (evt, data) {
            var postData = {
                iEventId: this.model.getId(),
                iRsvp: data.rsvp,
                iAmountOfMember: 10
            };
            
            this.$rsvpHolder.addClass('hide');
            this.$rsvpBtn.removeClass('active');
            
            utils.popup.close();
            
            this.$rsvpBtn.addClass('processing');
            
            utils.api.post('event/addrsvp', postData, {context: this})
            .done(this.postRSVPComplete)
            .fail(this.postRSVPFail);
        },
        updateNumberOfMemberCount: function () {
        	this.$el.find('.num-total-member').text(this.model.getTotalMember());
        }
	};
});

define('event/view/event-item',[
	'text!event/tpl/event-item.html',
	'event/view/event-setting',
    'event/view/event-rsvp',
    'event/view/event-guest',
    'event/ipad/view/event-item'
],function(text, SettingView, RSVPView, GuestView){
	
	return Backbone.ItemView.extend({
		moduleId: 'event/view/event-item',
		region: {
			main: '#main',
			content: '#content'
		},
		className: 'event-item',
		template:  _.template(text),
		settingView: SettingView,
		events: {
			"click #top_menu_toggle": "toggleTopMenu",
			"click #rsvp_btn": "onRSVPClick",
	        "click .guest-count": "showMemberList",
            "rsvp": "postRSVP"
		},
		initialize: function(){
			var self = this;
			this.model.on('change',function(){
				self.updateNumberOfMemberCount();
			});
			Backbone.ItemView.prototype.initialize.apply(this, arguments);
		},
		render: function(){
			
			this.$el.html(this.template({item: this.model, date: this.model.getDate()}));
			
			this.$el.attr({
				'id': this.model.getDataId(),
				'rel': 'link',
				'data-url': this.model.getUrl(),
			});
			
			this.$rsvpBtn = this.$el.find('#rsvp_btn');
			this.$rsvpHolder = this.$el.find('.event-rsvp-dropdown-wrapper');
			
			return this;
		},
		inject: function(inject){
			inject(this.$el);
			
			return this;
		},
		onRSVPClick: function () {
			if (this.$rsvpBtn.isProcessing()) {
				return false;
			}
			
			if(this.$rsvpBtn.hasClass('active')){
				this.$rsvpBtn.removeClass('active');
				this.$rsvpHolder.addClass('hide');
			}else{
				this.$rsvpBtn.addClass('active');
				
				new RSVPView({
	            	model: this.model
	            }, this.$rsvpHolder)
	            .render()
	            .inject();
			}
		},
        
        postRSVP: function (evt, data) {
            var postData = {
                iEventId: this.model.getId(),
                iRsvp: data.rsvp
            };
            
            this.$rsvpHolder.addClass('hide');
            this.$rsvpBtn.removeClass('active');
            
            utils.popup.close();
            
            this.$rsvpBtn.addClass('processing');
            
            utils.api.post('event/addrsvp', postData, {context: this})
            .done(this.postRSVPComplete)
            .fail(this.postRSVPFail);
        },
        
        postRSVPComplete: function(data){
        	
        	this.$rsvpBtn.isProcessing(false)
        	
            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }else{
                // success
                utils.modal.toast(data.message);
                if(data.event_data){
                	this.model.set(data.event_data);
                }
            }
        },

        postRSVPFail: function(){
        	this.$rsvpBtn.isProcessing(false)
        },

        updateNumberOfMemberCount: function (api) {
        	this.$el.find('.text-total-member').text(this.model.getTextTotalMember());
        },
        
        doDeleteConfirm: function () {
            var self = this;
            utils.modal.confirm("Do you want to delete this event?", function (selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');
                    
                    utils.api.post("event/delete", {iEventId: self.model.getId()})
                    .always(function () {
		                utils.observer.trigger('releaseui');
		                utils.popup.close();
		            })
                    .done(function(data){
                        if (data.error_code && data.error_code > 0) {
							return utils.modal.alert(data.error_message || _t('Can not load data from server'));
						}
                        
                        // success
                        self.deleteSuccess(data);
                    });
                }
            }, _t('Confirm'), [_t('Ok'),_t('Cancel')]);
        },
        
        deleteSuccess: function (data) {
        	utils.modal.toast(data.message);
            this.$el.remove();
            
            var content = $(this.region.content);
            content.trigger('refresh');
        },
        
        showMemberList: function (evt) {
        	new GuestView().render({
        		iEventId: this.model.getId(),
        		iRSVP: $(evt.currentTarget).data('rsvp')
        	}).inject();
        }
	});
});


define('text!event/tpl/event-list.html',[],function () { return '<div id="event-list">\n\t<div class="loading-initiator">\n\t\t<!-- loading ... -->\n\t</div>\n</div>';});

define('event/view/event-list',[
	'event/model/event',
	'event/view/event-item',
	'text!event/tpl/event-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			sView: 'all',
			iPage: 1,
			sSearch: '',
			iCatSearch: 'all_cate',
			iAmountOfevent: 5
		},
		followById: false,
		api: 'event/get',
		phraseNotFound: 'No events found.',
		phraseNotMore: 'No more events.',
		className: 'event-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('text!event/tpl/event-search.html',[],function () { return '<div class="search-simple">\n\t<%if (sView != \'my\') {%>\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<%}%>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_events\') %>" value="" />\n\t</div>\n</div>\n<%if (sView != \'my\') {%>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n                <option value="all_cate"><%= _t(\'all_categories\') %></option>\n                <option value="attending"><%= _t(\'I\\\'m Attending\') %></option>\n                <option value="may_attend"><%= _t(\'i_may_attend\') %></option>\n                <option value="not_attending"><%= _t(\'i_not_attending\') %></option>\n                <option value="invites"><%= _t(\'event_invites\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'latest\') %></option>\n                <option value="most_view"><%= _t(\'most_viewed\') %></option>\n                <option value="most_liked"><%= _t(\'most_liked\') %></option>\n                <option value="most_disscussed"><%= _t(\'most_discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\n\t</div>\n</div>\n<%}%>';});

define('event/view/event-search',[
	'text!event/tpl/event-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(query){
			
			
			this.$el.html(this.template($.extend({sView: 'upcoming'},query)));
			
			this.$categoryInput = this.$el.find('#search_category');
			this.$orderInput 	= this.$el.find('#search_order');
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			this.fetchData();
			
			return this;
		},
		fetchData: function(){
			utils.api.get('event/listcategories',{},{context: this}).done(this.updateView);
		},
		updateView: function(data){
			if (data.error_code) {
				return utils.modal.alert(data.error_message);
			}
			_.each(data, function (option) {
				this.$categoryInput.append(new Option(option.sName, option.iCategoryId));
			}, this);
		},
		events: {
			"click #adv_search_toggle_btn": "toggleAdvSearch",
			"click #search_icon": "submitSearch",
			"click #search_btn": "submitSearch"
		},
		toggleAdvSearch: function (evt) {
			this.$advSearchHolder.toggleClass("hide");
		},
		submitSearch: function () {
			
			this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || '',
				iCatSearch: this.$categoryInput.val() || 'all_cate',
				sOrder: this.$orderInput.val() || 'creation_date'
			});
		}
	});
	
});

define('event/view/event-index',[
	'text!event/tpl/event-index.html',
	'event/view/event-list',
	'event/view/event-search'
],function(text){
	
	var ListView = require('event/view/event-list')
	  , SearchView = require('event/view/event-search'); 
	
	return Backbone.View.extend({
		region: {
			holder: '#main',
			scroller: '#content'
		},
		template: _.template(text),
		initialize: function(){ },
		render: function(query){
			
			this.query  = $.extend({sView: 'upcoming'}, query);
			
			this.$el.html(this.template(this.query));
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView  = new ListView({},this.$el.find('#event_list_view_holder'), this.$scroller);
			
			this.searchView = new SearchView();
			
			this.searchView.render({sView: this.query.sView}).inject();
			
			// render list view
			this.listView.render(this.query).inject();
			
			var self = this;
			
			this.searchView.on('submit', function(data){
				self.listView.resetQuery($.extend({}, self.query, data));
			});
			
			return this;
		}
	});
});

define('event/controller/event-index',[
	'event/view/event-index'
],function(IndexView){
	
	function UpcomingEventsController(filter)
	{
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');

		new IndexView()
			.render({
				sView: 'upcomming' 
			})
			.inject();
	}
	
	function PastEventsController(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new IndexView()
			.render({
				sView: 'past'
			})
			.inject();
	}
	
	function MyEventsController(){
		
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new IndexView()
			.render({
				sView: 'my'
			})
			.inject();
	}
	
	
	utils.router.route('events', UpcomingEventsController);
	
	utils.router.route('events/my', MyEventsController);
	
	utils.router.route('events/past', PastEventsController);
	
});


define('text!event/tpl/event-invite.html',[],function () { return '<!-- event/tpl/event-invite.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="invite_btn"><%= _t(\'invite\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n\t\t\t<%= _t(\'invite_friends\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'you_have_no_friends_you_can_invite\') %></div>\n\t\t\t<div id="event-invite-list">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a id="markall_btn" class="menu-item" href="javascript:void(0)">\n        \t<div class=""><%= _t(\'mark_all\') %></div>\n        </a>\n        <a id="unmarkall_btn" class="menu-item" href="javascript:void(0)">\n        \t<div class="sibling"><%= _t(\'unmark_all\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!event/tpl/event-invite-item.html',[],function () { return '<div class="item-image" style="background-image:url(\'<%=item.getImageSrc()%>\')"></div>\n<div class="item-title"><%=item.getTitle()%></div>\n<div class="item-mark"><input type="checkbox" class="item-checkbox" data-id="<%=item.getId()%>" /></div>';});

define('event/view/event-invite-item',[
	'text!event/tpl/event-invite-item.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'event-invite-item',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		}
	});
});


define('text!event/tpl/event-invite-list.html',[],function () { return '<div class="loading-initiator"></div>';});

define('event/view/event-invite-list',[
	'user/model/user',
	'event/view/event-invite-item',
	'text!event/tpl/event-invite-list.html',
],function(Model, ItemView, text){

	return Backbone.ListView.extend({
		defaults: {
			iEventId: 0,
            sAction: "all",
            amountOfFriend: "9999",
            LastFriendIdViewed: "0"
		},
		followById: false,
		api: 'event/getinvitepeople',
		phraseNotFound: 'No friends found.',
		phraseNotMore: 'No more friends.',
		className: 'friend-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView
	});
});


define('user/collection/user',[
	'user/model/user'
],function(Model){
	return Backbone.Collection.extend({
		model: Model
	});
});
define('event/view/event-invite',[
	'text!event/tpl/event-invite.html',
	'event/view/event-invite-list',
	'user/collection/user'
], function(text, ListView, UserCollection){
	
	return Backbone.View.extend({
		region: {
			wrapper: '#main',
			scroller: '#content',
			listViewHolder: '#event-invite-list'
		},
		initialize: function(){
			this.invitePeople = new UserCollection();
		},
		template: _.template(text),
        render: function(){
        	
            this.$el.html(this.template());
            
            this.$scroller = this.$el.find(this.region.scroller);
            this.$listViewHolder  = this.$el.find(this.region.listViewHolder);
            this.$inviteBtn = this.$el.find('#invite_btn');
            			
			return this;
		},
        inject: function(){
        	
			$(this.region.wrapper).html(this.$el);
			
			this.$scroller.ensureVerticalScroll();
			
			// get user list
			
			this.listView = new ListView({}, this.$listViewHolder, this.$scroller,{loadmore:false, loadnew: false});
			
			this.listView.render({iEventId: this.model.getId()}).inject();
			return this;
		},
		events: {
			"click .event-invite-item": "clickItem",
			"click #markall_btn": "markAll",
			"click #unmarkall_btn": "unmarkAll",
			"click #invite_btn": "invite"
		},
		clickItem: function (evt) {
			
			if (!$(evt.target).is(':checkbox')) {
				var checkbox = $(evt.currentTarget).find(':checkbox');
	            
	            if (checkbox.is(':checked')) {
	                checkbox.prop('checked', false);
	            } else {
	                checkbox.prop('checked', true);
	            }
			}
		},
		markAll: function (evt) {
			$(':checkbox').prop('checked', true);
		},
		unmarkAll: function (evt) {
			$(':checkbox').prop('checked', false);
		},
		invite: function (evt) {
			if (this.$inviteBtn.isProcessing()) {
				return false;
			}
			
			var aUserId = new Array();
	        $(":checkbox:checked").each(function () {
	            aUserId.push($(this).data('id'));
	        });
	        
	        if (aUserId.length == 0) {
	            utils.modal.alert(_t('Please select friend to invite.'));
	            return false;
	        }
	        
	        var sendData = {
	        	"iEventId": this.model.getId(),
                "sUserId": aUserId.join(',')
	        }, settings = {
	        	'context': this
	        }
	        
	        this.$inviteBtn.isProcessing(true);
	        
	        utils.api.post("event/invite", sendData, settings)
//	        .done(this.doInviteComplete)
//	        .fail(this.doInviteFail)
            .always(function () {
                // not check result
                this.$inviteBtn.isProcessing(false);
                utils.modal.toast("Invited member(s) successfully!");
				utils.history.back();
            });
		},
		doInviteComplete: function (data) {
        	if (data.error_code && data.error_code > 0) {
				utils.modal.alert(data.error_message);
			}else{
				utils.modal.toast("Invited member(s) successfully!");
				utils.history.back();
			}
			this.$inviteBtn.isProcessing(false);
        },
		doInviteFail: function(){
			var msg = _t('Could not send invite');
			utils.modal.alert(msg);
			this.$inviteBtn.isProcessing(false);
		}
	});
});
define('event/controller/event-invite',[
	'event/model/event',
	'event/view/event-invite'
],function(EventModel, EventInviteView){
	
	function EventInviteController(id)
	{
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new EventInviteView({
			model: new EventModel({iEventId: id})
		}).render().inject();
	}
	utils.router.route('events/invite/:id', EventInviteController);
});


define('text!event/tpl/event-edit-update.html',[],function () { return '<div class="form-general">\n\t<!-- form content -->\n\t<div class="form-title">\n\t\t<%= _t(\'event_name\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<input type="text" class="control-full" placeholder="Event Name"  id="event_form_name" value="<%=item.getTitle()%>" maxlength="100" />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'description\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<textarea id="event_form_description" class="control-full textarea" placeholder="Description"><%=item.getDescription()%></textarea>\n\t</div>\n    \n    <!-- Start Date -->\n\t<div class="form-title">\n\t\t<%= _t(\'starting_date\') %>\n\t</div>\n    <div class="form-group form-group-flex clearfix">\n        <input class="input-datetime control-full" type="text" id="event_form_start_date" value="<%=date.fullYear+\'-\'+date.m+\'-\'+date.d%>" readonly />\n        <input class="input-datetime control-full" type="text" id="event_form_start_time" value="<%=date.H+\':\'+date.i+\':00\'%>" readonly />\n    </div>\n\n    <!-- End date -->\n\t<div class="form-title">\n\t\t<%= _t(\'ending_date\') %>\n\t</div>\n    <div class="form-group form-group-flex clearfix">\n        <input class="input-datetime control-full" type="text" id="event_form_end_date" value="<%=end_date.fullYear+\'-\'+end_date.m+\'-\'+end_date.d%>" readonly />\n        <input class="input-datetime control-full" type="text" id="event_form_end_time" value="<%=end_date.H+\':\'+end_date.i+\':00\'%>" readonly />\n    </div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'location\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<input type="text" class="control-full" placeholder="Location" id="event_form_location" value="<%=item.getLocation()%>" />\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'category\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_category">\n            <option value=""><%= _t(\'Select Category\') %></option>\n\t\t\t<%_.each(item.getCategoryOptions(), function (category) {%>\n\t\t\t<option value="<%=category.iCategoryId%>" <%if (category.iCategoryId == item.getCategoryId()) {%>selected="selected"<%}%>><%=category.sName%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_privacy">\n\t\t\t<%_.each(item.getViewOptions(), function (option) {%>\n\t\t\t<option value="<%=option.sValue%>" <%if (option.sValue == item.getViewPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'comment_privacy\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<select class="control-full" id="event_form_privacy_comment">\n\t\t\t<%_.each(item.getCommentOptions(), function (option) {%>\n\t\t\t<option value="<%=option.sValue%>" <%if (option.sValue == item.getCommentPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n\t\t\t<%}, this);%>\n\t\t</select>\n\t</div>\n\n\t<div class="form-title">\n\t\t<%= _t(\'main_photo\') %>\n\t</div>\n\t<div class="form-group">\n\t\t<div id="event_form_photo_holder">\n\t\t\t<!-- event photo will be add here -->\n\t\t</div>\n\t\t<input class="btn btn-form-photo" type="button" id="event_form_photo_browse" />\n\t</div>\n</div>';});


define('text!event/tpl/event-edit.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'edit_event\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="event-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('event/view/event-edit',[
    'photo/view/photo-add-actions',
    'text!event/tpl/event-attachment-photo.html',
    'text!event/tpl/event-edit-update.html',
    'text!event/tpl/event-edit.html'
], function(PhotoAddActionsView, tplAttachPhoto, formText, text) {

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            formHolder: '#event-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function(context) {

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$el.html(this.template(this.context));

            this.$scroller = this.$el.find(this.region.scroller);

            this.$formHolder = this.$el.find(this.region.formHolder);

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var sendData = {
                iEventId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('event/formedit', sendData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                window.history.back();
                return;
            } else {
                this.model.set(data);
                this.updateView();
            }
        },
        updateView: function(data) {

            this.$formHolder.html(this.formTemplate({
                item: this.model,
                date: this.model.getDate(),
                end_date: this.model.getDate(true)
            }));

            this.$photo_browse_btn = this.$el.find('#event_form_photo_browse');
            this.$photo_holder = this.$el.find('#event_form_photo_holder');
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
        },
        events: {
            "click #event_form_end_date": "handleDates",
            "click #event_form_end_time": "handleTime",
            "click #event_form_photo_browse": "onAddPhotoClick",
            "click #event_form_photo_remove": "removePhoto",
            "click #event_form_start_date": "handleDates",
            "click #event_form_start_time": "handleTime",
            "click #save_btn": "saveData",
            "onCamera": "capturePhoto",
            "onGallery": "browsePhoto"
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.addPhoto(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.addPhoto(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        addPhoto: function(imageURI) {

            var photo_item = _.template(tplAttachPhoto, {
                imageURI: imageURI
            });

            this.$photo_holder.html(photo_item);

            this.$photo_browse_btn.addClass('hide');
        },
        removePhoto: function() {

            this.$photo_holder.empty();

            this.$photo_browse_btn.removeClass('hide');
        },
        saveData: function(evt) {
            if ($('#save_btn').hasClass("processing")) {
                return;
            }

            // form var
            var event_name = $('#event_form_name').val();
            var event_description = $('#event_form_description').val();
            var event_start_date = $('#event_form_start_date').val();
            var event_start_time = $('#event_form_start_time').val();
            var event_end_date = $('#event_form_end_date').val();
            var event_end_time = $('#event_form_end_time').val();
            var event_location = $('#event_form_location').val();
            var event_category = $('#event_form_category').val();
            var event_privacy = $('#event_form_privacy').val() || "everyone";
            var event_privacy_comment = $('#event_form_privacy_comment').val() || "everyone";

            // validate
            if (!event_name) {
                utils.modal.alert("Event Name is required.");
                return;
            }
            var datePatt = /(\d{4}-\d{2}-\d{2})$/;
            var timePatt = /(\d{2}:\d{2}:\d{2})$/;
            if (!datePatt.test(event_start_date)) {
                utils.modal.alert("Please select start date.");
                return;
            }
            if (!timePatt.test(event_start_time)) {
                utils.modal.alert("Please select start time.");
                return;
            }
            if (!datePatt.test(event_end_date)) {
                utils.modal.alert("Please select end date.");
                return;
            }
            if (!timePatt.test(event_end_time)) {
                utils.modal.alert("Please select end time.");
                return;
            }
            if (!event_location) {
                utils.modal.alert("Location is required.");
                return;
            }

            var event_start = new Date((event_start_date + ' ' + event_start_time).replace(/-/g, '/'));
            var event_end = new Date((event_end_date + ' ' + event_end_time).replace(/-/g, '/'));
            if (event_start.getTime() >= event_end.getTime()) {
                utils.modal.alert("Start time must be before end time.");
                return;
            }

            // passed validate
            var data = {
                "iEventId": this.model.getId(),
                "title": event_name,
                "description": event_description,
                "location": event_location,
                "start_date": event_start_date,
                "start_time": event_start_time,
                "end_date": event_end_date,
                "end_time": event_end_time,
                "category_id": event_category,
                "auth_view": event_privacy,
                "auth_comment": event_privacy_comment
            }

            var settings = {
                "beforeSend": this.beforeSave,
                "complete": this.saveComplete
            };

            var event_photo_el = $('#event_form_photo');
            if (event_photo_el.length > 0) {
                var event_photo_src = event_photo_el.data("src");
                this.saveEventWithPhoto(data, settings, event_photo_src);
            } else {
                this.saveEvent(data, settings);
            }
        },
        saveEvent: function(data, settings) {
            utils.api.post('event/edit', data, settings).done(this.saveDone);
        },
        saveEventWithPhoto: function(data, settings, path) {
            utils.api.uploadImage('event/edit', path, data).done(this.saveDone);
        },
        beforeSave: function() {
            $('#save_btn').addClass("processing");
        },
        saveComplete: function() {
            $('#save_btn').removeClass("processing");
        },
        saveDone: function(data) {
            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }

            // save success
            utils.modal.toast("Event has been updated successfully.");
            window.location.href = "#event-detail/" + data.sModelType + '/' + data.iEventId;
        },
        handleDates: function(evt) {
            var currentField = $(evt.currentTarget);

            var myNewDate = Date.parse(currentField.val().replace(/-/g, '/')) || new Date();
            if (typeof myNewDate === "number") {
                myNewDate = new Date(myNewDate);
            }

            datePicker.show({
                date: myNewDate,
                mode: 'date'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    currentField.val(utils.moment(newDate.getTime()).format('YYYY-MM-DD'));
                }
                currentField.blur();
            });
        },
        handleTime: function(evt) {
            var currentField = $(evt.currentTarget);
            var time = currentField.val();
            var myNewTime = new Date();

            if (/(\d{2}:\d{2}:\d{2})$/.test(time)) {
                myNewTime.setHours(time.substr(0, 2));
                myNewTime.setMinutes(time.substr(3, 2));
            }

            datePicker.show({
                date: myNewTime,
                mode: 'time'
            }, function(returnDate) {
                if (returnDate !== "" && returnDate != "Invalid Date") {
                    var newDate = new Date(returnDate);
                    currentField.val(utils.moment(newDate.getTime()).format('HH:mm:00'));
                }
                currentField.blur();
            });
        }
    });
});
define('event/controller/event-edit',[
	'event/model/event',
	'event/view/event-edit'
],function(EventModel, EditEventView){
	
	function EditEventController(id)
	{
		// utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		new EditEventView({
			model: new EventModel({iEventId: id})
		}).render().inject();
	}
	utils.router.route('events/edit/:id', EditEventController);
});


define('text!event/tpl/event-detail-info.html',[],function () { return '<!-- event/tpl/event-detail-info.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div class="content content-background with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="event-detail-info" class="event-detail-info">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item current" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a id="event_menu_actvity" class="menu-item hide" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!event/tpl/event-detail-info-update.html',[],function () { return '<!-- event/tpl/event-item.html -->\n<div class="pvs"></div>\n<div class="event-item">\n\t<div class="item-wrapper">\n\t\t<div class="item-content-top">\n\t\t\t<div class="item-image" style="background-image: url(<%= item.getBigImageSrc() %>)"></div>\n\t\t</div>\t\t\n            \n\t\t<div class="table">\n\t\t\t<div class="table-cell item-cal">\n\t\t\t\t<div class="item-month"><%= date.month %></div>\n\t\t\t\t<div class="item-date"><%= date.date %></div>\n\t\t\t</div>\n\t\t\t<div class="table-cell">\n\t\t\t\t<div class="item-livetime">\n\t\t\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id="rsvp_btn" class="table-cell item-rvsp">\n\t\t\t\t<div class="icon-rvsp"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="event-rsvp-dropdown-wrapper hide"></div>\n\t\t<%if (item.hasDescription()) {%>\n        <div class="item-description">\n            <%= utils.str.shorten(item.getDescription(), 250, true) %>\n        </div>\n        <%}%>\n\t</div>\n</div>\n<div class="pvs"></div>\n\n<%if (item.canView()) {%>\n<div class="event-item-extra">\n\t<%if (item.hasLocation()) {%>\n\t<div class="item-text">\n\t\t<i class="icon icon-location-arrow"></i>\n\t\t<span><%= item.getLocation() %></span>\n\t</div>\n\t<%}%>\n\t<%if (item.hasCategory()) {%>\n\t<div class="item-text">\n\t\t<i class="icon icon-folder-close"></i>\n\t\t<span><%= item.getCategory() %></span>\n\t</div>\n\t<%}%>\n\t<div class="item-text">\n\t\t<i class="icon icon-time"></i>\n\t\t<span><%= item.getTextStartTime() %></span> - \n\t\t<span><%= item.getTextEndTime() %></span>\n\t</div>\n</div>\n<div class="pvs"></div>\n<div class="event-item-extra">\n\t<div class="item-stats guest-count" data-rsvp="1"><span class="stats-number"><%=item.getTotalGoing()%></span><i class="icon icon-user"></i></div>\n\t<div class="item-text"><%= _t(\'going\') %></div>\t\n\t<div class="clearfix">\n\t\t<%_.each(item.getGoingList(), function (guest) {%>\n\t\t<a href="#user/<%=guest.iUserId%>">\n\t\t\t<img src="<%=guest.sUserImage%>" height="48">\n\t\t</a>\n\t\t<%}, this);%>\n\t</div>\n</div>\n\n<div class="pvs"></div>\n<div class="event-item-extra">\n\t<div class="item-stats guest-count" data-rsvp="2"><span class="stats-number"><%=item.getTotalMaybe()%></span><i class="icon icon-user"></i></div>\n\t<div class="item-text"><%= _t(\'maybe\') %></div>\t\n\t<div class="clearfix">\n\t\t<%_.each(item.getMaybeList(), function (guest) {%>\n\t\t<a href="#user/<%=guest.iUserId%>">\n\t\t\t<img src="<%=guest.sUserImage%>" height="48">\n\t\t</a>\n\t\t<%}, this);%>\n\t</div>\n</div>\n<div class="pvs"></div>\n<%}%>';});


define('text!event/tpl/event-topmenu.html',[],function () { return '<div class="setting-list">\n    <%if (item.canInvite()) {%>\n    <a class="setting-item" href="#events/invite/<%=item.getId()%>"><%= _t(\'invite\') %></a>\n    <%}%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'share\') %>"><%= _t(\'share\') %></a>\n    <%if (item.canEdit()) {%>\n    <a class="setting-item" href="#events/edit/<%=item.getId()%>">\n        <%= _t(\'edit\') %>\n    </a>\n    <%}%>\n    <%if (item.canDelete()) {%>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n        <%= _t(\'delete\') %>\n    </a>\n    <%}%>\n</div>';});

define('event/view/event-topmenu',[
	'text!event/tpl/event-topmenu.html',
],function(text){
	return Backbone.TopMenuView.extend({
		moduleId: 'event/view/event-topmenu',
		template: _.template(text),
        inject: function(){
			utils.popup.open(this.$el);
			return this;
		},
		hide: function(){
            utils.popup.close();
			return this;
		}
	});
});
define('event/ipad/view/event-detail-info',[],function(){
	return {
		fetchData: function(){
        	
        	var sendData  = {
                iEventId: this.model.getId(),
                iAmountOfMember: 10
            };
        	
			utils.api.get('event/detail', sendData, {context: this})
			.done(this.fetchDataComplete)
			.fail(this.fetchDataFail);
        }
	};
});

define('event/view/event-detail-info',[
	'text!event/tpl/event-detail-info.html',
	'text!event/tpl/event-detail-info-update.html',
	'event/view/event-item',
    'event/view/event-topmenu',
    'event/ipad/view/event-detail-info'
], function(){
	
	var text		= require('text!event/tpl/event-detail-info.html')
	  , ItemView	= require('event/view/event-item')
	  , textInfoUpdate =  require('text!event/tpl/event-detail-info-update.html')
	  , RSVPView	= require('event/view/event-rsvp');
	
	return ItemView.extend({
		moduleId: 'event/view/event-detail-info',
		region: {
			holder: '#main',
			scroller: '#content',
		},
		className:'event-detail-page',
		template: _.template(text),
		topMenuView: require('event/view/event-topmenu'),
		templateInfoUpdate: _.template(textInfoUpdate),
		render: function(){

			this.$el.attr('id', this.model.getDataId());
			
			this.$el.html(this.template({item: this.model}));
			
			this.$holder =  $(this.region.holder);
			
			this.$scroller =  this.$el.find('#content');
			
			this.$titleLabel  = this.$el.find('#page_title');
			
			this.$eventDetailInfoHolder =  this.$el.find('#event-detail-info');
			
			this.$topMenuBtn = this.$el.find('#top_menu_toggle');
			
			return this;
		},
		
		inject: function(){
			var self = this;
			
			this.$holder.html(this.$el);
			
			this.$scroller.ensureVerticalScroll();			
			
			
			this.fetchData();
			
			return this;
		},
		
		updateNumberOfMemberCount: function (api) {
			
        	this.updateView();
        },
        
        fetchData: function(){
        	
        	var sendData  = {iEventId: this.model.getId()},
        		settings  = {context: this}
        		;
        	
			utils.api.get('event/detail', sendData, settings)
			.done(this.fetchDataComplete)
			.fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data){
        	
        	if(data.error_code && data.error_code > 0){
        		utils.modal.alert(data.error_message);
        		utils.history.back();
        	}else{
				this.model.set(data);
				this.updateView();
        	}
        	// besure about error code
        },
        
        fetchDataFail: function(){
        	
        },
        
        toggleTopMenu: function () {
			utils.topMenu.toggle(this, this.model);
            this.topMenuIsShown(false);
		},
		
		updateView: function () {
			// don't have view permission
			if (!this.model.canView()) {
				this.$titleLabel.html(_t('Private Page'));
				this.$eventDetailInfoHolder.html(utils.helper.permission_deny());
				return;
			}
            
            this.$topMenuBtn.removeClass('hide');
			$('#event_menu_actvity').removeClass('hide');
            $('#event_menu_photo').removeClass('hide');
			
			this.$titleLabel.html(this.model.getTitle());
			
			this.$eventDetailInfoHolder.html(this.templateInfoUpdate({
				item: this.model,
				date: this.model.getDate(),
                end_date: this.model.getDate(true)}));
            
            this.$rsvpBtn = this.$el.find('#rsvp_btn');
			
			this.$rsvpHolder = this.$el.find('.event-rsvp-dropdown-wrapper');
			
            this.$scroller.trigger('refresh'); // refresh view.
		},
        deleteSuccess: function (data) {
        	utils.modal.toast(data.message);
        	window.location.href= '#events/my';
        }
	});
});


define('text!event/tpl/event-detail-activity.html',[],function () { return '<!-- activity/tpl/activity-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'event_activity\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="top_menu_holder" class="top-menu hide"></div>\n\n<div id="activity_minibar_holder" class="clearfix">\n</div>\n\n<div class="content content-background with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<%= utils.helper.loadnew() %>\n\t\t<div class="swiper-slide">\n\t\t\t<div id="activity-list" class="swiper-list vertical-align"></div>\n\t\t\t\t<%= utils.helper.loadmore() %>\n\t\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a class="menu-item current" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n    </div>\n</div>';});

define('event/view/event-detail-activity',[
	'event/view/event-item',
	'text!event/tpl/event-detail-activity.html',
    'event/view/event-topmenu',
	'activity/view/activity-list',
	'activity/view/activity-minibar'
], function(ItemView, text, TopMenuView, ListView, MiniBarView){
	
	return ItemView.extend({
		region: {
			main: '#main',
			content: '#content'
		},
		template: _.template(text),
		className: 'newsfeed-page',
		topMenuView: TopMenuView,
		render: function(){
			
			this.$el.html(this.template({item: this.model}));
			
			this.$el.attr({
				id: this.model.getDataId()
			});
			
			this.$topMenuBtn = this.$el.find('#top_menu_toggle');
			
			return this;
		},
		inject: function(){
			var self = this;
			
			$(this.region.main).html(this.$el);
			
			this.$scroller = this.$el.find('#content');
			
			this.$scroller.ensureVerticalScroll();
						
			utils.api.get('event/view', {iEventId: this.model.getId()}, {context: this})
			.done(function(data){
				if(data.error_code && data.error_code > 0){
	        		utils.modal.alert(data.error_message);
	        		utils.history.back();
	        	}else{
					this.model.set(data);
					this.updateView();
	        	}
			});
			
			// activity list
			new ListView({}, this.$el.find('#activity-list'), this.$scroller, {loadnew: true}).render({
				sItemType: 'event',
				sParentId: 'event',
				iItemId: this.model.getId()
			}).inject();
			
			return this;
		},
		events: {
            "click #top_menu_toggle": "toggleTopMenu"
		},
        toggleTopMenu: function () {
        	utils.topMenu.toggle(this, this.model);
            this.topMenuIsShown(false);
		},
		deleteSuccess: function (data) {
        	utils.modal.toast(data.message);
        	window.location.href= '#events/my';
        },
		updateView: function(){
			this.$topMenuBtn.removeClass('hide');
			
			// mini bar
			if (this.model.canComment()) {
				this.$scroller.addClass('with-topbar');
				
				new MiniBarView().render({
					sItemType: this.model.getType(),
					iItemId: this.model.getId(),
					exclude: ['checkin']
				}).inject();
			}
		}
	});
});

define('event/controller/event-detail',[
	'event/model/event',
	'event/view/event-detail-info',
	'event/view/event-detail-activity'
], function(Model, InfoView, ActivityView) {

	function ActivityController(type, id) {

		utils.history.push();

		utils.observer.trigger('router:changed');

		new ActivityView({
			model : new Model({
				iEventId : id,
                sModelType: type
			})
		}).render().inject();

	}

	function InfoController(type, id) {
		utils.history.push();

		utils.observer.trigger('router:changed');

		new InfoView({
			model : new Model({
				iEventId : id,
                sModelType: type
			})
		}).render().inject();
	}
    
    utils.router.route('event-detail/:type/:id', InfoController);
    utils.router.route('event-detail/:type/:id/activity', ActivityController);
});

define('event/main',[
	'core',
	// plugin
	'event/plugin/activity',
	// load controller
	'event/controller/event-add',
    'event/controller/event-index',
    'event/controller/event-invite',
	'event/controller/event-edit',
	'event/controller/event-detail'
], function(core){
 	core.sidebar.configs.set('event',{
 		icon: 'icon-sidebar-event',
 		label: 'Events',
 		url: '#events'
 	});
});

define('event', ['event/main'], function (main) { return main; });

define('chat/model/message',[
    'core'
], function(core){
	var Model  = Backbone.Model.extend({
        idAttribute: 'iMessageId',
        defaults: {
            'sModelType': 'message'
        }
	});
	
    Model.prototype.getMessages = function() {
        return this.get('aMessages') || (this.get('sMessage') ? [[this.get('sMessage')]] : []);
    }

    Model.prototype.getSMessage = function() {
        return this.get('sMessage') || '';
    }
	
    Model.prototype.getSenderImgSrc = function() {
        return this.get('sSenderImage') || '';
    }

    Model.prototype.getSenderId = function() {
        return this.get('iSenderId') || '';
    }

    Model.prototype.getSenderUrl = function() {
        return '#user/' + this.getSenderId();
    }

    Model.prototype.getRecentUpdatedTimestamp = function() {
        return this.get('iRecentUpdatedTimestamp') || this.getTimestamp() || '';
    }

    Model.prototype.getSendStatusClass = function() {
        var sClass = '';
        if(this.get('sSendStatusType') == 'error') sClass = 'message-status-error';
        return sClass;
    }

    // Model.prototype.isOwner = function() {
    //     console.log('senderid', this.get('iSenderId'));
    //     console.log('senderid', Backbone.iUserId);
    //     return Backbone.iUserId == this.get('iSenderId')
    // }

    Model.prototype.getTimeString = function() {
        return  (this.getTimestamp()) ? utils.moment(this.getTimestamp() * 1e3).format('MM/DD/YY h:mmA') : '';
        
    }

    Model.prototype.getSendStatus = function() {
        if(this.get('sSendStatus')) { 
            return this.get('sSendStatus')  == 'done' ? '' : this.get('sSendStatus');
        } else {
            return '';
        }
    }
	return Model;
});


define('chat/collection/message',[
    'chat/model/message'
], function() { 
    var MessageModel = require('chat/model/message')

    var MessageCollection = Backbone.Collection.extend({
        model: MessageModel,
//        comparator: 'iMessageId' // new aded message will be added ascendingly by id 
        comparator: function (message) {
            return parseInt(message.get('iMessageId'));
        }
    });


    return MessageCollection;
});



define('chat/model/chat',[
    'core',
    'chat/collection/message',
], function(core){
    var MessageCollection = require('chat/collection/message')

	var Model  = Backbone.Model.extend({
        defaults: {
            messages: null,
            'sModelType': 'chat',
            iUnreadMessage: 0
        },
        initialize: function() {
            this.set('messages', new MessageCollection());
            this.set('iUnreadMessage', this.getFromLocalStorage('iUnreadMessage'));
            this.set('iLastMessageTimestamp', this.getFromLocalStorage('iLastMessageTimestamp'));

            this.on('add-new-unread-message', this.handleNewMessageAdded, this);
            this.on('change:iUnreadMessage', this.saveUnreadToLocalStorage, this);
            this.on('change:bIsCurrent', this.handleCurrentChange, this);

        },

        handleCurrentChange: function(model, value) {
            if(value === true) {
                this.set('iUnreadMessage', 0);
            }
        },

        idAttribute: 'iItemId',
        handleNewMessageAdded: function(message) {
            var iUnreadMessage = this.get('iUnreadMessage');
            this.saveToLocalStorage('iLastMessageTimestamp', message.getTimestamp());
            this.set('iUnreadMessage', iUnreadMessage ? iUnreadMessage + 1 : 1);
        },

        saveUnreadToLocalStorage: function(model, value) {
            if(value === 0) {
                this.removeLocalStorage();
            } else { 
                this.saveToLocalStorage('iUnreadMessage', value);
            }
            utils.observer.trigger('chat:update-notification', this.collection);
        },

        removeLocalStorage: function() {
            localStorage.removeItem(this.getKey());
        },

        saveToLocalStorage: function(attr, value) {
            var item = this.getItemFromLocalStorage();
            item[attr] = value;
            localStorage.setItem(this.getKey(), JSON.stringify(item));
        },

        getKey: function() {
            return 'chat-' + this.getType() + '-' + this.getId();
        },

        getItemFromLocalStorage: function() {
            return localStorage.getItem(this.getKey()) ? JSON.parse(localStorage.getItem(this.getKey())) : {}; 
        },

        getFromLocalStorage: function(attr) {
            var item = this.getItemFromLocalStorage();
            return item ? item[attr] : null
        },

        setCurrent: function() {
            _.each(this.collection.models, function(item) {
                item.set('bIsCurrent', false);
            }, this);

            this.set('bIsCurrent', true);
        }
	});
	
	Model.prototype.getId =  function(){
		return this.get('id') || this.get('iItemId');
	}
    
    Model.prototype.isSelf = function () {
        return core.viewer.getId() == this.getId();
    }
	
	Model.prototype.getName = function(){
		return this.get('sFullName');
	}
	
	Model.prototype.getUrl = function(){
		return '#user/' + this.getId();
	}
	
	Model.prototype.getLink = function(){
		return '<a href="'+this.getUrl()+'">'+this.getName()+'</a>';
	}
	
	
	Model.prototype.getImgSrc = function(){
		return this.get('sImage');
	}
	
	Model.prototype.isSentRequestBy = function () {
		return this.get('bSentRequestBy');
	}
	
	Model.prototype.isSentRequest = function () {
		return this.get('bSentRequest');
	}

	Model.prototype.getStatus = function () {
		return this.get('sStatus') || '';
	}
    
	Model.prototype.hasNewMessage = function () {
        return parseInt(this.get('iUnreadMessage'), 10) > 0 ? true : false;
		// return Boolean(this.get('bHasNewMessage'));
	}
	
	Model.prototype.getMessages = function () {
		return this.get('messages');
	}
	
	Model.prototype.getLastTimestamp = function () {
		return this.get('iLastTimestamp') || 0;
	}

	Model.prototype.getDetailUrl = function () {
		return '';
	}

	Model.prototype.getUniqueHtmlIdForChatDetail = function () {
		return ['chat', this.getId()].join('-');
	}

	Model.prototype.getNumberUnreadMesssages = function () {
		return this.get('iUnreadMessage') || 0;
	}

	Model.prototype.isCurrent = function () {
		return this.get('bIsCurrent') || false;
	}

	Model.prototype.getLastMessageTimestamp = function () {
		return this.get('iLastMessageTimestamp') || 0;
	}

	return Model;
});

define('chat/collection/chat',[
    'chat/model/chat'
], function() { 
    var ChatModel = require('chat/model/chat')

    var ChatCollection = Backbone.Collection.extend({
        model: ChatModel,
        // comparator: function(item) {
        //     return -item.getLastMessageTimestamp();
        // },
        comparator: function(first, second) {
            var rs

            rs = this.compareLastTimestamp(first, second);
            if(rs !== 0) return rs;

            rs = this.compareStatus(first, second);
            if(rs !== 0) return rs;

            rs = this.compareName(first, second);
            if(rs !== 0) return rs;

            return 0;

        },
        compareLastTimestamp: function(first, second) {
            if(first.getLastMessageTimestamp() > second.getLastMessageTimestamp()) {
                return -1;
            } else {
                if(first.getLastMessageTimestamp() == second.getLastMessageTimestamp()) {
                    return 0;
                } else {
                    return 1;
                }
            }
        },

        compareStatus: function(first, second) {
            if(first.getStatus() !== second.getStatus()){
                if(first.getStatus() == 'online') {
                    return -1;
                }

                if(second.getStatus() == 'online') {
                    return 1;
                }
            }  

            return 0;
        },

        compareName: function(first, second) {
            if(first.getName() > second.getName()) {
                return 1;
            } else {
                return -1;
            }

        },
        isStillUpdate: false,

        clearCurrent: function() {
            _.each(this.models, function(chat) {
                chat.set('bIsCurrent', false, {
                    silent: true
                });
            }, this);
        }
    });

    return ChatCollection;
});


define('chat/plugin/notification',[
    'core',
    'chat/collection/chat'
], function() {
    var core = require('core'),
        $popupChat = $('#popup-chat'),
        ChatCollection = require('chat/collection/chat')

    localStorage.setItem('chat_notification', '');

    utils.observer.on('chat:turn-on-notification', function($ele, evt) {
        localStorage.setItem('chat_notification', '1');
        $('#popup-chat').show();
    });

    utils.observer.on('chat:turn-off-notification', function($ele, evt) {
        localStorage.setItem('chat_notification', '');
        $('#popup-chat').hide();
    });

    utils.observer.on('chat:update-notification', function(collection) {
        var total = 0;
        _.each(collection.models, function(item) {
            if (item.getNumberUnreadMesssages() > 0) {
                total += 1;
            }
        }, this)
        $('#popup-chat').find('span').html(total);
    });

    var checkToEnableOCN = function() {
        var nof = !!localStorage.getItem('chat_notification');
        if (nof) {
            $('#popup-chat').show();
        } else {
            $('#popup-chat').hide();
        }
    }


    $popupChat.on('click', function() {
        // utils.observer.trigger('chat:show-latest-conversation');
        window.location.href = '#chat';
        setTimeout(function() {
            utils.observer.trigger('chat:show-latest-conversation');
        }, 200);
    });

    utils.observer.on('user:logout', function() {
        utils.observer.trigger('chat:turn-off-notification');
        // window.clearInterval(interval);
    })

    utils.observer.on('user:login', function() {
        checkToEnableOCN();
    })

    checkToEnableOCN();

});

define('text!chat/tpl/chat-index.html',[],function () { return '<div class="content">\n    <!-- photo/tpl/album-index.html-->\n    <div class="header">\n        <div clickable="true" data-click="sidebar:toggle" class="header-left">\n            <i class="icon icon-sidebar"></i>\n        </div>\n\n\t\t<div class="header-center">\n\t\t\t<%= utils.helper.updater() %>\n\t\t</div>\n\n\t    <div class="header-right">\n\t\t\t<div class="btn-top btn-more" id="menu_toggle">\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div id="top_menu_holder" class="top-menu hide"></div>\n\n\t<div id="search_view_holder">\n\t\t<!-- search holder -->\n\t</div>\n\n\t<div class="content with-search swiper-container" id="content">\n\t\t<div class="swiper-wrapper">\n\t\t\t<div class="swiper-slide">\n\t            <div class="not-found hide" id="not_found"><%= _t(\'no_contact_found.\') %></div>\n\t\t\t\t<div class="swiper-list" id="friend-list-view-holder"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!chat/tpl/chat-item.html',[],function () { return '<!-- friend/tpl/friend-item-chat -->\n<div class="clearfix item-wrapper" rel="delegate" id="<%= item.getDataId(\'detail\') %>" data-display="page">\n\t<div class="item-image">\n\t\t<a href="<%= item.getUrl() %>">\n\t\t\t<img src="<%= item.getImgSrc() %>">\t\n\t\t</a>\n\t</div>\n\t<div class="item-headline"><%= item.getLink() %></div>\n    <div class="item-status <%= item.getStatus() %>"><%= item.getStatus() %></div>\n</div>\n\n';});


define('text!chat/tpl/chat-detail.html',[],function () { return '<!-- photo/tpl/album-index.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" id="btn_back">\n\t\t</div>\n\t</div>\n\n\t<div class="header-center">\n        <div class="title" id="page_title"><%= item.getName() %></div>\t\t\n\t</div>\n\n</div>\n\n<div id="search_view_holder">\n\t<!-- search holder -->\n</div>\n\n<div class="content with-header-footer swiper-container" id="content-bottom">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list" id="message-list-view-holder"></div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer footer-chat" id="message-post-holder">\n    \n</div>\n\n<div id="<%= item.getUniqueHtmlIdForChatDetail() %>"> </div>\n\n';});


define('text!chat/tpl/message-item.html',[],function () { return '<div class="clearfix item-wrapper <% if(item.isOwner()) { %>item-owner<% } %>">\n\t<div class="item-image">\n        <a href="<%= item.getSenderUrl() %>">\n            <img src="<%= item.getSenderImgSrc() %>">\t\n        </a>\n\t</div>\n    <div class="item-message">\n        <div class="item-message-time"><%= item.getTimeString() %></div>\n        <div class="item-message-status"><%= item.getSendStatus() %></div>\n        <% _.each(item.getMessages(), function(sMessage) { %>\n            <% if( (sMessage instanceof Array) && (sMessage.length > 1 ) ) { %>\n                <div class="item-message-desc group-message"> \n                    <% _.each(sMessage, function(subMessage) { %>\n                        <span><%= subMessage %></span>                            \n                    <% }) %>\n                    <span class="arrow"></span>\n                </div>\n            <% } else { %>\n                <div class="item-message-desc"> \n                    <span><%= sMessage %></span>\n                    <span class="arrow"></span>\n                </div>\n            <% } %>\n        <% }) %>\n    </div>\n</div>\n\n';});

define('chat/view/message-item',[
	'text!chat/tpl/message-item.html'
],function(text){
	
	return Backbone.View.extend({
		region: {},
		className: 'message-item',
		template: _.template(text),
        events: {
        },
        initialize: function() {
            this.model.on('change', function() {
                this.render();
            }, this);
        },

		render: function(){
            this.$el.html(this.template({
                item: this.model
            }));

            this.$el.attr({id: this.model.getDataId()});
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
		},
	});
});



define('text!chat/tpl/message-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading friend -->\n</div>\n';});

define('chat/view/message-list',[
	'chat/model/message',
	'chat/view/message-item',
	'text!chat/tpl/message-list.html',
	'chat/collection/message',
],function(Model, ItemView, text){
    var Collection = require('chat/collection/message')

	return Backbone.ListViewCollection.extend({
		defaults: {
            iMessageAmount: 10 
		},
		followById: true,
		api: 'chat/getmessages',
		phraseNotFound: 'No message.',
		phraseNotMore: 'No more message.',
		className: 'chat-message-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView,
        nearMessagePeriod: 3, // in minute
        Collection: Collection,
        init: function() {
            this.constructor.__super__.init.apply(this, arguments); // call parent inject
            this.collection.on('new-message-appended-success', function(newMessage) {
                
                var indexOfNewMessage = this.collection.indexOf(newMessage);
                var lastMessage = this.collection.at(indexOfNewMessage - 1);
                if(!lastMessage) return;
                if(lastMessage.getSenderId() == newMessage.getSenderId()) {
                    $('#' + newMessage.getDataId()).hide();
                    var lastMessageContent = lastMessage.getMessages();
                    if(newMessage.getTimestamp() - lastMessage.getRecentUpdatedTimestamp() < this.nearMessagePeriod * 60) {
                        _.last(lastMessageContent).push(newMessage.getSMessage());
                    } else {
                        lastMessageContent.push([newMessage.getSMessage()]);
                    }
                    lastMessage.set({
                        'aMessages': lastMessageContent,
                        'iRecentUpdatedTimestamp': newMessage.getTimestamp()
                    });
                    lastMessage.trigger('change');
                    this.collection.remove(newMessage);

                }

                // this.newMessage.clear();
            }, this);
        },
		loadNew: function(){
            this.isFirst = false;
            this.loadMore();
		},

        updateQuery: function() {
            if(this.collection.length > 0) {
                this.query.iMaxId = this.collection.first().getId();
            } else {
                this.query.iMaxId = 99999999;
            }
        },
        parseData: function(data) {
            var parsedData = []
              , currentId = -1 
              , accumulateItem = { } 
              , iLastTimestamp = 0
              , aMessageContent = []

            _.each(data, function(message) {

                if(currentId == message.iSenderId) {
                    if(Math.abs(iLastTimestamp - message.iTimestamp) <= this.nearMessagePeriod * 60) { // under 3 minutes
                        _.last(aMessageContent).push(message.sMessage);
                    } else {
                        aMessageContent.push([message.sMessage]);
                    }
                    accumulateItem.iRecentUpdatedTimestamp = message.iTimestamp;
                } else {
                    aMessageContent = [[message.sMessage]]; //message is array of array

                    accumulateItem = message;

                    accumulateItem.aMessages = aMessageContent

                    parsedData.push(accumulateItem);
                }

                currentId = message.iSenderId;
                iLastTimestamp = message.iTimestamp;

            }, this);

            // var parsedData = _.sortBy(parsedData, function(message) {
            //     return -message.iTimestamp;
            // }); // sort by time stamp decendingly to move lastesst item first why appening
            return parsedData;

            // return this.constructor.__super__.parseData.apply(this, [parsedData]);


        }
	});
});



define('text!chat/tpl/message-post.html',[],function () { return '<div class="message-post-holder">\n\t<div class="btn-message">\n\t\t<input type="submit" id="send_btn" value="<%= _t(\'send\') %>" class="btn btn-small-fluid btn-primary disabled">\t\n\t</div>\n\t<div class="input-message">\n\t\t<input class="control-full" placeholder="<%= _t(\'your_message\') %>" type="text" id="message" />\n\t</div>\n</div>\n';});

define('chat/view/message-post',[
    'text!chat/tpl/message-post.html',
    'chat/model/message',
    'core'
], function() { 
    var text = require('text!chat/tpl/message-post.html')
      , Message = require('chat/model/message')
      , core = require('core')

    var PostView = Backbone.View.extend({
        template: _.template(text),
        region:{
            main: '#message-post-holder'
        },
        events: {
            'click #send_btn': 'sendMessage',
            'keyup #message': 'handleMessageChange'
        },
        render: function() {
            this.$el.html(this.template());
            this.$postBtn = $('#send_btn', this.$el);
            this.$message = $('#message', this.$el);

            return this;
        },
        inject: function() {
            var main = $(this.region.main);
            
            main.html(this.el);

            return this;
        },

        handleMessageChange: function() {
            if(this.$message.val().trim() == '') {
                this.$postBtn.addClass('disabled');
            } else {
                this.$postBtn.removeClass('disabled');
            }
        },

        isValidate: function() {
            if(this.$message.val().trim() === '') {
                utils.modal.alert(_t('Message cannot be empty'));
                return false;
            }

            return true;
        },

        sendMessage: function() {
            if(!this.isValidate()) return;

            if(this.$postBtn.isProcessing()) return;

            var data = {
                'sMessage': this.$message.val(),
                'iItemId' : this.model.getId(),
                'sItemType': this.model.getType(),
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            var message = $.extend({
                'iSenderId': core.viewer.getId(),
                'sSendStatus': 'sending',
                'bNeedToScroll': true
            }, data);

            this.newMessage = new Message(message);
            this.model.getMessages().add(this.newMessage);
            // .trigger('add-posted-message', this.newMessage);

            this.$message.val('');
            this.$postBtn.addClass('disabled');

            utils.api.post('chat/sendmessage', data, settings).done(this.postDone).always(this.postComplete).fail(this.postFail);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.isProcessing(false);
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.isProcessing(true);
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Post URL failed!')); //defensive programming
                this.postFail();
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
            data.sSendStatus = 'done';
            this.newMessage.set(data).collection.trigger('new-message-appended-success', this.newMessage);
        },

        postFail: function() {
            this.newMessage.set({
                'sSendStatus': 'Message was not delivered',
                'sSendStatusType': 'error'
            });
            // this.newMessage.set('sSendStatus', 'Message was not delivered');
        }

    });

    return PostView;
});


define('chat/ipad/view/chat-detail',[
    'chat/view/message-list',
    'chat/view/message-post',
], function() {
    var ListView = require('chat/view/message-list')
      , PostView = require('chat/view/message-post')

    return {
        region: {
			main: '#chat-detail-view-holder',
			content: '#right_content',
			scroller: '#right_content',
		},

		inject: function(){
			
            this.$holder.html(this.$el);
			
			new ListView({}, 
				this.$el.find('#message-list-view-holder'),
			 	this.$scroller,
			  	{
                    loadmore: false,
                    loadnew: true,
                    collection: this.model.getMessages()
                }
			  ).render(this.query).inject();

            new PostView({model: this.model}).render().inject();
            
			this.$scroller.ensureVerticalScroll();

			this.$el.find('#message').focus();

            $('#page_title').html(this.model.getName());
			
			return this;
		},
    }
    
});

define('chat/view/chat-detail',[
    'text!chat/tpl/chat-detail.html',
    'chat/view/message-list',
    'chat/view/message-post',
    'chat/ipad/view/chat-detail'
], function() { 
    var text = require('text!chat/tpl/chat-detail.html')
      , ListView = require('chat/view/message-list')
      , PostView = require('chat/view/message-post')

    var ChatDetail = Backbone.PolyplatformView.extend({
        template: _.template(text),
        moduleId: 'chat/view/chat-detail',
        region: {
			main: '#main-bottom',
			content: '#content-bottom',
		},
        initialize: function() {
            this.skipUpdater = false;
            this.model.setCurrent();
        },
        render: function(query){

            this.query = $.extend({
				iItemId: this.model.getId(),
                sItemType: this.model.getType()
			}, query);

            this.$holder =  $(this.region.main);
			
			this.$el.html(this.template({
                item: this.model
            }));
			
			this.$scroller =  this.$el.find(this.region.content);
			
			return this;
			
		},
		events: {
			"click #btn_back":"closeDetailPage"
		},
		inject: function(){
			
            this.$holder.html(this.$el);
			
			new ListView({}, 
				this.$el.find('#message-list-view-holder'),
			 	this.$scroller,
			  	{
                    loadmore: false,
                    loadnew: true,
                    collection: this.model.getMessages()
                }
			  ).render(this.query).inject();

            new PostView({model: this.model}).render().inject();
            
			this.$scroller.ensureVerticalScroll();

			utils.observer.trigger('bottom:open');
			
			this.$el.find('#message').focus();
			
			return this;
		},
        closeDetailPage: function(){
			utils.observer.trigger('bottom:close');
            this.model.set('bIsCurrent', false);
		},


    });

    return ChatDetail;
});


define('chat/view/chat-item',[
	'text!chat/tpl/chat-item.html',
	'chat/view/chat-detail'
],function(text){
    var ChatDetailView = require('chat/view/chat-detail')
	
	return Backbone.ItemView.extend({
		className: 'friend-item',
        detailView: ChatDetailView,
		template: _.template(text),
        initialize: function() {
            this.constructor.__super__.initialize.apply(this, arguments); // call parent inject
            this.model.on('change', this.render, this);
        },
		render: function(){
			
			this.context = {item: this.model};
            
            this.$el.html(this.template(this.context));
            if(this.model.hasNewMessage()) {
                this.$el.addClass('has-new-message');
            } else {
                this.$el.removeClass('has-new-message');
            }

            if(this.model.isCurrent()) {
                this.$el.addClass('active');
            } else {
                this.$el.removeClass('active');
            }

            this.$el.attr({id: this.model.getDataId()});
			
			return this;
		},
		inject: function(inject){
			inject(this.el);
            return this;
		},
	});
});


define('text!chat/tpl/chat-list.html',[],function () { return '<div class="loading-initiator">\n\t<!-- loading friend -->\n</div>\n';});

define('chat/view/chat-list',[
	'chat/model/chat',
	'chat/view/chat-item',
	'text!chat/tpl/chat-list.html',
	'chat/collection/chat',
    'core'
],function(Model, ItemView, text){
    var ChatCollection = require('chat/collection/chat')
      , timestampKey = 'chat-last-ping-timestamp'
      , core = require('core')

	return Backbone.ListViewCollection.extend({
		defaults: {
			sAction: "all",
		},
		followById: false,
		api: 'chat/getchatlist',
		phraseNotFound: 'No friends availabe for chatting.',
		phraseNotMore: 'No more friends.',
		className: 'chat-friend-list',
		template: _.template(text),
		itemModel: Model, 
		itemView: ItemView,
        pingStack: [],
        iLastTimestamp: localStorage.getItem(timestampKey), // to get no new message
        iGetNewMessages: 1,
        Collection: ChatCollection,
        handleCollectionReset: function(col, options) { // to preseve message list after chat list retrieved 

            _.each(options.previousModels, function(previous) { 
                var current = this.collection.get(previous.getId());
                current.set('messages', previous.getMessages());
                current.set('bIsCurrent', previous.isCurrent());
            }, this);
            this.rerenderView();
        },

        init: function() {
            this.constructor.__super__.init.apply(this, arguments); // call parent inject
            this.collection.on('all', function() {
                utils.observer.trigger('chat:update-notification', this.collection);
            }, this);
        },

        startChatlistUpdater: function() {
            this.setupUpdater();
            return this;
        },
        
        setupUpdater: function() {
            var that = this;

            setTimeout(function() {
                that.update();
            }, 30 * 1e3);

            return this;
        },

        update: function() {
            this.isFirst = true; //to refresh the list
            this.loadMore();
            if(this.isStillInChatListView()) {
                this.setupUpdater();
            }  else {
                this.$ajaxMore.abort();
            }
        },

        isStillInChatListView: function() {
            return $('.chat-friend-list').length == 0 ? false : true;
        },

        startPing: function() {
            if(this.collection.isStillUpdate ) return ;
            this.setupPing();
            this.isStillUpdate = true;
            return this;
        },
        
        setupPing: function() {
            var that = this
              , pingInterval;

            that.pingStack.push(that.ping);

            pingInterval = setInterval(function() {

                if(!that.isStillInChatListView() && core.viewer.isMuteChatNotification()) {
                    window.clearInterval(pingInterval);
                    that.collection.isStillUpdate = false;
                    return ;
                }

                var toExecute = that.pingStack.pop();
                if(toExecute) {
                    toExecute.apply(that);
                }

            }, 5 * 1e3);

            return this;
        },

        ping: function() {
            var data = {
                iGetNewMessages: this.iGetNewMessages
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSend
            };

            if(this.iLastTimestamp) {
                data.iLastTimeStamp = this.iLastTimestamp;
            }

            utils.api.post('chat/ping', data, settings).done(this.postDone).always(this.postComplete);

        },
        
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.pingStack.push(this.ping);
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postSuccess: function (data) {
            this.iLastTimestamp = data.iLastTimeStamp;
            localStorage.setItem(timestampKey, data.iLastTimeStamp);
            if(data.aNewMessages) {
                _.each(data.aNewMessages, function(message) {
                    message.bNeedToScroll = true;
                    var chat = this.collection.findWhere({
                        'iItemId': message.iSenderId
                    });

                    if(chat) {
                        var messageModel = chat.getMessages().add(message);
                        chat.getMessages().trigger('new-message-appended-success', messageModel);
                        if(!chat.isCurrent()) {
                            chat.trigger('add-new-unread-message', messageModel);
                        }
                    }
                }, this);
            }
            // this.collection.add(data.aNewMessages);
        },

        // parseData: function(data) {
        //     return data;
        // }

	});
});


define('text!chat/tpl/chat-search.html',[],function () { return '<div class="search-simple">\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_friend\') %>" value="">\n\t</div>\n</div>\n\n';});

define('chat/view/chat-search',[
	'text!chat/tpl/chat-search.html'
], function(text){
	
	return Backbone.View.extend({
		region: {
			holder: '#search_view_holder'
		},
		className: 'search-area',
		template: _.template(text),
		render: function(){
			
			this.$el.html(this.template());
			
			this.$keywordInput  = this.$el.find('#search_keywords'); 
			this.$advSearchHolder = this.$el.find('#adv_search_holder');
			
			return this;
		},
		inject: function(){
			
			
			$(this.region.holder).html(this.$el);
			
			return this;
		},
		events: {
			"click #search_icon": "submitSearch",
            'click #adv_search_toggle_btn': 'toggleSearch'
		},
        toggleSearch: function() {
            this.$advSearchHolder.toggleClass('hide');
        },
		submitSearch: function () {
			
			// this.$advSearchHolder.addClass('hide');
			
			this.trigger('submit',{
				sSearch: this.$keywordInput.val() || ''
			});
		}
	});
	
});


define('text!chat/tpl/chat-topmenu.html',[],function () { return '<div class="setting-list">\n\t<% if(item.isOnline()) { %>\n\t    <a class="menu-item" rel="delegate" id="<%= item.getDataId(\'toOffline\') %>"><%= _t(\'Offline\') %></a>\n\t<% } else { %>\n\t    <a class="menu-item" rel="delegate" id="<%= item.getDataId(\'toOnline\') %>"><%= _t(\'Online\') %></a>\n\t<% } %>\n\n\t<% if(item.isMuteChatNotification()) { %>\n\t    <a class="menu-item" rel="delegate" id="<%= item.getDataId(\'unmute\') %>"><%= _t(\'Unmute Notification\') %></a>\n\t<% } else { %>\n\t    <a class="menu-item" rel="delegate" id="<%= item.getDataId(\'mute\') %>"><%= _t(\'Mute Notification\') %></a>\n\t<% } %>\n</div>';});

define('chat/view/chat-topmenu',[
    'text!chat/tpl/chat-topmenu.html',
    'core'
], function(text) {
    var core = require('core')

    return Backbone.TopMenuView.extend({
        template: _.template(text),
        events: {
            'mute': 'muteNotification',
            'unmute': 'unmuteNotification',
            'toOnline': 'changeToOnline',
            'toOffline': 'changeToOffline',
        },
        initialize: function() {
            this.model.on('change', this.render, this);
        },
        muteNotification: function() {
            utils.observer.trigger('chat:turn-off-notification');
            this.render();
        },

        changeToOnline: function() {
            this.changeStatus('online');
        },

        changeToOffline: function() {
            this.changeStatus('offline');
        },

        changeStatus: function(toStatus) {
            if (this.isProcessingStatus) return;

            var data = {
                    'sStatus': toStatus
                },
                settings = {
                    'context': this,
                    'beforeSend': this.beforeSend
                };

            utils.api.post('chat/changestatus', data, settings).done(this.postDone).always(this.postComplete);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.isProcessingStatus = false;
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.isProcessingStatus = true;
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {
            this.model.set('sChatStatus', data['sStatus']);
            utils.modal.toast('Changed Status Successfully');
            // this.render();

        },

        unmuteNotification: function() {
            utils.observer.trigger('chat:turn-on-notification');
            this.render();
        },
        inject: function() {
            this.$el.attr({
                id: this.model.getDataId()
            });
            return this.constructor.__super__.inject.apply(this, arguments); // call parent inject
        },

    });
});
define('chat/view/chat-index',[
    'text!chat/tpl/chat-index.html',
    'chat/view/chat-list',
    'chat/view/chat-search',
    'chat/view/chat-topmenu',
    'core',
    'chat/collection/chat',
    'chat/view/chat-detail'
], function() { 
    var text = require('text!chat/tpl/chat-index.html')
      , ListView = require('chat/view/chat-list')
      , SearchView = require('chat/view/chat-search')
      , core = require('core')
      , ChatCollection = require('chat/collection/chat')
      , ChatDetailView = require('chat/view/chat-detail')

    var ChatIndex = Backbone.View.extend({
        template: _.template(text),
        region: {
			holder: '#main',
			scroller: '#content'
		},
        initialize: function() {
            if(constants.chatCollection) {
                this.collection = constants.chatCollection;
            } else {
                this.collection = new ChatCollection();

                constants.chatCollection = this.collection;

            }

            utils.observer.on('chat:show-latest-conversation', function() {
                this.showLatestConversation();
            }, this);

        },
		topMenuView: require('chat/view/chat-topmenu'),
        render: function(query){
			
			this.$el.html(this.template());
			
			return this;
			
		},
		inject: function(){
			
			var $holder = $(this.region.holder).html(this.$el);
			
			this.$scroller = $(this.region.scroller);
			
			this.$scroller.ensureVerticalScroll(); // enable scrollable
			// render search iew
			
			this.listView = new ListView({}, 
				this.$el.find('#friend-list-view-holder'),
			 	this.$scroller,
			  	{
                    loadmore: false,
                    loadnew: false,
                    collection: this.collection
                }
			  ).render().inject().startChatlistUpdater().startPing();

            this.listView.on('view:rerender', this.searchFriend,  this);

			new SearchView().render().inject();
			
            this.updateViewerChatStatus();

			return this;
		},

        showLatestConversation: function() {
            var that = this;

            if(this.collection.length > 0) {
                this.displayLatest();
            } else {
                this.collection.listenToOnce(this.listView, 'view:load-complete', function() {
                    that.displayLatest();
                })
            }
        },

        displayLatest: function() {
            var latestChat = this.collection.max(function(item) {
                return item.hasNewMessage() ? item.getLastMessageTimestamp() : 0;
            });

            if(!latestChat.hasNewMessage()) return;

            if(latestChat) {
                // $('#' + latestChat.getDataId('detail')).click();
                // console.log('detail-datat', latestChat.getDataId('detail'));
                new ChatDetailView({model: latestChat}).render().inject();
            }
        },

		events: {
			//"click #search_icon": "searchFriend",
			'keyup #search_keywords': 'searchFriend',
			'click #menu_toggle': 'toggleMenu'
		},

        toggleMenu: function() {
        	utils.topMenu.toggle(this, core.viewer);
        },

		searchFriend: function () { //@todo: xai tam, chinh lai sau
	        if ($('.friend-item').length == 0) {
	        	return;
	        }
	        
	        $('#not_found').addClass("hide");
	        
	        var count = 0;
	        
	        var val = $.trim($('#search_keywords').val()).replace(/ +/g, ' ').toLowerCase();
	        
	        $('.friend-item').each(function () {
	            $(this).removeClass("hide");
	            
	            var text = $(this).find('.item-headline').text().replace(/ +/g, ' ').toLowerCase();
	            
	            if (!~text.indexOf(val)) {
	            	$(this).addClass("hide");
	            } else {
	            	count ++;
	            }
	        });
	        
	        if (count == 0) {
	        	$('#not_found').removeClass("hide");
	        }
		},

        updateViewerChatStatus: function() {
            var data = {
            },
                settings = {
                'context': this, 
                'beforeSend': this.beforeSendUpdate
            };

            utils.api.post('chat/getstatus', data, settings).done(this.postUpdateDone).always(this.postUpdateComplete);
        },

        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postUpdateComplete: function() {
        },

        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSendUpdate: function() {
        },

        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postUpdateDone: function(data, status, jqXHR) {
            if(data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post URL failed!'); //defensive programming
                return false;
            } else {
                this.postUpdateSuccess(data);
            }
        },

        /** 
         * It should be called when the response has error_code == 0 
         */
        postUpdateSuccess: function (data) {
            core.viewer.set('sChatStatus', data['sStatus']);
        },
    });

    return ChatIndex;
});


define('chat/controller/chat-index',[
    'chat/view/chat-index'
], function() {
    var ChatIndexView = require('chat/view/chat-index')
      , currentIndexView 

    var handleChatIndex = function() {
		utils.history.push();
		
		utils.observer.trigger('router:changed');
		
		currentIndexView = new ChatIndexView().render({
		}).inject();
    }

	utils.router.route('chat', handleChatIndex); 

});

define('chat/main',[
    'chat/plugin/notification',

    // 'chat/controller/chat-detail',
    'chat/controller/chat-index'
], function() {

    utils.setting.set('chat_enabled', 1);

    return {
        enable: true
    };
});
define('chat', ['chat/main'], function (main) { return main; });

define('attachment/model/attachment-link',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'attachment_id',
        defaults: {
            sModelType: 'link'
        },
        getPhotoUrl: function() {
            return this.get('image') || '';
        },
        getTitle: function() {
            return this.get('title') || '';
        },
        getDescription: function() {
            return this.get('description') || '';
        },
        getUrl: function() {
            return this.get('link') || this.get('url') || '';
        },
        getHostName: function() {

            var url = this.getUrl();

            var el = document.createElement('a');
            el.href = url;

            return el.hostname;
        }
    });
});
define('forum/model/thread',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'iThreadId',
        defaults: {
            sModelType: 'forum_thread',
            bCanView: true
        },
        getLivetime: function() {
            return utils.moment(this.getTimestamp() * 1e3).fromNow(true);
        },
        getLastUserId: function() {
            return parseInt(this.get('iLastUserId')) || 0;
        },
        getLastFullName: function() {
            return this.get('sLastFullname') || '';
        },
        hasLastUser: function() {
            return this.getLastUserId() ? true : false;
        },
        getLastUserUrl: function() {
            return this.hasLastUser() ? '#user/' + this.getLastUserId() : this.getPosterUrl();
        },
        getLastUserTitle: function() {
            return this.hasLastUser() ? this.getLastFullName() : this.getPosterTitle();
        },
        getTimeUpdate: function() {
            return this.get('iTimeUpdate') || 0;
        },
        getLiveTimeUpdate: function() {
            return utils.moment(this.getTimeUpdate() * 1e3).fromNow();
        },
        getTotalPost: function() {
            return this.get('iTotalPost') || 0;
        },
        getTotalView: function() {
            return this.get('iTotalView') || 0;
        },
        isAnnouncement: function() {
            return this.get('bIsAnnouncement') || false;
        },
        getOrderId: function() {
            return parseInt(this.get('iOrderId')) || 0;
        },
        isSticky: function() {
            return this.getOrderId() ? true : false;
        },
        isSubscribed: function() {
            return this.get('bIsSubscribed') || false;
        },
        isClosed: function() {
            return this.get('bIsClosed') || false;
        },
        getPollId: function() {
            return parseInt(this.get('iPollId')) || 0;
        },
        hasPoll: function() {
            return this.getPollId() || false;
        },
        getText: function() {
            return this.get('sText') || '';
        },
        getTextNotParsed: function() {
            return this.get('sTextNotParsed') || '';
        },
        /**
         * add this prototype to support social share.
         */
        getSocialShareUrl :  function(){
          return constants.siteUrl + 'index.php?do=/forum/thread/'+ this.getId();
        }
    });
});
define('forum/model/post',[
    'attachment/model/attachment-link',
    'attachment/model/attachment-photo',
    'forum/model/thread'
], function(AttachmentLinkModel, AttachmentPhotoModel, ThreadModel) {
    return Backbone.Model.extend({
        idAttribute: 'iPostId',
        defaults: {
            sModelType: 'forum_post',
            bCanLike: true
        },
        getTotalPost: function() {
            return this.get('iTotalPost') || 0;
        },
        getText: function() {

            var sText = this.get('sText') || '';

            return utils.helper.parseExternalLink(sText);
        },
        getTextNotParsed: function() {
            return this.get('sTextNotParsed') || '';
        },
        getAttachments: function() {
            return this.get('aAttachments') || [];
        },
        hasAttachments: function() {
            return this.getAttachments().length > 0;
        },
        getAttachmentPhotos: function() {

            if (!this.hasAttachments()) {
                return [];
            }

            var aPhotos = this.getAttachments().filter(function(aAttachment) {
                return aAttachment.type == 'image';
            });

            if (aPhotos.length == 0) {
                return [];
            }

            var aAtts = _.map(aPhotos, function(oPhoto) {
                return new AttachmentPhotoModel($.extend({
                    attachment_id: oPhoto.attachment_id,
                    type: oPhoto.type
                }, oPhoto.data));
            }, this);

            return aAtts;
        },
        getAttachmentLinks: function() {

            if (!this.hasAttachments()) {
                return [];
            }

            var aLinks = this.getAttachments().filter(function(aAttachment) {
                return aAttachment.type == 'link';
            });

            if (aLinks.length == 0) {
                return [];
            }

            var aAtts = _.map(aLinks, function(oLink) {
                return new AttachmentLinkModel($.extend({
                    attachment_id: oLink.attachment_id,
                    type: oLink.type
                }, oLink.data));
            }, this);

            return aAtts;
        },
        canQuote: function() {
            return this.get('bCanQuote') || false;
        },
        getThread: function() {
            return new ThreadModel({
                iThreadId: this.get('iThreadId') || 0,
                sTitle: this.get('sTitle') || ''
            });
        },
        getThreadId: function() {
            return this.getThread().getId();
        },
        getThreadTitle: function() {
            return this.getThread().getTitle();
        },
        getThreadUrl: function() {
            return this.getThread().getUrl();
        },
        /**
         * add this prototype to support social share.
         */
        getSocialShareUrl :  function(){
          return constants.siteUrl + 'index.php?do=/forum/thread/'+ this.getThreadId() + '/slug/view_'+ this.getId();
        }
    });
});

define('text!forum/tpl/attachment-forum-post.html',[],function () { return '<div class="att-item-wrapper">\n\t<div class="att-col-info">\n\t\t<div class="att-item-title">\n\t\t\t<a href="<%=thread.getUrl()%>"><%=utils.str.shorten(thread.getTitle(), 36)%></a>\n\t\t</div>\n\t\t<div class="att-item-description"><%=utils.str.shorten(item.getText(), 120)%></div>\n\t</div>\n</div>\n';});

define('forum/view/attachment-forum-post',[
    'forum/model/post',
    'forum/model/thread',
    'text!forum/tpl/attachment-forum-post.html'
], function(PostModel, ThreadModel, text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-forum-post',
        template: _.template(text),
        render: function() {

            var feed = this.model;
            var oAtt = feed.getAttachments()[0];

            var item = new PostModel({
                iPostId: oAtt.iId,
                sText: oAtt.sDescription
            });

            var thread = new ThreadModel({
                iThreadId: feed.getItemId(),
                sTitle: feed.getItemTitle()
            });

            this.$el.html(this.template({
                item: item,
                thread: thread
            }));

            return this;
        },
        inject: function(dom) {
            dom.html(this.el);
        }
    });
});

define('text!forum/tpl/attachment-forum-thread.html',[],function () { return '<div class="att-item-wrapper">\n\t<div class="att-col-info">\n\t\t<div class="att-item-title">\n\t\t\t<a href="<%=att.getUrl()%>"><%=utils.str.shorten(att.getTitle(), 36)%></a>\n\t\t</div>\n\t\t<div class="att-item-description"><%=utils.str.shorten(att.getText(), 120)%></div>\n\t</div>\n</div>';});

define('forum/view/attachment-forum-thread',[
    'forum/model/thread',
    'text!forum/tpl/attachment-forum-thread.html'
], function(ThreadModel, text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-forum-thread',
        template: _.template(text),
        render: function() {

            var item = this.model;
            var oAtt = item.getAttachments()[0];

            var att = new ThreadModel({
                iThreadId: oAtt.iId,
                sTitle: oAtt.sTitle,
                sText: oAtt.sDescription
            });

            var context = {
                item: item,
                att: att
            };

            this.$el.html(this.template(context));

            return this;
        },
        inject: function(dom) {
            dom.html(this.el);
        }
    });
});
define('forum/plugin/activity',[
    'forum/view/attachment-forum-post',
    'forum/view/attachment-forum-thread'
], function(PostAttachmentView, ThreadAttachmentView) {

    utils.headline.add([
        'forum'
    ], function(item) {
        return _t('posted a thread.');
    });

    utils.headline.add([
        'forum_post'
    ], function(item) {
        return _t('replied a thread.');
    });

    utils.attachment.add(['forum'], ThreadAttachmentView);
    utils.attachment.add(['forum_post'], PostAttachmentView);
});
define('forum/model/forum',[],function() {
    var ForumModel = Backbone.Model.extend({
        idAttribute: 'iForumId',
        defaults: {
            sModelType: 'forum',
            bCanView: true
        },
        getTitle: function() {
            return this.get('sName') || '';
        },
        getAnnouncementCount: function() {
            return this.get('iTotalAnnouncement') || 0;
        },
        getThreadCount: function() {
            return this.get('iTotalThread') || 0;
        },
        getPostCount: function() {
            return this.get('iTotalPost') || 0;
        },
        getChildCount: function() {
            return this.get('iTotalSubForum') || 0;
        },
        getChilds: function() {

            var aChilds = this.get('aSubForum') || [];

            var childs = _.map(aChilds, function(oChild) {
                return new ForumModel(oChild);
            }, this);

            return childs;
        },
        isCategory: function() {
            return this.get('bIsCategory') || false;
        },
        canAddThread: function() {
            return this.get('bCanAddThread') || false;
        }
    });

    return ForumModel;
});

define('text!core/tpl/pagination.html',[],function () { return '<span>\r\n\t<%=_t(\'page\')%>:\r\n</span>\r\n<span id="first_page_btn" class="page-btn <%if (context.currentPage == 1) {%>disabled<%}%>">\r\n\t<i class="icon icon-double-angle-left"></i>\r\n</span>\r\n<span id="prev_page_btn" class="page-btn <%if (context.currentPage == 1) {%>disabled<%}%>">\r\n\t<i class="icon icon-angle-left"></i>\r\n</span>\r\n<span id="curr_page_num" class="page-btn current">\r\n\t<%=context.currentPage%>\r\n</span>\r\n<span id="next_page_btn" class="page-btn <%if (context.currentPage == context.totalPage) {%>disabled<%}%>">\r\n\t<i class="icon icon-angle-right"></i>\r\n</span>\r\n<span id="last_page_btn" class="page-btn <%if (context.currentPage == context.totalPage) {%>disabled<%}%>">\r\n\t<i class="icon icon-double-angle-right"></i>\r\n</span>';});

define('core/view/pagination',[
    'text!core/tpl/pagination.html'
], function(text) {

    return Backbone.View.extend({
        className: 'pagination',
        template: _.template(text),
        events: {
            'click #first_page_btn': 'onFirstPageClick',
            'click #last_page_btn': 'onLastPageClick',
            'click #next_page_btn': 'onNextPageClick',
            'click #prev_page_btn': 'onPrevPageClick'
        },
        render: function(context) {

            this.context = $.extend({
                currentPage: 1,
                itemLimit: 10,
                totalItem: 0
            }, context);

            this.context.totalPage = Math.ceil(this.context.totalItem / this.context.itemLimit) || 1;

            this.$el.html(this.template({
                context: this.context
            }));

            return this;
        },
        inject: function(callback) {

            callback(this.$el);

            return this;
        },
        onFirstPageClick: function(evt) {

            if (this.context.currentPage == 1) {
                return;
            }

            this.context.currentPage = 1;

            this.updateView();
        },
        onLastPageClick: function(evt) {

            if (this.context.currentPage == this.context.totalPage) {
                return;
            }

            this.context.currentPage = this.context.totalPage;

            this.updateView();
        },
        onNextPageClick: function(evt) {

            if (this.context.currentPage == this.context.totalPage) {
                return;
            }

            this.context.currentPage++;

            this.updateView();
        },
        onPrevPageClick: function(evt) {

            if (this.context.currentPage == 1) {
                return;
            }

            this.context.currentPage--;

            this.updateView();
        },
        updateView: function() {

            this.$el.html(this.template({
                context: this.context
            }));

            this.trigger('change', this.context.currentPage);
        }
    });
});

define('text!forum/tpl/forum-category-item.html',[],function () { return '<!-- forum/tpl/forum-category-item.html -->\n<div class="clearfix category-item-wrapper">\n\t<div class="category-header">\n\t\t<i class="icon icon-category-item"></i>\t\t\n\t\t<i class="icon toggle-list-icon icon-chevron-up" data-id="<%=item.getDataId()%>"></i>\n\t\t<div class="category-header-content">\n\t\t\t<a class="category-title" href="<%=item.getUrl()%>"><%=item.getTitle()%></a>\n\t\t\t<span class="forum-count">(<%=item.getChildCount()%>)</span>\n\t\t\t\n\t\t\t<div class="item-stats">\n\t\t\t\t<span><%=_t(\'Threads\')%>: <%=item.getThreadCount()%></span>\n\t\t\t\t<span><%=_t(\'Posts\')%>: <%=item.getPostCount()%></span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\t\n\t<div class="child-list">\n\t</div>\n</div>\n';});


define('text!forum/tpl/forum-item.html',[],function () { return '<!-- forum/tpl/forum-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image">\n\t\t<i class="icon icon-forum-item"></i>\n\t</div>\n\t<div class="item-content">\n\t\t<div class="item-title">\n\t\t\t<a href="<%=item.getUrl()%>"><%=item.getTitle()%></a>\n\t\t</div>\t\t\n\t\t<div class="item-stats">\n\t\t\t<span><%=_t(\'Threads\')%>: <%=item.getThreadCount()%></span>\n\t\t\t<span class="dotline">&middot;</span>\n\t\t\t<span><%=_t(\'Posts\')%>: <%=item.getPostCount()%></span>\n\t\t</div>\n\t</div>\n</div>\n';});

define('forum/view/forum-item',[
    'text!forum/tpl/forum-category-item.html',
    'text!forum/tpl/forum-item.html'
], function(textCategory, text) {

    var ForumItemView = Backbone.View.extend({
        className: 'forum-item',
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({}, query);

            this.$el.attr('id', this.model.getDataId());

            if (this.model.isCategory()) {
                this.template = _.template(textCategory);
            }

            this.$el.html(this.template({
                item: this.model
            }));

            this.$child_list = this.$el.find('.child-list');

            return this;
        },
        inject: function(inject) {

            inject(this.el);

            if (this.model.isCategory()) {
                this.appendChilds();
            }
        },
        appendChilds: function() {

            this.childs = this.model.getChilds();

            _.each(this.childs, function(child) {
                this.appendChild(child);
            }, this);
        },
        appendChild: function(child) {

            var self = this;
            var inject = function(dom) {
                self.$child_list.append(dom);
            };

            new ForumItemView({
                model: child
            }).render(this.query).inject(inject);
        },
        events: {
            'click .toggle-list-icon': 'toggleChildList'
        },
        toggleChildList: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.data('id') != this.model.getDataId()) {
                return;
            }

            $target.toggleClass('icon-chevron-up icon-chevron-down');

            this.$child_list.toggleClass('hide');
        }
    });

    return ForumItemView;
});

define('text!forum/tpl/forum-list.html',[],function () { return '<!-- forum/tpl/forum-list.html-->\n<div class="loading-initiator">\n\t<!-- loading forums -->\n</div>';});

define('forum/view/forum-list',[
    'forum/model/forum',
    'forum/view/forum-item',
    'text!forum/tpl/forum-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {},
        followById: false,
        api: 'forum/fetch',
        phraseNotFound: 'No forums found.',
        phraseNotMore: 'No more forums.',
        className: 'forum-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('text!forum/tpl/forum-quickjump.html',[],function () { return '<div id="forum_select_holder"></div>';});

define('forum/view/forum-quickjump',[
    'forum/model/forum',
    'text!forum/tpl/forum-quickjump.html'
], function(Model, text) {

    return Backbone.View.extend({
        className: 'forum-quickjump',
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                iForumId: 0
            }, context);

            this.$el.html(this.template());

            this.$forum_select_holder = this.$el.find('#forum_select_holder');

            return this;
        },
        inject: function(callback) {

            callback(this.$el);

            this.fetchData();

            return this;
        },
        fetchData: function() {

            utils.api.get('forum/getforumsearch', {}, {
                context: this
            }).done(this.updateView);
        },
        updateView: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            }

            this.$forum_select_holder.html(this.getForumSelectHtml(data));
        },
        getForumSelectHtml: function(data) {

            return '<select id="forum_quickjump_select">' + this.addForumOptionHtml(data, '') + '</select>';
        },
        addForumOptionHtml: function(aForums, prefix) {

            var html = '';

            _.each(aForums, function(oForum) {

                html += '<option value="' + oForum.iForumId + '"';

                if (oForum.iForumId == this.context.iForumId) {
                    html += ' selected="selected"'
                }

                html += '>' + prefix + oForum.sName + '</option>';

                // append childs
                html += this.addForumOptionHtml(oForum.aSubForum, prefix + '&nbsp;&nbsp;&nbsp;');

            }, this);

            return html;
        },
        events: {
            'change #forum_quickjump_select': 'quickJump'
        },
        quickJump: function(evt) {

            var $target = $(evt.currentTarget);

            var forum = new Model({
                iForumId: $target.val()
            });

            window.location.href = forum.getUrl();
        }
    });
});

define('text!forum/tpl/forum-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'Search keyword(s)...\') %>" value="<%=sKeyword%>" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group" id="search_forum_holder">\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_result">\n                <option value="thread" <%if (sSearchType == \'thread\') {%>selected="selected"<%}%>><%=_t(\'Threads\')%></option>\n                <option value="post" <%if (sSearchType == \'post\') {%>selected="selected"<%}%>><%=_t(\'Posts\')%></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'Search\') %>" />\n\t</div>\n</div>\n';});

define('forum/view/forum-search',[
    'text!forum/tpl/forum-search.html'
], function(text) {

    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({
                sKeyword: '',
                sForumIds: 0,
                sSearchType: 'thread'
            }, query);

            this.$el.html(this.template(this.query));

            this.$adv_search_holder = this.$el.find('#adv_search_holder');
            this.$search_forum_holder = this.$el.find('#search_forum_holder');
            this.$search_keywords = this.$el.find('#search_keywords');
            this.$search_result = this.$el.find('#search_result');

            return this;
        },
        inject: function() {

            $(this.region.holder).html(this.$el);

            this.fetchData();

            return this;
        },
        fetchData: function() {
            utils.api.get('forum/getforumsearch', {}, {
                context: this
            }).done(this.updateView);
        },
        updateView: function(data) {

            if (data.error_code) {
                return utils.modal.alert(data.error_message);
            }

            this.$search_forum_holder.html(this.getForumSelectHtml(data));

            this.$search_forum = this.$el.find('#search_forum');
        },
        getForumSelectHtml: function(data) {

            var html = '<select class="control-full" id="search_forum">';
            html += '<option value="">' + _t('All Forums') + '</option>';
            html += this.addForumOptionHtml(data, '');
            html += '</select>';

            return html;
        },
        addForumOptionHtml: function(aForums, prefix) {

            var html = '';

            _.each(aForums, function(oForum) {

                html += '<option value="' + oForum.iForumId + '"';

                if (oForum.iForumId == this.query.sForumIds) {
                    html += ' selected="selected"'
                }

                html += '>' + prefix + oForum.sName + '</option>';

                // append childs
                html += this.addForumOptionHtml(oForum.aSubForum, prefix + '&nbsp;&nbsp;&nbsp;');

            }, this);

            return html;
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function(evt) {
            this.$adv_search_holder.toggleClass("hide");
        },
        submitSearch: function() {

            if (!this.$search_keywords.val().trim()) {
                return utils.modal.alert(_t('Please provide keyword'));
            }

            this.$adv_search_holder.addClass('hide');

            var query = {
                sKeyword: this.$search_keywords.val() || '',
                sForumIds: this.$search_forum.val() || '',
                sSearchType: this.$search_result.val() || 'thread'
            };

            window.location.href = '#forum_search/' + btoa(JSON.stringify(query));
        }
    });

});

define('text!forum/tpl/forum-announcement-item.html',[],function () { return '<!-- forum/tpl/forum-announcement-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image item-announcement-icon">\n\t</div>\n\t<div class="item-forum-content">\n\t\t<div class="item-title">\n\t\t\t<a href="<%=item.getUrl()%>"><%=item.getTitle()%></a>\n\t\t</div>\n\t\t<div class="item-description">\n\t\t\t<span><%=_t(\'Last post by\')%></span> <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\n\t\t</div>\n\t\t<div class="item-stats">\n\t\t\t<span><i class="icon icon-comments"></i> <%=item.getTotalPost()%></span>\n\t\t\t<span><i class="icon icon-eye-open"></i> <%=item.getTotalView()%></span>\n\t\t\t<span>\n\t\t\t\t<i class="icon icon-time"></i>\n\t\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t\t</span>\n\t\t</div>\n\t</div>\n</div>\n';});


define('text!forum/tpl/forum-thread-item.html',[],function () { return '<!-- forum/tpl/forum-thread-item -->\n<div class="clearfix item-wrapper">\n\t<div class="item-image item-thread-icon"></div>\n\t\n\t<div class="item-forum-content">\n\t\t<div class="item-title">\n\t\t\t<%if (item.isSticky()) {%>\n\t\t\t\t<i class="icon icon-pushpin"></i>\n\t\t\t<%}%>\n\t\t\t<a href="<%=item.getUrl()%>"><%=utils.str.shorten(item.getTitle(), 60)%></a>\t\t\t\n\t\t</div>\n\t\t<div class="item-description">\n\t\t\t<span><%=_t(\'Last post by \')%></span> \n\t\t\t<a href="<%=item.getLastUserUrl()%>"><%=utils.str.shorten(item.getLastUserTitle(), 16)%></a>\n\t\t</div>\n\t\t<div class="item-stats">\n\t\t\t<span><i class="icon icon-comments"></i> <%=item.getTotalPost()%></span>\n\t\t\t<span><i class="icon icon-eye-open"></i> <%=item.getTotalView()%></span>\n\t\t\t<span>\n\t\t\t\t<i class="icon icon-time"></i>\n\t\t\t\t<span class="livetime" data-livetime="<%= item.getTimeUpdate() %>"><%= item.getLiveTimeUpdate() %></span>\n\t\t\t</span>\n\t\t</div>\n\t</div>\t\n</div>\n';});

define('forum/view/forum-thread-item',[
    'text!forum/tpl/forum-announcement-item.html',
    'text!forum/tpl/forum-thread-item.html'
], function(textAnnouncement, text) {

    return Backbone.View.extend({
        className: 'forum-thread-item',
        template: _.template(text),
        render: function() {

            this.$el.attr('id', this.model.getDataId());

            if (this.model.isAnnouncement()) {
                this.template = _.template(textAnnouncement);
            }

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {
            inject(this.el);
        }
    });
});

define('text!forum/tpl/forum-thread-list.html',[],function () { return '<!-- forum/tpl/forum-thread-list.html-->\n<div class="loading-initiator">\n\t<!-- loading threads -->\n</div>';});

define('forum/view/forum-thread-list',[
    'forum/model/thread',
    'forum/view/forum-thread-item',
    'text!forum/tpl/forum-thread-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iForumId: 0,
            iAmountOfThread: 10
        },
        followById: false,
        api: 'forum/detail',
        phraseNotFound: 'No threads found.',
        phraseNotMore: 'No more threads.',
        className: 'thread-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        inject: function(data) {

            this.$holder.html(this.$el);

            this.isFirst = true;

            data ? this.loadMoreSuccess(data) : this.loadMore();

            return this;
        },
        parseData: function(data, ItemModel) {

            if (!data.aThread) {
                return [];
            }

            return data.aThread.map(function(item) {
                return new ItemModel(item);
            });
        }
    });
});

define('text!forum/tpl/forum-detail.html',[],function () { return '<!-- forum/tpl/forum-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add hide" id="add_thread_btn" href="#forum/<%=item.getId()%>/add_thread"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n\t\t\t<%= _t(\'Loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align forum-list-holder">\n\t\t\t\t<div class="forum-list" id="forum_list_holder"></div>\n\n\t\t\t\t<div class="clearfix announcement-item-wrapper">\n\t\t\t\t\t<div class="announcement-header hide" id="announcement_list_header">\n\t\t\t\t\t\t<i class="icon icon-announcement-item"></i>\t\t\n\t\t\t\t\t\t<i class="icon toggle-icon icon-chevron-up"></i>\n\t\t\t\t\t\t<div class="announcement-header-content">\n\t\t\t\t\t\t\t<span class="announcement-title"><%=_t(\'Announcements\')%></span>\n\t\t\t\t\t\t\t<span class="count forum-count"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="thread-list" id="announcement_list_holder"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class="clearfix thread-item-wrapper">\n\t\t\t\t\t<div class="thread-header hide" id="thread_list_header">\n\t\t\t\t\t\t<i class="icon icon-thread-item"></i>\t\t\n\t\t\t\t\t\t<i class="icon toggle-icon icon-chevron-up"></i>\n\t\t\t\t\t\t<div class="thread-header-content">\n\t\t\t\t\t\t\t<span class="thread-title"><%=_t(\'Threads\')%></span>\n\t\t\t\t\t<span class="count forum-count"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="thread-list" id="thread_list_holder"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer footer-pagination">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <div class="menu-item" id="forum_quickjump_holder">\n        </div>\n        <div class="menu-item">\n        \t<div class="sibling" id="pagination_holder"></div>\n        </div>\n    </div>\n</div>';});

define('forum/view/forum-detail',[
    'core/view/pagination',
    'forum/model/forum',
    'forum/model/thread',
    'forum/view/forum-item',
    'forum/view/forum-list',
    'forum/view/forum-quickjump',
    'forum/view/forum-search',
    'forum/view/forum-thread-item',
    'forum/view/forum-thread-list',
    'text!forum/tpl/forum-detail.html'
], function(PaginationView, ForumModel, ThreadModel, ForumItemView, ForumListView, QuickjumpView, SearchView, ThreadItemView, ThreadListView, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            forum_list_holder: '#forum_list_holder',
            announcement_list_holder: '#announcement_list_holder',
            thread_list_holder: '#thread_list_holder'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({
                iForumId: this.model.getId(),
                iAmountOfThread: 10
            }, query);

            this.$el.html(this.template({
                item: this.model
            }));

            this.$add_thread_btn = this.$el.find('#add_thread_btn');
            this.$announcement_list_header = this.$el.find('#announcement_list_header');
            this.$announcement_list_holder = this.$el.find(this.region.announcement_list_holder);
            this.$forum_list_holder = this.$el.find(this.region.forum_list_holder);
            this.$forum_quickjump_holder = this.$el.find('#forum_quickjump_holder');
            this.$page_title = this.$el.find('#page_title');
            this.$pagination_holder = this.$el.find('#pagination_holder');
            this.$thread_list_header = this.$el.find('#thread_list_header');
            this.$thread_list_holder = this.$el.find(this.region.thread_list_holder);

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.fetchData();

            // search view
            this.searchView = new SearchView();

            this.searchView.render($.extend({
                sForumIds: this.model.getId()
            }, this.query)).inject();

            this.searchView.$el.find('#adv_search_toggle_btn').removeClass('no-padding');
            this.searchView.$el.find('#adv_search_holder').removeClass('no-padding'); 

            // quick jump view
            this.quickjumpView = new QuickjumpView();

            var self = this;
            this.quickjumpView.render(this.query).inject(function(dom) {
                self.$forum_quickjump_holder.html(dom);
            });

            return this;
        },
        fetchData: function() {

            var settings = {
                context: this
            };

            utils.api.post('forum/detail', this.query, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.aForum) {
                this.model.set(data.aForum);
                this.appendInfo();
            }

            if (data.aSubForum) {
                this.appendForums(data.aSubForum);
            }

            if (data.aAnnouncement) {
                this.appendAnnouncements(data.aAnnouncement);
            }

            if (data.aThread) {
                this.appendThreads(data);
            }

            this.appendPagination();
        },
        fetchFail: function(error) {

            utils.debug.warn(error);

            utils.history.back();
        },
        appendInfo: function() {

            this.$page_title.html(this.model.getTitle());

            if (this.model.canAddThread()) {
                this.$add_thread_btn.removeClass('hide');
            }

            this.$announcement_list_header.find('.count').html('(' + this.model.getAnnouncementCount() + ')');
            this.$thread_list_header.find('.count').html('(' + this.model.getThreadCount() + ')');
        },
        appendForums: function(aSubForum) {

            if (aSubForum.length == 0) {
                return;
            }

            var items = aSubForum.map(function(item) {
                return new ForumModel(item);
            });

            var self = this;
            var inject = function(dom) {
                self.$forum_list_holder.append(dom);
            };

            _.each(items, function(item) {
                new ForumItemView({
                    model: item
                }).render().inject(inject);
            }, this);
        },
        appendAnnouncements: function(aAnnouncement) {

            if (aAnnouncement.length == 0) {
                return;
            }

            this.$announcement_list_header.removeClass('hide');

            var items = aAnnouncement.map(function(item) {
                return new ThreadModel(item);
            });

            var self = this;
            var inject = function(dom) {
                self.$announcement_list_holder.append(dom);
            };

            _.each(items, function(item) {
                new ThreadItemView({
                    model: item
                }).render().inject(inject);
            }, this);
        },
        appendThreads: function(data) {

            if (data.aThread && data.aThread.length > 0) {
                this.$thread_list_header.removeClass('hide');
            }

            this.listView = new ThreadListView({}, this.$el.find(this.$thread_list_holder), this.$scroller, {
                loadnew: false,
                loadmore: false
            });

            this.listView.render(this.query).inject(data);
        },
        appendPagination: function() {

            var context = {
                currentPage: this.query.iPage,
                itemLimit: this.query.iAmountOfThread,
                totalItem: this.model.getThreadCount()
            };

            var self = this;
            var inject = function(dom) {
                self.$pagination_holder.html(dom);
            };

            this.paginationView = new PaginationView();

            this.paginationView.render(context).inject(inject);

            this.paginationView.on('change', this.changePage, this);
        },
        changePage: function(page) {

            this.query.iPage = page;

            this.listView.resetQuery(this.query);
        },
        events: {
            'click .toggle-icon': 'toggleList'
        },
        toggleList: function(evt) {

            var $target = $(evt.currentTarget);

            $target.toggleClass('icon-chevron-up icon-chevron-down');

            $target.parent().next().toggleClass('hide');
        }
    });
});
define('forum/controller/forum-detail',[
    'forum/model/forum',
    'forum/view/forum-detail'
], function(Model, View) {

    function Controller(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iForumId: id
            })
        }).render().inject();
    }

    utils.router.route('forum/:id', Controller);
});

define('text!forum/tpl/forum-thread-moremenu.html',[],function () { return '<div class="setting-list">\r\n    <a class="setting-item <%if (context.sView == \'my-thread\') {%>current<%}%>" href="#forum_threads/my-thread">\r\n        <%=_t(\'My Threads\')%>\r\n    </a>\r\n    <a class="setting-item <%if (context.sView == \'subscribed\') {%>current<%}%>" href="#forum_threads/subscribed">\r\n        <%=_t(\'Subscribed Threads\')%>\r\n    </a>\r\n</div>';});

define('forum/view/forum-thread-moremenu',[
    'text!forum/tpl/forum-thread-moremenu.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                sView: ''
            }, context);

            this.$el.html(this.template({
                context: this.context
            }));

            return this;
        },
        events: {
            'touchend a': 'closeThis'
        },
        closeThis: function(evt) {

            utils.popup.close();
        }
    });
});

define('text!forum/tpl/forum-index.html',[],function () { return '<!-- forum/tpl/forum-index.html-->\n<div class="header">\n    <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n        <i class="icon icon-sidebar"></i>\n    </div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align forum-list-holder" id="forum_list_holder">\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item current" href="#forums">\n        \t<div class=""><%= _t(\'Forums\') %></div>\n        </a>\n        <a class="menu-item" href="#forum_threads/new">\n        \t<div class="sibling"><%= _t(\'New Posts\') %></div>\n        </a>\n        <div class="menu-item" id="footer_more_btn">\n        \t<div class="sibling"><%= _t(\'More\') %></div>\n        </div>\n    </div>\n</div>';});

define('forum/view/forum-index',[
    'forum/view/forum-list',
    'forum/view/forum-search',
    'forum/view/forum-thread-moremenu',
    'text!forum/tpl/forum-index.html'
], function(ListView, SearchView, MoreMenuView, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            listHolder: '#forum_list_holder'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.$list_holder = this.$el.find(this.region.listHolder);

            // list view
            this.listView = new ListView({}, this.$list_holder, this.$scroller, {
                loadnew: false,
                loadmore: false
            });

            this.listView.render(this.query).inject();

            // search view
            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            return this;
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {

            this.moreMenu = new MoreMenuView();

            this.moreMenu.render().inject();
        }
    });
});
define('forum/controller/forum-index',[
	'forum/view/forum-index'
], function (View) {
	
	function Controller()
	{
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new View().render().inject();
	}
	
	utils.router.route('forums', Controller);
});
define('attachment/view/attachment-add-item',['require'],function(text) {

    return Backbone.View.extend({
        apiDelete: 'attachment/delete',
        template: null,
        render: function(context) {

            this.context = $.extend({
                postDelete: true
            }, context);

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(callback) {

            callback(this.$el);

            return this;
        },
        events: {
            'click .remove-attachment': 'onRemoveAttachmentClick'
        },
        onRemoveAttachmentClick: function(evt) {

            if (this.context.postDelete) {
                var self = this;

                utils.modal.confirm(_t('Are you sure?'), function(selected) {
                    if (selected == 1) {
                        self.removeAttachment(evt);
                    }
                });
            } else {
                this.removeSuccess();
            }
        },
        removeAttachment: function(evt) {

            var postData = this.getPostDataDelete();
            var settings = {
                context: this
            };

            utils.api.post(this.apiDelete, postData, settings).done(this.removeDone).fail(this.removeFail);
        },
        getPostDataDelete: function() {

            return {
                iItemId: this.model.getId()
            };
        },
        removeDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            }

            this.removeSuccess(data);
        },
        removeSuccess: function(data) {

            // remove element
            this.$el.remove();

            this.trigger('removesuccess', this.model);
        },
        removeFail: function(jqXHR, textStatus, errorThrown) {

            utils.modal.alert('Can not delete attachment. Please try again later.');

            utils.debug.warn('removeFail', arguments);
        }
    });
});

define('text!attachment/tpl/attachment-add-link-item.html',[],function () { return '<div class="close_button remove-attachment"></div>\n<div class="wrap">\n\t<div class="wrap_img" style="background-image:url(<%=item.getPhotoUrl()%>);"></div>\n    <div class="wrap_content">\n        <div class="link_post_title"><%=item.getTitle()%></div>\n        <div class="link_post_source"><%=item.getUrl()%></div>\n        <div class="link_post_desc"><%=utils.str.shorten(item.getDescription(), 100)%></div>\n    </div>\n    <div class="clear"></div>\n</div>';});

define('attachment/view/attachment-add-link-item',[
    'attachment/view/attachment-add-item',
    'text!attachment/tpl/attachment-add-link-item.html'
], function(AttachmentAddItemView, text) {

    return AttachmentAddItemView.extend({
        className: 'user_add_content link',
        template: _.template(text),
        getPostDataDelete: function() {

            return {
                iItemId: this.model.getId(),
                sModule: this.context.sModule,
                sType: 'link'
            };
        }
    });
});

define('text!attachment/tpl/attachment-add-photo-item.html',[],function () { return '<span class="attachment-photo-image">\n    <img src="<%= item.getPhotoUrl() %>" />\n</span>\n<div class="close_button remove-attachment"></div>';});

define('attachment/view/attachment-add-photo-item',[
    'attachment/view/attachment-add-item',
    'text!attachment/tpl/attachment-add-photo-item.html'
], function(AttachmentAddItemView, text) {

    return AttachmentAddItemView.extend({
        className: 'attachment-photo-item',
        template: _.template(text),
        getPostDataDelete: function() {

            return {
                iItemId: this.model.getId(),
                sModule: this.context.sModule,
                sType: 'file'
            };
        }
    });
});

define('text!attachment/tpl/attachment-form-link.html',[],function () { return '<div class="update-status-attachment-link">\n\t<input type="submit" id="submit_link_btn" value="<%= _t(\'Save\') %>" class="btn btn-active">\t\n\t<div class="update-input-attachment-link">\n\t\t<input class="control-full" placeholder="<%= _t(\'Insert URL\') %>" type="text" id="link_url" />\n\t</div>\n</div>\n\n';});

define('attachment/view/attachment-form-link',[
    'attachment/model/attachment-link',
    'text!attachment/tpl/attachment-form-link.html'
], function(LinkModel, text) {

    var AttachmentLink = Backbone.View.extend({
        region: {
            main: '#simple-popup', // main region is where the html contain is injected
        },
        events: {
            'click #submit_link_btn': 'submitLink'
        },
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                sModule: null
            }, context);

            this.$el.html(this.template());

            // initialize jquery variables
            this.$postBtn = $('#submit_link_btn', this.$el); // this variable is the same as many view for copy/paste purpose :)
            this.$linkUrl = $('#link_url', this.$el);

            return this;
        },
        inject: function() {

            utils.popup.open(this.$el);

            return this;
        },
        close: function() {

            utils.popup.close();

            return this;
        },
        submitLink: function() {

            if (this.$postBtn.hasClass('processing')) {
                return false;
            }

            if (!this.isLinkValidate()) {
                return false;
            }

            var data = {
                sModule: this.context.sModule,
                sUrl: utils.helper.checkToAddHttpIntoLinkIfNeccessary(this.$linkUrl.val())
            };
            var settings = {
                'context': this,
                'beforeSend': this.beforeSend
            };

            utils.api.post('attachment/attachlink', data, settings).done(this.postDone).always(this.postComplete);
        },
        /**
         * post complete will always be called when the ajax finishes, it is the best place to collect your garbage
         */
        postComplete: function() {
            this.$postBtn.removeClass('processing');
            this.$postBtn.val('Save');
        },
        /**
         * beforesend will be called right before data is send, this is the best place to initialize your awesome handling functions
         */
        beforeSend: function() {
            this.$postBtn.addClass('processing');
            this.$postBtn.val('Saving...');
        },
        /**
         * It is called when having a response returned.
         * Note that it will not be called if server returns status !== 200
         */
        postDone: function(data, status, jqXHR) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || 'Post link failed!'); //defensive programming
                return false;
            } else {
                this.postSuccess(data);
            }
        },
        isLinkValidate: function() {

            if (this.$linkUrl.val().trim() === '') {
                utils.modal.alert('Please enter your link');
                return false;
            }

            return true;
        },
        /** 
         * It should be called when the response has error_code == 0
         */
        postSuccess: function(data) {

            var link = new LinkModel(data.link_data);

            this.trigger('attachsuccess', link);

            this.close();
        }
    });

    return AttachmentLink;
});

define('text!forum/tpl/forum-post-edit-form.html',[],function () { return '<div class="forum-post-add-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            *<%= _t(\'Message\') %>\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'Insert Image\')%></span>\n        </div>\n        <div class="form-group">\n            <textarea id="forum_post_form_message" class="control-full textarea" placeholder="<%= _t(\'Message\') %>"><%=item.getTextNotParsed()%></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Attachments\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="action-item" id="attach_gallery_btn">\n                <i class="icon icon-attachment-gallery"></i>\n            </div>\n            <div class="action-item" id="attach_link_btn">\n                <i class="icon icon-attachment-link"></i>\n            </div>\n        </div>\n\n        <div>\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div class="clearfix" id="attachment_link_holder">\n            </div>\n        </div>\n    </div>\n</div>';});


define('text!forum/tpl/forum-post-edit.html',[],function () { return '<!-- forum/tpl/forum-post-edit.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'Editing Post\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="forum-post-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});

define('forum/view/forum-post-edit',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'attachment/view/attachment-form-link',
    'photo/view/photo-add-actions',
    'text!forum/tpl/forum-post-edit-form.html',
    'text!forum/tpl/forum-post-edit.html'
], function(AttachmentPhotoModel, AttachmentAddLinkItem, AttachmentAddPhotoItem, AttachmentFormLink, PhotoAddActionsView, formText, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#forum-post-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function() {

            this.$el.attr('id', 'forum_post_edit');

            this.$el.html(this.template());

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iPostId: this.model.getId()
            };
            var settings = {
                context: this
            }

            utils.api.post('forum/postformedit', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);

            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate({
                item: this.model
            }));

            this.$form_message = this.$el.find('#forum_post_form_message');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            this.appendAttachments();

            // bind input edit, paste events
            var self = this;
            this.$form_message.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        appendAttachments: function() {

            _.each(this.model.getAttachmentPhotos(), function(item) {
                this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
            }, this);

            _.each(this.model.getAttachmentLinks(), function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('fetchDataFail', arguments);

            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'savePost',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'forum'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_message.val(this.$form_message.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'forum'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'forum'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'forum'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        savePost: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sMessage = this.$form_message.val();

            // validate
            if (!sMessage.trim()) {
                return utils.modal.alert(_t('Provide some text.'));
            }

            // passed
            var postData = {
                iPostId: this.model.getId(),
                sAttachment: this.aAttachmentIds.join(),
                sText: sMessage
            };

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('forum/postedit', postData, settings).done(this.saveDone).always(function() {
                $target.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.message) {
                utils.modal.toast(data.message);
            }

            window.location.href = '#forum_thread/' + this.model.getThreadId();
        },
        toggleSaveBtn: function(evt) {

            var sMessage = this.$form_message.val();

            var bDisable = !sMessage.trim();

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('forum/controller/forum-post-edit',[
    'forum/model/post',
    'forum/view/forum-post-edit'
], function(Model, View) {

    function Controller(id) {

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iPostId: id
            })
        }).render().inject();
    }

    utils.router.route('forum_post/:id/edit', Controller);
});

define('text!attachment/tpl/attachment-link-item.html',[],function () { return '<div class="link-img">\n    <img src="<%=item.getPhotoUrl()%>">\n</div>\n<div class="link-content">\n    <div class="link_post_title"><%=item.getTitle()%></div>\n    <div class="link_post_source"><%=item.getHostName()%></div>\n    <div class="link_post_desc"><%=utils.helper.shorten(item.getDescription(), 100, "...")%></div>\n</div>';});

define('attachment/view/attachment-link-item',[
    'text!attachment/tpl/attachment-link-item.html'
], function(text) {

    return Backbone.View.extend({
        region: {},
        className: 'user_add_content attachment-link-item',
        template: _.template(text),
        render: function() {

            this.$el.attr({
                'rel': 'externallink',
                'data-url': this.model.getUrl()
            });

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {
            inject(this.el);
        }
    });
});

define('text!attachment/tpl/attachment-photo-item.html',[],function () { return '<!-- <img src="<%=item.getPhotoUrl()%>"> -->\r\n<span class="attachment-photo-item-view" style="background-image:url(\'<%=item.getPhotoUrl()%>\')"></span>';});

define('attachment/view/attachment-photo-item',[
    'attachment/view/attachment-photo-detail',
    'text!attachment/tpl/attachment-photo-item.html'
], function(AttachmentPhotoDetailView, text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-photo-item',
        template: _.template(text),
        render: function(item) {

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {
            inject(this.el);
        },
        events: {
            'click': 'showDetail'
        },
        showDetail: function(evt) {

            new AttachmentPhotoDetailView({
                model: this.model
            }).render().inject();
        }
    });
});

define('text!forum/tpl/forum-post-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (item.isOwner()) {%>\n\t<a class="setting-item" href="#forum_post/<%=item.getId()%>/edit"><%=_t(\'Edit\')%></a>\n\t<a class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate"><%=_t(\'Delete\')%></a>\n\t<%}%>\n\t<%if (!thread.isAnnouncement()) {%>\n\t<a class="setting-item" id="<%=item.getDataId(\'report\')%>" rel="delegate"><%=_t(\'Report\')%></a>\n\t<%}%>\n</div>';});

define('forum/view/forum-post-setting',[
    'text!forum/tpl/forum-post-setting.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({
                thread: null
            }, query);

            this.$el.html(this.template({
                item: this.model,
                thread: this.query.thread
            }));

            return this;
        }
    });
});

define('text!forum/tpl/forum-post-item-search.html',[],function () { return '<!-- forum/tpl/forum-post-item -->\n<div class="item-wrapper">\n\t<div class="item-forum-top clearfix">\n\t\t<div class="item-image">\n\t\t\t<i class="icon icon-search-post"></i>\n\t\t</div>\n\t\t<div class="item-content">\n\t\t\t<div class="item-headline">\n\t\t\t\t<span><%=_t(\'Posted in thread\')%></span>\n\t\t\t<a href="<%=item.getThreadUrl()%>"><%=utils.str.shorten(item.getThreadTitle(), 60)%></a>\n\t\t\t</div>\n\t\t\t<div class="item-subline">\n\t\t\t\t<div>\n\t\t\t\t\t<span><%=_t(\'by\')%></span>\n\t\t\t\t\t<a href="<%=item.getPosterUrl()%>"><%=utils.str.shorten(item.getPosterTitle(), 16)%></a>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<i class="icon icon-time"></i>\n\t\t\t\t\t<span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class="item-forum-content">\n\t\t<div class="clear item-story">\n\t\t\t<%=utils.str.shorten(item.getText(), 120)%>\n\t\t</div>\n\t</div>\n</div>';});


define('text!forum/tpl/forum-post-item.html',[],function () { return '<!-- forum/tpl/forum-post-item -->\n<div class="item-wrapper">\n\t<div class="item-forum-top clearfix">\n\t\t<a class="item-image" href="<%=item.getPosterUrl()%>">\n\t\t\t<img src="<%=item.getPosterImageSrc()%>" />\n\t\t</a>\n\t\t<%if (!thread.isAnnouncement() || (thread.isAnnouncement() && item.isOwner())) {%>\n\t\t<div class="item-setting" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n\t\t\t<i class="icon icon-setting"></i>\n\t\t</div>\n\t\t<%}%>\n\t\t<div class="item-headline">\n\t\t\t<a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\n\t\t\t<div><%=_t(\'Posts\')%>: <%=item.getTotalPost()%></div>\n\t\t</div>\n\t\t<div class="item-subline">\n\t\t\t<i class="icon icon-time"></i>\n\t\t\t<span class="livetime" data-livetime="<%=item.getTimestamp()%>"><%=item.getLivetime()%></span>\n\t\t</div>\n\t</div>\n\t<div class="item-forum-content">\n\t\t<div class="clear item-story">\n\t\t\t<%=item.getText()%>\n\t\t</div>\n\t\t<%if (item.hasAttachments()) {%>\n\t\t<div class="item-attachment">\n\t\t    <div class="item-headline"><%=_t(\'Attachments\')%></div>\n\t\t    <div class="clearfix" id="attachment_photo_holder">\n\t\t    </div>\n\t\t    <div class="clearfix" id="attachment_link_holder">\n\t\t    </div>\n\t\t</div>\n\t\t<%}%>\n\t</div>\n\t<div class="pvm"></div>\n\t<div class="actions-justify gray">\n\t\t<%if (item.canLike()) {%>\n        <div class="action-item <%if (item.isLiked()) {%>liked<%}%>" id="<%=item.getDataId(\'like\')%>" rel="delegate">\n\t\t\t<span class="text-info"><%=item.getLikeCount()%></span>\n\t\t\t<i class="icon icon-activity-like"></i>\n\t\t</div>\n        <%}%>\n\t\t<%if (!thread.isAnnouncement() && item.canQuote()) {%>\n\t\t<div class="action-item" id="<%=item.getDataId(\'quote\')%>" rel="delegate">\n\t\t\t<i class="icon icon-comment"></i>\n\t\t</div>\n\t\t<%}%>\n\t\t<%if (thread.isAnnouncement()) {%>\n\t\t<div class="action-item" id="<%=item.getDataId(\'report\')%>" rel="delegate">\n\t\t\t<i class="icon icon-activity-report"></i>\n\t\t</div>\n\t\t<%}%>\n\t</div>\n</div>';});

define('forum/view/forum-post-item',[
    'attachment/view/attachment-link-item',
    'attachment/view/attachment-photo-item',
    'forum/view/forum-post-setting',
    'text!forum/tpl/forum-post-item-search.html',
    'text!forum/tpl/forum-post-item.html'
], function(AttachmentLinkItemView, AttachmentPhotoItemView, SettingView, textSearch, text) {

    return Backbone.ItemView.extend({
        className: 'forum-post-item',
        template: _.template(text),
        settingView: SettingView,
        events: {
            'quote': 'onQuoteClick'
        },
        render: function(query) {

            this.query = $.extend({
                isSearch: false,
                thread: null
            }, query);

            if (this.query.isSearch) {
                this.template = _.template(textSearch);
            }

            this.$el.attr("id", this.model.getDataId());

            this.$el.html(this.template({
                item: this.model,
                thread: this.query.thread
            }));

            return this;
        },
        inject: function(inject) {

            inject(this.el);

            if (this.model.hasAttachments()) {
                this.appendAttachments();
            }
        },
        appendAttachments: function() {

            var self = this;

            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            var injectPhoto = function(dom) {
                self.$attachment_photo_holder.append(dom);
            };

            var injectLink = function(dom) {
                self.$attachment_link_holder.append(dom);
            };

            _.each(this.model.getAttachmentPhotos(), function(oPhoto) {
                new AttachmentPhotoItemView({
                    model: oPhoto
                }).render().inject(injectPhoto);
            }, this);

            _.each(this.model.getAttachmentLinks(), function(oLink) {
                new AttachmentLinkItemView({
                    model: oLink
                }).render().inject(injectLink);
            }, this);
        },
        doDeleteConfirm: function() {

            var self = this;

            utils.modal.confirm("Do you want to delete this post?", function(selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');

                    var postData = {
                        iPostId: self.model.getId()
                    };

                    utils.api.post('forum/postdelete', postData).done(function(data) {
                        if (data.error_code && data.error_code > 0) {
                            return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                        }

                        self.deleteSuccess(data);
                    }).always(function() {
                        utils.observer.trigger('releaseui');
                        utils.popup.close();
                    });
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message);

            this.$el.remove();
        },
        onSettingClick: function(evt, data) {

            if (!data.id || data.id != this.model.getDataId('setting')) {
                return false;
            }

            evt.preventDefault();

            this.getSettingView().render(this.query).inject();
        },
        onQuoteClick: function() {

            if (this.query.thread.isClosed()) {
                return utils.modal.alert(_t('Thread is closed.'));
            }

            window.location.href = '#forum_thread/' + this.model.getThreadId() + '/reply/' + this.model.getId();
        }
    });
});

define('text!forum/tpl/forum-post-list.html',[],function () { return '<!-- forum/tpl/forum-post-list.html-->\n<div class="loading-initiator">\n\t<!-- loading posts -->\n</div>';});

define('forum/view/forum-post-list',[
    'forum/model/post',
    'forum/view/forum-post-item',
    'text!forum/tpl/forum-post-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iThreadId: 0,
            iAmountOfPost: 10
        },
        followById: false,
        api: 'forum/threaddetail',
        phraseNotFound: 'No posts found.',
        phraseNotMore: 'No more posts.',
        className: 'post-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        inject: function(data) {

            this.$holder.html(this.$el);

            this.isFirst = true;

            data ? this.loadMoreSuccess(data) : this.loadMore();

            return this;
        },
        parseData: function(data, ItemModel) {

            if (!data.aPost) {
                return [];
            }

            return data.aPost.map(function(item) {
                return new ItemModel(item);
            });
        },
        loadMore: function() {

            var sendData = $.extend({}, this.query, {
                thread: false
            });

            this.$ajaxMore = this.apiFn(this.api, sendData, {
                context: this
            }).done(function(data) {
                (data.error_code && data.error_code > 0) ? this.loadMoreFail(data) : this.loadMoreSuccess(data);
            }).fail(this.loadMoreFail);
        }
    });
});

define('text!forum/tpl/forum-search-results.html',[],function () { return '<!-- forum/tpl/forum-index.html-->\n<div class="header">\n    <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n        <i class="icon icon-sidebar"></i>\n    </div>\n\t<div class="header-center">\n\t\t<%= utils.helper.updater() %>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="search_result_header">\n                <span><%=_t(\'Search \' + sSearchType + \'s for\')%>:</span> \n                <span class="keyword"><%=sKeyword%></span>\n            </div>\n\t\t\t<div class="swiper-list vertical-align search-result-holder list-holder" id="list_holder">\n\t\t\t\t\n\t\t\t</div>\n            <%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item" href="#forums">\n        \t<div class=""><%= _t(\'Forums\') %></div>\n        </a>\n        <a class="menu-item" href="#forum_threads/new">\n        \t<div class="sibling"><%= _t(\'New Posts\') %></div>\n        </a>\n        <div class="menu-item" id="footer_more_btn">\n        \t<div class="sibling"><%= _t(\'More\') %></div>\n        </div>\n    </div>\n</div>';});

define('forum/view/forum-search-results',[
    'forum/view/forum-post-list',
    'forum/view/forum-search',
    'forum/view/forum-thread-list',
    'forum/view/forum-thread-moremenu',
    'text!forum/tpl/forum-search-results.html'
], function(PostListView, SearchView, ThreadListView, MoreMenuView, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            listHolder: '#list_holder'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({
                isSearch: true,
                iAmountOfThread: 10
            }, query);

            this.$el.html(this.template(this.query));

            this.$search_result_header = this.$el.find('#search_result_header');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.$list_holder = this.$el.find(this.region.listHolder);

            // search view
            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            // search result list
            var ListView = (this.query.sSearchType == 'thread') ? ThreadListView : PostListView;

            this.listView = new ListView({
                api: 'forum/search',
            }, this.$list_holder, this.$scroller);

            this.listView.render(this.query).inject();

            return this;
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {

            this.moreMenu = new MoreMenuView();

            this.moreMenu.render().inject();
        }
    });
});
define('forum/controller/forum-search-results',[
    'forum/view/forum-search-results'
], function(View) {

    function Controller(basecode) {

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        var query = $.parseJSON(atob(basecode));

        new View().render(query).inject();
    }

    utils.router.route('forum_search/:basecode', Controller);
});
define('poll/model/answer',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'iAnswerId',
        defaults: {
            sModelType: 'poll_answer'
        },
        getAnswer: function() {
            return this.get('sAnswer') || '';
        },
        getTotalVote: function() {
            return parseInt(this.get('iTotalVotes')) || 0;
        },
        getVotePercent: function() {
            return this.get('iVotePercentage') || 0;
        }
    });
});
define('poll/model/poll',[
    'poll/model/answer'
], function(AnswerModel) {

    return Backbone.Model.extend({
        idAttribute: 'iPollId',
        defaults: {
            sModelType: 'poll',
            bCanView: true,
            bCanLike: true
        },
        getQuestion: function() {
            return this.get('sQuestion') || '';
        },
        getAnswers: function() {

            var aAnswers = this.get('aAnswer') || [];

            return aAnswers.map(function(oAnswer) {
                return new AnswerModel(oAnswer);
            });
        },
        getTotalAnswer: function() {
            return this.getAnswers().length || 0;
        },
        isVoted: function() {
            return this.get('bIsVoted') || false;
        },
        getTotalVote: function() {
            return parseInt(this.get('iTotalVotes')) || 0;
        },
        getPrivacyId: function() {
            return parseInt(this.get('iPrivacy')) || 0;
        },
        getPrivacyCommentId: function() {
            return parseInt(this.get('iPrivacyComment')) || 0;
        },
        isHideVote: function() {
            return this.get('bIsHideVote') || false;
        },
        hasImage: function() {
            return this.get('bHasImage') || false;
        },
        getImageSrc: function() {
            return this.get('sPollImage') || '';
        },
        isApproved: function() {
            return this.get('bIsApproved') || false;
        },
        canViewUserResult: function() {
            return this.get('bCanViewUserResult') || false;
        },
        canViewResult: function() {
            return this.get('bCanViewResult') || false;
        },
        getAnswerId: function() {
            return this.get('iAnswerId') || 0;
        }
    });
});
define('poll/model/perms',[],function() {

    return Backbone.Model.extend({
        getMaxAnswer: function() {
            return this.get('iMaxAnswer') || 0;
        },
        canAddPoll: function() {
            return this.get('bCanCreatePoll') || false;
        },
        canEditTitle: function() {
            return this.get('bCanEditTitle') || false;
        },
        canEditQuestion: function() {
            return this.get('bCanEditQuestion') || false;
        },
        canEditPoll: function() {

            if (!this.canEditTitle() && !this.canEditQuestion()) {
                return false;
            }

            return this.get('bCanEditOwnPoll') || false;
        }
    });
});
define('poll/view/poll-add-photo-item',[
    'attachment/view/attachment-add-photo-item'
], function(AttachmentAddPhotoItem) {

    return AttachmentAddPhotoItem.extend({
        apiDelete: 'poll/deleteimage',
        getPostDataDelete: function() {

            return {
                iPollId: this.context.iPollId
            };
        }
    });
});

define('text!poll/tpl/poll-add-form-answer.html',[],function () { return '<div class="form-group">\n    <input type="text" class="control-full poll-form-answer" id="" />\n    <span class="btn-form icon-answer-minus"></span>\n</div>';});


define('text!poll/tpl/poll-add-form.html',[],function () { return '<div class="poll-add-form">\n<div class="form-general" id="poll_add_form_content">\n    <!-- form content -->\n    <div class="form-title">\n        *<%=_t(\'Question\')%>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full" id="poll_form_question" placeholder="<%=_t(\'Question\')%>" value=""/>\n    </div>\n\n    <%if (context.action != \'attach\') {%>\n    <div class="form-title">\n        <%=_t(\'Privacy\')%>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="poll_form_privacy">\n            <%_.each(data.view_options, function (option) {%>\n\t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n\t\t\t<%});%>\n        </select>\n    </div>\n\n    <div class="form-title">\n        <%=_t(\'Comment Privacy\')%>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="poll_form_privacy_comment">\n            <%_.each(data.comment_options, function (option) {%>\n\t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n\t\t\t<%});%>\n        </select>\n    </div>\n    <%}%>\n\n    <div class="form-title">\n        <%=_t(\'Public Votes\')%>\n    </div>\n    <div class="form-group">\n        <select class="control-full" id="poll_form_hide_vote">\n            <option value="0"><%=_t(\'Yes\')%></option>\n            <option value="1"><%=_t(\'No\')%></option>\n        </select>\n    </div>\n\n    <%if (context.action != \'attach\') {%>\n    <div class="form-title">\n        <%=_t(\'Image\')%>\n    </div>\n    <div class="form-group">\n        <div class="clearfix" id="attachment_photo_holder">\n        </div>\n        <div id="photo_add_btn" class="btn-form-photo"></div>\n    </div>\n    <%}%>\n\n    <div class="form-title">\n        *<%=_t(\'Answers\')%>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full poll-form-answer" id="" />\n        <span class="btn-form icon-answer-plus"></span>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full poll-form-answer" id="" />\n        <span class="btn-form icon-answer-minus"></span>\n    </div>\n</div>\n</div>';});


define('text!poll/tpl/poll-add.html',[],function () { return '<!-- poll/tpl/poll-add.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" rel="back">\r\n\t\t\t<%= _t(\'Cancel\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'Save\') %></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title">\r\n\t\t\t<%=(context.action == \'attach\') ? _t(\'Attach Poll\') : _t(\'Adding Poll\')%>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="poll-add">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});

define('poll/view/poll-add',[
    'attachment/model/attachment-photo',
    'photo/view/photo-add-actions',
    'poll/model/perms',
    'poll/view/poll-add-photo-item',
    'text!poll/tpl/poll-add-form-answer.html',
    'text!poll/tpl/poll-add-form.html',
    'text!poll/tpl/poll-add.html'
], function(AttachmentPhotoModel, PhotoAddActionsView, PermsModel, AttachmentAddPhotoItem, formAnswerTpl, formText, text) {

    return Backbone.View.extend({
        apiAdd: 'poll/create',
        region: {
            holder: '#main',
            scroller: '#content',
            form_holder: '#poll-add'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        formAnswerTpl: _.template(formAnswerTpl),
        render: function(context) {

            this.context = $.extend({
                action: 'add'
            }, context);

            this.$el.attr('id', 'poll_add');

            this.$el.html(this.template({
                context: this.context
            }));

            this.$form_holder = this.$el.find(this.region.form_holder);
            this.$save_btn = this.$el.find('#save_btn');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            utils.api.get('poll/formadd', {}, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.perms = new PermsModel(data.perms);
            this.formData = data;
            this.updateView();
        },
        updateView: function() {

            this.$form_holder.html(this.formTemplate({
                context: this.context,
                data: this.formData || {}
            }));

            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$form_content = this.$el.find('#poll_add_form_content');
            this.$form_hide_vote = this.$el.find('#poll_form_hide_vote');
            this.$form_privacy = this.$el.find('#poll_form_privacy');
            this.$form_privacy_comment = this.$el.find('#poll_form_privacy_comment');
            this.$form_question = this.$el.find('#poll_form_question');
            this.$photo_add_btn = this.$el.find('#photo_add_btn');
        },
        fetchDataFail: function() {

            utils.debug.log(arguments);
            utils.history.back();
        },
        events: {
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #save_btn': 'onSaveClick',
            'click .icon-answer-minus': 'removeAnswer',
            'click .icon-answer-plus': 'addAnswer',
            'keyup #poll_form_title': 'toggleSaveBtn',
            'keyup .poll-form-answer': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var item = new AttachmentPhotoModel({
                attachment_id: 0,
                photo_url: fileURI
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.photoUrl = item.getPhotoUrl();

            this.$photo_add_btn.addClass('hide');

            var attachmentItem = new View({
                model: item
            });

            var context = {
                postDelete: false
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            this.photoUrl = null;

            this.$photo_add_btn.removeClass('hide');
        },
        addAnswer: function(evt) {
            var $form_answer = this.$el.find('.poll-form-answer');
            var answerCnt = $form_answer.size();
            var answerLimit = this.perms.getMaxAnswer() || 6;

            if (answerCnt >= answerLimit) {
                return utils.modal.alert(_t('You have reached your limit.'));
            }

            this.$form_content.append(this.formAnswerTpl);
        },
        removeAnswer: function(evt) {
            var $form_answer = this.$el.find('.poll-form-answer');
            var answerCnt = $form_answer.size();

            if (answerCnt <= 2) {
                return utils.modal.alert(_t('You must have a minimum of 2 answers.'));
            }

            var $target = $(evt.currentTarget);
            $target.parent().remove();
        },
        onSaveClick: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            var sQuestion = this.$form_question.val();
            var iHideVote = this.$form_hide_vote.val();
            var sPrivacy = this.$form_privacy.val() || 'everyone';
            var sPrivacyComment = this.$form_privacy_comment.val() || 'everyone';
            var aAnswer = [];

            var $form_answer = this.$el.find('.poll-form-answer');

            _.each($form_answer, function(answer) {
                if ($(answer).val().trim()) {
                    aAnswer.push($(answer).val());
                }
            });

            // validate
            if (!sQuestion.trim()) {
                return utils.modal.alert(_t('Provide a question for your poll.'));
            }

            if (aAnswer.length < 2) {
                return utils.modal.alert(_t('You need to write at least 2 answers.'));
            }

            // passed
            var postData = {
                aAnswer: JSON.stringify(aAnswer),
                iHideVote: iHideVote,
                iPrivacyComment: sPrivacyComment,
                iPrivacy: sPrivacy,
                sQuestion: sQuestion
            };

            if (this.photoUrl) {
                this.savePollWithPhoto(postData);
            } else {
                this.savePoll(postData);
            }
        },
        savePollWithPhoto: function(postData, settings) {

            utils.api.uploadImage(this.apiAdd, this.photoUrl, postData).done(this.saveDone);
        },
        savePoll: function(postData, settings) {

            var settings = {
                context: this
            };

            this.$save_btn.addClass('processing');

            utils.api.post(this.apiAdd, postData, settings).done(this.saveDone).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            window.location.href = '#poll/' + data.iPollId;
        },
        toggleSaveBtn: function(evt) {

            var sQuestion = this.$form_question.val();
            var iAnswerLength = 0;

            var $form_answer = this.$el.find('.poll-form-answer');

            _.each($form_answer, function(answer) {
                if ($(answer).val().trim()) {
                    iAnswerLength++;
                }
            });

            var bDisable = (!sQuestion.trim() || iAnswerLength < 2);
            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('attachment/view/attachment-form-poll',[
    'poll/model/poll',
    'poll/view/poll-add'
], function(PollModel, PollAddView) {

    return PollAddView.extend({
        apiAdd: 'forum/threadpolladd',
        region: {
            holder: '#main-bottom',
            scroller: '#content-bottom',
            form_holder: '#poll-add'
        },
        render: function(context) {

            this.context = $.extend({
                action: 'attach'
            }, context);

            this.$el.html(this.template({
                context: this.context
            }));

            this.$form_holder = this.$el.find(this.region.form_holder);
            this.$save_btn = this.$el.find('#save_btn');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            utils.observer.trigger('bottom:open');
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            var poll = new PollModel(data.aPoll);

            this.trigger('attachsuccess', poll);

            utils.observer.trigger('bottom:close');
        }
    });
});

define('text!attachment/tpl/attachment-add-poll-item.html',[],function () { return '<div class="close_button remove-attachment"></div>\n<div class="wrap">\n    <span><%=_t(\'poll\')%>:</span> \n    <span class="item-title"><%=item.getQuestion()%></span>\n    <div class="clear"></div>\n</div>';});

define('attachment/view/attachment-add-poll-item',[
    'attachment/view/attachment-add-item',
    'text!attachment/tpl/attachment-add-poll-item.html'
], function(AttachmentAddItemView, text) {

    return AttachmentAddItemView.extend({
        apiDelete: 'forum/threadpolldelete',
        className: 'user_add_content poll',
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                postDelete: true,
                iThreadId: 0
            }, context);

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        getPostDataDelete: function() {

            return {
                iPollId: this.model.getId(),
                iThreadId: this.context.iThreadId
            };
        }
    });
});

define('text!forum/tpl/forum-thread-add.html',[],function () { return '<!-- forum/tpl/forum-thread-add.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'Post New Thread\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="forum-thread-add">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});


define('text!forum/tpl/forum-thread-add-form.html',[],function () { return '<div class="forum-thread-add-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            *<%= _t(\'Title\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="forum_thread_form_title" placeholder="<%= _t(\'Title\') %>" value="" />\n        </div>\n\n        <div class="form-title">\n            *<%= _t(\'Message\') %>\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'Insert Image\')%></span>\n        </div>\n        <div class="form-group">\n            <textarea id="forum_thread_form_message" class="control-full textarea" placeholder="<%= _t(\'Message\') %>"></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Subscribe\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="forum_thread_form_subscribe">\n                <option value="1"><%=_t(\'Yes\')%></option>\n                <option value="0"><%=_t(\'No\')%></option>\n            </select>\n        </div>\n\n        <%if (types.length > 1) {%>\n        <div class="form-title">\n            <%= _t(\'Type\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="forum_thread_form_type">\n                <%_.each(types, function (option) {%>\n                <option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n        <%}%>\n\n        <%if (bCanSetClosed) {%>\n        <div class="form-title">\n            <%= _t(\'Closed\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="forum_thread_form_closed">\n                <option value="1"><%=_t(\'Yes\')%></option>\n                <option value="0" selected="selected"><%=_t(\'No\')%></option>\n            </select>\n        </div>\n        <%}%>\n\n        <div class="form-title">\n            <%= _t(\'Attachments\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="action-item" id="attach_gallery_btn">\n                <i class="icon icon-attachment-gallery"></i>\n            </div>\n            <div class="action-item" id="attach_link_btn">\n                <i class="icon icon-attachment-link"></i>\n            </div>\n            <div class="action-item" id="attach_poll_btn">\n                <i class="icon icon-bar-chart"></i>\n            </div>\n        </div>\n\n        <div>\n            <div class="clearfix" id="attachment_poll_holder">\n            </div>\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div class="clearfix" id="attachment_link_holder">\n            </div>\n        </div>\n    </div>\n</div>';});

define('forum/view/forum-thread-add',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-form-link',
    'attachment/view/attachment-form-poll',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'attachment/view/attachment-add-poll-item',
    'photo/view/photo-add-actions',
    'text!forum/tpl/forum-thread-add.html',
    'text!forum/tpl/forum-thread-add-form.html'
], function(AttachmentPhotoModel, AttachmentFormLink, AttachmentFormPoll, AttachmentAddLinkItem, AttachmentAddPhotoItem, AttachmentAddPollItem, PhotoAddActionsView, text, formText) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#forum-thread-add'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function(context) {

            this.context = $.extend({
                iForumId: 0
            }, context);

            this.$el.attr('id', 'forum_thread_add');

            this.$el.html(this.template());

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iForumId: this.context.iForumId
            };
            var settings = {
                context: this
            }

            utils.api.post('forum/threadformadd', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;

            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate(this.formData));

            this.$form_title = this.$el.find('#forum_thread_form_title');
            this.$form_message = this.$el.find('#forum_thread_form_message');
            this.$form_subscribe = this.$el.find('#forum_thread_form_subscribe');
            this.$form_type = this.$el.find('#forum_thread_form_type');
            this.$form_closed = this.$el.find('#forum_thread_form_closed');
            this.$attach_poll_btn = this.$el.find('#attach_poll_btn');
            this.$attachment_poll_holder = this.$el.find('#attachment_poll_holder');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            // bind input edit, paste events
            var self = this;
            this.$form_message.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('fetchDataFail', arguments);

            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #attach_poll_btn': 'onAttachPoll',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'saveThread',
            'keyup #forum_thread_form_title': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'forum'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_message.val(this.$form_message.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'forum'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'forum'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'forum'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        onAttachPoll: function(evt) {

            if (this.$attach_poll_btn.hasClass('disabled')) {
                return;
            }

            this.attachmentFormPoll = new AttachmentFormPoll();

            this.attachmentFormPoll.render().inject();

            this.attachmentFormPoll.on('attachsuccess', this.appendAttachmentPoll, this);
        },
        appendAttachmentPoll: function(item) {

            this.iPollId = item.getId();

            this.$attach_poll_btn.addClass('disabled');

            var attachmentPoll = new AttachmentAddPollItem({
                model: item
            });

            var self = this;
            var inject = function(dom) {
                self.$attachment_poll_holder.append(dom);
            };

            attachmentPoll.render().inject(inject);

            attachmentPoll.on('removesuccess', this.removeAttachmentPoll, this);
        },
        removeAttachmentPoll: function(item) {

            this.iPollId = null;

            this.$attach_poll_btn.removeClass('disabled');
        },
        saveThread: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sTitle = this.$form_title.val();
            var sMessage = this.$form_message.val();
            var iSubscribe = this.$form_subscribe.val();
            var sType = this.$form_type.val() || 'thread';
            var iClosed = this.$form_closed.val();

            // validate
            if (!sTitle.trim()) {
                return utils.modal.alert(_t('Provide a title for your thread.'));
            }

            if (!sMessage.trim()) {
                return utils.modal.alert(_t('Provide some text.'));
            }

            // passed
            var postData = $.extend(this.context, {
                iForumId: this.context.iForumId,
                iIsClosed: iClosed,
                iIsSubscribed: iSubscribe,
                iPollId: this.iPollId,
                sAttachment: this.aAttachmentIds.join(),
                sText: sMessage,
                sTitle: sTitle,
                sTypeId: sType
            });

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('forum/threadadd', postData, settings).done(this.saveDone).always(function() {
                $target.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.message) {
                utils.modal.toast(data.message);
            }

            if (data.iThreadId) {
                window.location.href = '#forum_thread/' + data.iThreadId;
            } else {
                utils.history.back();
            }
        },
        toggleSaveBtn: function(evt) {

            var sTitle = this.$form_title.val();
            var sMessage = this.$form_message.val();

            var bDisable = (!sTitle.trim() || !sMessage.trim());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('forum/controller/forum-thread-add',[
    'forum/view/forum-thread-add'
], function(View) {

    function Controller(id) {

        utils.observer.trigger('router:changed');

        new View().render({
            iForumId: id
        }).inject();
    }

    utils.router.route('forum/:id/add_thread', Controller);
});

define('text!forum/tpl/forum-poll-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (!item.isVoted()) {%>\n\t<div class="setting-item" id="<%=item.getDataId(\'viewanswers\')%>" rel="delegate">\n\t\t<%= _t(\'View Questions\') %>\n\t</div>\n\t<div class="setting-item" id="<%=item.getDataId(\'viewresults\')%>" rel="delegate">\n\t\t<%= _t(\'View Results\') %>\n\t</div>\n\t<%}%>\n\t<%if (item.getTotalVote() > 0) {%>\n\t<div class="setting-item" id="<%=item.getDataId(\'viewvoters\')%>" rel="delegate">\n\t\t<%= _t(\'View Member Votes\') %>\n\t</div>\n\t<%}%>\n</div>';});

define('forum/view/forum-poll-setting',[
    'text!forum/tpl/forum-poll-setting.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        events: {
            'click': 'closeThis'
        },
        closeThis: function(evt) {
            utils.popup.close();
        }
    });
});

define('text!poll/tpl/poll-setting.html',[],function () { return '<div class="setting-list">\n\t<a class="setting-item" href="#poll/<%=item.getId()%>/edit">\n\t\t<%= _t(\'Edit Poll\') %>\n\t</a>\n\t<div class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'Delete Poll\') %>\n\t</div>\n</div>';});

define('poll/view/poll-setting',[
	'text!poll/tpl/poll-setting.html'
],function(text){
	return Backbone.PopupView.extend({
		template: _.template(text)
	});
});


define('text!poll/tpl/poll-item.html',[],function () { return '<div class="clearfix item-wrapper">\n    <a class="item-image" href="<%=item.getUrl()%>">\n        <img src="<%=item.getImageSrc()%>" />\n    </a>\n    <div class="item-content">\n        <div class="item-title">\n            <a href="<%=item.getUrl()%>"><%=utils.str.shorten(item.getQuestion(), 72)%></a>\n        </div>\n        <div class="item-subline">\n            <span><%=_t(\'by\')%></span> <a href="<%=item.getPosterUrl()%>"><%=utils.str.shorten(item.getPosterTitle(), 16)%></a>\n            <i class="icon icon-time"></i> <span class="livetime" data-livetime="<%=item.getTimestamp()%>"><%=item.getLivetime()%></span>\n        </div>\n        <div class="item-stats">\n            <span><i class="icon-poll"></i> <%=item.getTotalVote()%></span>\n            <span><i class="icon icon-activity-like"></i> <%=item.getLikeCount()%></span>\n            <span><i class="icon icon-activity-comment"></i> <%=item.getCommentCount()%></span>\n        </div>\n    </div>\n</div>';});


define('text!poll/tpl/poll-my-item.html',[],function () { return '<div class="clearfix item-wrapper">\n    <div class="item-setting" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n        <i class="icon icon-setting"></i>\n    </div>\n    <a class="item-image" href="<%=item.getUrl()%>">\n        <img src="<%=item.getImageSrc()%>" />\n    </a>\n    <div class="item-content">\n        <div class="item-title">\n            <a href="<%=item.getUrl()%>"><%=utils.str.shorten(item.getQuestion(), 72)%></a>\n        </div>\n        <div class="item-subline">\n            <i class="icon icon-time"></i> <span class="livetime" data-livetime="<%=item.getTimestamp()%>"><%=item.getLivetime()%></span>\n        </div>\n        <div class="item-stats">\n            <span><i class="icon-poll"></i> <%=item.getTotalVote()%></span>\n            <span><i class="icon icon-activity-like"></i> <%=item.getLikeCount()%></span>\n            <span><i class="icon icon-activity-comment"></i> <%=item.getCommentCount()%></span>\n        </div>\n    </div>\n</div>';});

define('poll/view/poll-item',[
    'poll/view/poll-setting',
    'text!poll/tpl/poll-item.html',
    'text!poll/tpl/poll-my-item.html'
], function(SettingView, text, textMy) {

    return Backbone.ItemView.extend({
        className: 'poll-item',
        settingView: SettingView,
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({
                sView: ''
            }, query);

            if (this.query.sView == 'my') {
                this.template = _.template(textMy);
            }

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {

            inject(this.$el);

            return this;
        },
        doDeleteConfirm: function() {

            var self = this;

            utils.modal.confirm(_t('Are you sure that you want to delete this Poll?'), function(selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');

                    var postData = {
                        iPollId: self.model.getId()
                    };

                    utils.api.post('poll/delete', postData).done(function(data) {
                        if (data.error_code && data.error_code > 0) {
                            return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                        }

                        self.deleteSuccess(data);
                    }).always(function() {
                        utils.observer.trigger('releaseui');
                        utils.popup.close();
                    });
                }
            }, _t('Confirm'), [_t('Delete'), _t('Cancel')]);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Poll successfully deleted.'));

            this.$el.remove();
        }
    });
});

define('text!poll/tpl/poll-topmenu.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canDislike()) {%>\n\t<div class="menu-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="menu-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'Remove Dislike\') : _t(\'Dislike\')%>\n    </div>\n    <%}%>\n    <%if (item.isOwner()) {%>\n\t<a class="menu-item" href="#poll/<%=item.getId()%>/edit">\n\t\t<%= _t(\'Edit Poll\') %>\n\t</a>\n\t<div class="menu-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'Delete Poll\') %>\n\t</div>\n\t<%}%>\n</div>';});

define('poll/view/poll-topmenu',[
    'text!poll/tpl/poll-topmenu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
], function(text, DislikeCollection, DislikeDetailView) {
    return Backbone.TopMenuView.extend({
        template: _.template(text),
        render: function() {
            var self = this;

            this.$el.html(this.template({
                item: this.model
            }));

            this.$dislikeHolder = this.$el.find('#dislike-list');

            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));

            this.model.on('change:iTotalDislike change:bIsDisliked', function() {
                self.updateView();
            });

            return this;
        },
        inject: function() {
            this.model.dislikes = new DislikeCollection();

            this.model.dislikes.add(this.model.getUserDislike());

            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);

            utils.popup.open(this.$el);

            return this;
        },
        hide: function() {
            utils.popup.close();

            return this;
        },
        updateView: function() {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
            this.$dislikeHolder.toggleClass('hide', bHide);

            var sText = this.model.isDisliked() ? _t('Remove Dislike') : _t('Dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});
define('poll/model/vote',[],function() {

    return Backbone.Model.extend({
        getAnswer: function() {
            return this.get('sAnswer') || '';
        },
        getFormatedTime: function() {
            return utils.moment(this.getTimestamp() * 1e3).format('LL');
        }
    });
});

define('text!poll/tpl/poll-vote-item.html',[],function () { return '<div class="item-wrapper">\n    <a class="item-image" href="<%=item.getPosterUrl()%>">\n        <img src="<%=item.getPosterImageSrc()%>" />\n    </a>\n    <div class="item-content">\n    \t<div class="item-headline">\n\t    \t<a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\n\t    </div>\n\t    <div class="item-subline">\n\t    \t<span><%=_t(\'voted\')%> "<%=item.getAnswer()%>" <%=_t(\'on\')%> <%=item.getFormatedTime()%></span>\n\t    </div>\n    </div>\n</div>';});

define('poll/view/poll-vote-item',[
    'text!poll/tpl/poll-vote-item.html'
], function(text) {

    return Backbone.View.extend({
        className: 'poll-vote-item',
        template: _.template(text),
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(callback) {

            callback(this.$el);

            return this;
        }
    });
});

define('text!poll/tpl/poll-vote-list.html',[],function () { return '<div class="loading-initiator">\n    <!-- loading ... -->\n</div>\n';});

define('poll/view/poll-vote-list',[
    'poll/model/vote',
    'poll/view/poll-vote-item',
    'text!poll/tpl/poll-vote-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPollId: 0
        },
        followById: false,
        api: 'poll/voter',
        phraseNotFound: _t('No members found.'),
        phraseNotMore: _t('No more members.'),
        className: 'poll-vote-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        parseData: function(data, ItemModel) {

            var items = data.map(function(item) {
                return new ItemModel(item);
            });

            this.trigger('parsedatasuccess', items);

            return items;
        }
    });
});

define('text!poll/tpl/poll-detail-results-item.html',[],function () { return '<div class="item-answer">\r\n    <div class="poll-question"><%=item.getAnswer()%></div>\r\n    <div class="poll-answer">\r\n    \t<div class="poll-result-bar">\r\n        \t<span style="width: <%=item.getVotePercent()%>%;"></span>\r\n        </div>\r\n        <div class="poll-result"> <%=item.getTotalVote()%> (<%=item.getVotePercent()%>%)</div>\r\n    </div>\t\t\r\n</div>\r\n';});


define('text!poll/tpl/poll-detail-update.html',[],function () { return '<div class="poll-detail-item">\r\n    <div class="item-top-content clearfix">\r\n        <div class="item-image">\r\n            <img src="<%=item.getImageSrc()%>" />\r\n        </div>\r\n        <div class="item-content">\r\n            <div class="item-headline">\r\n                <span><%=utils.str.shorten(item.getQuestion(), 72)%></span>\r\n            </div>\r\n            <div class="item-subline">\r\n                <div>\r\n                    <span><%=_t(\'by\')%></span>\r\n                    <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\r\n                </div>\r\n                <div>\r\n                    <i class="icon icon-time"></i>\r\n                    <span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\r\n                </div>\r\n            </div>\r\n        </div>    \r\n    </div>\r\n    \r\n    <div class="item-group hide <%if (item.isVoted()) {%>disabled<%}%>" id="poll_answers_holder">\r\n        <%_.each(item.getAnswers(), function (answer) {%>\r\n        <div class="item-poll poll-answers-item" data-answerid="<%=answer.getId()%>">\r\n            <div class="poll-checkbox <%if (item.getAnswerId() == answer.getId()) {%>checked<%}%>"></div>\r\n            <span><%=answer.getAnswer()%></span>\r\n        </div>\r\n        <%});%>\r\n    </div>\r\n\r\n    <div class="item-group hide" id="poll_results_holder">\r\n    </div>\r\n\r\n    <div class="item-group item-group-poll-result hide" id="poll_vote_list_wrapper_min">\r\n        <span><%=_t(\'Poll\')%></span>\r\n        <span class="poll-stats" id="poll_vote_count">\r\n            <span id="poll_vote_count_num"><%=item.getTotalVote()%></span>\r\n            <i class="icon-poll-active"></i>\r\n        </span>\r\n        <div id="poll_vote_list_holder_min"></div>\r\n    </div>\r\n</div>\r\n\r\n<div id="poll_action_bar">\r\n\t<div class="actions-justify gray">\r\n        <%if (item.canLike()) {%>\r\n        <div class="action-item <%= item.isLiked() ? \' liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n            <span class="text-info"><%= item.getLikeCount() %></span>\r\n            <i class="icon icon-activity-like"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canComment()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\r\n            <span class="text-anchor"><%= item.getCommentCount() %></span>\r\n            <i class="icon icon-activity-comment"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canShare()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\r\n            <i class="icon icon-activity-share"></i>\r\n        </div>\r\n        <%} %>\r\n        <%if (!item.isOwner()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\r\n            <i class="icon icon-activity-report"></i>\r\n        </div>\r\n        <%}%>\r\n    </div>\r\n</div>';});


define('text!poll/tpl/poll-detail.html',[],function () { return '<!-- poll/tpl/poll-detail.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top btn-back" rel="back">\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle"></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title" id="page_title">\r\n\t\t\t<%= _t(\'Loading...\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content content-background with-header-footer swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="poll_detail_holder" class="poll-detail-content">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id="activity_extra_holder" class="hide">\r\n\t\t\t</div>\r\n\t\t\t<div id="poll_vote_list_holder" class="hide">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="footer">\r\n\t<div class="clearfix menu-justify grid-3 fobos">\r\n        <div class="menu-item" id="show_answers_btn">\r\n        \t<div class=""><%= _t(\'Questions\') %></div>\r\n        </div>\r\n        <div class="menu-item hide" id="show_results_btn">\r\n        \t<div class=""><%= _t(\'Results\') %></div>\r\n        </div>\r\n        <div class="menu-item hide" id="show_voters_btn">\r\n        \t<div class=""><%= _t(\'Member Votes\') %></div>\r\n        </div>\r\n    </div>\r\n</div>';});


define('text!poll/tpl/poll-pending-msg.html',[],function () { return '<div id="poll_message_holder">\n    <span class="warn-message"><%=_t(\'This poll is being moderated and no votes can be added until it has been approved.\')%></span>\n</div>';});


define('text!poll/tpl/poll-vote-item-min.html',[],function () { return '<a class="item-image" href="<%=item.getPosterUrl()%>">\n    <img src="<%=item.getPosterImageSrc()%>" />\n</a>';});

define('poll/view/poll-detail',[
    'poll/view/poll-item',
    'poll/view/poll-topmenu',
    'poll/view/poll-vote-list',
    'text!poll/tpl/poll-detail-results-item.html',
    'text!poll/tpl/poll-detail-update.html',
    'text!poll/tpl/poll-detail.html',
    'text!poll/tpl/poll-pending-msg.html',
    'text!poll/tpl/poll-vote-item-min.html'
], function(ItemView, TopMenuView, PollVoteListView, textResultsItem, textUpdate, text, textPendingMsg, textVoteItemMin) {

    return ItemView.extend({
        className: 'poll-item',
        region: {
            holder: '#main',
            scroller: '#content',
            updateHolder: '#poll_detail_holder',
            activityExtraHolder: '#activity_extra_holder',
            voteListHolder: '#poll_vote_list_holder'
        },
        template: _.template(text),
        templatePendingMsg: _.template(textPendingMsg),
        templateResultsItem: _.template(textResultsItem),
        templateUpdate: _.template(textUpdate),
        templateVoteItemMin: _.template(textVoteItemMin),
        topMenuView: TopMenuView,
        render: function() {

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$update_holder = this.$el.find(this.region.updateHolder);
            this.$activity_extra_holder = this.$el.find(this.region.activityExtraHolder);
            this.$vote_list_holder = this.$el.find(this.region.voteListHolder);
            this.$page_title = this.$el.find('#page_title');
            this.$topmenu_btn = this.$el.find('#top_menu_toggle');
            this.$footer_menu_item = this.$el.find('.footer .menu-item');
            this.$show_answers_btn = this.$el.find('#show_answers_btn');
            this.$show_results_btn = this.$el.find('#show_results_btn');
            this.$show_voters_btn = this.$el.find('#show_voters_btn');

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            utils.helper.addActivityExtraBlock(this.model, this.$activity_extra_holder, this.$scroller);

            return this;
        },
        fetchData: function() {

            var postData = {
                iPollId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('poll/detail', postData, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server.'));
                return utils.history.back();
            }

            this.model.set(data);

            this.appendUpdateView();
        },
        fetchFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('[FAIL] poll/detail', arguments);
            utils.modal.alert(_t('Can not load data from server.'));
            utils.history.back();
        },
        appendUpdateView: function() {

            if (!this.model.canView()) {
                return this.$el.html(utils.helper.privatepage());
            }

            if (!this.model.isApproved()) {
                this.$update_holder.before(this.templatePendingMsg());
            }

            this.$page_title.html(this.model.getQuestion());

            if (this.model.isOwner() || this.model.canDislike()) {
                this.$topmenu_btn.removeClass('hide');
            }

            this.$update_holder.html(this.templateUpdate({
                item: this.model
            }));

            this.$answers_holder = this.$el.find('#poll_answers_holder');
            this.$results_holder = this.$el.find('#poll_results_holder');
            this.$vote_list_wrapper_min = this.$el.find('#poll_vote_list_wrapper_min');
            this.$vote_count_num = this.$el.find('#poll_vote_count_num');
            this.$vote_list_holder_min = this.$el.find('#poll_vote_list_holder_min');

            this.appendVoters();

            this.updateView();
        },
        updateView: function() {

            this.updateResults();

            this.$show_results_btn.toggleClass('hide', !this.model.canViewResult());

            this.$show_voters_btn.add(this.$vote_list_wrapper_min).toggleClass('hide', !this.model.canViewUserResult());

            if (this.model.isApproved() && this.model.isVoted() && this.model.canViewResult()) {
                this.viewResults();
            } else {
                this.viewAnswers();
            }
        },
        updateResults: function() {

            this.$results_holder.empty();

            _.each(this.model.getAnswers(), function(answer) {
                this.$results_holder.append(this.templateResultsItem({
                    item: answer
                }));
            }, this);
        },
        appendVoters: function() {

            this.voteListQuery = {
                iPollId: this.model.getId()
            };

            this.voteListView = new PollVoteListView({}, this.$vote_list_holder, this.$scroller, {
                loadnew: false,
                loadmore: false
            });

            this.voteListView.render(this.voteListQuery).inject();

            this.voteListView.on('parsedatasuccess', this.updateVoteListMin, this);
        },
        updateVoteListMin: function(items) {

            this.$vote_count_num.html(this.model.getTotalVote());

            this.$vote_list_holder_min.empty();

            _.each(items.slice(0, 6), function(item) {
                this.$vote_list_holder_min.append(this.templateVoteItemMin({
                    item: item
                }));
            }, this);
        },
        events: {
            'click #poll_vote_count': 'viewVoteList',
            'click #show_answers_btn': 'viewAnswers',
            'click #show_results_btn': 'viewResults',
            'click #show_voters_btn': 'viewVoteList',
            'click #top_menu_toggle': 'toggleTopMenu',
            'click .poll-answers-item': 'votePoll'
        },
        viewAnswers: function(evt) {

            this.$footer_menu_item.removeClass('current');
            this.$show_answers_btn.addClass('current');
            this.$results_holder.add(this.$vote_list_holder).addClass('hide');
            this.$answers_holder.add(this.$update_holder).add(this.$activity_extra_holder).removeClass('hide');
        },
        viewResults: function(evt) {

            this.$footer_menu_item.removeClass('current');
            this.$show_results_btn.addClass('current');
            this.$answers_holder.add(this.$vote_list_holder).addClass('hide');
            this.$results_holder.add(this.$update_holder).add(this.$activity_extra_holder).removeClass('hide');
        },
        viewVoteList: function(evt) {

            this.$footer_menu_item.removeClass('current');
            this.$show_voters_btn.addClass('current');
            this.$update_holder.add(this.$activity_extra_holder).addClass('hide');
            this.$vote_list_holder.removeClass('hide');
        },
        votePoll: function(evt) {

            var $target = $(evt.currentTarget);

            if (this.$answers_holder.find('.processing').length > 0 || this.$answers_holder.hasClass('disabled')) {
                return;
            }

            $target.addClass('processing');

            var postData = {
                iPollId: this.model.getId(),
                iAnswerId: $target.data('answerid')
            };

            var settings = {
                context: this
            };

            utils.api.post('poll/vote', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                this.voteSuccess($target, data);
            }).always(function() {
                $target.removeClass('processing');
            });
        },
        voteSuccess: function($target, data) {

            if (data.message) {
                utils.modal.toast(data.message);
            }

            this.$el.find('.poll-checkbox').removeClass('checked');
            $target.find('.poll-checkbox').addClass('checked');

            this.$answers_holder.addClass('disabled');

            this.model.set(data);

            this.updateView();

            this.voteListView.resetQuery(this.voteListQuery);
        },
        toggleTopMenu: function() {

            this.topMenuIsShown(false);

            utils.topMenu.toggle(this, this.model);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Poll successfully deleted.'));

            utils.history.back();
        }
    });
});

define('text!poll/tpl/poll-vote-popup.html',[],function () { return '<div id="poll_vote_list_wrapper">\n    <div class="popup-title"><%= _t(\'Poll Results\') %></div>\n    <div id="popup_content" class="swiper-container">\n        <div class="swiper-wrapper">\n            <div class="swiper-slide">\n                <div id="poll_vote_list_holder" class="poll-vote-list-holder">\n                \t<div class="loading-initiator"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n';});

define('poll/view/poll-vote-popup',[
    'poll/view/poll-vote-list',
    'text!poll/tpl/poll-vote-popup.html'
], function(ListView, text) {

    return Backbone.View.extend({
        events: {},
        region: {
            scroller: '#popup_content',
            holder: '#poll_vote_list_holder',
        },
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template());

            this.$scroller = this.$el.find(this.region.scroller);

            this.$list_holder = this.$el.find(this.region.holder);

            return this;
        },
        inject: function() {

            utils.popup.open(this.$el);

            if (constants.os_version < '30') {
                this.$scroller.ensureSwiper();
            }

            this.listView = new ListView({}, this.$list_holder, this.$scroller, {
                loadnew: false,
                loadmore: false
            });

            this.listView.render(this.query).inject();

            return this;
        }
    });
});

define('text!forum/tpl/forum-poll-item.html',[],function () { return '<!-- forum/tpl/forum-poll-item -->\n<div class="item-wrapper">\n\t<div class="poll-detail-item">\n\t\t<div class="forum-poll-question">\n\t\t\t<div class="item-setting" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n\t\t\t\t<i class="icon icon-setting"></i>\n\t\t\t</div>\n\t\t\t<div class="item-title">\n\t\t\t\t<i class="icon icon-bar-chart"></i>\n\t\t\t\t<span><%=_t(\'Poll\')%>:</span>\n\t\t\t\t<span class="poll-title"><%=item.getQuestion()%></span>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="item-group hide <%if (item.isVoted()) {%>disabled<%}%>" id="poll_answers_holder">\n\t\t\t<%_.each(item.getAnswers(), function (answer) {%>\n\t\t\t<div class="item-poll poll-answers-item" data-answerid="<%=answer.getId()%>">\n\t\t\t\t<div class="poll-checkbox"></div>\n\t\t\t\t<span><%=answer.getAnswer()%></span>\n\t\t\t</div>\n\t\t\t<%});%>\n\t\t</div>\n\t\t<div class="item-group hide" id="poll_results_holder">\n\t\t</div>\n\t</div>\n</div>';});

define('forum/view/forum-poll-item',[
    'forum/view/forum-poll-setting',
    'poll/view/poll-detail',
    'poll/view/poll-vote-popup',
    'text!forum/tpl/forum-poll-item.html'
], function(SettingView, PollDetailView, PollVotePopupView, text) {

    return PollDetailView.extend({
        region: {},
        settingView: SettingView,
        template: _.template(text),
        render: function() {

            this.voteListQuery = {
                iPollId: this.model.getId()
            };

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            this.$answers_holder = this.$el.find('#poll_answers_holder');
            this.$results_holder = this.$el.find('#poll_results_holder');

            return this;
        },
        inject: function(callback) {

            callback(this.$el);

            this.updateResults();

            this.model.isVoted() ? this.viewResults() : this.viewAnswers();

            return this;
        },
        events: {
            'click .poll-answers-item': 'votePoll',
            'viewanswers': 'viewAnswers',
            'viewresults': 'viewResults',
            'viewvoters': 'viewVoteList'
        },
        viewResults: function(evt) {

            this.$answers_holder.addClass('hide');
            this.$results_holder.removeClass('hide');
        },
        viewAnswers: function(evt) {

            this.$results_holder.addClass('hide');
            this.$answers_holder.removeClass('hide');
        },
        viewVoteList: function(evt) {

            if (!this.votePopupView) {
                this.votePopupView = new PollVotePopupView();
            }

            this.votePopupView.render(this.voteListQuery).inject();
        },
        voteSuccess: function($target, data) {

            if (data.message) {
                utils.modal.toast(data.message);
            }

            this.$el.find('.poll-checkbox').removeClass('checked');
            $target.find('.poll-checkbox').addClass('checked');

            this.$answers_holder.addClass('disabled');

            this.model.set(data);

            this.updateResults();
            this.viewResults();
        }
    });
});

define('text!forum/tpl/forum-thread-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (item.isOwner()) {%>\n\t<a class="setting-item" href="#forum_thread/<%=item.getId()%>/edit"><%=_t(\'Edit Thread\')%></a>\n\t<div class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate"><%=_t(\'Delete Thread\')%></div>\n\t<%}%>\n\t<%if (item.isSubscribed()) {%>\n\t<div class="setting-item" id="<%=item.getDataId(\'unsubscribe\')%>" rel="delegate"><%=_t(\'Unsubscribe\')%></div>\n\t<%} else {%>\n\t<div class="setting-item" id="<%=item.getDataId(\'subscribe\')%>" rel="delegate"><%=_t(\'Subscribe\')%></div>\n\t<%}%>\n</div>';});

define('forum/view/forum-thread-setting',[
    'text!forum/tpl/forum-thread-setting.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text)
    });
});

define('text!forum/tpl/forum-thread-detail.html',[],function () { return '<!-- forum/tpl/forum-thread-detail.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more hide" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n\t\t\t<%= _t(\'Loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content content-background with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical-align forum-list-holder">\n\t\t\t\t<div class="forum-poll-item" id="poll_item_holder"></div>\n\t\t\t\t<div class="forum-post-list" id="post_list_holder"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer footer-pagination hide" id="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <div class="menu-item hide" id="footer_reply_btn">\n        \t<a class="" href="#forum_thread/<%=item.getId()%>/reply"><%= _t(\'Reply\') %></a>\n        </div>\n        <div class="menu-item">\n        \t<div class="sibling" id="pagination_holder"></div>\n        </div>\n    </div>\n</div>';});

define('forum/view/forum-thread-detail',[
    'core/view/pagination',
    'forum/view/forum-poll-item',
    'forum/view/forum-post-list',
    'forum/view/forum-thread-setting',
    'poll/model/poll',
    'text!forum/tpl/forum-thread-detail.html'
], function(PaginationView, PollItemView, PostListView, SettingView, PollModel, text) {

    return Backbone.ItemView.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            poll_item_holder: '#poll_item_holder',
            post_list_holder: '#post_list_holder'
        },
        settingView: SettingView,
        template: _.template(text),
        render: function(query) {

            this.query = $.extend({
                iThreadId: this.model.getId(),
                iAmountOfPost: 10
            }, query);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            this.$footer = this.$el.find('#footer');
            this.$footer_reply_btn = this.$el.find('#footer_reply_btn');
            this.$page_title = this.$el.find('#page_title');
            this.$pagination_holder = this.$el.find('#pagination_holder');
            this.$poll_item_holder = this.$el.find(this.region.poll_item_holder);
            this.$post_list_holder = this.$el.find(this.region.post_list_holder);
            this.$setting_btn = this.$el.find(this.model.getDataId('#setting'));

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var settings = {
                context: this
            };

            utils.api.post('forum/threaddetail', this.query, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.aThread) {
                this.model.set(data.aThread);
                this.updateView();
            }

            if (!this.model.isAnnouncement() && this.model.hasPoll() && data.aPoll && data.aPoll.iPollId) {
                this.appendPoll(data.aPoll);
            }

            if (data.aPost) {
                this.appendPosts(data);
            }

            this.appendPagination();
        },
        fetchFail: function(error) {

            utils.debug.warn(error);

            utils.history.back();
        },
        updateView: function() {

            this.$page_title.html(this.model.getTitle());

            if (!this.model.isAnnouncement()) {
                this.$scroller.removeClass('with-header').addClass('with-header-footer');

                this.$setting_btn.add(this.$footer).removeClass('hide');

                if (this.model.isClosed()) {
                    this.$footer_reply_btn.html(_t('Closed'));
                }

                this.$footer_reply_btn.removeClass('hide');
            }
        },
        appendPoll: function(aPoll) {

            var self = this;
            var inject = function(dom) {
                self.$poll_item_holder.html(dom);
            };

            this.pollItemView = new PollItemView({
                model: new PollModel(aPoll)
            });

            this.pollItemView.render().inject(inject);
        },
        appendPosts: function(data) {

            this.query = $.extend(this.query, {
                thread: this.model
            });

            this.postListView = new PostListView({}, this.$el.find(this.$post_list_holder), this.$scroller, {
                loadnew: false,
                loadmore: false
            });

            this.postListView.render(this.query).inject(data);
        },
        appendPagination: function() {

            var context = {
                currentPage: this.query.iPage,
                itemLimit: this.query.iAmountOfPost,
                totalItem: this.model.getTotalPost()
            };

            var self = this;
            var inject = function(dom) {
                self.$pagination_holder.html(dom);
            };

            this.paginationView = new PaginationView();

            this.paginationView.render(context).inject(inject);

            this.paginationView.on('change', this.changePage, this);
        },
        changePage: function(page) {

            this.query.iPage = page;

            this.postListView.resetQuery(this.query);
        },
        events: {
            'subscribe': 'subscribeThread',
            'unsubscribe': 'unsubscribeThread'
        },
        doDeleteConfirm: function(evt) {

            var self = this;

            utils.modal.confirm(_t('Are you sure?'), function(selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');

                    var postData = {
                        iThreadId: self.model.getId()
                    };

                    utils.api.post('forum/threaddelete', postData).done(function(data) {
                        if (data.error_code && data.error_code > 0) {
                            return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                        }

                        self.deleteSuccess(data);
                    }).always(function() {
                        utils.observer.trigger('releaseui');
                        utils.popup.close();
                    });
                }
            }, _t('Confirm'), [_t('Ok'), _t('Cancel')]);
        },
        deleteSuccess: function(data) {

            if (data.message) {
                utils.modal.toast(data.message);
            }

            utils.history.back();
        },
        subscribeThread: function(evt) {

            var $ele = $(this.model.getDataId('#subscribe'));

            if ($ele.isProcessing()) {
                return;
            }

            $ele.isProcessing(true);

            var postData = {
                iThreadId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('forum/threadsubscribe', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                this.subscribeSuccess(data);
            }).always(function() {
                $ele.isProcessing(false);
                utils.popup.close();
            });
        },
        subscribeSuccess: function(data) {

            this.model.set('bIsSubscribed', true);
        },
        unsubscribeThread: function(evt) {

            var $ele = $(this.model.getDataId('#unsubscribe'));

            if ($ele.isProcessing()) {
                return;
            }

            $ele.isProcessing(true);

            var postData = {
                iThreadId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('forum/threadunsubscribe', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                this.unsubscribeSuccess(data);
            }).always(function() {
                $ele.isProcessing(false);
                utils.popup.close();
            });
        },
        unsubscribeSuccess: function(data) {

            this.model.set('bIsSubscribed', false);
        }
    });
});
define('forum/controller/forum-thread-detail',[
    'forum/model/thread',
    'forum/view/forum-thread-detail'
], function(Model, View) {

    function Controller(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iThreadId: id
            })
        }).render().inject();
    }

    utils.router.route('forum_thread/:id', Controller);
});

define('text!forum/tpl/forum-thread-edit-form.html',[],function () { return '<div class="forum-thread-add-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            *<%= _t(\'Title\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="forum_thread_form_title" placeholder="<%= _t(\'Title\') %>" value="<%=item.getTitle()%>" />\n        </div>\n\n        <div class="form-title">\n            *<%= _t(\'Message\') %>\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'Insert Image\')%></span>\n        </div>\n        <div class="form-group">\n            <textarea id="forum_thread_form_message" class="control-full textarea" placeholder="<%= _t(\'Message\') %>"><%=item.getTextNotParsed()%></textarea>\n        </div>\n\n        <%if (data.bCanSetClosed) {%>\n        <div class="form-title">\n            <%= _t(\'Closed\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="forum_thread_form_closed">\n                <option value="1" <%if (item.isClosed()) {%>selected="selected"<%}%>><%=_t(\'Yes\')%></option>\n                <option value="0" <%if (!item.isClosed()) {%>selected="selected"<%}%>><%=_t(\'No\')%></option>\n            </select>\n        </div>\n        <%}%>\n\n        <div class="form-title">\n            <%= _t(\'Attachments\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="action-item" id="attach_gallery_btn">\n                <i class="icon icon-attachment-gallery"></i>\n            </div>\n            <div class="action-item" id="attach_link_btn">\n                <i class="icon icon-attachment-link"></i>\n            </div>\n            <div class="action-item" id="attach_poll_btn">\n                <i class="icon icon-bar-chart"></i>\n            </div>\n        </div>\n\n        <div>\n            <div class="clearfix" id="attachment_poll_holder">\n            </div>\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div class="clearfix" id="attachment_link_holder">\n            </div>\n        </div>\n    </div>\n</div>';});


define('text!forum/tpl/forum-thread-edit.html',[],function () { return '<!-- forum/tpl/forum-thread-edit.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'Editing Thread\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="forum-thread-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});

define('forum/view/forum-thread-edit',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'attachment/view/attachment-add-poll-item',
    'attachment/view/attachment-form-link',
    'attachment/view/attachment-form-poll',
    'photo/view/photo-add-actions',
    'poll/model/poll',
    'text!forum/tpl/forum-thread-edit-form.html',
    'text!forum/tpl/forum-thread-edit.html'
], function(AttachmentPhotoModel, AttachmentAddLinkItem, AttachmentAddPhotoItem, AttachmentAddPollItem, AttachmentFormLink, AttachmentFormPoll, PhotoAddActionsView, PollModel, formText, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#forum-thread-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function() {

            this.$el.attr('id', 'forum_thread_edit');

            this.$el.html(this.template());

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iThreadId: this.model.getId()
            };
            var settings = {
                context: this
            }

            utils.api.post('forum/threadformedit', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;

            this.model.set(data.aThread);

            this.poll = this.model.hasPoll() ? new PollModel(data.aPoll) : null;

            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate({
                data: this.formData,
                item: this.model,
                poll: this.poll
            }));

            this.$form_title = this.$el.find('#forum_thread_form_title');
            this.$form_message = this.$el.find('#forum_thread_form_message');
            this.$form_subscribe = this.$el.find('#forum_thread_form_subscribe');
            this.$form_type = this.$el.find('#forum_thread_form_type');
            this.$form_closed = this.$el.find('#forum_thread_form_closed');
            this.$attach_poll_btn = this.$el.find('#attach_poll_btn');
            this.$attachment_poll_holder = this.$el.find('#attachment_poll_holder');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            this.appendAttachments();

            // bind input edit, paste events
            var self = this;
            this.$form_message.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        appendAttachments: function() {

            if (this.model.hasPoll()) {
                this.appendAttachmentPoll(this.poll);
            }
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('fetchDataFail', arguments);

            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #attach_poll_btn': 'onAttachPoll',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'saveThread',
            'keyup #forum_thread_form_title': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'forum'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_message.val(this.$form_message.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'forum'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'forum'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'forum'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        onAttachPoll: function(evt) {

            if (this.$attach_poll_btn.hasClass('disabled')) {
                return;
            }

            this.attachmentFormPoll = new AttachmentFormPoll();

            this.attachmentFormPoll.render().inject();

            this.attachmentFormPoll.on('attachsuccess', this.appendAttachmentPoll, this);
        },
        appendAttachmentPoll: function(item) {

            this.model.set('iPollId', item.getId());

            this.$attach_poll_btn.addClass('disabled');

            var attachmentPoll = new AttachmentAddPollItem({
                model: item
            });

            var context = {
                iThreadId: this.model.getId()
            };

            var self = this;
            var inject = function(dom) {
                self.$attachment_poll_holder.append(dom);
            };

            attachmentPoll.render(context).inject(inject);

            attachmentPoll.on('removesuccess', this.removeAttachmentPoll, this);
        },
        removeAttachmentPoll: function(item) {

            this.model.set('iPollId', 0);

            this.$attach_poll_btn.removeClass('disabled');
        },
        saveThread: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sTitle = this.$form_title.val();
            var sMessage = this.$form_message.val();
            var iClosed = this.$form_closed.val();

            // validate
            if (!sTitle.trim()) {
                return utils.modal.alert(_t('Provide a title for your thread.'));
            }

            if (!sMessage.trim()) {
                return utils.modal.alert(_t('Provide some text.'));
            }

            // passed
            var postData = {
                iThreadId: this.model.getId(),
                iIsClosed: iClosed,
                iPollId: this.model.getPollId(),
                sAttachment: this.aAttachmentIds.join(),
                sText: sMessage,
                sTitle: sTitle
            };

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('forum/threadedit', postData, settings).done(this.saveDone).always(function() {
                $target.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.message) {
                utils.modal.toast(data.message);
            }

            window.location.href = '#forum_thread/' + this.model.getId();
        },
        toggleSaveBtn: function(evt) {

            var sTitle = this.$form_title.val();
            var sMessage = this.$form_message.val();

            var bDisable = (!sTitle.trim() || !sMessage.trim());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('forum/controller/forum-thread-edit',[
    'forum/model/thread',
    'forum/view/forum-thread-edit'
], function(Model, View) {

    function Controller(id) {

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iThreadId: id
            })
        }).render().inject();
    }

    utils.router.route('forum_thread/:id/edit', Controller);
});

define('text!forum/tpl/forum-thread-index.html',[],function () { return '<!-- forum/tpl/forum-thread-index.html-->\r\n<div class="header">\r\n    <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\r\n        <i class="icon icon-sidebar"></i>\r\n    </div>\r\n\t<div class="header-center">\r\n\t\t<%= utils.helper.updater() %>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header-footer swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div class="swiper-list vertical-align forum-thread-list-holder" id="forum_thread_list_holder">\r\n\t\t\t\t\r\n\t\t\t</div>\r\n            <%= utils.helper.loadmore() %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="footer">\r\n\t<div class="clearfix menu-justify grid-3 fobos">\r\n        <a class="menu-item" href="#forums">\r\n        \t<div class=""><%= _t(\'Forums\') %></div>\r\n        </a>\r\n        <a class="menu-item <%if (sView == \'new\') {%>current<%}%>" href="#forum_threads/new">\r\n        \t<div class="sibling"><%= _t(\'New Posts\') %></div>\r\n        </a>\r\n        <div class="menu-item <%if (sView != \'new\') {%>current<%}%>" id="footer_more_btn">\r\n        \t<div class="sibling"><%= _t(\'More\') %></div>\r\n        </div>\r\n    </div>\r\n</div>';});

define('forum/view/forum-thread-index',[
    'forum/view/forum-thread-list',
    'forum/view/forum-thread-moremenu',
    'text!forum/tpl/forum-thread-index.html'
], function(ListView, MoreMenuView, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            listHolder: '#forum_thread_list_holder'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({
                sView: 'new'
            }, query);

            this.$el.html(this.template(this.query));

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.$list_holder = $(this.region.listHolder);

            this.listView = new ListView({}, this.$el.find(this.$list_holder), this.$scroller);

            this.listView.render(this.query).inject();

            return this;
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {

            this.moreMenu = new MoreMenuView();

            this.moreMenu.render(this.query).inject();
        }
    });
});
define('forum/controller/forum-thread-index',[
    'forum/view/forum-thread-index'
], function(View) {

    function Controller(view) {

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new View().render({
            sView: view
        }).inject();
    }

    utils.router.route('forum_threads/:view', Controller);
});

define('text!forum/tpl/forum-thread-reply.html',[],function () { return '<!-- forum/tpl/forum-thread-reply.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" rel="back">\r\n\t\t\t<%= _t(\'Cancel\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'Reply\') %></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title">\r\n\t\t\t<%= _t(\'Reply Thread\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="forum-thread-reply">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});


define('text!forum/tpl/forum-thread-reply-form.html',[],function () { return '<div class="forum-thread-reply-form">\r\n    <div class="form-general">\r\n        <!-- form content -->\r\n        <div class="form-title">\r\n            *<%= _t(\'Message\') %>\r\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'Insert Image\')%></span>\r\n        </div>\r\n        <div class="form-group">\r\n            <textarea id="forum_thread_form_message" class="control-full textarea" placeholder="<%= _t(\'Message\') %>"><%=sQuote%></textarea>\r\n        </div>\r\n\r\n        <div class="form-title">\r\n            <%= _t(\'Subscribe\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <select class="control-full" id="forum_thread_form_subscribe">\r\n                <option value="1" <%if (bIsSubscribed) {%>selected="selected"<%}%>><%=_t(\'Yes\')%></option>\r\n                <option value="0" <%if (!bIsSubscribed) {%>selected="selected"<%}%>><%=_t(\'No\')%></option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class="form-title">\r\n            <%= _t(\'Attachments\') %>\r\n        </div>\r\n        <div class="form-group form-group-flex">\r\n            <div class="action-item" id="attach_gallery_btn">\r\n                <i class="icon icon-attachment-gallery"></i>\r\n            </div>\r\n            <div class="action-item" id="attach_link_btn">\r\n                <i class="icon icon-attachment-link"></i>\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n            <div class="clearfix" id="attachment_photo_holder">\r\n            </div>\r\n            <div class="clearfix" id="attachment_link_holder">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});

define('forum/view/forum-thread-reply',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-form-link',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'photo/view/photo-add-actions',
    'text!forum/tpl/forum-thread-reply.html',
    'text!forum/tpl/forum-thread-reply-form.html'
], function(AttachmentPhotoModel, AttachmentFormLink, AttachmentAddLinkItem, AttachmentAddPhotoItem, PhotoAddActionsView, text, formText) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#forum-thread-reply'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function(context) {

            this.context = $.extend({
                iPostId: 0
            }, context);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template());

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iThreadId: this.model.getId(),
                iPostId: this.context.iPostId
            };
            var settings = {
                context: this
            }

            utils.api.post('forum/threadformreply', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = $.extend({
                bIsSubscribed: false,
                sQuote: ''
            }, data);

            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate(this.formData));

            this.$form_message = this.$el.find('#forum_thread_form_message');
            this.$form_subscribe = this.$el.find('#forum_thread_form_subscribe');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            // bind input edit, paste events
            var self = this;
            self.toggleSaveBtn();
            this.$form_message.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        fetchDataFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('fetchDataFail', arguments);

            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'saveReply',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'forum'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_message.val(this.$form_message.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'forum'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'forum'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'forum'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        saveReply: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sMessage = this.$form_message.val();
            var iSubscribe = this.$form_subscribe.val();

            if (!sMessage.trim()) {
                return utils.modal.alert(_t('Provide some text.'));
            }

            // passed
            var postData = $.extend(this.context, {
                iIsSubscribed: iSubscribe,
                iThreadId: this.model.getId(),
                sAttachment: this.aAttachmentIds.join(),
                sText: sMessage
            });

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('forum/threadreply', postData, settings).done(this.saveDone).always(function() {
                $target.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.message) {
                utils.modal.toast(data.message);
            }

            utils.history.back();
        },
        toggleSaveBtn: function(evt) {

            var sMessage = this.$form_message.val();

            var bDisable = !sMessage.trim();

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('forum/controller/forum-thread-reply',[
    'forum/model/thread',
    'forum/view/forum-thread-reply'
], function(Model, View) {

    function Controller(id, postid) {

        utils.observer.trigger('router:changed');

        new View({
            model: new Model({
                iThreadId: id
            })
        }).render({
            iPostId: postid
        }).inject();
    }

    utils.router.route('forum_thread/:id/reply(/:postid)', Controller);
});
define('forum/main',[
    'core',
    // plugin
    'forum/plugin/activity',
    // load controller
    'forum/controller/forum-detail',
    'forum/controller/forum-index',
    'forum/controller/forum-post-edit',
    'forum/controller/forum-search-results',
    'forum/controller/forum-thread-add',
    'forum/controller/forum-thread-detail',
    'forum/controller/forum-thread-edit',
    'forum/controller/forum-thread-index',
    'forum/controller/forum-thread-reply'
], function(core) {
    core.sidebar.configs.set('forum', {
        label: 'Forums',
        url: '#forums',
        icon: 'icon-sidebar-forum'
    })
});
define('forum', ['forum/main'], function (main) { return main; });


define('text!blog/tpl/blog-categories.html',[],function () { return '<div class="popup-title">\n\t<span><%=(context.filter == \'public\') ? _t(\'public_categories\') : _t(\'personal_categories\')%></span>\n</div>\n<div class="popup-content swiper-container native-vscroll" id="popup-content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div id="category_list_holder" class="category-list-holder">\n            \t<%if (context.list.length > 0) {%>\n\t            \t<%_.each(context.list, function (item) {%>\n\t            \t<div class="category-item">\n\t            \t\t<label><input type="checkbox" value="<%=item.iId%>" class="category-item-checkbox" <%if (item.bSelected) {%>checked="checked"<%}%> /> <%=item.sName%></label>\n\t            \t</div>\n\t            \t<%});%>\n            \t<%} else {%>\n            \t\t<div class="not-found"><%=_t(\'no_categories_added\')%></div>\n            \t<%}%>\n            </div>\n        </div>\n    </div>\n</div>';});

define('blog/view/blog-categories',[
    'text!blog/tpl/blog-categories.html'
], function(text) {
    return Backbone.View.extend({
        region: {
            content: '#popup-content'
        },
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                delegateId: 'blog_add',
                filter: 'public',
                list: []
            }, context);

            this.$el.html(this.template({
                context: this.context
            }));

            return this;
        },
        inject: function() {

            var content = $(this.region.content);

            content.vscroll();

            utils.popup.open(this.$el);

            return this;
        },
        events: {
            'change .category-item-checkbox': 'updateCategories'
        },
        updateCategories: function(evt) {

            var aSelected = [];

            var $checkboxs = this.$el.find('.category-item-checkbox');

            _.each($checkboxs, function(checkbox) {
                if ($(checkbox).is(':checked')) {
                    aSelected.push($(checkbox).val());
                }
            }, this);

            var $delegate_el = $(document).find('#' + this.context.delegateId);

            $delegate_el.trigger('updatecategories', {
                selected: aSelected
            });
        }
    });
});

define('text!blog/tpl/blog-add.html',[],function () { return '<!-- blog/tpl/blog-add.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" rel="back">\r\n\t\t\t<%= _t(\'မလုိေတာ့ဘူး\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'save\') %></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title">\r\n\t\t\t<%= _t(\'add_new_blog\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="blog-add">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});


define('text!blog/tpl/blog-add-form.html',[],function () { return '<div class="blog-add-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            <%= _t(\'title\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="blog_form_title" placeholder="<%= _t(\'title\') %>" value="" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'post\') %>\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'insert_image\')%></span>\n        </div>\n        <div class="form-group">\n            <textarea id="blog_form_post" class="control-full textarea" placeholder="<%= _t(\'post\') %>"></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'categories\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="categories-btn action-item" data-filter="public">\n                <span><%=_t(\'public\')%></span>\n            </div>\n            <div class="categories-btn action-item" data-filter="personal">\n                <span><%=_t(\'personal\')%></span>\n            </div>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'status\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_status">\n                <option value="publish"><%=_t(\'publish\')%></option>\n                <option value="draft"><%=_t(\'draft\')%></option>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'view_privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_privacy">\n                <%_.each(view_options, function (option) {%>\n    \t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n    \t\t\t<%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'comment_privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_privacy_comment">\n                <%_.each(comment_options, function (option) {%>\n    \t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n    \t\t\t<%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'attachments\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="action-item" id="attach_gallery_btn">\n                <i class="icon icon-attachment-gallery"></i>\n            </div>\n            <div class="action-item" id="attach_link_btn">\n                <i class="icon icon-attachment-link"></i>\n            </div>            \n        </div>\n\n        <div>\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div class="clearfix" id="attachment_link_holder">\n            </div>\n        </div>\n    </div>\n</div>';});

define('blog/view/blog-add',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-form-link',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'blog/view/blog-categories',
    'photo/view/photo-add-actions',
    'text!blog/tpl/blog-add.html',
    'text!blog/tpl/blog-add-form.html'
], function(AttachmentPhotoModel, AttachmentFormLink, AttachmentAddLinkItem, AttachmentAddPhotoItem, CategoriesView, PhotoAddActionsView, text, formText) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#blog-add'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function(context) {

            this.context = $.extend({
                iItemId: null,
                sModule: null
            }, context);

            this.$el.attr('id', 'blog_add');

            this.$el.html(this.template(this.context));

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];
            this.aCategoryIds = [];
            this.sCategoriesFilter = '';

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {
            utils.api.get('blog/formadd', {}, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;
            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate(this.formData));

            this.$form_title = this.$el.find('#blog_form_title');
            this.$form_post = this.$el.find('#blog_form_post');
            this.$form_status = this.$el.find('#blog_form_status');
            this.$form_privacy = this.$el.find('#blog_form_privacy');
            this.$form_privacy_comment = this.$el.find('#blog_form_privacy_comment');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            // bind input edit, paste events
            var self = this;
            this.$form_post.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'saveBlog',
            'click .categories-btn': 'showCategories',
            'keyup #blog_form_title': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto',
            'updatecategories': 'updateCategories'
        },
        showCategories: function(evt) {

            var $target = $(evt.currentTarget);
            var filter = $target.data('filter') || 'public';

            if (filter != this.sCategoriesFilter) {
                this.aCategoryIds = [];
                this.sCategoriesFilter = filter;
            }

            var aCategories = _.map(this.formData.category_options[filter], function(oCategory) {
                return {
                    bSelected: (this.aCategoryIds.indexOf(oCategory.category_id) > -1),
                    iId: oCategory.category_id,
                    sName: oCategory.name
                };
            }, this);

            new CategoriesView().render({
                delegateId: this.$el.attr('id'),
                filter: filter,
                list: aCategories
            }).inject();
        },
        updateCategories: function(evt, data) {

            this.aCategoryIds = data.selected || [];
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'blog'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_post.val(this.$form_post.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'blog'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'blog'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'blog'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        saveBlog: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sTitle = this.$form_title.val();
            var sPost = this.$form_post.val();
            var sStatus = this.$form_status.val() || 'publish';
            var iPrivacy = this.$form_privacy.val() || 0;
            var iPrivacyComment = this.$form_privacy_comment.val() || 0;

            // validate
            if (!sTitle.trim()) {
                return utils.modal.alert(_t('Fill in a title for your blog'));
            }

            if (!sPost.trim()) {
                return utils.modal.alert(_t('Add some content to your blog'));
            }

            // passed
            var postData = $.extend(this.context, {
                iPrivacy: iPrivacy,
                iPrivacyComment: iPrivacyComment,
                sAttachment: this.aAttachmentIds.join(),
                sCategories: this.aCategoryIds.join(),
                sStatus: sStatus,
                sText: sPost,
                sTitle: sTitle
            });

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('blog/create', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                window.location.href = data.iBlogId ? ('#blog/' + data.iBlogId) : 'blogs/my';
            }).always(function() {
                $target.removeClass('processing');
            });
        },
        toggleSaveBtn: function(evt) {

            var sTitle = this.$form_title.val();
            var sPost = this.$form_post.val();

            var bDisable = (!sTitle.trim() || !sPost.trim());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('blog/controller/blog-add',[
    'blog/view/blog-add'
], function(AddView) {

    var AddController = function(module, item) {

        utils.observer.trigger('router:changed');

        new AddView().render({
            iItemId: item,
            sModule: module || 'blog'
        }).inject();
    }

    utils.router.route('blogs/add(/:module/:item)', AddController);
});
define('blog/model/blog',[
    'attachment/model/attachment-link',
    'attachment/model/attachment-photo'
], function(AttachmentLinkModel, AttachmentPhotoModel) {

    return Backbone.Model.extend({
        idAttribute: 'iBlogId',
        defaults: {
            sModelType: 'blog',
            bCanView: true,
            bCanLike: true
        },
        getTopics: function() {
            return this.get('aTagList') || [];
        },
        getTextTopics: function() {
            var aTopics = this.getTopics();
            var aTextTopics = [];

            _.each(aTopics, function(aTopic) {
                aTextTopics.push(aTopic.tag_text);
            });

            return aTextTopics.join(', ');
        },
        getText: function() {

            var sText = this.get('sText') || '';

            return utils.helper.parseExternalLink(sText);
        },
        getTextNotParsed: function() {
            return this.get('sTextNotParsed') || '';
        },
        isPublish: function() {
            return this.get('bIsPublish') || false;
        },
        isApproved: function() {
            return this.get('bIsApproved') || false;
        },
        getUserSettingApproveBlogs: function() {
            return this.get('bUserSettingApproveBlogs') || false;
        },
        getAttachments: function() {
            return this.get('aAttachment') || [];
        },
        hasAttachments: function() {
            return this.getAttachments().length > 0;
        },
        getAttachmentPhotos: function() {

            if (!this.hasAttachments()) {
                return [];
            }

            var aPhotos = this.getAttachments().filter(function(aAttachment) {
                return aAttachment.type == 'image';
            });

            if (aPhotos.length == 0) {
                return [];
            }

            var aAtts = _.map(aPhotos, function(oPhoto) {
                return new AttachmentPhotoModel($.extend({
                    attachment_id: oPhoto.attachment_id,
                    type: oPhoto.type
                }, oPhoto.data));
            }, this);

            return aAtts;
        },
        getAttachmentLinks: function() {

            if (!this.hasAttachments()) {
                return [];
            }

            var aLinks = this.getAttachments().filter(function(aAttachment) {
                return aAttachment.type == 'link';
            });

            if (aLinks.length == 0) {
                return [];
            }

            var aAtts = _.map(aLinks, function(oLink) {
                return new AttachmentLinkModel($.extend({
                    attachment_id: oLink.attachment_id,
                    type: oLink.type
                }, oLink.data));
            }, this);

            return aAtts;
        },
        getCategoryOptions: function(filter) {

            filter = filter || 'public';

            return this.get('category_options')[filter] || [];
        },
        getViewOptions: function() {
            return this.get('view_options') || [];
        },
        getCommentOptions: function() {
            return this.get('comment_options') || [];
        },
        getPrivacy: function() {
            return this.get('iPrivacy') || 0;
        },
        getCommentPrivacy: function() {
            return this.get('iPrivacyComment') || 0;
        },
        getFormatedTime: function() {
            return utils.moment(this.getTimestamp() * 1e3).format('LL');
        }
        
    });
});

define('text!blog/tpl/blog-setting.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canEdit()) {%>\n\t<a class="setting-item" href="#blogs/edit/<%=item.getId()%>">\n\t\t<%= _t(\'edit_blog\') %>\n\t</a>\n\t<%}%>\n\t<%if (item.canDelete()) {%>\n\t<div class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'delete_blog\') %>\n\t</div>\n\t<%}%>\n</div>';});

define('blog/view/blog-setting',[
	'text!blog/tpl/blog-setting.html'
],function(text){
	return Backbone.PopupView.extend({
		template: _.template(text)
	});
});


define('text!blog/tpl/blog-item.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\n    <a class="item-image" href="<%=item.getPosterUrl()%>">\n    \t<img src="<%=item.getPosterImageSrc()%>" />\n    </a>\n    <div class="item-content">\n        <div class="item-title">\n            <span><%=utils.str.shorten(item.getTitle(), \'36\')%></span>\n        </div>\t\t\n\t    <div class="item-headline">\n\t        <span><%=_t(\'by\')%></span>\n            <a href="<%=item.getPosterUrl()%>"><%=utils.str.shorten(item.getPosterTitle(), 16)%></a>\n            / <span class="item-subline"><%= item.getFormatedTime() %></span>\n\t    </div>\n        <div class="item-description">\n            <span><%=utils.str.shorten(item.getText(), \'80\')%></span>\n        </div>\n    </div>    \n</div>\n';});


define('text!blog/tpl/blog-my-item.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\n    <div class="item-setting prevent" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n        <i class="icon icon-setting"></i>\n    </div>\n    <div class="item-content">\n        <div class="item-title">\n            <span><%=utils.str.shorten(item.getTitle(), \'36\')%></span>\n        </div>\n\t    <div>\n            <span class="item-subline"><%= item.getFormatedTime() %></span>\n            <%if (item.getUserSettingApproveBlogs()) {%>\n            / <span class="item-subline"><%=item.isApproved() ? _t(\'approved\') : _t(\'pending\')%></span>\n            <%}%>\n            <%if (!item.isPublish()) {%>\n            / <span class="item-subline"><%=_t(\'draft\')%></span>\n            <%}%>\n        </div>\n        <div class="item-description">\n            <span><%=utils.str.shorten(item.getText(), \'80\')%></span>\n        </div>\n    </div>    \n</div>\n';});

define('blog/view/blog-item',[
    'blog/view/blog-setting',
    'text!blog/tpl/blog-item.html',
    'text!blog/tpl/blog-my-item.html'
], function(SettingView, text, textMy) {

    return Backbone.ItemView.extend({
        settingView: SettingView,
        className: 'blog-item',
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                sModule: null,
                iItemId: null
            }, context);

            if (this.context.sView == 'my') {
                this.template = _.template(textMy);
            }

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                context: this.context,
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {

            inject(this.$el);

            return this;
        },
        doDeleteConfirm: function(evt, data) {

            var self = this;

            utils.modal.confirm(_t('Are you sure you want to delete this blog entry?'), function(selected) {

                if (selected == 1) {
                    utils.observer.trigger('blockui');

                    utils.api.post('blog/delete', {
                        iBlogId: self.model.getId()
                    })
                        .done(function(data) {

                            if (data.error_code && data.error_code > 0) {
                                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                            }

                            // success
                            self.deleteSuccess(data);
                        })
                        .always(function() {

                            utils.observer.trigger('releaseui');

                            utils.popup.close();
                        });
                }
            }, _t('Confirm'), [_t('Delete'), _t('Cancel')]);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Your blog entry has been deleted'));

            this.$el.remove();
        }
    });
});

define('text!blog/tpl/blog-topmenu.html',[],function () { return '<div class="setting-list">\n\t<%if (item.canDislike()) {%>\n\t<div class="menu-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="menu-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\n    </div>\n    <%}%>\n    <%if (item.canEdit()) {%>\n\t<a class="menu-item" href="#blogs/edit/<%=item.getId()%>">\n\t\t<%= _t(\'edit_blog\') %>\n\t</a>\n\t<%}%>\n\t<%if (item.canDelete()) {%>\n\t<div class="menu-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'delete_blog\') %>\n\t</div>\n\t<%}%>\n</div>';});

define('blog/view/blog-topmenu',[
    'text!blog/tpl/blog-topmenu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
], function(text, DislikeCollection, DislikeDetailView) {
    return Backbone.TopMenuView.extend({
        template: _.template(text),
        render: function() {
            var self = this;

            this.$el.html(this.template({
                item: this.model
            }));

            this.$dislikeHolder = this.$el.find('#dislike-list');

            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));

            this.model.on('change:iTotalDislike change:bIsDisliked', function() {
                self.updateView();
            });

            return this;
        },
        inject: function() {
            this.model.dislikes = new DislikeCollection();

            this.model.dislikes.add(this.model.getUserDislike());

            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);

            utils.popup.open(this.$el);

            return this;
        },
        hide: function() {
            utils.popup.close();

            return this;
        },
        updateView: function() {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
            this.$dislikeHolder.toggleClass('hide', bHide);

            var sText = this.model.isDisliked() ? _t('remove_dislike') : _t('dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});

define('text!blog/tpl/blog-detail.html',[],function () { return '<!-- blog/tpl/blog-detail.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top btn-back" rel="back">\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle"></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title" id="page_title">\r\n\t\t\t<%= _t(\'loading...\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content content-background with-header swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="blog_detail_holder" class="blog-detail-content">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id="activity_extra_holder" class="hide">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n';});


define('text!blog/tpl/blog-detail-update.html',[],function () { return '<div class="blog-detail-item">\r\n    <a class="item-image" href="<%=item.getPosterUrl()%>">\r\n        <img src="<%=item.getPosterImageSrc()%>" />\r\n    </a>\r\n    <div class="item-content">\r\n        <div class="item-headline">\r\n            <div>\r\n                <span><%=_t(\'by\')%></span>\r\n                <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="item-subline">\r\n            <i class="icon icon-time"></i>\r\n            <span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\r\n        </div>\r\n    </div>\r\n    <div class="item-description">\r\n        <span><%=utils.str.shorten(item.getText(), 250, true)%></span>\r\n    </div>\r\n</div>\r\n<%if (item.hasAttachments()) {%>\r\n<div class="item-attachment">\r\n    <div class="item-headline"><%=_t(\'attachments\')%></div>\r\n    <div class="clearfix" id="attachment_photo_holder">\r\n    </div>\r\n    <div class="clearfix" id="attachment_link_holder">\r\n    </div>\r\n</div>\r\n<%}%>\r\n<%if (item.isApproved()) {%>\r\n<div id="blog_action_bar">\r\n\t<div class="actions-justify gray">\r\n        <%if (item.canLike()) {%>\r\n        <div class="action-item <%= item.isLiked() ? \' liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n            <span class="text-info"><%= item.getLikeCount() %></span>\r\n            <i class="icon icon-activity-like"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canComment()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\r\n            <span class="text-anchor"><%= item.getCommentCount() %></span>\r\n            <i class="icon icon-activity-comment"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canShare()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\r\n            <i class="icon icon-activity-share"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (!item.isOwner()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\r\n            <i class="icon icon-activity-report"></i>\r\n        </div>\r\n        <%}%>\r\n    </div>\r\n</div>\r\n<%} else {%>\r\n<div id="blog_message_holder">\r\n    <span class="warn-message"><%=_t(\'this_blog_is_pending_an_Admins_approval.\')%></span>\r\n</div>\r\n<%}%>';});

define('blog/view/blog-detail',[
    'attachment/view/attachment-link-item',
    'attachment/view/attachment-photo-item',
    'blog/view/blog-item',
    'blog/view/blog-topmenu',
    'text!blog/tpl/blog-detail.html',
    'text!blog/tpl/blog-detail-update.html'
], function(AttachmentLinkItemView, AttachmentPhotoItemView, ItemView, TopMenuView, text, textUpdate) {

    return ItemView.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            updateHolder: '#blog_detail_holder',
            activityExtraHolder: '#activity_extra_holder'
        },
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        topMenuView: TopMenuView,
        render: function() {

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$updateHolder = this.$el.find(this.region.updateHolder);
            this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);
            this.$pageTitle = this.$el.find('#page_title');
            this.$topmenuBtn = this.$el.find('#top_menu_toggle');

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);

            return this;
        },
        fetchData: function() {

            var postData = {
                iBlogId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('blog/detail', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.updateView();
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        updateView: function() {

            var self = this;

            this.$pageTitle.html(this.model.getTitle());

            if (this.model.canDislike() || this.model.canEdit() || this.model.canDelete()) {
                this.$topmenuBtn.removeClass('hide');
            }

            this.$updateHolder.html(this.templateUpdate({
                item: this.model
            }));

            this.$attachmentPhotoHolder = this.$el.find('#attachment_photo_holder');
            this.$attachmentLinkHolder = this.$el.find('#attachment_link_holder');

            var injectPhoto = function(dom) {
                self.$attachmentPhotoHolder.append(dom);
            };

            var injectLink = function(dom) {
                self.$attachmentLinkHolder.append(dom);
            };

            _.each(this.model.getAttachmentPhotos(), function(oPhoto) {
                new AttachmentPhotoItemView({
                    model: oPhoto
                }).render().inject(injectPhoto);
            }, this);

            _.each(this.model.getAttachmentLinks(), function(oLink) {
                new AttachmentLinkItemView({
                    model: oLink
                }).render().inject(injectLink);
            }, this);

            if (this.model.isApproved()) {
                this.$activityExtraHolder.removeClass('hide');
            }
        },
        events: {
            'click #top_menu_toggle': 'toggleTopMenu'
        },
        toggleTopMenu: function() {

            this.topMenuIsShown(false);

            utils.topMenu.toggle(this, this.model);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Your blog entry has been deleted'));

            utils.history.back();
        }
    });
});
define('blog/controller/blog-detail',[
    'blog/model/blog',
    'blog/view/blog-detail'
], function (Model, DetailView) {

    var DetailController = function (id) {

		utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iBlogId: id
            })
        }).render().inject();
    }

    utils.router.route('blog/:id', DetailController);
});

define('text!blog/tpl/blog-edit.html',[],function () { return '<!-- blog/tpl/blog-add.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'မလုိေတာ့ဘူး\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'edit_blog\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="blog-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>';});


define('text!blog/tpl/blog-edit-form.html',[],function () { return '<div class="blog-edit-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            <%= _t(\'title\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="blog_form_title" placeholder="<%= _t(\'Title\') %>" value="<%=item.getTitle()%>" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'post\') %>\n            <span id="insert_image_btn" class="btn-form-insert-image">+ <%=_t(\'insert_image\')%></span>\n        </div>\n        <div class="form-group">\n            <textarea id="blog_form_post" class="control-full textarea" placeholder="<%= _t(\'Post\') %>"><%=item.getTextNotParsed()%></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'categories\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <div class="categories-btn action-item" data-filter="public">\n                <span><%=_t(\'public\')%></span>\n            </div>\n            <div class="categories-btn action-item" data-filter="personal">\n                <span><%=_t(\'personal\')%></span>\n            </div>\n        </div>\n\n        <%if (!item.isPublish()) {%>\n        <div class="form-title">\n            <%= _t(\'status\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_status">\n                <option value="publish"><%=_t(\'publish\')%></option>\n                <option value="draft" selected="selected"><%=_t(\'draft\')%></option>\n            </select>\n        </div>\n        <%}%>\n\n        <div class="form-title">\n            <%= _t(\'view_privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_privacy">\n                <%_.each(item.getViewOptions(), function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'comment_privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="blog_form_privacy_comment">\n                <%_.each(item.getCommentOptions(), function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getCommentPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'attachments\') %>\n        </div>\n        <div class="form-group  form-group-flex">\n            <div class="action-item" id="attach_gallery_btn">\n                <i class="icon icon-attachment-gallery"></i>\n            </div>\n            <div class="action-item" id="attach_link_btn">\n                <i class="icon icon-attachment-link"></i>\n            </div>            \n        </div>\n\n        <div>\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div class="clearfix" id="attachment_link_holder">\n            </div>\n        </div>\n    </div>\n</div>';});

define('blog/view/blog-edit',[
    'attachment/model/attachment-photo',
    'attachment/view/attachment-form-link',
    'attachment/view/attachment-add-link-item',
    'attachment/view/attachment-add-photo-item',
    'blog/view/blog-categories',
    'photo/view/photo-add-actions',
    'text!blog/tpl/blog-edit.html',
    'text!blog/tpl/blog-edit-form.html'
], function(AttachmentPhotoModel, AttachmentFormLink, AttachmentAddLinkItem, AttachmentAddPhotoItem, CategoriesView, PhotoAddActionsView, text, formText) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#blog-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        render: function(context) {

            this.context = $.extend({}, context);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template(this.context));

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aAttachmentIds = [];
            this.aCategoryIds = [];
            this.sCategoriesFilter = '';

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {
            utils.api.get('blog/formedit', {
                iBlogId: this.model.getId()
            }, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.formTemplate({
                item: this.model
            }));

            this.$form_title = this.$el.find('#blog_form_title');
            this.$form_post = this.$el.find('#blog_form_post');
            this.$form_status = this.$el.find('#blog_form_status');
            this.$form_privacy = this.$el.find('#blog_form_privacy');
            this.$form_privacy_comment = this.$el.find('#blog_form_privacy_comment');
            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$attachment_link_holder = this.$el.find('#attachment_link_holder');

            this.appendAttachments();

            this.toggleSaveBtn();

            // bind input edit, paste events
            var self = this;
            this.$form_post.bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
        },
        appendAttachments: function() {

            _.each(this.model.getAttachmentPhotos(), function(item) {
                this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
            }, this);

            _.each(this.model.getAttachmentLinks(), function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        events: {
            'click #attach_gallery_btn': 'onAddPhotoClick',
            'click #attach_link_btn': 'onAttachLink',
            'click #insert_image_btn': 'onGalleryInsert',
            'click #save_btn': 'saveBlog',
            'click .categories-btn': 'showCategories',
            'keyup #blog_form_title': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto',
            'updatecategories': 'updateCategories'
        },
        showCategories: function(evt) {

            var $target = $(evt.currentTarget);
            var filter = $target.data('filter') || 'public';

            if (filter != this.sCategoriesFilter) {
                this.aCategoryIds = [];
                this.sCategoriesFilter = filter;
            }

            var aCategories = _.map(this.model.getCategoryOptions(filter), function(oCategory) {
                return {
                    bSelected: (this.aCategoryIds.indexOf(oCategory.category_id) > -1),
                    iId: oCategory.category_id,
                    sName: oCategory.name
                };
            }, this);

            new CategoriesView().render({
                delegateId: this.$el.attr('id'),
                filter: filter,
                list: aCategories
            }).inject();
        },
        updateCategories: function(evt, data) {

            this.aCategoryIds = data.selected || [];
        },
        onGalleryInsert: function(evt) {

            navigator.camera.getPicture(onGallerySuccess, onGalleryFail, {
                quality: 50,
                destinationType: navigator.camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG
            });

            var self = this;

            function onGallerySuccess(fileURI) {
                utils.api.uploadImage('attachment/attachphoto', fileURI, {
                    sModule: 'blog'
                }).done(function(data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    if (!data.sImagePath) {
                        return utils.modal.alert(_t('Can not insert image. Please try again later.'));
                    }

                    self.insertImage(data);
                }).fail(function(error) {
                    utils.debug.warn(error);
                })
            }

            function onGalleryFail(msg) {
                utils.debug.log(msg);
            }
        },
        insertImage: function(data) {

            var imgTag = '[img]' + data.sImagePath + '[/img]';

            this.$form_post.val(this.$form_post.val() + imgTag);
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI) {

            var self = this;

            utils.api.uploadImage('attachment/attachfile', fileURI, {
                sModule: 'blog'
            }).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                self.attachImageSuccess(data);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                utils.debug.warn('attachImageFail', arguments);
            });
        },
        attachImageSuccess: function(data) {

            var item = new AttachmentPhotoModel({
                attachment_id: data.iId,
                photo_url: data.sImagePath
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        onAttachLink: function(evt) {

            this.attachmentFormLink = new AttachmentFormLink();

            this.attachmentFormLink.render({
                sModule: 'blog'
            }).inject();

            this.attachmentFormLink.on('attachsuccess', function(item) {
                this.appendAttachmentItem(item, AttachmentAddLinkItem, this.$attachment_link_holder);
            }, this);
        },
        appendAttachmentItem: function(item, View, $holder) {

            this.aAttachmentIds.push(item.getId());

            var attachmentItem = new View({
                model: item
            });

            var context = {
                sModule: 'blog'
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aAttachmentIds.indexOf(item.getId());
            if (index > -1) {
                this.aAttachmentIds.splice(index, 1);
            }
        },
        saveBlog: function(evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sTitle = this.$form_title.val();
            var sPost = this.$form_post.val();
            var sStatus = this.$form_status.val() || 'publish';
            var iPrivacy = this.$form_privacy.val() || 0;
            var iPrivacyComment = this.$form_privacy_comment.val() || 0;

            // validate
            if (!sTitle.trim()) {
                return utils.modal.alert(_t('Fill in a title for your blog'));
            }

            if (!sPost.trim()) {
                return utils.modal.alert(_t('Add some content to your blog'));
            }

            // passed
            var postData = {
                iBlogId: this.model.getId(),
                iPrivacy: iPrivacy,
                iPrivacyComment: iPrivacyComment,
                sAttachment: this.aAttachmentIds.join(),
                sCategories: this.aCategoryIds.join(),
                sStatus: sStatus,
                sText: sPost,
                sTitle: sTitle
            };

            var settings = {
                context: this
            }

            $target.addClass('processing');

            utils.api.post('blog/edit', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                window.location.href = data.iBlogId ? ('#blog/' + data.iBlogId) : 'blogs/my';
            }).always(function() {
                $target.removeClass('processing');
            });
        },
        toggleSaveBtn: function(evt) {

            var sTitle = this.$form_title.val();
            var sPost = this.$form_post.val();

            var bDisable = (!sTitle.trim() || !sPost.trim());

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('blog/controller/blog-edit',[
    'blog/model/blog',
    'blog/view/blog-edit'
], function (Model, EditView) {

    var EditController = function (id) {

//		utils.history.push();

        utils.observer.trigger('router:changed');

        new EditView({
            model: new Model({
                iBlogId: id
            })
        }).render().inject();
    }

    utils.router.route('blogs/edit/:id', EditController);
});

define('text!blog/tpl/blog-index.html',[],function () { return '<!-- blog/tpl/blog-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add" href="#blogs/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%=utils.helper.updater()%>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'no_blogs_found\') %></div>\n\t\t\t<div class="swiper-list vertical" id="blog_list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item <%if (sView == \'all\') {%>current<%}%>" href="#blogs">\n        \t<div class=""><%= _t(\'all_blogs\') %></div>\n        </a>\n        <a class="menu-item <%if (sView == \'my\') {%>current<%}%>" href="#blogs/my">\n        \t<div class="sibling"><%= _t(\'my_blogs\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!blog/tpl/blog-list.html',[],function () { return '<div class="loading-initiator">\r\n\t<!-- loading ... -->\r\n</div>\r\n';});

define('blog/view/blog-list',[
    'blog/model/blog',
    'blog/view/blog-item',
    'text!blog/tpl/blog-list.html',
], function (Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfBlog: 10,
            sSearch: ""
        },
        followById: false,
        api: 'blog/fetch',
        phraseNotFound: _t('ဘေလာ့မရွိေသးပါ။'),
        phraseNotMore: _t('ေနာက္ထပ္ဘေလာ့မရွိပါ။'),
        className: 'blog-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('text!blog/tpl/blog-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search\') %>" value="" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n                <option value=""><%= _t(\'all_categories\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'Latest\') %></option>\n                <option value="most_view"><%= _t(\'most_viewed\') %></option>\n                <option value="most_liked"><%= _t(\'most_liked\') %></option>\n                <option value="most_disscussed"><%= _t(\'most_discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\n\t</div>\n</div>\n';});

define('blog/view/blog-search',[
    'text!blog/tpl/blog-search.html'
], function(text){
    
    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function(query){
            
            this.$el.html(this.template($.extend({}, query)));
            
            this.$categoryInput = this.$el.find('#search_category');
            this.$orderInput    = this.$el.find('#search_order');
            this.$keywordInput  = this.$el.find('#search_keywords'); 
            this.$advSearchHolder = this.$el.find('#adv_search_holder');
            
            return this;
        },
        inject: function(){
            
            $(this.region.holder).html(this.$el);
            
            this.fetchData();
            
            return this;
        },
        fetchData: function(){
            utils.api.get('blog/categories',{},{context: this}).done(this.updateView);
        },
        updateView: function(data){
            if (data.error_code) {
                return utils.modal.alert(data.error_message);
            }
            _.each(data, function (option) {
                this.$categoryInput.append(new Option(option.name, option.category_id));
            }, this);
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function (evt) {
            this.$advSearchHolder.toggleClass("hide");
        },
        submitSearch: function () {
            
            this.$advSearchHolder.addClass('hide');
            
            this.trigger('submit',{
                sSearch: this.$keywordInput.val() || '',
                iCategoryId: this.$categoryInput.val() || '0',
                sOrder: this.$orderInput.val() || 'latest'
            });
        }
    });
    
});

define('blog/view/blog-index',[
    'text!blog/tpl/blog-index.html',
    'blog/view/blog-list',
    'blog/view/blog-search'
], function (text, BlogListView, SearchView) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'blog/view/blog-index',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function () {},
        render: function (query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            this.$listHolder = this.$el.find('#blog_list_holder');

            return this;
        },
        inject: function () {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.listView = new BlogListView({}, this.$listHolder, this.$scroller);

            this.listView.render(this.query).inject();

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function (data) {
                self.listView.phraseNotFound = _t('No blogs found.');
                self.listView.resetQuery($.extend({}, self.query, data));
            });

            return this;
        }
    });
});
define('blog/controller/blog-index',[
	'blog/view/blog-index'
],function(IndexView){
	
	var IndexController = function (){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			sView: 'all'
		}).inject();
	}
	
	var MyController = function(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			sView: 'my',
            iUserId: Backbone.iUserId
		}).inject();
	}
	
	utils.router.route('blogs', IndexController);
	
	utils.router.route('blogs/my', MyController);
});


define('text!blog/tpl/attachment-blog.html',[],function () { return '<div class="att-item-wrapper">\n\t<div class="att-col-info">\n\t\t<div class="att-item-title"><a href="<%=attUrl%>"><%=utils.str.shorten(attachment.sTitle, 48)%></a></div>\n\t\t<div class="att-item-description"><%=utils.str.shorten(attachment.sDescription, 96)%></div>\n\t</div>\n</div>';});

define('blog/view/attachment-blog',[
    'text!blog/tpl/attachment-blog.html'
], function (text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-blog',
        template: _.template(text),
        render: function () {

            var item = this.model;
            var att = item.getAttachments()[0];

            var context = {
                item: item,
                attachment: att,
                attUrl: '#blog/' + att.iId
            };

            this.$el.html(this.template(context));

            return this;
        },
        inject: function (dom) {
            dom.html(this.el);
        }
    });
});
define('blog/plugin/activity',[
    'blog/view/attachment-blog'
], function(BlogAttachmentView) {

    utils.headline.add([
        'blog'
    ], function(item) {
        return _t('ဘေလာ့ တစ္ခုတင္ပါသည္။');
    });

    utils.attachment.add(['blog'], BlogAttachmentView);
});
define('blog/main',[
	'core',
    'blog/controller/blog-add',
    'blog/controller/blog-detail',
    'blog/controller/blog-edit',
	'blog/controller/blog-index',
	'blog/plugin/activity'
],function(core){
	
	core.sidebar.configs.set('blog',{
 		icon: 'icon-sidebar-blog',
 		label: 'Blogs',
 		url: '#blogs'
 	});
});

define('blog', ['blog/main'], function (main) { return main; });


define('text!page/tpl/page-index.html',[],function () { return '<!-- page/tpl/page-index.html-->\r\n\r\n<!-- Header -->\r\n<div class="header">\r\n    <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\r\n        <i class="icon icon-sidebar"></i>\r\n    </div>\r\n    <div class="header-right">\r\n        <a class="btn-top btn-add" href="#page/add"></a>\r\n    </div>\r\n    <div class="header-center">\r\n        <%=utils.helper.updater()%>\r\n    </div>\r\n</div>\r\n\r\n<!-- Search -->\r\n<div id="search_view_holder"></div>\r\n\r\n<!-- Page list here -->\r\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div class="not-found hide" id="not_found"><%= _t(\'no_pages_found\') %></div>\r\n            <div class="swiper-list vertical" id="page_list_holder">\r\n            </div>\r\n            <%= utils.helper.loadmore() %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Footer -->\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-2 fobos">\r\n        <a class="menu-item <%if (sView == \'all\') {%>current<%}%>" href="#pages">\r\n            <div class=""><%= _t(\'all_pages\') %></div>\r\n        </a>\r\n        <a class="menu-item <%if (sView == \'my\') {%>current<%}%>" href="#pages/my/0">\r\n            <div class="sibling"><%= _t(\'my_pages\') %></div>\r\n        </a>\r\n    </div>\r\n</div>';});


define('text!page/tpl/page-search.html',[],function () { return '<div class="search-simple">\r\n    <div id="adv_search_toggle_btn" class="btn-advance-search"></div>\r\n    <div class="form-search-group">\r\n        <span id="search_icon" class="icon-search"></span>\r\n        <input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'search_pages\') %>" value="" />\r\n    </div>\r\n</div>\r\n<div id="adv_search_holder" class="search-advanced hide">\r\n    <div class="form-search-group inline">\r\n        <div class="form-group">\r\n            <select class="control-full" id="search_category">\r\n                <option value="all_cate"><%= _t(\'all_categories\') %></option>\r\n            </select>\r\n        </div>\r\n        <div class="form-group">\r\n            <select class="control-full" id="search_order">\r\n                <option value="latest"><%= _t(\'latest\') %></option>\r\n                <option value="most_liked"><%= _t(\'most_liked\') %></option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n    <div class="form-search-submit">\r\n        <input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'search\') %>" />\r\n    </div>\r\n</div>\r\n';});

define('page/view/page-search',[
    'text!page/tpl/page-search.html'
], function(text){

    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function(query){

            this.$el.html(this.template($.extend({}, query)));

            this.$categoryInput = this.$el.find('#search_category');

            this.$orderInput    = this.$el.find('#search_order');

            this.$keywordInput  = this.$el.find('#search_keywords');

            this.$advSearchHolder = this.$el.find('#adv_search_holder');

            return this;
        },
        inject: function(){

            $(this.region.holder).html(this.$el);

            this.fetchData();

            return this;
        },
        fetchData: function(){
            utils.api.get('pages/categories',{},{context: this}).done(this.updateView);
        },
        updateView: function(data){
            if (data.error_code) {
                return utils.modal.alert(data.error_message);
            }
            _.each(data, function (option) {
                this.$categoryInput.append(new Option(option.name, option.type_id));
            }, this);
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function (evt) {
            this.$advSearchHolder.toggleClass("hide");
        },
        submitSearch: function () {

            this.$advSearchHolder.addClass('hide');

            this.trigger('submit',{
                sSearch: this.$keywordInput.val() || '',
                iCategoryId: this.$categoryInput.val() || '0',
                sOrder: this.$orderInput.val() || 'latest'
            });
        }
    });

});

define('page/model/page',[
    'underscore.string'
], function(STR) {

    var Model = Backbone.Model.extend({
        idAttribute: 'iPageId',
        defaults: {
            sModelType: 'pages',
            bCanView: true,
            bCanShare: true,
            bCanLike: true
        }
    });

    Model.prototype.getAvatarImageSrc = function() {

        return this.get('sAvatarImage');
    }

    Model.prototype.getCoverImageSrc = function() {

        return this.get('sCoverImage');
    }

    Model.prototype.getCategoryName = function() {

        return this.get('sCategoryName') || '';
    }

    Model.prototype.getParsedText = function() {

        var sBody = this.get('sText') || '';

        return utils.helper.parseExternalLink(sBody);
    }

    Model.prototype.getText = function() {

        return this.get('sText') || '';
    }

    Model.prototype.getStrippedText = function() {

        return STR.stripTags(this.getText());
    }

    Model.prototype.getTotalMembers = function() {

        return this.get('iTotalMembers');
    }

    Model.prototype.getTotalAdmins = function() {

        return this.get('iTotalAdmins');
    }

    Model.prototype.getMemberList = function() {

        return this.get('aMembers');
    }

    Model.prototype.getMemberListMin = function() {

        var len = this.getTotalMembers() <= 18 ? this.getTotalMembers() : 17;

        return this.getMemberList().slice(0, len);
    }

    Model.prototype.getAdminList = function() {

        return this.get('aAdmins');
    }

    Model.prototype.getAdminListMin = function() {

        var len = this.getTotalAdmins() <= 18 ? this.getTotalAdmins() : 17;

        return this.getAdminList().slice(0, len);
    }

    Model.prototype.canShareBlogs = function() {

        return this.get('bCanShareBlogs') || false;
    }

    Model.prototype.canShareVideos = function() {

        return this.get('bCanShareVideos') || false;
    }

    Model.prototype.getTypeId = function() {

        return this.get('iTypeId') || 0;
    }

    Model.prototype.getCategoryId = function() {

        return this.get('iCategoryId') || 0;
    }

    Model.prototype.getCategoryOptions = function() {

        return this.get('category_options') || 0;
    }

    Model.prototype.canInvite = function() {

        return this.get('bCanInvite') || 0;
    }

    Model.prototype.isInvited = function() {

        return this.get('bIsInvited') || 0;
    }

    return Model;
});

define('text!page/tpl/page-item.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\r\n    <div class="item-headline">\r\n        <span><%=item.getTitle()%></span>\r\n    </div>\r\n    <div class="item-content">\r\n        <a class="item-image" href="<%=item.getUrl()%>">\r\n            <img src="<%=item.getAvatarImageSrc()%>" />\r\n        </a>\r\n\r\n        <%if (item.getCategoryName()) { %> \r\n        <div class="item-subline">\r\n            <span class="icon icon-category"></span>\r\n            <span><%=item.getCategoryName()%></span>\r\n        </div>\r\n        <% } %>\r\n\r\n        <div class="item-subline">\r\n            <div class="action-item <%= item.isLiked() ? \'liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>">\r\n                <i class="icon icon-activity-like"></i>\r\n                <span class="text-info"><%= item.getTotalMembers() %></span>\r\n            </div>\r\n        </div>\r\n        <div class="item-description">\r\n            <span><%=item.getStrippedText().substr(0,1000)%></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n';});


define('text!page/tpl/page-item-my.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\r\n    <div class="item-setting prevent" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\r\n        <i class="icon icon-setting"></i>\r\n    </div>\r\n\r\n    <div class="item-headline">\r\n        <span><%=item.getTitle()%></span>\r\n    </div>\r\n    <div class="item-content">\r\n        <a class="item-image" href="<%=item.getUrl()%>">\r\n            <img src="<%=item.getAvatarImageSrc()%>" />\r\n        </a>\r\n\r\n        <%if (item.getCategoryName()) { %> \r\n        <div class="item-subline">\r\n            <span class="icon icon-category"></span>\r\n            <span><%=item.getCategoryName()%></span>\r\n        </div>\r\n        <% } %>\r\n        \r\n        <div class="item-subline">\r\n            <div class="action-item <%= item.isLiked() ? \'liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>">\r\n                <i class="icon icon-activity-like"></i>\r\n                <span class="text-info"><%= item.getTotalMembers() %></span>\r\n            </div>\r\n        </div>\r\n        <div class="item-description">\r\n            <span><%=item.getStrippedText().substr(0,1000)%></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n';});


define('text!page/tpl/page-setting.html',[],function () { return '<div class="setting-list">\r\n    <a class="setting-item" href="#pages/edit/<%= item.getId() %>">\r\n        <%= _t(\'edit\') %>\r\n    </a>\r\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\r\n        <%= _t(\'delete\') %>\r\n    </a>\r\n    <a class="setting-item" href="#pages/invite/<%=item.getId()%>">\r\n        <%= _t(\'invite\') %>\r\n    </a>\r\n</div>\r\n';});

define('page/view/page-setting',[
    'text!page/tpl/page-setting.html'
],function(text){
    return Backbone.PopupView.extend({
        template: _.template(text)
    });
});


define('page/view/page-item',[
    'text!page/tpl/page-item.html',
    'text!page/tpl/page-item-my.html',
    'page/view/page-setting'
], function (text, textMy, SettingView) {

    return Backbone.ItemView.extend({
        settingView: SettingView,
        className: 'page-item',
        template: _.template(text),
        events: {},
        render: function (context) {

            this.context = $.extend({}, context);

            // replace my item html that has the setting icon
            if (this.context.sView == 'my') {
                this.template = _.template(textMy)
            }

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function (inject) {

            inject(this.$el);

            return this;
        },
        doDeleteConfirm: function (evt, data) {

            var self = this;

            utils.modal.confirm(_t('Are you sure you want to delete this page?'), function (selected) {

                if (selected == 1) {

                    utils.popup.close();

                    utils.observer.trigger('blockui');

                    utils.api.post('pages/delete', {iPageId: self.model.getId()})
                        .done(function(data){

                            if (data.error_code && data.error_code > 0) {
                                return utils.model.alert(data.error_message || _t('Can not load data from server'))
                            }

                            self.deleteSuccess(data);
                        })
                        .always(function () {

                            utils.observer.trigger('releaseui');

                        });
                }
            }, _t('Confirm'), [_t('Delete'), _t('Cancel')]);
        },
        deleteSuccess: function (data) {

            utils.modal.toast(data.message || _t('Your page has been deleted'));

            this.$el.remove();
        }
    });
});

define('text!page/tpl/page-list.html',[],function () { return '<div class="loading-initiator">\r\n    <!-- loading ... -->\r\n</div>\r\n';});

define('page/view/page-list',[
    'page/model/page',
    'page/view/page-item',
    'text!page/tpl/page-list.html'
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfPage: 10,
            sSearch: ""
        },
        api: "pages/fetch",
        followById: false,
        phraseNotFound: _t('စာမ်က္ႏွာ မရွိေသးပါ။'),
        phraseNotMore: _t('စာမ်က္ႏွာ မရွိေသးပါ။'),
        className: 'page-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});
define('page/view/page-index',[
    'text!page/tpl/page-index.html',
    'page/view/page-search',
    'page/view/page-list'
], function(text, SearchView, ListView){

    return Backbone.PolyplatformView.extend({
        moduleId: 'page/view/page-index',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {    //pass data to view

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            this.$listHolder = this.$el.find('#page_list_holder');

            return this;    // chain function call
        },
        inject: function(){

            var self = this;

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            // create and inject search view

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            this.searchView.on('submit', function (data) {
                self.listView.phraseNotFound = _t('No pages found.');
                self.listView.resetQuery($.extend({}, self.query, data));
            });

            // create and inject list view

            this.listView = new ListView({}, this.$listHolder, this.$scroller);

            this.listView.render(this.query).inject();


            return this;
        }
    });
});

define('page/controller/page-index',[
    'page/view/page-index'
], function(IndexView){

    var IndexController = function(){

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'all'
        }).inject();
    }

    var MyController = function(){

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'my',
            iUserID: Backbone.iUserId
        }).inject();
    }

    utils.router.route('pages', IndexController);

    utils.router.route('pages/my/0', MyController);
});


define('text!page/tpl/page-add.html',[],function () { return '<!-- page/tpl/page-add.html -->\r\n<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top" rel="back">\r\n            <%= _t(\'cancel\') %>\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <div class="btn-top" id="save_btn"><%= _t(\'save\') %></div>\r\n    </div>\r\n    <div class="header-center">\r\n        <div class="title">\r\n            <%= _t(\'create_new_page\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div id="page-add">\r\n                <div class="loading-initiator">\r\n                    <!-- Loading\t\t\t\t -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});


define('text!page/tpl/page-add-form.html',[],function () { return '<div class="page-add-form">\r\n    <div class="form-general">\r\n        <!--type-->\r\n        <div class="form-title">\r\n            <%= _t(\'category\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <select class="control-full" id="page_form_type">\r\n                <%_.each(category_options, function (option) {%>\r\n                <option value="<%=option.type_id%>"><%=option.name%></option>\r\n                <%});%>\r\n            </select>\r\n        </div>\r\n        <div class="form-group">\r\n             <select class="control-full" id="page_form_category">\r\n                <option value=""><%= _t(\'select_a_category\')%></option>\r\n                <%_.each(category_options[0].sub_categories, function (subCategory) {%>\r\n                <option value="<%=subCategory.category_id%>"><%=subCategory.name%></option>\r\n                <%});%>\r\n            </select>\r\n        </div>\r\n        <!--name-->\r\n        <div class="form-title">\r\n            <%= _t(\'name\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <input type="text" class="control-full" id="page_form_title" placeholder="<%= _t(\'name\') %>"/>\r\n        </div>\r\n\r\n        <div class="form-title">\r\n            <%= _t(\'information\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <textarea class="control-full textarea" id="page_form_info" placeholder="<%= _t(\'information\') %>"></textarea>\r\n        </div>\r\n    </div>\r\n</div>';});


define('text!page/tpl/page-attachment-photo.html',[],function () { return '<div class="attachment-photo-item">\r\n\t<span class="attachment-photo-image" id="page_form_photo" data-src="<%= imageURI %>">\r\n        <img src="<%=imageURI%>" />\r\n    </span>\r\n    <div id="page_form_photo_remove" class="close_button"></div>\r\n</div>';});

define('page/view/page-add',[
    'page/model/page',
    'text!page/tpl/page-add.html',
    'text!page/tpl/page-add-form.html',
    'text!page/tpl/page-attachment-photo.html'
], function(Model, text, formText, textAttachmentPhoto){

    return Backbone.PolyplatformView.extend({
        moduleId: 'page/view/page-add',
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#page-add'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        events:{
//            "click #form_avatar_browse": "browsePhoto",
//            "click #form_cover_browse": "browsePhoto",
//            "click #page_form_photo_remove": "removePhoto",
            "click #save_btn": "saveData"
        },
        render: function() {

            this.$el.html(this.template());

            this.$el.attr('id', 'page_add');

            this.$form_holder = this.$el.find(this.region.formHolder);

            return this;
        },

        inject: function() {

            var self = this;

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            // get page creation data (privacy settings, categories
            this.fetchData();

            return this;
        },

        fetchData: function() {

            utils.api.get('pages/formadd', {}, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },

        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {

                utils.modal.alert(data.error_message || _t('Can not load data from server'));

                return utils.history.back();
            }

            this.formData = data;

            this.updateView();
        },

        fetchDataFail: function() {

            utils.debug.log(arguments);

            utils.history.back();
        },

        updateView: function() {

            var self = this;

            this.$form_holder.html(this.formTemplate(this.formData));

            var $typeOptions = this.$('#page_form_type');

            var $categoryOptions = this.$('#page_form_category');

            // update category list when type is changed
            $typeOptions.change(function() {
				/* var html='<option value="">'+_t('select_a_category')+'</option>'+_.each(category_options[0].sub_categories, function (subCat){
                     +'<option value="'+subCat.category_id+'">'+subCat.name+'</option>';
					//$categoryOptions.append(new Option(subCat.category_id, subCat.category_id));
					
                });
				$categoryOptions.append(html); 
				*/	
                $categoryOptions.empty();

                $categoryOptions.append(new Option(_t('select_a_category'), ''));

                _.each(_.findWhere(self.formData.category_options, {type_id: this.value}).sub_categories, function(subCat){
                   $categoryOptions.append("<option value="+subCat.category_id+">"+subCat.name+"</option>");
				//$categoryOptions.append(new Option(subCat.name, subCat.category_id));
                });
            });
        },

        // upload data for new page
        saveData: function (){

            // do nothing if the button is clicked
            if ($('#save_btn').hasClass("processing")) {
                return;
            }

            var page_title = $('#page_form_title').val();   // sTitle
            var page_info = $('#page_form_info').val();  // sInfo
            var page_type = $('#page_form_type').val();         // iTypeId
            var page_category = $('#page_form_category').val(); // iCategoryId

            if (!page_title) {

                utils.modal.alert(_t('Page name cannot be empty.'));

                $('#page_form_title').focus();

                return;
            }

            var data = {
                "sTitle": page_title,
                "sInfo": page_info,
                "iTypeId": page_type,
                "iCategoryId": page_category
            };

            var settings = {
                "beforeSend": this.beforeSend,
                "complete": this.completeSend
            };

            utils.api.post('pages/create', data, settings).done(this.saveDone).fail(this.saveFailed);
        },
        beforeSend: function(){

            $('#save_btn').addClass("processing");
        },
        completeSend: function(){

            $('#save_btn').removeClass("processing");
        },
        saveDone: function(data) {

            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }

            // save success
            utils.modal.toast("Page has been created successfully.");

            utils.history.back();
        },
        saveFailed: function(data){

            utils.debug.log(arguments);
        }

    });
});
define('page/controller/page-add',[
    'page/model/page',
    'page/view/page-add'
], function(Model, AddPageView) {

    function AddPageController() {

        utils.observer.trigger('router:changed');

        new AddPageView({
            model: new Model({})
        }).render().inject();
    }

    utils.router.route('page/add', AddPageController);
});

define('text!page/tpl/page-edit.html',[],function () { return '<!-- page/tpl/page-add.html -->\r\n<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top" rel="back">\r\n            <%= _t(\'cancel\') %>\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <div class="btn-top" id="save_btn"><%= _t(\'save\') %></div>\r\n    </div>\r\n    <div class="header-center">\r\n        <div class="title">\r\n            <%= _t(\'edit\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div id="page-edit">\r\n                <div class="loading-initiator">\r\n                    <!-- Loading\t\t\t\t -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});


define('text!page/tpl/page-edit-form.html',[],function () { return '<div class="page-add-form">\r\n    <div class="form-general">\r\n\r\n        <div class="form-title">\r\n        <%= _t(\'cover_photo\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <div id="page_form_cover_holder">\r\n                <!-- page cover will be added here --> \r\n            </div>\r\n            <input class="btn btn-form-photo-cover" type="button" id="page_form_photo_browse" />\r\n        </div>\r\n\r\n        <div class="form-title">\r\n            <%= _t(\'category\') %>\r\n        </div>\r\n\r\n        <!--type-->\r\n        <div class="form-group">\r\n            <select class="control-full" id="page_form_type">\r\n                <%_.each(item.getCategoryOptions(), function (option) {%>\r\n                <option value="<%=option.type_id%>" <%if (option.type_id == item.getTypeId()) {%>selected="selected"<%}%>><%=option.name%></option>\r\n                <%});%>\r\n            </select>\r\n        </div>\r\n        <div class="form-group">\r\n            <select class="control-full" id="page_form_category">\r\n                <option value=""><%= _t(\'select_a_category\')%></option>\r\n                <%_.each(_.findWhere(item.getCategoryOptions(), {type_id: item.getTypeId()}).sub_categories, function (subCategory) {%>\r\n                <option value="<%=subCategory.category_id%>" <%if (subCategory.category_id == item.getCategoryId()) {%>selected="selected"<%}%>><%=subCategory.name%></option>\r\n                <%});%>\r\n            </select>\r\n        </div>\r\n        <!--name-->\r\n        <div class="form-title">\r\n            <%= _t(\'name\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <input type="text" class="control-full" id="page_form_title" placeholder="<%= _t(\'Name\') %>" value="<%=item.getTitle()%>"/>\r\n        </div>\r\n\r\n        <div class="form-title">\r\n            <%= _t(\'information\') %>\r\n        </div>\r\n        <div class="form-group">\r\n            <textarea class="control-full textarea" id="page_form_info" placeholder="<%= _t(\'Information\') %>"><%=item.getText()%></textarea>\r\n        </div>\r\n\r\n        <div class="form-title">\r\n        <%= _t(\'avatar\') %>\r\n        </div>\r\n        <div class="form-group">\r\n        <div id="page_form_avatar_holder">\r\n        <!-- page avatar will be added here -->\r\n        </div>\r\n        <input class="btn btn-form-photo" type="button" id="page_form_photo_browse" />\r\n        </div>\r\n\r\n    </div>\r\n</div>';});

define('page/view/page-edit',[
    'page/model/page',
    'text!page/tpl/page-edit.html',
    'text!page/tpl/page-edit-form.html',
    'text!page/tpl/page-attachment-photo.html'
], function(Model, text, formText, textAttachmentPhoto) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'page/view/page-edit',
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#page-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        events: {
            "click #page_form_photo_browse": "browsePhoto",
            "click #page_form_photo_remove": "removePhoto",
            "click #save_btn": "saveData"
        },
        render: function () {

            this.$el.html(this.template());

            this.$el.attr('id', 'page_edit');

            this.$form_holder = this.$el.find(this.region.formHolder);

            return this;
        },

        inject: function () {

            var self = this;

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            // get page data
            this.fetchData();

            return this;
        },

        fetchData: function () {

            utils.api.get('pages/formedit', {
                iPageId: this.model.getId()
            }, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },

        fetchDataComplete: function (data) {

            if (data.error_code && data.error_code > 0) {

                utils.modal.alert(data.error_message || _t('Can not load data from server'));

                return utils.history.back();
            }

            this.formData = data;

            this.model.set(data);

            this.updateView();
        },

        fetchDataFail: function() {

            utils.debug.log(arguments);

            utils.history.back();
        },

        updateView: function(){

            var self = this;

            this.$form_holder.html(this.formTemplate({
                item: this.model
            }));

            // show cover

            var cover_photo_src = this.model.getCoverImageSrc();

            var cover_photo_holder = $('#page_form_cover_holder');

            if (cover_photo_src) {

                var cover_photo_item = _.template(textAttachmentPhoto, {imageURI: cover_photo_src});

                cover_photo_holder.html(cover_photo_item);

                cover_photo_holder.siblings().hide();
            }

            // show avatar

            var avatar_photo_src = this.model.getAvatarImageSrc();

            var avatar_photo_holder = $('#page_form_avatar_holder');

            if (avatar_photo_src) {

                var avatar_photo_item = _.template(textAttachmentPhoto, {imageURI: avatar_photo_src});

                avatar_photo_holder.html(avatar_photo_item);

                avatar_photo_holder.siblings().hide();
            }

            var $typeOptions = this.$('#page_form_type');

            var $categoryOptions = this.$('#page_form_category');

            // update category list when type is changed
            $typeOptions.change(function() {

                $categoryOptions.empty();

                $categoryOptions.append(new Option(_t('select_a_category'), ''));

                _.each(_.findWhere(self.formData.category_options, {type_id: this.value}).sub_categories, function(subCat){
                    $categoryOptions.append("<option value="+subCat.category_id+">"+subCat.name+"</option>");
					//$categoryOptions.append(new Option(subCat.name, subCat.category_id));
                });
            });
        },

        browsePhoto: function (evt) {

            var self = this;

//            self.addPhoto('asd', evt.target);

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.addPhoto(imageURI, evt.target);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },

        addPhoto: function(imageURI, el){

//            var photo_item = _.template(textAttachmentPhoto, {imageURI: "http://www.sandiego.gov/park-and-recreation/graphics/missionhills.jpg"});

            var photo_item = _.template(textAttachmentPhoto, {imageURI: imageURI});

            $(el).siblings().html(photo_item)
            $(el).hide();
        },

        removePhoto: function (evt) {

            utils.modal.confirm(_t('Are you sure?'), function(selected) {

                if (selected == 1) {

                    // show add photo button and remove current image
                    $(evt.target).parent().parent().siblings().show();
                    $(evt.target).parent().parent().empty();
                }
            });
        },

        // save page
        saveData: function () {

            var self = this;

            // do nothing if the button is clicked
            if ($('#save_btn').hasClass("processing")) {
                return;
            }

            // collect data from form elements
            var page_title = $('#page_form_title').val();   // sTitle
            var page_info = $('#page_form_info').val();  // sInfo
            var page_type = $('#page_form_type').val();         // iTypeId
            var page_category = $('#page_form_category').val(); // iCategoryId

            if (!page_title) {
                utils.modal.alert(_t('Page name cannot be empty.'));

                $('#page_form_title').focus();

                return;
            }

            var sendData = {
                "iPageId": this.model.getId(),
                "sTitle": page_title,
                "sInfo": page_info,
                "iTypeId": page_type,
                "iCategoryId": page_category
            };

            // get avatar and upload if found
            var avatar_photo_src = $('#page_form_avatar_holder > div > span').data('src');

            // check if user chose a photo or not
            if (typeof avatar_photo_src !== 'undefined' && avatar_photo_src.substring(0,4) != 'http') {
                var params = {
                    sAction: 'edit',
                    iPageId: this.model.getId()
                }

                utils.api.uploadImage('pages/update_avatar', avatar_photo_src, params).done( function(data){

                    // combine return data and send data
                    $.extend(sendData, data);

                    self.uploadAvatarDone(sendData);
                }).fail(this.uploadFail);
            } else {

                self.uploadAvatarDone(sendData);
            }
        },

        // avatar is uploaded or no need to upload
        uploadAvatarDone: function(sendData) {

            var self = this;

            // get and check cover
            var cover_photo_src = $('#page_form_cover_holder > div > span').data('src');

            if (typeof cover_photo_src !== 'undefined' && cover_photo_src.substring(0,4) != 'http') {

                var params = {
                    sAction: 'edit',
                    iPageId: this.model.getId()
                }

                utils.api.uploadImage('pages/edit_cover', cover_photo_src, params).done( function(data){
                    $.extend(sendData, data);

                    self.uploadCoverDone(sendData);
                }).fail(this.uploadFail);
            } else {

                self.uploadCoverDone(sendData);
            }
        },

        // avatar is uploaded or no need to upload
        uploadCoverDone: function(sendData) {

            var settings = {
                "beforeSend": this.beforeSend,
                "complete": this.completeSend
            };

            utils.api.post('pages/edit', sendData, settings).done(this.saveDone).fail(this.saveFailed);

        },
        uploadFail: function(data) {

        },
        beforeSend: function(){

            $('#save_btn').addClass("processing");
        },
        completeSend: function(){

            $('#save_btn').removeClass("processing");
        },
        saveDone: function(data) {

            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }

            // save success
            utils.modal.toast("Page has been edited successfully.");

            utils.history.back();
        },
        saveFailed: function(data){

            utils.debug.log(arguments);
        }
    });
});
define('page/controller/page-edit',[
    'page/model/page',
    'page/view/page-edit'
], function(Model, EditPageView) {

    function EditPageController(id) {

        utils.observer.trigger('router:changed');

        new EditPageView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    }

    utils.router.route('pages/edit/:id', EditPageController);
});

define('text!page/tpl/page-more-menu.html',[],function () { return '<div class="setting-list">\r\n    <a class="setting-item <%if (context.activeModule == \'photo\') {%>current<%}%>" href="#pages/<%= item.getId() %>/photos">\r\n        <%= _t(\'photos\') %>\r\n    </a>\r\n    <a class="setting-item <%if (context.activeModule == \'event\') {%>current<%}%>" href="#pages/<%= item.getId() %>/events">\r\n        <%= _t(\'events\') %>\r\n    </a>\r\n    <a class="setting-item <%if (context.activeModule == \'video\') {%>current<%}%>" href="#pages/<%= item.getId() %>/videos">\r\n        <%= _t(\'videos\') %>\r\n    </a>\r\n    <a class="setting-item <%if (context.activeModule == \'music\') {%>current<%}%>" href="#pages/<%= item.getId() %>/music_songs">\r\n        <%= _t(\'music\') %>\r\n    </a>\r\n    <a class="setting-item <%if (context.activeModule == \'blog\') {%>current<%}%>" href="#pages/<%= item.getId() %>/blogs">\r\n        <%= _t(\'blogs\') %>\r\n    </a>\r\n</div>\r\n';});

define('page/view/page-more-menu',[
    'text!page/tpl/page-more-menu.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                activeModule: ''
            }, context);

            this.$el.html(this.template({
                item: this.model,
                context: this.context
            }));

            return this;
        },
        events: {
            'touchend a': 'hideMenu'
        },
        hideMenu: function(evt) {
            if (utils.popup.isShown()) {
                utils.popup.close();
            }
        }
    });
});

define('text!page/tpl/page-top-menu.html',[],function () { return '<div class="setting-list">\r\n    <%if (item.canDislike()) {%>\r\n    <div class="menu-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\r\n    <div class="menu-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\r\n        <%= item.isDisliked() ? _t(\'remove_dislike\') : _t(\'dislike\')%>\r\n    </div>\r\n    <%}%>\r\n    <%if (item.isOwner()) {%>\r\n    <a class="setting-item" href="#pages/edit/<%=item.getId()%>">\r\n        <%= _t(\'edit\') %>\r\n    </a>\r\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\r\n        <%= _t(\'delete\') %>\r\n    </a>\r\n    <%}%>\r\n    <%if (item.canInvite()) {%>\r\n    <a class="setting-item" href="#pages/invite/<%=item.getId()%>"><%= _t(\'invite\') %></a>\r\n    <%}%>\r\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'share\') %>"><%= _t(\'share\') %></a>\r\n</div>';});

define('page/view/page-top-menu',[
    'text!page/tpl/page-top-menu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
], function(text, DislikeCollection, DislikeDetailView) {
    return Backbone.TopMenuView.extend({
        template: _.template(text),
        render: function() {
            var self = this;

            this.$el.html(this.template({
                item: this.model
            }));

            this.$dislikeHolder = this.$el.find('#dislike-list');

            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));

            this.model.on('change:iTotalDislike change:bIsDisliked', function() {
                self.updateView();
            });

            return this;
        },
        inject: function() {
            this.model.dislikes = new DislikeCollection();

            this.model.dislikes.add(this.model.getUserDislike());

            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);

            utils.popup.open(this.$el);

            return this;
        },
        hide: function() {
            utils.popup.close();

            return this;
        },
        updateView: function() {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
            this.$dislikeHolder.toggleClass('hide', bHide);

            var sText = this.model.isDisliked() ? _t('remove_dislike') : _t('dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});

define('text!page/tpl/user-list-popup.html',[],function () { return '<div id="like-list-wrapper">\n    <div class="popup-title"><%=(type == \'admin\') ? _t(\'Admins\') : _t(\'people_who_liked_this\')%></div>\n    <div id="like-list-content" class="swiper-container">\n        <div class="swiper-wrapper">\n            <div class="swiper-slide">\n                <div id="like-list-holder" class="like-list-holder">\n                    <%_.each(items, function(item) {%>\n                    <div class="like_item">\n                        <a href="#user/<%=item.user_id%>">\n                            <img src="<%=item.user_image%>" />\n                            <span><%=utils.str.shorten(item.full_name, 22)%></span>\n                        </a>\n                    </div>\n                    <%});%>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>';});

define('page/view/user-list-popup',[
    'text!page/tpl/user-list-popup.html'
], function(text) {

    return Backbone.View.extend({
        events: {},
        region: {
            scroller: '#popup_content',
            holder: '#user_list_holder',
        },
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                type: '',
                items: []
            }, context);

            this.$el.html(this.template(this.context));

            this.$scroller = this.$el.find(this.region.scroller);

            this.$list_holder = this.$el.find(this.region.holder);

            return this;
        },
        inject: function() {

            utils.popup.open(this.$el);

            if (constants.os_version < '30') {
                this.$scroller.ensureSwiper();
            }

            return this;
        }
    });
});

define('text!page/tpl/page-detail-info-update.html',[],function () { return '<!-- page/tpl/page-detail-info-update.html -->\r\n<div class="page-detail-info-content <%if (item.getCoverImageSrc()==\'\') { %>no-cover<% } %>">\r\n\r\n    <%if (item.getCoverImageSrc()) { %>\r\n        <div class="item-cover" style="background-image:url(<%= item.getCoverImageSrc() %>);"></div>\r\n    <% } %>\r\n\r\n    <div class="item-avatar" style="background-image:url(<%= item.getAvatarImageSrc() %>);"></div>\r\n\r\n    <div class="item-content-top">\r\n        <div class="item-headline item-title">\r\n            <span><%=item.getTitle()%></span>\r\n        </div>\r\n        \r\n        <%if (item.getCategoryName()) { %>\r\n        <div class="item-subline">\r\n            <span class="icon icon-category"></span>\r\n            <span><%=item.getCategoryName()%></span>\r\n        </div>\r\n        <% } %>\r\n    </div>\r\n\r\n    <%if (item.getText()) { %>\r\n    <div class="item-description">\r\n        <span><%=utils.str.shorten(item.getParsedText(), 250, true)%></span>\r\n    </div>\r\n    <% } %>\r\n</div>\r\n\r\n<!--Liked and Admins list, copied style from events-->\r\n<div class="event-item-extra" id="page_member_list">\r\n    <div class="action-item <%= item.isLiked() ? \'liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n        <span class="text-info"><%=item.getTotalMembers()%></span>\r\n        <i class="icon icon-activity-like"></i>\r\n    </div>\r\n    <div class="item-text"><%= _t(\'liked\') %></div>\r\n    <div class="clearfix">\r\n        <%_.each(item.getMemberListMin(), function (member) {%>\r\n        <a href="#user/<%=member.user_id%>" id="<%=member.user_id%>">\r\n            <img src="<%=member.user_image%>" height="48">\r\n        </a>\r\n        <%});%>\r\n        <%if (item.getTotalMembers() > 18) {%>\r\n        <span class="more-link" id="more_members_btn"><%=_t(\'more\')%></span>\r\n        <%}%>\r\n    </div>\r\n</div>\r\n\r\n<div class="event-item-extra" id="page_admin_list">\r\n    <div class="item-stats guest-count"><span class="stats-number"><%=item.getTotalAdmins()%></span><i class="icon icon-user"></i></div>\r\n    <div class="item-text"><%= _t(\'Admin\') %></div>\r\n    <div class="clearfix">\r\n        <%_.each(item.getAdminListMin(), function (admin) {%>\r\n        <a href="#user/<%=admin.user_id%>">\r\n            <img src="<%=admin.user_image%>" height="48">\r\n        </a>\r\n        <%});%>\r\n        <%if (item.getTotalAdmins() > 18) {%>\r\n        <span class="more-link" id="more_admins_btn"><%=_t(\'more\')%></span>\r\n        <%}%>\r\n    </div>\r\n</div>\r\n\r\n';});


define('text!page/tpl/page-detail-info.html',[],function () { return '<!-- page/tpl/page-detail-info.html -->\r\n<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top btn-back" rel="back">\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <div class="btn-top btn-more hide" id="top_menu_toggle">\r\n        </div>\r\n    </div>\r\n    <div class="header-center">\r\n        <div id="page_title" class="title">\r\n            <%= _t(\'ခဏေစာင့္ပါ...\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id="top_menu_holder" class="top-menu hide"></div>\r\n\r\n<div class="content content-background with-header-footer swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div id="page_detail_info" class="page-detail-info">\r\n                <div class="loading-initiator">\r\n                    <!-- Loading\t\t\t\t -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-3 fobos">\r\n        <a class="menu-item current" href="<%=item.getUrl()%>">\r\n            <div class=""><%= _t(\'info\') %></div>\r\n        </a>\r\n        <a id="event_menu_actvity" class="menu-item" href="<%=item.getUrl()%>/activity">\r\n            <div class="sibling"><%= _t(\'activity\') %></div>\r\n        </a>\r\n        <div class="menu-item" id="footer_more_btn">\r\n            <div class="sibling"><%= _t(\'more\') %></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n';});

define('page/view/page-detail-info',[
    'page/view/page-item',
    'page/view/page-more-menu',
    'page/view/page-top-menu',
    'page/view/user-list-popup',
    'text!page/tpl/page-detail-info-update.html',
    'text!page/tpl/page-detail-info.html'
], function(ItemView, MoreMenuView, TopMenuView, UserListPopupView, textInfoUpdate, text) {

    return ItemView.extend({
        moduleId: 'page/view/page-detail-info',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        className: 'page-detail-page',
        template: _.template(text),
        topMenuView: TopMenuView,
        templateInfoUpdate: _.template(textInfoUpdate),
        render: function() {
            // define region variables

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);

            this.$scroller = this.$el.find('#content');

            this.$pageTitle = this.$el.find('#page_title');

            this.$detailInfoHolder = this.$el.find('#page_detail_info');

            this.$topMenuBtn = this.$el.find('#top_menu_toggle');

            return this;
        },
        inject: function() {
            // prepare dom

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {
            // get data

            var sendData = {
                    iPageId: this.model.getId()
                },
                settings = {
                    context: this
                };

            utils.api.get('pages/info', sendData, settings)
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {

                utils.modal.alert(data.error_message);

                utils.history.back();
            } else {

                this.model.set(data);

                this.updateView();
            }
        },
        fetchDataFail: function(error, msg) {

            msg = msg || _t('Could not fetch data');

            utils.modal.alert(msg);
        },
        updateView: function() {

            if (!this.model.canView()) {
                this.$titleLabel.html(_t('Private Page'));
                this.$detailInfoHolder.html(utils.helper.permission_deny());
            }

            this.$pageTitle.html(this.model.getTitle());

            this.$topMenuBtn.removeClass('hide');

            this.$detailInfoHolder.html(this.templateInfoUpdate({
                item: this.model
            }));

            this.$scroller.trigger('refresh');
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message);

            utils.history.back();
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu',
            'click #more_admins_btn': 'showMoreAdmins',
            'click #more_members_btn': 'showMoreMembers',
            'click #top_menu_toggle': 'toggleTopMenu',
            'click .action-item': 'updateMemberList'
        },
        showMoreMenu: function(evt) {
            // pass the model to More view
            this.moreMenu = new MoreMenuView({
                model: this.model
            });
            this.moreMenu.render().inject();
        },
        showMoreAdmins: function(evt) {

            var context = {
                type: 'admin',
                items: this.model.getAdminList()
            };

            new UserListPopupView().render(context).inject();
        },
        showMoreMembers: function(evt) {

            var context = {
                type: 'like',
                items: this.model.getMemberList()
            };

            new UserListPopupView().render(context).inject();
        },
        toggleTopMenu: function() {

            utils.topMenu.toggle(this, this.model);

            this.topMenuIsShown(false);
        },
        updateMemberList: function(evt) {

            // @TODO : update user list in realtime
            var self = this;

            setTimeout(function() {
                self.fetchData();
            }, 500);
        }
    });
});

define('text!page/tpl/page-detail-activity.html',[],function () { return '<!-- page/tpl/page-detail-activity.html -->\r\n<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top btn-back" rel="back">\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <div class="btn-top btn-more hide" id="top_menu_toggle">\r\n        </div>\r\n    </div>\r\n    <div class="header-center">\r\n        <div class="title">\r\n            <%= _t(\'page_activity\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id="top_menu_holder" class="top-menu hide"></div>\r\n\r\n<div id="activity_minibar_holder" class="clearfix">\r\n</div>\r\n\r\n<div class="content content-background with-header-footer swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <%= utils.helper.loadnew() %>\r\n        <div class="swiper-slide">\r\n            <div id="activity-list" class="swiper-list vertical-align"></div>\r\n            <%= utils.helper.loadmore() %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-3 fobos">\r\n        <a class="menu-item" href="<%=item.getUrl()%>">\r\n            <div class=""><%= _t(\'info\') %></div>\r\n        </a>\r\n        <a class="menu-item current" href="<%=item.getUrl()%>/activity">\r\n            <div class="sibling"><%= _t(\'activity\') %></div>\r\n        </a>\r\n        <div class="menu-item" id="footer_more_btn">\r\n            <div class="sibling"><%= _t(\'more\') %></div>\r\n        </div>\r\n    </div>\r\n</div>';});

define('page/view/page-detail-activity',[
    'page/view/page-item',
    'text!page/tpl/page-detail-activity.html',
    'page/view/page-top-menu',
    'page/view/page-more-menu',
    'activity/view/activity-list',
    'activity/view/activity-minibar'
], function(ItemView, text, TopMenuView, MoreMenuView, ActivityListView, ActivityMiniBarView){

    return ItemView.extend({
        region: {
            holder: '#main',
            content: '#content'
        },
        template: _.template(text),
        className: 'newsfeed-page',
        topMenuView: TopMenuView,
        events: {
            'click #top_menu_toggle': 'toggleTopMenu',
            'click #footer_more_btn': 'showMoreMenu'
//            'click #act_back_btn': 'backToInfo' @TODO back button back to Info properly without back to post status
        },
        render: function () {

            this.$el.html(this.template({item: this.model}));

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$topMenuBtn = this.$el.find('#top_menu_toggle');

            return this;
        },
        inject: function () {

            var self = this;

            $(this.region.holder).html(this.$el);

            this.$scroller = this.$el.find('#content');

            this.$scroller.ensureVerticalScroll();

            utils.api.get('pages/info', {iPageId: this.model.getId()}, {context: this})
                .done(function(data){
                    if(data.error_code && data.error_code > 0){
                        utils.modal.alert(data.error_message);
                        utils.history.back();
                    }else{
                        this.model.set(data);
                        this.updateView();
                    }
                });

            //get activity
            new ActivityListView({}, this.$el.find('#activity-list'), this.$scroller, {loadnew: true}).render({
                sItemType: 'pages',
                sParentId: 'pages',
                iItemId: this.model.getId()
            }).inject();
        },
        updateView: function(){

            this.$topMenuBtn.removeClass('hide');

            // mini bar
//            if (this.model.canComment()) {
                this.$scroller.addClass('with-topbar');

                new ActivityMiniBarView().render({
                    sItemType: this.model.getType(),
                    iItemId: this.model.getId(),
                    exclude: ['checkin']
                }).inject();
//            }
        },
        toggleTopMenu: function () {

            utils.topMenu.toggle(this, this.model);
            this.topMenuIsShown(false);
        },
        showMoreMenu: function (evt) {

            // pass the model to More view
            this.moreMenu = new MoreMenuView({model: this.model});
            this.moreMenu.render().inject();
        },
        deleteSuccess: function (data) {

            utils.modal.toast(data.message);
            utils.history.back();
        },
        backToInfo: function(){

            utils.history.push(false);

            window.location.href = this.model.getUrl();
        }
    });
});
define('page/view/page-detail-module',[
    'page/view/page-more-menu'
], function(MoreMenuView) {
    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            list_holder: '#list_holder',
            page_title: '#page_title'
        },
        activeModule: '',
        listView: null,
        searchView: null,
        template: null,
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({
                iItemId: this.model.getId(),
                sModule: 'pages'
            }, query);

            this.$el.html(this.template({
                item: this.model
            }));

            this.$list_holder = this.$el.find(this.region.list_holder);

            this.$page_title = this.$el.find(this.region.page_title);

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.fetchData();

            this.appendListView();

            this.appendSearchView();

            return this;
        },
        fetchData: function() {

            var postData = {
                iPageId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('pages/info', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.model.alert(data.error_message || _t('Can not load data from server'));
                }

                this.model.set(data);
                this.updateView();
            }).fail(function(error) {
                utils.debug.error(error);
            });
        },
        updateView: function() {

            this.$page_title.html(this.model.getTitle());
        },
        appendListView: function() {

            this.listView = new this.listView({}, this.$list_holder, this.$scroller);

            this.listView.render(this.query).inject();
        },
        appendSearchView: function() {

            this.searchView = new this.searchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });
        },
        events: {
            'click #footer_more_btn': 'showMoreMenu'
        },
        showMoreMenu: function(evt) {

            this.moreMenu = new MoreMenuView({
                model: this.model
            }).render({
                activeModule: this.activeModule
            }).inject();
        }
    });
});

define('text!page/tpl/page-detail-blogs.html',[],function () { return '<!-- page/tpl/page-detail-blogs.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n        </div>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add hide" href="#blogs/add/pages/<%=item.getId()%>" id="add_btn"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical" id="list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a class="menu-item" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n        <div class="menu-item current" id="footer_more_btn">\n            <div class="sibling"><%= _t(\'more\') %></div>\n        </div>\n    </div>\n</div>';});

define('page/view/page-detail-blogs',[
    'blog/view/blog-list',
    'blog/view/blog-search',
    'page/view/page-detail-module',
    'text!page/tpl/page-detail-blogs.html'
], function(ListView, SearchView, PageDetailModuleView, text) {
    return PageDetailModuleView.extend({
        activeModule: 'blog',
        listView: ListView,
        searchView: SearchView,
        template: _.template(text),
        updateView: function() {

            this.$add_btn = this.$el.find('#add_btn');

            this.$page_title.html(this.model.getTitle());

            if (this.model.canShareBlogs()) {
                this.$add_btn.removeClass('hide');
            }
        },
        appendSearchView: function() {

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.phraseNotFound = _t('No blogs found.');
                self.listView.resetQuery($.extend({}, self.query, data));
            });
        }
    });
});

define('text!page/tpl/page-detail-music-topmenu.html',[],function () { return '<div class="setting-list">\n    <a class="setting-item <%if (context.activeType == \'songs\') {%>current<%}%>" href="#pages/<%=item.getId()%>/music_songs">\n    \t<%=_t(\'all_songs\')%>\n    </a>\n    <a class="setting-item <%if (context.activeType == \'albums\') {%>current<%}%>" href="#pages/<%=item.getId()%>/music_albums">\n    \t<%=_t(\'all_albums\')%>\n    </a>\n</div>';});

define('page/view/page-detail-music-topmenu',[
    'text!page/tpl/page-detail-music-topmenu.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                activeType: 'songs'
            }, context);

            this.$el.html(this.template({
                context: this.context,
                item: this.model
            }));

            return this;
        },
        events: {
            'touchend a': 'hideMenu'
        },
        hideMenu: function(evt) {

            if (utils.popup.isShown()) {
                utils.popup.close();
            }
        }
    });
});

define('text!page/tpl/page-detail-music.html',[],function () { return '<!-- page/tpl/page-detail-music.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n        </div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more" id="top_menu_btn"></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical" id="list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a class="menu-item" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n        <div class="menu-item current" id="footer_more_btn">\n            <div class="sibling"><%= _t(\'more\') %></div>\n        </div>\n    </div>\n</div>';});

define('page/view/page-detail-music-songs',[
    'music/view/song-list',
    'music/view/song-search',
    'page/view/page-detail-module',
    'page/view/page-detail-music-topmenu',
    'text!page/tpl/page-detail-music.html'
], function(ListView, SearchView, PageDetailModuleView, TopMenuView, text) {
    return PageDetailModuleView.extend({
        activeModule: 'music',
        activeType: 'songs',
        listView: ListView,
        searchView: SearchView,
        topMenuView: TopMenuView,
        template: _.template(text),
        events: {
            'click #footer_more_btn': 'showMoreMenu',
            'click #top_menu_btn': 'showTopMenu'
        },        
        showTopMenu: function() {

            this.topMenu = new TopMenuView({
                model: this.model
            }).render({
                activeType: this.activeType
            }).inject();
        },
        appendSearchView: function() {

            this.searchView = new this.searchView();

            this.searchView.render(this.query).inject();

            this.searchView.$el.find('#adv_search_toggle_btn').removeClass('no-padding');
            this.searchView.$el.find('#adv_search_holder').removeClass('no-padding');            

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });
        }
    });
});
define('page/view/page-detail-music-albums',[
    'music/view/playlist-list',
    'music/view/playlist-search',
    'page/view/page-detail-music-songs'
], function(ListView, SearchView, MusicSongsView) {
    return MusicSongsView.extend({
        activeType: 'albums',
        listView: ListView,
        searchView: SearchView,
        appendSearchView: function() {

            this.searchView = new this.searchView();

            this.searchView.render(this.query).inject();

            this.searchView.$el.find('#adv_search_toggle_btn').removeClass('no-padding');
            this.searchView.$el.find('#adv_search_holder').removeClass('no-padding');            

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });
        }

    });
});

define('text!page/tpl/page-detail-photo-topmenu.html',[],function () { return '<div class="setting-list">\n    <a class="setting-item" href="#photos/add-album/pages/<%=item.getId()%>">\n    \t<%=_t(\'add_albums\')%>\n    </a>\n    <a class="setting-item <%if (context.activeType == \'albums\') {%>current<%}%>" href="#pages/<%=item.getId()%>/photo_albums">\n    \t<%=_t(\'view_albums\')%>\n    </a>\n    <a class="setting-item <%if (context.activeType == \'photos\') {%>current<%}%>" href="#pages/<%=item.getId()%>/photos">\n    \t<%=_t(\'view_photos\')%>\n    </a>\n</div>';});

define('page/view/page-detail-photo-topmenu',[
    'text!page/tpl/page-detail-photo-topmenu.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                activeType: 'photos'
            }, context);

            this.$el.html(this.template({
                context: this.context,
                item: this.model
            }));

            return this;
        },
        events: {
            'touchend a': 'hideMenu'
        },
        hideMenu: function(evt) {

            if (utils.popup.isShown()) {
                utils.popup.close();
            }
        }
    });
});

define('text!page/tpl/page-detail-photos.html',[],function () { return '<!-- page/tpl/page-detail-photos.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n        </div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top btn-more" id="top_menu_btn"></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical" id="list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a class="menu-item" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n        <div class="menu-item current" id="footer_more_btn">\n            <div class="sibling"><%= _t(\'more\') %></div>\n        </div>\n    </div>\n</div>';});

define('page/view/page-detail-photos',[
    'photo/view/photo-list',
    'photo/view/photo-search',
    'page/view/page-detail-module',
    'page/view/page-detail-photo-topmenu',
    'text!page/tpl/page-detail-photos.html'
], function(ListView, SearchView, PageDetailModuleView, TopMenuView, text) {
    return PageDetailModuleView.extend({
        activeModule: 'photo',
        activeType: 'photos',
        listView: ListView,
        searchView: SearchView,
        topMenuView: TopMenuView,
        template: _.template(text),
        events: {
            'click #footer_more_btn': 'showMoreMenu',
            'click #top_menu_btn': 'showTopMenu'
        },
        showTopMenu: function() {

            this.topMenu = new TopMenuView({
                model: this.model
            }).render({
                activeType: this.activeType
            }).inject();
        }
    });
});
define('page/view/page-detail-photo-albums',[
    'photo/view/album-list',
    'photo/view/album-search',
    'page/view/page-detail-photos'
], function(ListView, SearchView, PhotosView) {
    return PhotosView.extend({
        activeType: 'albums',
        listView: ListView,
        searchView: SearchView
    });
});

define('text!page/tpl/page-detail-videos.html',[],function () { return '<!-- page/tpl/page-detail-videos.html-->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n        </div>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add hide" href="#videos/add/pages/<%=item.getId()%>" id="add_btn"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'loading...\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="swiper-list vertical" id="list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'info\') %></div>\n        </a>\n        <a class="menu-item" href="<%=item.getUrl()%>/activity">\n            <div class="sibling"><%= _t(\'activity\') %></div>\n        </a>\n        <div class="menu-item current" id="footer_more_btn">\n            <div class="sibling"><%= _t(\'more\') %></div>\n        </div>\n    </div>\n</div>';});

define('page/view/page-detail-videos',[
    'video/view/video-list',
    'video/view/video-search',
    'page/view/page-detail-module',
    'text!page/tpl/page-detail-videos.html'
], function(ListView, SearchView, PageDetailModuleView, text) {
    return PageDetailModuleView.extend({
        activeModule: 'video',
        listView: ListView,
        searchView: SearchView,
        template: _.template(text),
        updateView: function() {

            this.$add_btn = this.$el.find('#add_btn');

            this.$page_title.html(this.model.getTitle());

            if (this.model.canShareVideos()) {
                this.$add_btn.removeClass('hide');
            }
        }
    });
});

define('text!page/tpl/page-detail-events.html',[],function () { return '<!-- page/tpl/page-detail-events.html-->\r\n<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top btn-back" rel="back">\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <a class="btn-top btn-add" href="#events/add/pages/<%=item.getId()%>"></a>\r\n    </div>\r\n    <div class="header-center">\r\n        <div class="title" id="page_title">\r\n            <%= _t(\'loading...\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id="search_view_holder">\r\n    <!-- search view here\t -->\r\n</div>\r\n\r\n<div class="content with-header-footer with-search swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div class="swiper-list vertical-align" id="list_holder">\r\n            </div>\r\n            <div class="pvs"></div>\r\n            <%= utils.helper.loadmore() %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-2 fobos">\r\n        <a class="menu-item" href="<%=item.getUrl()%>">\r\n            <div class=""><%= _t(\'info\') %></div>\r\n        </a>\r\n        <a class="menu-item" href="<%=item.getUrl()%>/activity">\r\n            <div class="sibling"><%= _t(\'activity\') %></div>\r\n        </a>\r\n        <div class="menu-item current" id="footer_more_btn">\r\n            <div class="sibling"><%= _t(\'more\') %></div>\r\n        </div>\r\n    </div>\r\n</div>';});

define('page/view/page-detail-events',[
    'text!page/tpl/page-detail-events.html',
    'event/view/event-list',
    'event/view/event-search',
    'page/view/page-detail-module'
],function(text, ListView, SearchView, PageDetailModuleView){

    return PageDetailModuleView.extend({
        activeModule: 'event',
        listView: ListView,
        searchView: SearchView,
        template: _.template(text)
    });
});
define('page/controller/page-detail',[
    'page/model/page',
    'page/view/page-detail-info',
    'page/view/page-detail-activity',
    'page/view/page-detail-blogs',
    'page/view/page-detail-music-albums',
    'page/view/page-detail-music-songs',
    'page/view/page-detail-photo-albums',
    'page/view/page-detail-photos',
    'page/view/page-detail-videos',
    'page/view/page-detail-events'
], function(Model, InfoView, ActivityView, BlogsView, MusicAlbumsView, MusicSongsView, PhotoAlbumsView, PhotosView, VideosView, EventsView) {

    var DetailController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new InfoView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var ActivityController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new ActivityView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var BlogsController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new BlogsView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var MusicAlbumsController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new MusicAlbumsView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var MusicSongsController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new MusicSongsView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var PhotoAlbumsController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new PhotoAlbumsView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var PhotosController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new PhotosView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var VideosController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new VideosView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    var EventsController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new EventsView({
            model: new Model({
                iPageId: id
            })
        }).render().inject();
    };

    utils.router.route('pages/:id', DetailController);

    utils.router.route('pages/:id/activity', ActivityController);

    utils.router.route('pages/:id/blogs', BlogsController);

    utils.router.route('pages/:id/music_albums', MusicAlbumsController);

    utils.router.route('pages/:id/music_songs', MusicSongsController);

    utils.router.route('pages/:id/photo_albums', PhotoAlbumsController);

    utils.router.route('pages/:id/photos', PhotosController);

    utils.router.route('pages/:id/videos', VideosController);

    utils.router.route('pages/:id/events', EventsController);
});

define('text!page/tpl/page-invite.html',[],function () { return '<div class="header">\r\n    <div class="header-left">\r\n        <div class="btn-top" rel="back">\r\n            <%= _t(\'cancel\') %>\r\n        </div>\r\n    </div>\r\n    <div class="header-right">\r\n        <div class="btn-top" id="invite_btn"><%= _t(\'invite\') %></div>\r\n    </div>\r\n    <div class="header-center">\r\n        <div id="page_title" class="title">\r\n            <%= _t(\'invite_members\') %>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="content with-header-footer swiper-container" id="content">\r\n    <div class="swiper-wrapper">\r\n        <div class="swiper-slide">\r\n            <div class="not-found hide" id="not_found"><%= _t(\'you_have_no_friends_you_can_invite\') %></div>\r\n            <div id="page-invite-list">\r\n                <div class="loading-initiator">\r\n                    <!-- Loading\t\t\t\t -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-2 fobos">\r\n        <a id="markall_btn" class="menu-item" href="javascript:void(0)">\r\n            <div class=""><%= _t(\'mark_all\') %></div>\r\n        </a>\r\n        <a id="unmarkall_btn" class="menu-item" href="javascript:void(0)">\r\n            <div class="sibling"><%= _t(\'unmark_all\') %></div>\r\n        </a>\r\n    </div>\r\n</div>';});


define('text!page/tpl/page-invite-item.html',[],function () { return '<label for="page_invite_<%=item.getId()%>">\r\n\t<div class="item-image" style="background-image:url(\'<%=item.getImageSrc()%>\')"></div>\r\n\t<div class="item-title"><%=item.getTitle()%></div>\r\n\t<div class="item-mark"><input id="page_invite_<%=item.getId()%>" type="checkbox" class="item-checkbox" data-id="<%=item.getId()%>" /></div>\r\n</label>';});

define('page/view/page-invite-item',[
    'text!page/tpl/page-invite-item.html'
], function(text){

    return Backbone.View.extend({
        region: {},
        className: 'page-invite-item',
        template: _.template(text),
        render: function (){

            this.$el.html(this.template({item: this.model}));

            return this;
        },
        inject: function(inject){
            inject(this.el);
        }
    });
});

define('text!page/tpl/page-invite-list.html',[],function () { return '<div class="loading-initiator"></div>';});

define('page/view/page-invite-list',[
    'user/model/user',
    'page/view/page-invite-item',
    'text!page/tpl/page-invite-list.html'
],function(Model, ItemView, text){

    return Backbone.ListView.extend({
        defaults: {
            iPageId: 0,
            sAction: "all",
            amountOfFriend: "999",
            LastFriendIdViewed: "0"
        },
        followById: false,
        api: 'pages/getinvitepeople',
        phraseNotFound: 'No friends found.',
        phraseNotMore: 'No more friends.',
        className: 'friend-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});


define('page/view/page-invite',[
    'text!page/tpl/page-invite.html',
    'page/view/page-invite-list'
], function(text, ListView) {

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            listViewHolder: '#page-invite-list'
        },
        template: _.template(text),
        render: function() {

            this.$el.html(this.template());

            this.$scroller = this.$el.find(this.region.scroller);

            this.$listViewHolder = this.$el.find(this.region.listViewHolder);

            this.$inviteBtn = this.$el.find('#invite_btn');

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            // get friend list
            this.listView = new ListView({}, this.$listViewHolder, this.$scroller, {
                loadmore: false,
                loadnew: false
            });

            this.listView.render({
                iPageId: this.model.getId()
            }).inject();

            return this;
        },
        events: {
            "click .page-invite-item": "clickItem",
            "click #markall_btn": "markAll",
            "click #unmarkall_btn": "unMarkAll",
            "click #invite_btn": "invite"
        },
        markAll: function(evt) {

            $(':checkbox').prop('checked', true);
        },
        unMarkAll: function(evt) {

            $(':checkbox').prop('checked', false);
        },
        invite: function(evt) {

            // prevent multiple touch
            if (this.$inviteBtn.isProcessing()) {
                return false;
            }

            // get user ids from elements
            var aUserId = new Array();

            $(':checkbox:checked').each(function() {
                aUserId.push($(this).data('id'));
            });

            // notify user if no friends is selected
            if (aUserId.length == 0) {

                utils.modal.alert(_t('Please select friend to invite'));

                return false;
            }

            // create data to be sent
            var data = {
                iPageId: this.model.getId(),
                sUserId: aUserId.join(',')
            };
            var settings = {
                context: this,
                timeout: 0
            };

            this.$inviteBtn.isProcessing(true);

            // post invite
            utils.api.post('pages/invite', data, settings).done(this.doInviteComplete).fail(this.doInviteFail).always(this.doInviteAlways);
        },
        doInviteComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            } else {
                utils.modal.toast('Invited member(s) successfully!');
                utils.history.back();
            }
        },
        doInviteFail: function(jqXHR, textStatus, errorThrown) {

            utils.modal.alert(_t('Can not send invite. Please try again later.'));
        },
        doInviteAlways: function() {

            this.$inviteBtn.isProcessing(false);
        }
    });
});
define('page/controller/page-invite',[
    'page/model/page',
    'page/view/page-invite'
], function(Model, PageInviteView){

    function PageInviteController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new PageInviteView({
            model: new Model({iPageId: id})
        }).render().inject();
    }

    utils.router.route('pages/invite/:id', PageInviteController);
});

define('text!page/tpl/attachment-pages.html',[],function () { return '<div class="att-item-wrapper">\r\n    <a class="att-item-image" style="background-image: url(<%= sPhoto_Url %>);" href="<%=attUrl%>">\r\n    </a>\r\n    <div class="att-col-info">\r\n        <div class="att-item-title"><a href="<%=attUrl%>"><%=utils.str.shorten(attachment.sTitle, 48)%></a></div>\r\n        <div class="att-item-description"><%=utils.str.shorten(attachment.sDescription, 96)%></div>\r\n    </div>\r\n</div>';});

define('page/view/attachment-pages',[
    'text!page/tpl/attachment-pages.html'
], function (text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-pages',
        template: _.template(text),
        render: function () {

            var item = this.model;

            var att = item.getAttachments()[0];

            var context = {
                item: item,
                attachment: att,
                sPhoto_Url: att.sPhoto_Url,
                attUrl: '#pages/' + att.iId
            };

            this.$el.html(this.template(context));

            return this;
        },
        inject: function (dom) {

            dom.html(this.el);
        }
    });
});
define('page/plugin/activity',[
    'page/view/attachment-pages'
], function(PagesAttachmentView) {

    utils.headline.add([
        'pages'
    ], function(item) {
        return _t('shared a page');
    });

    utils.headline.add(['pages_comment'], function(item) {

        var headline = item.getPosterLink();

        if (item.hasParentUser()) {
            return headline += '<i class="activity-post-via"> &rarr; </i> ' + item.getParentLink();
        }

        return headline;
    });

    utils.attachment.add(['pages'], PagesAttachmentView);
});
define('page/main',[
    'core',
    'page/controller/page-index',
    'page/controller/page-add',
    'page/controller/page-edit',
    'page/controller/page-detail',
    'page/controller/page-invite',
    'page/plugin/activity'
], function (core) {

    core.sidebar.configs.set('page',{
        icon: 'icon-sidebar-page',
        label: 'Pages',
        url: '#pages'
    });
});

define('page', ['page/main'], function (main) { return main; });

define('poll/controller/poll-add',[
    'poll/view/poll-add'
], function (AddView) {

    var AddController = function () {

//		utils.history.push();

        utils.observer.trigger('router:changed');

        new AddView().render().inject();
    }

    utils.router.route('polls/add', AddController);
});
define('poll/controller/poll-detail',[
    'poll/model/poll',
    'poll/view/poll-detail'
], function (Model, DetailView) {

    var DetailController = function (id) {

		utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iPollId: id
            })
        }).render().inject();
    }

    utils.router.route('poll/:id', DetailController);
});

define('text!poll/tpl/poll-edit-form.html',[],function () { return '<div class="poll-add-form">\n<div class="form-general" id="poll_add_form_content">\n    <!-- form content -->\n    <div class="<%if (!perms.canEditTitle()) {%>hide<%}%>">\n        <div class="form-title">\n            *<%=_t(\'Question\')%>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="poll_form_question" placeholder="<%=_t(\'Question\')%>" value="<%=item.getQuestion()%>"/>\n        </div>\n\n        <div class="form-title">\n            <%=_t(\'Privacy\')%>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="poll_form_privacy">\n                <%_.each(data.view_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getPrivacyId()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%=_t(\'Comment Privacy\')%>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="poll_form_privacy_comment">\n                <%_.each(data.comment_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getPrivacyCommentId()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%=_t(\'Public Votes\')%>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="poll_form_hide_vote">\n                <option value="0"><%=_t(\'Yes\')%></option>\n                <option value="1" <%if (item.isHideVote()) {%>selected="selected"<%}%>><%=_t(\'No\')%></option>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%=_t(\'Image\')%>\n        </div>\n        <div class="form-group">\n            <div class="clearfix" id="attachment_photo_holder">\n            </div>\n            <div id="photo_add_btn" class="btn-form-photo"></div>\n        </div>\n    </div>\n\n    <div class="<%if (!perms.canEditQuestion()) {%>hide<%}%>">\n        <div class="form-title">\n            *<%=_t(\'Answers\')%>\n        </div>\n        <%_.each(item.getAnswers(), function(answer, index) {%>\n        <div class="form-group">\n            <input type="text" class="control-full poll-form-answer" id="" value="<%=answer.getAnswer()%>" data-id="<%=answer.getId()%>" />\n            <span class="btn-form <%=(index == 0) ? \'icon-answer-plus\' : \'icon-answer-minus\'%>"></span>\n        </div>\n        <%});%>\n        <%if (item.getTotalAnswer() < 1) {%>\n        <div class="form-group">\n            <input type="text" class="control-full poll-form-answer" id="" />\n            <span class="btn-form icon-answer-plus"></span>\n        </div>\n        <%}%>\n        <%if (item.getTotalAnswer() < 2) {%>\n        <div class="form-group">\n            <input type="text" class="control-full poll-form-answer" id="" />\n            <span class="btn-form icon-answer-minus"></span>\n        </div>\n        <%}%>\n    </div>\n</div>\n</div>';});


define('text!poll/tpl/poll-edit.html',[],function () { return '<!-- poll/tpl/poll-edit.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%= _t(\'Editing Poll\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="poll-edit">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('poll/view/poll-edit',[
    'attachment/model/attachment-photo',
    'photo/view/photo-add-actions',
    'poll/model/perms',
    'poll/view/poll-add-photo-item',
    'text!poll/tpl/poll-add-form-answer.html',
    'text!poll/tpl/poll-edit-form.html',
    'text!poll/tpl/poll-edit.html'
], function(AttachmentPhotoModel, PhotoAddActionsView, PermsModel, AttachmentAddPhotoItem, formAnswerTpl, formText, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            form_holder: '#poll-edit'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        formAnswerTpl: _.template(formAnswerTpl),
        render: function(context) {

            this.context = $.extend({}, context);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                context: this.context
            }));

            this.$form_holder = this.$el.find(this.region.form_holder);
            this.$save_btn = this.$el.find('#save_btn');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iPollId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('poll/formedit', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.perms = new PermsModel(data.perms);
            if (!this.perms.canEditPoll()) {
                utils.modal.alert(_t('Your user group lacks permissions to edit that poll.'));
                return utils.history.back();
            }

            this.formData = data;
            this.model.set(data.detail);
            this.updateView();
        },
        updateView: function() {

            this.$form_holder.html(this.formTemplate({
                data: this.formData,
                item: this.model,
                perms: this.perms
            }));

            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$form_content = this.$el.find('#poll_add_form_content');
            this.$form_hide_vote = this.$el.find('#poll_form_hide_vote');
            this.$form_privacy = this.$el.find('#poll_form_privacy');
            this.$form_privacy_comment = this.$el.find('#poll_form_privacy_comment');
            this.$form_question = this.$el.find('#poll_form_question');
            this.$photo_add_btn = this.$el.find('#photo_add_btn');

            if (this.model.hasImage()) {
                this.getPictureSuccess(this.model.getImageSrc(), true);
            }
        },
        fetchDataFail: function() {

            utils.debug.log(arguments);
            utils.history.back();
        },
        events: {
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #save_btn': 'onSaveClick',
            'click .icon-answer-minus': 'removeAnswer',
            'click .icon-answer-plus': 'addAnswer',
            'keyup #poll_form_title': 'toggleSaveBtn',
            'keyup .poll-form-answer': 'toggleSaveBtn',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI, isExist) {

            var item = new AttachmentPhotoModel({
                attachment_id: 0,
                photo_url: fileURI
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder, isExist);
        },
        appendAttachmentItem: function(item, View, $holder, isExist) {

            if (!isExist) {
                this.photoUrl = item.getPhotoUrl();
            }

            this.$photo_add_btn.addClass('hide');

            var attachmentItem = new View({
                model: item
            });

            var context = {
                postDelete: isExist || false,
                iPollId: this.model.getId()
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            this.photoUrl = null;

            this.$photo_add_btn.removeClass('hide');
        },
        addAnswer: function(evt) {
            var $form_answer = this.$el.find('.poll-form-answer');
            var answerCnt = $form_answer.size();
            var answerLimit = this.perms.getMaxAnswer() || 6;

            if (answerCnt >= answerLimit) {
                return utils.modal.alert(_t('You have reached your limit.'));
            }

            this.$form_content.append(this.formAnswerTpl);
        },
        removeAnswer: function(evt) {
            var $form_answer = this.$el.find('.poll-form-answer');
            var answerCnt = $form_answer.size();

            if (answerCnt <= 2) {
                return utils.modal.alert(_t('You must have a minimum of 2 answers.'));
            }

            var $target = $(evt.currentTarget);
            $target.parent().remove();
        },
        onSaveClick: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            var sQuestion = this.$form_question.val();
            var iHideVote = this.$form_hide_vote.val();
            var sPrivacy = this.$form_privacy.val() || 'everyone';
            var sPrivacyComment = this.$form_privacy_comment.val() || 'everyone';
            var aAnswer = [];

            var $form_answer = this.$el.find('.poll-form-answer');

            _.each($form_answer, function(answer) {
                if ($(answer).val().trim()) {
                    var ansItem = {
                        answer: $(answer).val(),
                        answer_id: $(answer).data('id') || 0
                    };
                    aAnswer.push(ansItem);
                }
            });

            // validate
            if (!sQuestion.trim()) {
                return utils.modal.alert(_t('Provide a question for your poll.'));
            }

            if (aAnswer.length < 2) {
                return utils.modal.alert(_t('You need to write at least 2 answers.'));
            }

            // passed
            var postData = {
                iPollId: this.model.getId(),
                aAnswer: JSON.stringify(aAnswer),
                iHideVote: iHideVote,
                iPrivacyComment: sPrivacyComment,
                iPrivacy: sPrivacy,
                sQuestion: sQuestion
            };

            if (this.photoUrl) {
                this.savePollWithPhoto(postData);
            } else {
                this.savePoll(postData);
            }
        },
        savePollWithPhoto: function(postData, settings) {

            utils.api.uploadImage('poll/edit', this.photoUrl, postData).done(this.saveDone);
        },
        savePoll: function(postData, settings) {

            var settings = {
                context: this
            };

            this.$save_btn.addClass('processing');

            utils.api.post('poll/edit', postData, settings).done(this.saveDone).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            window.location.href = '#poll/' + data.iPollId;
        },
        toggleSaveBtn: function(evt) {

            var sQuestion = this.$form_question.val();
            var iAnswerLength = 0;

            var $form_answer = this.$el.find('.poll-form-answer');

            _.each($form_answer, function(answer) {
                if ($(answer).val().trim()) {
                    iAnswerLength++;
                }
            });

            var bDisable = (!sQuestion.trim() || iAnswerLength < 2);
            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('poll/controller/poll-edit',[
    'poll/model/poll',
    'poll/view/poll-edit'
], function(Model, EditView) {

    var EditController = function(id) {

        utils.observer.trigger('router:changed');

        new EditView({
            model: new Model({
                iPollId: id
            })
        }).render().inject();
    }

    utils.router.route('poll/:id/edit', EditController);
});

define('text!poll/tpl/poll-list.html',[],function () { return '<div class="loading-initiator">\r\n\t<!-- loading ... -->\r\n</div>\r\n';});

define('poll/view/poll-list',[
    'poll/model/poll',
    'poll/view/poll-item',
    'text!poll/tpl/poll-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfPoll: 10,
            sSearch: ""
        },
        followById: false,
        api: 'poll/fetch',
        phraseNotFound: _t('No polls found.'),
        phraseNotMore: _t('No more polls.'),
        className: 'poll-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('text!poll/tpl/poll-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'Search poll\') %>" value="" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'Latest\') %></option>\n                <option value="most_view"><%= _t(\'Most Viewed\') %></option>\n                <option value="most_liked"><%= _t(\'Most Liked\') %></option>\n                <option value="most_discussed"><%= _t(\'Most Discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'Search\') %>" />\n\t</div>\n</div>';});

define('poll/view/poll-search',[
    'text!poll/tpl/poll-search.html'
], function(text) {

    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function(query) {

            this.$el.html(this.template($.extend({}, query)));

            this.$orderInput = this.$el.find('#search_order');
            this.$keywordInput = this.$el.find('#search_keywords');
            this.$advSearchHolder = this.$el.find('#adv_search_holder');

            return this;
        },
        inject: function() {

            $(this.region.holder).html(this.$el);

            return this;
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function(evt) {
            this.$advSearchHolder.toggleClass("hide");
        },
        submitSearch: function() {

            this.$advSearchHolder.addClass('hide');

            this.trigger('submit', {
                sSearch: this.$keywordInput.val() || '',
                sOrder: this.$orderInput.val() || 'latest'
            });
        }
    });
});

define('text!poll/tpl/poll-index.html',[],function () { return '<!-- poll/tpl/poll-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add hide" id="add_btn" href="#polls/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%=utils.helper.updater()%>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'No polls found.\') %></div>\n\t\t\t<div class="swiper-list vertical" id="poll_list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item <%if (sView == \'all\') {%>current<%}%>" href="#polls">\n        \t<div class=""><%= _t(\'All Polls\') %></div>\n        </a>\n        <a class="menu-item <%if (sView == \'my\') {%>current<%}%>" href="#polls/my">\n        \t<div class="sibling"><%= _t(\'My Polls\') %></div>\n        </a>\n    </div>\n</div>';});

define('poll/view/poll-index',[
    'poll/model/perms',
    'poll/view/poll-list',
    'poll/view/poll-search',
    'text!poll/tpl/poll-index.html'
], function(PermsModel, PollListView, SearchView, text) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'poll/view/poll-index',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            this.$add_btn = this.$el.find('#add_btn');
            this.$listHolder = this.$el.find('#poll_list_holder');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.fetchData(); // fetch permissions

            this.listView = new PollListView({}, this.$listHolder, this.$scroller);

            this.listView.render(this.query).inject();

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });

            return this;
        },
        fetchData: function() {

            var settings = {
                context: this
            };

            utils.api.post('poll/perms', {}, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            this.perms = new PermsModel(data);
            if (this.perms.canAddPoll()) {
                this.$add_btn.removeClass('hide');
            }
        },
        fetchFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('[FAIL] poll/perms', arguments);
        },
    });
});
define('poll/controller/poll-index',[
	'poll/view/poll-index'
],function(IndexView){
	
	var IndexController = function (){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			sView: 'all'
		}).inject();
	}
	
	var MyController = function(){
		
		utils.history.push(true);
		
		utils.observer.trigger('router:changed');
		
		new IndexView().render({
			sView: 'my',
            iUserId: Backbone.iUserId
		}).inject();
	}
	
	utils.router.route('polls', IndexController);
	
	utils.router.route('polls/my', MyController);
});


define('text!poll/tpl/attachment-poll.html',[],function () { return '<div class="att-item-wrapper clearfix">\n\t<%if (att.hasImage()) {%>\n\t<div class="att-col-image">\n\t\t<a href="<%=att.getUrl()%>"><img class="att-item-image" src="<%=att.getImageSrc()%>" /></a>\n\t</div>\n\t<%}%>\n\t<div class="att-col-info">\n\t\t<div class="att-item-title"><a href="<%=att.getUrl()%>"><%=utils.str.shorten(att.getQuestion(), 36)%></a></div>\n\t\t<div class="att-item-description"><i class="icon-poll"></i> <%=att.getTotalVote()%></div>\n\t</div>\n</div>';});

define('poll/view/attachment-poll',[
    'poll/model/poll',
    'text!poll/tpl/attachment-poll.html'
], function(PollModel, text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-poll',
        template: _.template(text),
        render: function() {

            var item = this.model;
            var oAtt = item.getAttachments()[0];

            var att = new PollModel({
                iPollId: oAtt.iId,
                sPollImage: oAtt.sPhoto_Url,
                sQuestion: oAtt.sTitle,
                iTotalVotes: oAtt.iTotalVotes,
                bHasImage: oAtt.bHasImage
            });

            var context = {
                item: item,
                att: att
            };

            this.$el.html(this.template(context));

            return this;
        },
        inject: function(dom) {
            dom.html(this.el);
        }
    });
});
define('poll/plugin/activity',[
    'poll/view/attachment-poll'
], function(PollAttachmentView) {

    utils.headline.add([
        'poll'
    ], function(item) {
        return _t('created a poll.');
    });

    utils.attachment.add(['poll'], PollAttachmentView);
});
define('poll/main',[
	'core',
    'poll/controller/poll-add',
    'poll/controller/poll-detail',
    'poll/controller/poll-edit',
	'poll/controller/poll-index',
	'poll/plugin/activity'
],function(core){
	
	core.sidebar.configs.set('poll',{
 		icon: 'icon-sidebar-poll',
 		label: 'Polls',
 		url: '#polls'
 	});
});

define('poll', ['poll/main'], function (main) { return main; });


define('text!quiz/tpl/attachment-quiz.html',[],function () { return '<div class="att-item-wrapper">\n    <% if (attachment.sPhoto_Url) {%>\n    <div class="att-col-image">\n        <a href="<%=attUrl%>"><img class="att-item-image" src="<%=attachment.sPhoto_Url%>" /></a>\n    </div>\n    <%}%>\n\t<div class="att-col-info">\n\t\t<div class="att-item-title"><a href="<%=attUrl%>"><%=utils.str.shorten(attachment.sTitle, 48)%></a></div>\n\t\t<div class="att-item-description"><%=utils.str.shorten(attachment.sDescription, 96)%></div>\n\t</div>\n</div>';});

define('quiz/view/attachment-quiz',[
    'text!quiz/tpl/attachment-quiz.html'
], function (text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-quiz',
        template: _.template(text),
        render: function () {

            var item = this.model;
            var att = item.getAttachments()[0];

            var context = {
                item: item,
                attachment: att,
                attUrl: '#quiz/' + att.iId
            };

            this.$el.html(this.template(context));

            return this;
        },
        inject: function (dom) {
            dom.html(this.el);
        }
    });
});
define('quiz/plugin/activity',[
    'quiz/view/attachment-quiz'
], function(AttachmentView) {

    utils.headline.add([
        'quiz'
    ], function(item) {
        return _t('created a quiz');
    });

    utils.headline.add([
        'comment_quiz'
    ], function(item) {
        var itemLink = '<a href="' + item.getItemUrl() + '">quiz</a>';
        return _t('commented on %s\'s %s', item.getOwnerLink(), itemLink);
    });

    utils.attachment.add(['quiz'], AttachmentView);
});

define('text!quiz/tpl/quiz-index.html',[],function () { return '<!-- quiz/tpl/quiz-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n        <a id="add-btn" class="btn-top btn-add hide" href="#quizzes/add"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%=utils.helper.updater()%>\n\t</div>\n</div>\n\n<div id="search_view_holder"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'No quizzes found.\') %></div>\n\t\t\t<div class="swiper-list vertical" id="quiz_list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item <%if (sView == \'all\') {%>current<%}%>" href="#quizzes">\n        \t<div class=""><%= _t(\'All Quizzes\') %></div>\n        </a>\n        <a class="menu-item <%if (sView == \'my\') {%>current<%}%>" href="#quizzes/my">\n        \t<div class="sibling"><%= _t(\'My Quizzes\') %></div>\n        </a>\n    </div>\n</div>';});

define('quiz/model/quiz',[],function () {

    return Backbone.Model.extend({
        idAttribute: 'iQuizId',
        defaults: {
            sModelType: 'quiz',
            bCanView: true,
            bCanLike: true,
            bCanDislike: true,
            bCanComment: true,
            bCanShare: true
        },
        getVoteCount: function () {
            return this.get('iTotalVote') || 0;
        },
        getViewCount: function () {
            return this.get('iTotalView') || 0;
        },
        getLivetime: function () {
            return utils.moment(this.getTimestamp() * 1e3).fromNow();
        },
        isClosed: function () {
            return this.get('bIsClosed') || false;
        },
        getViewOptions: function () {
            return this.get('view_options');
        },
        getCommentOptions: function () {
            return this.get('comment_options');
        },
        getViewPrivacy: function () {
            return this.get('sViewPrivacy');
        },
        getCommentPrivacy: function () {
            return this.get('sCommentPrivacy');
        },
        hasDescription: function () {
            return this.get('sDescription') ? true : false;
        },
        getQuestions: function () {
            return this.get('questions');
        },
        getTakerList: function () {
            return this.get('takers');
        },
        getTotalTakers: function () {
            return this.get('iTakerCount') || 0;
        },
        getTotalQuestions: function () {
            return this.get('iQuestionCount') || 0;
        },
        getImageSrc: function () {
            return this.get('sImageUrl');
        },
        canTake: function () {
            return this.get('bCanTake');
        },
        getDetail:  function () {
            return this.get('detail') || '';
        },
        getTitle: function () {
            return this.get('sTitle') || this.getDetail().sTitle || '';
        },
        getDescription: function () {
            return this.get('sDescription') || this.getDetail().sDescription || '';
        },
        getViewPrivacy: function () {
            return this.get('iPrivacy') || this.getDetail().iPrivacy || 0;
        },
        getCommentPrivacy: function () {
            return this.get('iCommentPrivacy') || this.getDetail().iCommentPrivacy || 0;
        }
    });
});

define('text!quiz/tpl/quiz-item.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\n    <div class="item-image">\n        <a href="<%=item.getUrl()%>"><img src="<%=item.getImageSrc()%>" /></a>\n    </div>\n    <div class="item-content">\n        <div class="item-title">\n            <a href="<%=item.getUrl()%>"><%=utils.str.shorten(item.getTitle(), 36)%></a>\n            <%if (item.isClosed()) {%><span class="icon-quiz-lock"></span><%}%>\n        </div>\n        <div class="item-subline">\n            <div>\n                <span><%=_t(\'by\')%></span>\n                <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\n            </div>\n            <div>\n                <i class="icon icon-time"></i>\n                <span class="livetime" data-livetime="<%=item.getTimestamp()%>"> <%=item.getLivetime()%></span>\n            </div>\n        </div>\n        <div class="item-stats">\n            <div class="stat-item">\n                <span class="icon-quiz-question"></span>\n                <%=item.getTotalQuestions()%> Question<% if (item.getTotalQuestions() > 1) {%>s<%}%>\n            </div>\n            <div class="stat-item">\n                <span class="icon-quiz-answer"></span>\n                <%=item.getTotalTakers()%> Answer<% if (item.getTotalTakers() > 1) {%>s<%}%>\n            </div>\n        </div>\n    </div>\n    <div class="item-description">\n        <span><%=utils.str.shorten(item.getDescription(), 100)%></span>\n    </div>\n</div>';});

define('quiz/view/quiz-item',[
    'text!quiz/tpl/quiz-item.html'
], function (text) {

    return Backbone.ItemView.extend({
        className: 'quiz-item',
        template: _.template(text),
        render: function () {

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function (inject) {

            inject(this.$el);

            return this;
        },
        doDeleteConfirm: function (evt, data) {

            var self = this;

            utils.modal.confirm(_t("Are you sure that you want to delete this Quiz?"), function (selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');

                    utils.api.post('quiz/delete', {iQuizId: self.model.getId()})
                        .done(function(data){
                            if (data.error_code && data.error_code > 0) {
                                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                            }

                            // success
                            self.deleteSuccess(data);
                        })
                        .always(function () {
                            utils.observer.trigger('releaseui');
                            utils.popup.close();
                        });
                }
            }, _t('Confirm'), [_t('Delete'),_t('Cancel')]);
        }
    });
});

define('text!quiz/tpl/quiz-my-item.html',[],function () { return '<div class="clearfix item-wrapper" rel="link" data-url="<%=item.getUrl()%>">\n    <div class="item-setting prevent" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n        <i class="icon icon-setting"></i>\n    </div>\n    <div class="item-image">\n        <a href="<%=item.getUrl()%>"><img src="<%=item.getImageSrc()%>" /></a>\n    </div>\n    <div class="item-content">\n        <div class="item-title">\n            <a href="<%=item.getUrl()%>"><%=utils.str.shorten(item.getTitle(), 36)%></a>\n            <%if (item.isClosed()) {%><span class="icon-quiz-lock"></span><%}%>\n        </div>\n        <div class="item-subline">\n            <i class="icon icon-time"></i>\n            <span class="livetime" data-livetime="<%=item.getTimestamp()%>"><%=item.getLivetime()%></span>\n        </div>\n        <div class="item-stats">\n            <div class="stat-item">\n                <span class="icon icon-quiz-question"></span>\n                <%=item.getTotalQuestions()%> Question<% if (item.getTotalQuestions() > 1) {%>s<%}%>\n            </div>\n            <div class="stat-item">\n                <span class="icon icon-quiz-answer"></span>\n                <%=item.getTotalTakers()%> Answer<% if (item.getTotalTakers() > 1) {%>s<%}%>\n            </div>\n        </div>\n    </div>\n    <div class="item-description">\n        <span><%=utils.str.shorten(item.getDescription(), 100)%></span>\n    </div>\n</div>';});


define('text!quiz/tpl/quiz-setting.html',[],function () { return '<div class="setting-list">\n\t<a class="setting-item" href="#quizzes/edit/<%=item.getId()%>">\n\t\t<%= _t(\'Edit\') %>\n\t</a>\n\t<div class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'Delete\') %>\n\t</div>\n</div>';});

define('quiz/view/quiz-setting',[
	'text!quiz/tpl/quiz-setting.html'
],function(text){
	return Backbone.PopupView.extend({
		template: _.template(text)
	});
});

define('quiz/view/quiz-my-item',[
    'text!quiz/tpl/quiz-my-item.html',
    'quiz/view/quiz-setting'
], function (text, SettingView) {

    return Backbone.ItemView.extend({
        className: 'quiz-item',
        template: _.template(text),
        settingView: SettingView,
        render: function () {

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                item: this.model
            }));
            
            this.$closedIcon = this.$el.find('.icon-quiz-lock');

            return this;
        },
        inject: function (inject) {

            inject(this.$el);

            return this;
        },
        events: {
            'open': 'openPoll',
            'close': 'closePoll'
        },
        doDeleteConfirm: function (evt, data) {
            
            var self = this;
			
            utils.modal.confirm(_t("Are you sure that you want to delete this Quiz?"), function (selected) {
                if (selected == 1) {
                    utils.observer.trigger('blockui');
                    
                    utils.api.post('quiz/delete', {iQuizId: self.model.getId()})
                    .done(function(data){
                        if (data.error_code && data.error_code > 0) {
							return utils.modal.alert(data.error_message || _t('Can not load data from server'));
						}
						
						// success
                        self.deleteSuccess(data);
                    })
                    .always(function () {
		                utils.observer.trigger('releaseui');
		                utils.popup.close();
		            });
                }
            }, _t('Confirm'), [_t('Delete'),_t('Cancel')]);
        },
        deleteSuccess: function (data) {
        	utils.modal.toast(data.message || _t('Your quiz has been deleted'));
            this.$el.remove();
        },
        updateView: function () {
            var bIsOpening = !this.model.isClosed();
            this.$closedIcon.toggleClass('hide', bIsOpening);
        }
    });
});

define('text!quiz/tpl/quiz-list.html',[],function () { return '<div class="loading-initiator">\r\n\t<!-- loading ... -->\r\n</div>\r\n';});

define('quiz/view/quiz-list',[
    'quiz/model/quiz',
    'quiz/view/quiz-item',
    'quiz/view/quiz-my-item',
    'text!quiz/tpl/quiz-list.html',
], function (Model, ItemView, MyItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfQuiz: 10,
            sSearch: ""
        },
        followById: false,
        api: 'quiz/fetch',
        phraseNotFound: _t('No quizzes found.'),
        phraseNotMore: _t('No more quizzes.'),
        className: 'quiz-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView,
        render: function(query){
			
			this.query = $.extend({}, this.defaults, query);
			
            if (this.query.sView == 'my') {
                this.itemView = MyItemView;
                this.$el.removeClass('quiz-list').addClass('my-quiz-list');
            }
			
			this.$el.html(this.template());
            
			this.isFirst = true;
			
			return this;
		}
    });
});

define('text!quiz/tpl/quiz-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'Search quizzes\') %>" value="" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'Latest\') %></option>\n                <option value="most_view"><%= _t(\'Most Viewed\') %></option>\n                <option value="most_liked"><%= _t(\'Most Liked\') %></option>\n                <option value="most_discussed"><%= _t(\'Most Discussed\') %></option>\n            </select>\n        </div>\n\t</div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'Search\') %>" />\n\t</div>\n</div>';});

define('quiz/view/quiz-search',[
    'text!quiz/tpl/quiz-search.html'
], function (text) {

    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function (query) {

            this.$el.html(this.template($.extend({}, query)));

            this.$orderInput = this.$el.find('#search_order');
            this.$keywordInput = this.$el.find('#search_keywords');
            this.$advSearchHolder = this.$el.find('#adv_search_holder');

            return this;
        },
        inject: function () {

            $(this.region.holder).html(this.$el);

            return this;
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function (evt) {
            this.$advSearchHolder.toggleClass("hide");
        },
        submitSearch: function () {

            this.$advSearchHolder.addClass('hide');

            this.trigger('submit', {
                sSearch: this.$keywordInput.val() || '',
                sOrder: this.$orderInput.val() || 'recent'
            });
        }
    });
});
define('quiz/view/quiz-index',[
    'text!quiz/tpl/quiz-index.html',
    'quiz/view/quiz-list',
    'quiz/view/quiz-search'
], function (text, QuizListView, SearchView) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'quiz/view/quiz-index',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function () {},
        render: function (query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            this.$listHolder = this.$el.find('#quiz_list_holder');

            return this;
        },
        inject: function () {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.listView = new QuizListView({}, this.$listHolder, this.$scroller);

            this.listView.render(this.query).inject();

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function (data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });

            this.fetchData();

            return this;
        },
        fetchData: function () {

            var settings = {
                context: this
            };

            utils.api.post('quiz/perms', {}, settings).done(function(data){

                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                }

                if (data.bCanCreateQuiz) {
                    $('#add-btn').removeClass('hide');
                }
            });
        }
    });
});
define('quiz/controller/quiz-index',[
    'quiz/view/quiz-index'
],function(IndexView){

    var IndexController = function (){

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'all'
        }).inject();
    }

    var MyController = function(){

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'my',
            iUserId: Backbone.iUserId
        }).inject();
    }

    utils.router.route('quizzes', IndexController);

    utils.router.route('quizzes/my', MyController);
});

define('quiz/model/perms',[],function() {

    return Backbone.Model.extend({
        canCreateQuiz: function() {
            return this.get('bCanCreateQuiz') || false;
        },
        canEditOwnTitle: function() {
            return this.get('bCanEditOwnTitle') || false;
        },
        canEditOwnQuestion: function() {
            return this.get('bCanEditOwnQuestion') || false;
        },
        canEditOwnQuiz: function() {
            return this.canEditOwnTitle() || this.canEditOwnQuestion();
        }
    });
});

define('text!quiz/tpl/quiz-edit.html',[],function () { return '<!-- quiz/tpl/quiz-edit.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%=_t(\'Loading...\')%>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="quiz_edit_info" class="hide">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n            <div id="quiz_edit_questions" class="form-general hide">\n                <div id="quiz_edit_question_list" class="quiz-form-question-list">\n                </div>\n                <div id="add_question_btn" class="btn-quiz-add-question btn btn-primary btn-small-fluid"><%= _t(\'Add Question\') %></div>\n            </div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n    <div class="clearfix menu-justify grid-3 fobos">\n        <div class="menu-item hide" id="footer_info_btn">\n            <div class="sibling"><%= _t(\'Info\') %></div>\n        </div>\n        <div class="menu-item hide" id="footer_questions_btn">\n            <div class="sibling"><%= _t(\'Questions\') %></div>\n        </div>\n    </div>\n</div>';});


define('text!quiz/tpl/quiz-edit-form.html',[],function () { return '<div class="quiz-edit-form">\n    <div class="form-general" id="quiz_edit_form_content">\n        <!-- form content -->\n        <div class="form-title">\n            <%= _t(\'Quiz Title\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="quiz_form_title" placeholder="<%= _t(\'Quiz Title\') %>" value="<%=item.getTitle()%>" maxlength="100"/>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Description\') %>\n        </div>\n        <div class="form-group">\n            <textarea id="quiz_form_description" class="control-full textarea" placeholder="<%= _t(\'Description\') %>"><%=item.getDescription()%></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="quiz_form_privacy">\n                <%_.each(item.getViewOptions(), function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getViewPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Comment Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="quiz_form_privacy_comment">\n                <%_.each(item.getCommentOptions(), function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getCommentPrivacy()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-group">\n            <div id="quiz_form_photo_holder">\n                <!-- quiz photo will be added here -->\n            </div>\n            <input class="btn btn-form-photo" type="button" id="quiz_form_photo_browse" />\n        </div>\n    </div>\n</div>\n\n<div id="quiz_edit_form_questions" class="hide">\n\n</div>';});


define('text!quiz/tpl/quiz-form-question.html',[],function () { return '<div class="question-form" data-questionid="<%if (typeof(question_id) != \'undefined\') {%><%=question_id%><%}%>">\n    <a id="remove_question_btn" class="btn-quiz-remove-question"><%= _t(\'Remove Question\') %></a>\n    <div class="form-title question-number-title">\n        <%= _t(\'Question\') %>\n    </div>\n    <div class="form-group">\n        <input type="text" class="control-full question-title" value="<%if (typeof(question) != \'undefined\') {%><%=question%><%}%>" placeholder="<%= _t(\'Question\') %>">\n    </div>\n\n    <div class="form-title item-title"><%= _t(\'Answers\') %></div>        \n    <div class="answers-list">\n    </div>\n</div>\n';});


define('text!quiz/tpl/quiz-form-answer.html',[],function () { return '<div class="form-group single-answer <%if (typeof(is_correct) != \'undefined\' && is_correct == 1) {%>correct<%}%>" data-answerid="<%if (typeof(answer_id) != \'undefined\') {%><%=answer_id%><%}%>">\n\t<div class="quiz-group-btn">\n\t\t<a id="add_answer_btn" class="btn-quiz-add-answer"><%= _t(\'Add\') %></a>\t\n\t    <a id="remove_answer_btn" class="btn-quiz-remove-answer"><%= _t(\'Remove\') %></a>\n\t    <a id="correct_answer_btn" class="btn-quiz-correct"><%= _t(\'Correct\') %></a>\n\t</div>\n\t<div class="quiz-answer-input">\n\t\t<input type="text" name="" class="control-full answer" value="<%if (typeof(answer) != \'undefined\') {%><%=answer%><%}%>" maxlength="100">\n\t</div>\n</div>';});


define('text!quiz/tpl/quiz-attachment-photo.html',[],function () { return '<div class="attachment-photo-item">\n\t<span class="attachment-photo-image" id="quiz_form_photo" data-src="<%= imageURI %>">\n        <img src="<%=imageURI%>" />\n    </span>\n    <div id="quiz_form_photo_remove" class="close_button"></div>\n</div>';});

//@TODO edit permission
define('quiz/view/quiz-edit',[
    'quiz/model/perms',
    'text!quiz/tpl/quiz-edit.html',
    'text!quiz/tpl/quiz-edit-form.html',
    'text!quiz/tpl/quiz-form-question.html',
    'text!quiz/tpl/quiz-form-answer.html',
    'text!quiz/tpl/quiz-attachment-photo.html'
], function(PermsModel, text, formText, formQuestion, formAnswer, tplAttachPhoto) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#quiz_edit_info',
            questionsHolder: '#quiz_edit_question_list'
        },
        template: _.template(text),
        formTemplate: _.template(formText),
        formQuestion: _.template(formQuestion),
        formAnswer: _.template(formAnswer),
        render: function(context) {

            this.context = $.extend({}, context);
            this.api = (this.context.sView == 'edit') ? "quiz/edit" : "quiz/add";

            this.$el.html(this.template(this.context));
            this.$formHolder = this.$el.find(this.region.formHolder);
            this.$questionsHolder = this.$el.find(this.region.questionsHolder);
            this.$saveBtn = this.$el.find('#save_btn');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);
            this.$holder.html(this.$el);
            this.$scroller = $(this.region.scroller);
            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            // set variable according to sView : edit or add
            var api = (this.context.sView == 'edit') ? "quiz/formedit" : "quiz/formadd";

            utils.api.get(api, {
                iQuizId: this.model.getId()
            }, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            // check permissions
            this.perms = new PermsModel(data.perms);
            if ('edit' == this.context.sView) {
                if (!this.perms.canEditOwnQuiz()) {
                    utils.modal.alert(_t('You don\'t have permission to edit this item.'));
                    return utils.history.back();
                }
            } else {
                if (!this.perms.canCreateQuiz()) {
                    utils.modal.alert(_t('You don\'t have permission to add new item.'));
                    return utils.history.back();
                }
            }

            this.model.set(data);
            this.formData = data;
            this.updateView();
        },
        updateView: function(data) {
            this.$formHolder.html(this.formTemplate({
                item: this.model
            }));

            this.$pageTitle = this.$el.find('#page_title');
            this.$formTitle = this.$el.find('#quiz_form_title');
            this.$formDescription = this.$el.find('#quiz_form_description');
            this.$formPrivacy = this.$el.find('#quiz_form_privacy');
            this.$formPrivacyComment = this.$el.find('#quiz_form_privacy_comment');
            this.$photo_browse_btn = this.$el.find('#quiz_form_photo_browse');
            this.$photo_holder = this.$el.find('#quiz_form_photo_holder');
            this.$info_holder = this.$el.find('#quiz_edit_info');
            this.$questions_holder = this.$el.find('#quiz_edit_questions');
            this.$footer_info_btn = this.$el.find('#footer_info_btn');
            this.$footer_questions_btn = this.$el.find('#footer_questions_btn');

            this.minQuestion = this.formData.perms.iMinQuestion || 1;
            this.maxQuestion = this.formData.perms.iMaxQuestion || 999;
            this.minAnswer = this.formData.perms.iMinAnswer || 1;
            this.maxAnswer = this.formData.perms.iMaxAnswer || 25;

            if (this.context.sView == 'edit') {
                this.$pageTitle.html(_t('Editing Quiz'));

                if (this.perms.canEditOwnQuestion()) {
                    this.$footer_questions_btn.removeClass('hide');
                    this.updateQuestions();
                }
                if (this.perms.canEditOwnTitle()) {
                    this.$footer_info_btn.removeClass('hide');
                    this.viewInfo();
                } else {
                    this.viewQuestions();
                }
            } else {
                this.$pageTitle.html(_t('Adding Quiz'));

                this.$footer_info_btn.add(this.$footer_questions_btn).removeClass('hide');
                this.viewInfo();

                for (i = 0; i < this.minQuestion; i++) {
                    this.addQuestion({});
                }
            }

        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        events: {
            'click #save_btn': 'saveData',
            'click #footer_info_btn': 'viewInfo',
            'click #footer_questions_btn': 'viewQuestions',
            'click #add_question_btn': 'addQuestion',
            'click #remove_question_btn': 'removeQuestion',
            'click #add_answer_btn': 'addAnswer',
            'click #remove_answer_btn': 'removeAnswer',
            'click #correct_answer_btn': 'correctAnswer',
            'click #quiz_form_photo_browse': "browsePhoto",
            'click #quiz_form_photo_remove': "removePhoto"
        },
        saveData: function(evt) {
            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing')) {
                return;
            }

            var sTitle = this.$formTitle.val();
            var sDescription = this.$formDescription.val();
            var sPrivacy = this.$formPrivacy.val() || 'everyone';
            var sPrivacyComment = this.$formPrivacyComment.val() || 'everyone';

            // validate
            if (!sTitle.trim()) {
                return utils.modal.alert(_t('Title is required.'));
            }

            if (!sDescription.trim()) {
                return utils.modal.alert(_t('Description is required.'));
            }

            if (!this.collectQuestions()) {
                utils.modal.alert(_t('Questions and answers cannot be empty'))
                return;
            }

            // passed
            var postData = {
                iQuizId: this.model.getId(),
                sTitle: sTitle,
                sDescription: sDescription,
                aQuestions: JSON.stringify(this.questionData),
                sAuthView: sPrivacy,
                sAuthComment: sPrivacyComment
            };

            var settings = {
                context: this,
                "beforeSend": this.beforeSave,
                "complete": this.saveComplete
            }

            $target.addClass('processing');

            var quiz_photo_el = $('#quiz_form_photo');


            if (quiz_photo_el.length > 0) {
                var quiz_photo_src = quiz_photo_el.data("src");
                this.saveQuizWithPhoto(this.api, postData, settings, quiz_photo_src);
            } else {
                this.saveQuiz(this.api, postData, settings);
            }
        },
        updateQuestions: function() {

            // append quiz current questions to form
            var self = this;

            //get and create questions list
            var aQuestions = this.model.getQuestions();
            _.each(aQuestions, function(question) {
                self.$questionsHolder.append(self.formQuestion(question));
                var $answersHolder = $('.answers-list:last');
                _.each(question.answers, function(answer) {
                    $answersHolder.append(self.formAnswer(answer));
                });
            });
            this.fixQuestionIndex();
            this.$scroller.trigger('refresh');
        },
        fixQuestionIndex: function() {

            // this function reset all question number
            var questionCnt = this.$questionsHolder.find('.question-form').length;

            $('.question-form').each(function(index, questionEle) {

                $(questionEle).children('.question-number-title:first').html('Question ' + (index + 1));
            });
        },
        addQuestion: function() {

            //            @TODO consider using this to add question with data when editing

            var self = this;

            var questionCnt = this.$questionsHolder.find('.question-form').length;
            //check for max question limit
            if (questionCnt >= this.maxQuestion) {
                return utils.modal.alert(_t('You can add maximum ' + this.maxQuestion + ' questions.'));
            }

            //add an question
            this.$questionsHolder.append(this.formQuestion);
            var $answersHolder = $('.answers-list:last');
            for (i = 0; i < self.minAnswer; i++) {
                $answersHolder.append(self.formAnswer);
            }
            //set the first answer to correct
            $answersHolder.find('.single-answer:first').addClass('correct');

            // fix questions index
            this.fixQuestionIndex();

            // fix scroller height
            this.$scroller.trigger('refresh');
        },
        removeQuestion: function(evt) {
            //check for minimum question limit
            var questionCnt = this.$questionsHolder.find('.question-form').length;
            if (questionCnt <= this.minQuestion) {
                return utils.modal.alert(_t('Quiz must has minimum ' + this.minQuestion + ' question(s).'));
            }

            // remove whole question
            $(evt.target).parents('.question-form').remove();

            // reset question index
            this.fixQuestionIndex();

            // fix scroller height
            this.$scroller.trigger('refresh');
        },
        addAnswer: function(evt) {

            // get current answer list according to eventt target
            var $answerList = $(evt.target).parents('.answers-list');

            // check for max question limit
            var answerCnt = $answerList.find('.single-answer').length;

            if (answerCnt >= this.maxAnswer) {
                return utils.modal.alert(_t('You can add maximum ' + this.maxAnswer + ' answers to a question.'));
            }

            // append answer to current answer list
            $answerList.append(this.formAnswer);

            // fix scroller height
            this.$scroller.trigger('refresh');
        },
        removeAnswer: function(evt) {

            var $answerList = $(evt.target).parents('.answers-list');

            // check for min question
            var answerCnt = $answerList.find('.single-answer').length;

            if (answerCnt <= this.minAnswer) {
                return utils.modal.alert(_t('Question must has minimum ' + this.minAnswer + ' answer(s).'));
            }

            // do not remove correct anser
            // @TODO maybe automatically set the first answer to corrent instead of alert
            if ($(evt.target).parents('.single-answer').hasClass('correct')) {
                return utils.modal.alert(_t('Correct answer cannot be removed.'));
            }

            // remove answer
            $(evt.target).parents('.single-answer').remove();

            // fix scroller height
            this.$scroller.trigger('refresh');
        },
        correctAnswer: function(evt) {

            // set click answer to correct, remove other correct first
            $(evt.target).parents('.single-answer').siblings('.single-answer').removeClass('correct');
            $(evt.target).parents('.single-answer').addClass('correct');
        },
        viewInfo: function(evt) {

            this.$questions_holder.addClass('hide');
            this.$info_holder.removeClass('hide');
            this.$footer_questions_btn.removeClass('current');
            this.$footer_info_btn.addClass('current');
        },
        viewQuestions: function(evt) {

            this.$info_holder.addClass('hide');
            this.$questions_holder.removeClass('hide');
            this.$footer_info_btn.removeClass('current');
            this.$footer_questions_btn.addClass('current');
        },
        collectQuestions: function() {

            var self = this;

            // create question data
            self.questionData = new Array();

            // set collect result flag default to true
            var collectResult = true;

            // get questions from question forms
            $('.question-form').each(function(index, questionEle) {

                // create temp question data to be pushed to self.questionData array
                var questionData = {};

                //get current question
                var currentQuestion = $(questionEle).find('.question-title:first').val();

                // get current ID (only affect editing)
                var currentQuestionID = $(questionEle).data('questionid') || '';

                // break and announce if data is null
                if (!currentQuestion) {
                    collectResult = false;
                    return false;
                }

                // add current question to data
                $.extend(questionData, {
                    sQuestion: currentQuestion,
                    iQuestionId: currentQuestionID
                });

                // create temporary answers data
                var answers = new Array();

                //get answers for current question
                $(questionEle).find('.single-answer').each(function(index, answerEle) {

                    // get temp current answer and check for null
                    var currentAnswer = $(answerEle).find(':text').val();
                    var currentAnswerId = $(answerEle).data('answerid') || '';
                    if (!currentAnswer) {
                        collectResult = false;
                        return false;
                    }

                    // check correct class to set if answer is correct
                    var currentAnswerResult = $(answerEle).hasClass('correct') ? 1 : 0;

                    // push an answer data to anser array
                    answers.push({
                        sAnswer: currentAnswer,
                        iAnswerId: currentAnswerId,
                        bIsCorrect: currentAnswerResult
                    });
                });

                // put answer data to temp question
                $.extend(questionData, {
                    aAnswers: answers
                });

                // add to final question data
                self.questionData.push(questionData);
            });

            return collectResult;
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.addPhoto(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        addPhoto: function(imageURI) {

            var photo_item = _.template(tplAttachPhoto, {
                imageURI: imageURI
            });

            this.$photo_holder.html(photo_item);

            this.$photo_browse_btn.addClass('hide');
        },
        saveQuiz: function(api, data, settings) {
            var self = this;

            utils.api.post(api, data, settings).done(function(data) {
                self.saveDone(data, api);
            });
        },
        saveQuizWithPhoto: function(api, data, settings, path) {
            var self = this;

            utils.api.uploadImage(api, path, data).done(function(data) {
                self.saveDone(data, api);
            });
        },
        beforeSave: function() {
            $('#save_btn').addClass("processing");
        },
        saveComplete: function() {
            $('#save_btn').removeClass("processing");
        },
        saveDone: function(data, api) {

            if (null != data.error_code && 0 != data.error_code) {
                utils.modal.alert(data.error_message);
                return;
            }
            // save success

            if (api == 'quiz/edit') {
                utils.modal.toast(_t('Quiz has been updated successfully.'));
                utils.history.back();
            } else {
                utils.modal.toast("Quiz has been created successfully.");
                window.location.href = "#quizzes/my";
            }
        },
        removePhoto: function() {

            this.$photo_holder.empty();

            this.$photo_browse_btn.removeClass('hide');
        }
    });
});
define('quiz/controller/quiz-add',[
    'quiz/model/quiz',
//    'quiz/view/quiz-add'
    'quiz/view/quiz-edit'
], function(Model, AddQuizView) {

    function AddQuizController() {

        utils.observer.trigger('router:changed');

        new AddQuizView({
            model: new Model({})
        }).render({
                sView: 'add'
            }).inject();
    }

    utils.router.route('quizzes/add', AddQuizController);
});

define('text!quiz/tpl/quiz-detail.html',[],function () { return '<!-- quiz/tpl/quiz-detail.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top btn-back" rel="back">\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title" id="page_title">\r\n\t\t\t<%= _t(\'Loading...\') %>\r\n\t\t</div>\r\n\t</div>\r\n    <div class="header-right">\r\n        <div class="btn-top btn-more" id="top_menu_toggle">\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="content content-background with-header-footer swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="quiz_detail_holder" class="quiz-detail-content">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id="activity_extra_holder" class="hide">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="footer">\r\n    <div class="clearfix menu-justify grid-3 fobos">\r\n        <a class="menu-item current" href="javascript:void(0);">\r\n            <div class=""><%= _t(\'Info\') %></div>\r\n        </a>\r\n        <a class="menu-item" href="<%=item.getUrl()%>/results">\r\n            <div class=""><%= _t(\'User Results\') %></div>\r\n        </a>\r\n    </div>\r\n</div>';});


define('text!quiz/tpl/quiz-detail-update.html',[],function () { return '<div class="quiz-detail-item">\r\n    <!--Title-->\r\n    <div class="item-headline">\r\n        <%=item.getTitle()%>\r\n    </div>\r\n    \r\n    <div class="item-content-detail clearfix">\r\n        <!--poster info-->\r\n        <a class="item-image" rel="photodetail" data-photourl="<%=item.getImageSrc()%>">\r\n            <img src="<%=item.getImageSrc()%>" />\r\n        </a>\r\n        <div class="item-content">\r\n            <div class="item-title">\r\n                <span><%=_t(\'by\')%></span>\r\n                <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>                \r\n            </div>\r\n\r\n            <div class="item-subline">\r\n                <i class="icon icon-time"></i>\r\n                <span class="livetime" data-livetime="<%= item.getTimestamp() %>"><%= item.getLivetime() %></span>\r\n            </div>\r\n\r\n            <!--<input type="button" class="btn btn-primary btn-small-fluid" id="star_quiz_btn" value="<%= _t(\'Start Quiz\') %>" />-->\r\n            <%if (item.canTake()) {%>\r\n                <a href="<%=item.getUrl()%>/start" class="btn btn-primary btn-small-fluid"><%=_t(\'Start Quiz\')%></a>\r\n            <%}%>\r\n        </div>\r\n    </div>\r\n\r\n    <!--Descriptions-->\r\n    <%if (item.hasDescription()) {%>\r\n        <div class="item-description">\r\n            <%=item.getDescription()%>\r\n        </div>\r\n    <%}%>\r\n\r\n    <div class="event-item-extra" id="page_member_list">\r\n        <div class="item-stats">\r\n            <span class="text-info"><%=item.getTotalTakers()%></span>\r\n            <span class="icon icon-quiz-answer"></span>\r\n        </div>\r\n        <div class="item-text"><%= _t(\'User Results\') %></div>        \r\n        <div class="quiz-member-list" class="clearfix">\r\n            <%_.each(item.getTakerList(), function (member) {%>\r\n            <a href="#user/<%=member.iUserId%>" id="<%=member.user_id%>">\r\n                <img src="<%=member.sImageUrl%>" height="48">\r\n            </a>\r\n            <%}, this);%>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="item-group hide" id="quiz_results_holder">\r\n    </div>\r\n</div>\r\n\r\n<div id="quiz_action_bar">\r\n    <div class="actions-justify gray">\r\n        <%if (item.canLike()) {%>\r\n        <div class="action-item <%= item.isLiked()?\' liked\':\'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n            <span class="text-info"><%= item.getLikeCount() %></span>\r\n            <i class="icon icon-activity-like"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canComment()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\r\n            <span class="text-anchor"><%= item.getCommentCount() %></span>\r\n            <i class="icon icon-activity-comment"></i>\r\n        </div>\r\n        <%}%>\r\n        <%if (item.canShare()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'share\') %>" rel="delegate">\r\n            <i class="icon icon-activity-share"></i>\r\n        </div>\r\n        <%} %>\r\n        <%if (!item.isOwner()) {%>\r\n        <div class="action-item" id="<%= item.getDataId(\'report\') %>" rel="delegate">\r\n            <i class="icon icon-activity-report"></i>\r\n        </div>\r\n        <%}%>\r\n    </div>\r\n</div>\r\n';});


define('text!quiz/tpl/quiz-top-menu.html',[],function () { return '<div class="setting-list">\n    <%if (item.canDislike()) {%>\n    <div class="menu-item <%if (this.model.getDislikeCount() < 1) {%>hide<%}%>" id="dislike-list"></div>\n    <div class="menu-item" id="<%=item.getDataId(\'dislike\')%>" rel="delegate">\n        <%= item.isDisliked() ? _t(\'Remove Dislike\') : _t(\'Dislike\')%>\n    </div>\n    <%}%>\n    <%if (item.isOwner()) {%>\n    <a class="setting-item" href="#quizzes/edit/<%=item.getId()%>">\n        <%= _t(\'Edit\') %>\n    </a>\n    <a class="setting-item" rel="delegate" id="<%= item.getDataId(\'delete\') %>">\n        <%= _t(\'Delete\') %>\n    </a>\n    <%}%>\n</div>';});

define('quiz/view/quiz-top-menu',[
    'text!quiz/tpl/quiz-top-menu.html',
    'dislike/collection/dislike',
    'dislike/view/dislike-detail'
], function(text, DislikeCollection, DislikeDetailView) {
    return Backbone.TopMenuView.extend({
        template: _.template(text),
        render: function() {
            var self = this;

            this.$el.html(this.template({
                item: this.model
            }));

            this.$dislikeHolder = this.$el.find('#dislike-list');

            this.$dislikeBtn = this.$el.find('#' + this.model.getDataId('dislike'));

            this.model.on('change:iTotalDislike change:bIsDisliked', function() {
                self.updateView();
            });

            return this;
        },
        inject: function() {
            this.model.dislikes = new DislikeCollection();

            this.model.dislikes.add(this.model.getUserDislike());

            this.$dislikeHolder.html(new DislikeDetailView({
                model: this.model
            }).render().el);

            utils.popup.open(this.$el);

            return this;
        },
        hide: function() {
            utils.popup.close();

            return this;
        },
        updateView: function() {
            var bHide = (this.model.getDislikeCount() < 1) ? true : false;
            this.$dislikeHolder.toggleClass('hide', bHide);

            var sText = this.model.isDisliked() ? _t('Remove Dislike') : _t('Dislike');
            this.$dislikeBtn.html(sText);
        }
    });
});
define('quiz/view/quiz-detail',[
    'text!quiz/tpl/quiz-detail.html',
    'text!quiz/tpl/quiz-detail-update.html',
    'quiz/view/quiz-item',
    'quiz/view/quiz-top-menu'
], function (text, textUpdate, ItemView, TopMenuView) {

    return ItemView.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            updateHolder: '#quiz_detail_holder',
            activityExtraHolder: '#activity_extra_holder'
        },
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        topMenuView: TopMenuView,
        render: function () {

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$updateHolder = this.$el.find(this.region.updateHolder);
            this.$activityExtraHolder = this.$el.find(this.region.activityExtraHolder);
            this.$pageTitle = this.$el.find('#page_title');
            this.$showResultsBtn = this.$el.find('#show_results_btn');
            this.$showAnswersBtn = this.$el.find('#show_anwsers_btn');

            this.$el.attr({
                id: this.model.getDataId()
            });

            return this;
        },
        inject: function () {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            utils.helper.addActivityExtraBlock(this.model, this.$activityExtraHolder, this.$scroller);

            return this;
        },
        fetchData: function () {
            utils.api.get('quiz/detail', {iQuizId: this.model.getId()}, {context: this})
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function (data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.updateView();
        },
        fetchDataFail: function () {
            utils.debug.log(arguments);
            utils.history.back();
        },
        updateView: function () {

            this.$pageTitle.html(this.model.getTitle());

            this.$updateHolder.html(this.templateUpdate({
                item: this.model
            }));

            this.$resultsHolder = this.$el.find('#quiz_results_holder');
            this.$answersHolder = this.$el.find('#quiz_answers_holder');
            this.$actionBar = this.$el.find('#quiz_action_bar');
            this.$activityExtraHolder.removeClass('hide');
        },
        events: {
            'click #show_results_btn': 'viewResults',
            'click #show_anwsers_btn': 'viewAnswers',
            'click .quiz-answers-item': 'votePoll',
//            'click #star_quiz_btn': 'startQuiz',
            'click #top_menu_toggle': 'toggleTopMenu'
        },
        toggleTopMenu: function () {

            utils.topMenu.toggle(this, this.model);
        },
        viewResults: function (evt) {


            this.$resultsHolder.empty();

            this.$answersHolder.add(this.$showResultsBtn).addClass('hide');
            this.$resultsHolder.add(this.$showAnswersBtn).removeClass('hide');
        },
        viewAnswers: function (evt) {

            this.$resultsHolder.add(this.$showAnswersBtn).addClass('hide');
            this.$answersHolder.add(this.$showResultsBtn).removeClass('hide');
        },
        votePoll: function (evt) {

            var $target = $(evt.currentTarget);

            if ($target.hasClass('processing') || !this.model.canVote()) {
                return;
            }

            $target.addClass('processing');

            var postData = {
                iPollId: this.model.getId(),
                iOptionId: $target.data('optionid')
            };

            var settings = {
                context: this
            };

            utils.api.post('quiz/vote', postData, settings)
                .done(function (data) {
                    if (data.error_code && data.error_code > 0) {
                        return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                    }

                    // success
                    this.voteSuccess($target, data);
                })
                .always(function () {
                    $target.removeClass('processing');
                });
        },
        voteSuccess: function ($target, data) {

            this.model.set(data);

            this.$el.find('.quiz-checkbox').removeClass('checked');
            $target.find('.quiz-checkbox').addClass('checked');

            this.$answersHolder.toggleClass('disabled', !this.model.canVote());

            this.viewResults();

            if (data.message) {
                utils.modal.toast(data.message);
            }
        },
        deleteSuccess: function (data) {

            utils.modal.toast(data.message);

            utils.history.back();
        }
    });
});

define('text!quiz/tpl/quiz-start.html',[],function () { return '<!-- quiz/tpl/quiz-detail.html -->\n<div class="header">\n    <div class="header-left">\n        <div class="btn-top btn-back">\n        </div>\n    </div>\n    <div class="header-center">\n        <div class="title" id="page_title">\n            <%= _t(\'Loading...\') %>\n        </div>\n    </div>\n</div>\n\n<div class="content content-background with-header-footer swiper-container" id="content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div id="quiz_start_holder" class="quiz-detail-content">\n                <div class="loading-initiator">\n                    <!-- Loading -->\n                </div>\n            </div>\n            <div id="activity_extra_holder" class="hide">\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="footer quiz-detail-footer">\n    <div class="clearfix menu-justify grid-3 fobos">\n        <div class="menu-item" id="prev_btn">\n            <%= _t(\'Previous\') %>\n        </div>\n        <div class="menu-item" id="submit_btn">\n            <%= _t(\'Submit Answer\') %>\n        </div>\n        <div class="menu-item" id="next_btn">\n            <%= _t(\'Next\') %>\n        </div>\n    </div>\n</div>';});


define('text!quiz/tpl/quiz-start-update.html',[],function () { return '<!--questions-->\n<ul id="question_list">\n    <%_.each(item.getQuestions(), function (question, index) {%>\n    <li style="display:none;" data-questionid="<%=question.question_id%>">\n        <div class="quiz-question">\n            <span class="quiz-question-no">Question <%=index + 1%>/<%=item.getQuestions().length%>:</span>\n            <span class="quiz-question-content"><%=question.question%></span>\n        </div>\n        <div class="quiz-list-answer quiz_list_answer">\n        <%_.each(question.answers, function (answer) {%>\n            <div class="quiz_answer quiz-answer" data-answerid="<%=answer.answer_id%>" data-questionid="<%=answer.question_id%>">\n                <span class="quiz-check"></span>\n                <span class="quiz-answer-content"><%=answer.answer%></span>\n            </div>\n        <%});%>\n        </div>\n        <input type="hidden" name="<%=question.question_id%>" id="<%=question.question_id%>" value="">\n    </li>\n    <%});%>\n</ul>\n';});

define('quiz/view/quiz-start',[
    'text!quiz/tpl/quiz-start.html',
    'text!quiz/tpl/quiz-start-update.html'
], function (text, textUpdate) {

    return Backbone.ItemView.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            updateHolder: '#quiz_start_holder'
        },
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        events: {
            "click #next_btn": "nextQuestion",
            "click #prev_btn": "prevQuestion",
            "click #submit_btn": "submitAnswer",
	    "click .quiz_answer": "clickAnswer",
            "click .btn-back": "confirmBack"
        },
        render: function () {

            this.$questionList = $('#question_list');

            this.$el.html(this.template({
                item: this.model
            }));
            // get elements
            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$updateHolder = this.$el.find(this.region.updateHolder);
            this.$pageTitle = this.$el.find('#page_title');
            this.$prevButton = this.$el.find('#prev_btn');
            this.$nextButton = this.$el.find('#next_btn');

            this.$el.attr({
                id: this.model.getDataId()
            });

            return this;
        },
        inject: function () {

            this.$holder.html(this.$el);
            this.$scroller.ensureVerticalScroll();

            // get questions data
            this.fetchData();
        },
        fetchData: function () {
            utils.api.get('quiz/questions', {iQuizId: this.model.getId()}, {context: this})
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function (data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.updateView();
        },
        fetchDataFail: function () {
            utils.debug.log(arguments);
            utils.history.back();
        },
        updateView: function () {

            this.$pageTitle.html(this.model.getTitle());

            this.$updateHolder.html(this.templateUpdate({
                item: this.model
            }));

            // set current question to 1 to start
            this.currentQuestion = 1;

            //get total of questions
            this.totalQuestion = this.model.getQuestions().length;

            //this don't have effect, just to set prev/next button status
            this.goToQuestion(1);

            //actually toggle question 1
            $('li').eq(0).toggle();

        },
        clickAnswer: function (evt) {
            var ele = $(evt.target).parent(),
                questionid = ele.data('questionid'),
                answerid = ele.data('answerid');

            // remove other answer status
            ele.parent('.quiz_list_answer').children('.quiz_answer').removeClass('checked');

            // set status of current answer
            ele.addClass('checked');

            // send the anser id to hidden input
            $("#"+questionid ).val( answerid );
        },
        nextQuestion: function (evt) {

            // return if last question
            if ($(evt.target).hasClass('disabled')) {
                return
            }

            // go to next question
            this.goToQuestion(this.currentQuestion + 1);
        },
        prevQuestion: function (evt) {

            if ($(evt.target).hasClass('disabled')) {
                return;
            }

            this.goToQuestion(this.currentQuestion - 1);
        },
        goToQuestion: function (index) {
            // this function is for jumping to an question
            // used to go back/pre and jump to not answered question when submit

            // set status for pre button
            if (index == 1) {
                this.$prevButton.addClass('disabled');
            } else {
                this.$prevButton.removeClass('disabled');
            }

            // set status for next button
            if (index == this.totalQuestion) {
                this.$nextButton.addClass('disabled');
            } else {
                this.$nextButton.removeClass('disabled');
            }

            // do nothing if staying at current question
            if (this.currentQuestion == index) {
                return
            }

            // go to specific question
            // hide current question
            $('li').eq(this.currentQuestion - 1).hide();

            // show target question
            $('li').eq(index - 1).show();

            // set new current question number
            this.currentQuestion = index;
        },
        submitAnswer: function() {

            var self = this;
            // start collect answer data, return if an question is not answer
            if (!this.collectAnswer()){
                return;
            }

            var sendData = {
                iQuizId: this.model.getId(),
                aAnswers: this.answerData
            }

            // start submit data
            utils.api.post('quiz/answer', sendData).done(function(data){
                $.extend(data,{iQuizId: self.model.getId()});
                    self.submitSuccess(data);
            }).fail(this.submitFail);
        },
        collectAnswer: function () {

            var self = this;

            // flag to pass if every questions is answered
            var collectResult = true;

            self.answerData = new Array();

            var currentQuestion = 0;

            // scan through questions
            $('li').each(function(index, ele){

                // get question id
                currentQuestion = $(ele).data('questionid');

                // get current answer from the hidden input
                var currentAnswer = $(ele).children("input").val();

                // check if current answer if not null
                if (currentAnswer) {
                    self.answerData.push({iQuestionId: currentQuestion, iAnswerId: currentAnswer});
                } else {
                    utils.modal.toast(_t('You have to answer all questions to submit'));

                    // go to unanswered question
                    self.goToQuestion(index + 1);

                    // set pass flag to false
                    collectResult = false;

                    // break the loop
                    return false;
                }
            });

            return collectResult;
        },
        submitSuccess: function (data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            // submit success
            utils.modal.toast(_t('Your answers has been submited successfully.'));

            window.location.href = "#quiz/" + data.iQuizId + "/result/" + Backbone.iUserId;
        },
        submitFail: function (data) {

                utils.modal.alert(_t('Can not load data from server'));
        },
        confirmBack: function () {

            utils.modal.confirm(_t("Are you sure you want to leave this page? All your answers will be clean."), function (selected) {
                if (selected == 1) {

                    utils.history.back();
                }
            }, _t('Confirm'), [_t('Yes'),_t('No')]);
        }
    });
});

define('text!quiz/tpl/quiz-detail-results.html',[],function () { return '<!-- quiz/tpl/quiz-detail-results.html -->\n<div class="header">\n    <div class="header-left">\n        <div class="btn-top btn-back" rel="back">\n        </div>\n    </div>\n    <div class="header-center">\n        <div class="title" id="page_title">\n            <%=_t(\'Quiz Results\')%>\n        </div>\n    </div>\n</div>\n\n<div class="content content-background with-header-footer swiper-container" id="content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div id="quiz_detail_results_holder" class="quiz-detail-content">\n                <div class="loading-initiator">\n                    <!-- Loading -->\n                </div>\n            </div>\n            <div id="activity_extra_holder" class="hide">\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="footer">\n    <div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item" href="<%=item.getUrl()%>">\n            <div class=""><%= _t(\'Info\') %></div>\n        </a>\n        <a class="menu-item current" href="javascript:void(0);">\n            <div class=""><%= _t(\'User Results\') %></div>\n        </a>\n    </div>\n</div>';});

define('quiz/model/taker',['require'],function(core) {
    return Backbone.Model.extend({
        idAttribute : 'id',
        defaults : {
            'sModelType' : 'user'
        },
        getId: function () {
            return this.get('iUserId');
        },
        getName : function() {
            return this.get('sFullName');
        },
        getTitle : function() {
            return this.get('sFullName');
        },
        getUrl: function(){
            return '#user/' + this.getId();
        },
        getLink: function(){
            return '<a href="'+this.getUrl()+'">'+ this.getTitle() +'</a>';
        },
        getImgSrc : function() {
            return this.get('sImageUrl') || '';
        },
        getPercentage : function() {
            return this.get('iSuccessPercentage') || 0;
        },
        getQuizId: function (){
            return this.get('iQuizId') || 2418;
        }
    });
});


define('text!quiz/tpl/quiz-detail-results-item.html',[],function () { return '<div class="clearfix item-wrapper">\r\n    <div class="item-image">\r\n        <a href="<%= item.getUrl() %>">\r\n            <img src="<%= item.getImgSrc() %>">\r\n        </a>\r\n    </div>\r\n    <div class="item-content">\r\n    \t<a class="item-headline" href="<%= item.getUrl() %>"><%= item.getPosterTitle() %></a>\r\n\t    <span><%=item.getPercentage()%> %</span>\r\n\t    <a id="show_result_btn" class="btn btn-primary btn-long" href="#quiz/<%=item.getQuizId()%>/result/<%=item.getId()%>"><%= _t(\'View Results\') %></a>\r\n    </div>    \r\n</div>\r\n';});

define('quiz/view/quiz-detail-results-item',[
    'text!quiz/tpl/quiz-detail-results-item.html'
], function(text) {

    return Backbone.View.extend({
        region : {},
        className : 'taker-item',
        template : _.template(text),
        render : function() {

            this.$el.html(this.template({
                item : this.model
            }));

            return this;
        },
        inject : function(inject) {
            inject(this.$el);
        },
        events : {
            "click #show_result_btn" : "showResult"
        },
        showResult: function () {

        }
    });
});


define('text!quiz/tpl/quiz-detail-results-list.html',[],function () { return '<div class="loading-initiator">\n    <!-- loading data...  -->\n</div>';});

define('quiz/view/quiz-detail-results-list',[
    'quiz/model/taker',
    'quiz/view/quiz-detail-results-item',
    'text!quiz/tpl/quiz-detail-results-list.html'
],function(Model, ItemView, text){

    return Backbone.ListView.extend({
        defaults: {
        },
        api: 'quiz/takers',
        className: 'quiz-results-list',
        phraseNotFound: 'No one has done this quiz yet.',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('quiz/view/quiz-detail-results',[
    'text!quiz/tpl/quiz-detail-results.html',
    'quiz/view/quiz-detail-results-list'
], function (text, QuizResultsListView) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'quiz/view/quiz-detail',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function () {},
        render: function (query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template({
                item: this.model
            }));

            this.$listHolder = this.$el.find('#quiz_detail_results_holder');

            this.$pageTitle = this.$el.find('#page_title');

            return this;
        },
        inject: function () {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            // result list extend from a list view
            this.listView = new QuizResultsListView({},
                this.$listHolder,
                this.$scroller,
                {loadmore: false, loadnew: false});

            this.listView.render(this.query).inject();

            return this;
        }
    });
});

define('text!quiz/tpl/quiz-user-result.html',[],function () { return '<!-- quiz/tpl/quiz-detail-results.html -->\n<div class="header">\n    <div class="header-left">\n        <div class="btn-top btn-back">\n        </div>\n    </div>\n    <div class="header-center">\n        <div class="title" id="page_title">\n            <%=_t(\'Loading\')%>\n        </div>\n    </div>\n</div>\n\n<div class="content content-background with-header-footer swiper-container" id="content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div class="quiz-result-content">\n                <div class="quiz-result-user">\n                    <span><%=_t(\'Quiz Results for\')%></span>\n                    <a id="result_title" class="result-title"><%=_t(\'Quiz\')%></a>\n                    <span id="result_percent"></span>\n                </div>\n                <div id="quiz_user_result_holder" class="quiz-user-result-content">\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="footer">\n    <div class="clearfix menu-justify grid-3 fobos">\n        <a class="menu-item" href="#quiz/<%=iQuizId%>">\n            <div class=""><%= _t(\'Info\') %></div>\n        </a>\n        <a class="menu-item current" href="#quiz/<%=iQuizId%>/results">\n            <div class=""><%= _t(\'User Results\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!quiz/tpl/quiz-user-answer-item.html',[],function () { return '<div class="clearfix item-wrapper">\n    <div class="item-headline">\n        <span><%=iIndex%>.</span>\n        <span class=\'item-quiz-question\'><%=sQuestion%></span>\n    </div>\n\n    <div class="item-quiz-result user-answer <%if (iAnswerId == iCorrectAnswer) {%>user-correct<%}%>">\n        <div class="item-image" style="background-image: url(\'<%=sImgSrc%>\');"></div>\n        <div class="item-result"><%=sAnswer%> <span class="item-check"></span></div>\n    </div>\n    <div class="item-quiz-result correct-answer <%if (iAnswerId == iCorrectAnswer) {%>hide<%}%>">\n        <div class="item-image"></div>\n        <div class="item-result"><%=sCorrectAnswer%> <span class="item-check"></span></div>\n    </div>\n</div>';});

define('quiz/view/quiz-user-result',[
    'text!quiz/tpl/quiz-user-result.html',
    'text!quiz/tpl/quiz-user-answer-item.html'
], function (text, textAnswer) {

    return Backbone.View.extend({

        region: {
            holder: '#main',
            scroller: '#content',
            updateHolder: '#poll_detail_holder',
            activityExtraHolder: '#activity_extra_holder'
        },
        template: _.template(text),
        templateAnswer: _.template(textAnswer),
        render: function (context) {

            this.context = $.extend({
                iQuizId: null,
                iUserId: null
            }, context);

            this.$el.html(this.template(this.context));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$pageTitle = this.$el.find('#page_title');
            this.$resultTitle = this.$el.find('#result_title');
            this.$resultPercent = this.$el.find('#result_percent');
            this.$resultHolder = this.$el.find('#quiz_user_result_holder');
            return this;
        },
        inject: function () {
            console.log(textAnswer);

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();
        },
        events: {
            // custom back button
            'click .btn-back': 'backToResults'
        },
        fetchData: function () {
            utils.api.get('quiz/result', {iQuizId: this.context.iQuizId, iUserId: this.context.iUserId}, {context: this})
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function (data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;

            this.updateView();
        },
        fetchDataFail: function () {
            utils.debug.log(arguments);
            utils.history.back();
        },
        updateView: function () {

            this.$pageTitle.html(this.formData.sTitle);
            this.$resultTitle.html(this.formData.sFullName);
            this.$resultPercent.html(" ( " + this.formData.iSuccessPercentage + " % )");
            this.$resultTitle.attr('href', '#user/' + this.context.iUserId);

            this.appendResult();
        },
        appendResult: function () {

            var self = this;
            // pass user avatar to single answer to show
            userAvatar = this.formData.sUserImage;

            // loop through answer to append to list
            _.each(self.formData.aAnswers, function(answer, index){

                // add the index to single answer index start with 0 so +1
                answer = $.extend({iAnswerId: 0}, answer);
                $.extend(answer, {iIndex: index + 1, sImgSrc: userAvatar});

                // append answer with data
                self.$resultHolder.append(self.templateAnswer(answer));
            });
        },
        backToResults: function () {
            window.location.href = "#quiz/" + this.context.iQuizId + "/results";
        }
    });
});
define('quiz/controller/quiz-detail',[
    'quiz/model/quiz',
    'quiz/view/quiz-detail',
    'quiz/view/quiz-start',
    'quiz/view/quiz-detail-results',
    'quiz/view/quiz-user-result'
], function (Model, DetailView, QuizStartView, QuizResultsView, QuizUserResultView) {

    var DetailController = function (id) {
        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iQuizId: id
            })
        }).render().inject();
    };

    var QuizStartController = function (id) {

        utils.observer.trigger('router:changed');

        new QuizStartView({
            model: new Model({
                iQuizId: id
            })
        }).render().inject();
    };

    var QuizResultsController = function (id) {
        utils.history.push();

        utils.observer.trigger('router:changed');

        new QuizResultsView({
            model: new Model({
                iQuizId: id
            })
        }).render({
                iQuizId: id
            }).inject();
    };

    var QuizUserResultController = function (id, userid) {

        utils.observer.trigger('router:changed');

        new QuizUserResultView().render({
                iQuizId: id,
                iUserId: userid
            }).inject();
    };

    utils.router.route('quiz/:id', DetailController);
    utils.router.route('quiz/:id/start', QuizStartController);
    utils.router.route('quiz/:id/results', QuizResultsController);
    utils.router.route('quiz/:id/result/:userid', QuizUserResultController);
});
define('quiz/controller/quiz-edit',[
    'quiz/model/quiz',
    'quiz/view/quiz-edit'
], function(Model, EditQuizView) {

    function EditQuizController(id) {

        utils.observer.trigger('router:changed');

        new EditQuizView({
            model: new Model({
                iQuizId: id
            })
        }).render({
                sView: 'edit'
            }).inject();
    }

    utils.router.route('quizzes/edit/:id', EditQuizController);
});
define('quiz/main',[
	'core',
	'quiz/plugin/activity',
    'quiz/controller/quiz-index',
    'quiz/controller/quiz-add',
    'quiz/controller/quiz-detail',
    'quiz/controller/quiz-edit'
],function(core){
	
	core.sidebar.configs.set('quiz',{
 		icon: 'icon-sidebar-quiz',
 		label: 'Quizzes',
 		url: '#quizzes'
 	});
});

define('quiz', ['quiz/main'], function (main) { return main; });


define('text!marketplace/tpl/country-childs.html',[],function () { return '<select id="listing_form_country_childs" class="control-full">\n    <option value="0"><%=_t(\'State/Province:\')%></option>\n    <%_.each(data, function(option) {%>\n    <option value="<%=option.child_id%>" <%if (option.child_id == selected) {%>selected="selected"<%}%>><%=option.name%></option>\n    <%});%>\n</select>';});


define('text!marketplace/tpl/listing-add-form.html',[],function () { return '<div class="listing-add-form">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            <%= _t(\'Category\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full listing-form-category">\n                <option value=""><%= _t(\'Select Category\') %></option>\n                <%_.each(data.category_options, function (option) {%>\n                <option value="<%=option.category_id%>"><%=option.name%></option>\n                <%});%>\n            </select>\n            <div class="listing-form-category-subs-holder"></div>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'What are you selling?\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_title" placeholder="<%= _t(\'What are you selling?\') %>" value="" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Short Description\') %>\n        </div>\n        <div class="form-group">\n            <textarea id="listing_form_mini_description" class="control-full textarea" placeholder="<%= _t(\'Short Description\') %>"></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Description\') %>\n        </div>\n        <div class="form-group">\n            <textarea id="listing_form_description" class="control-full textarea" placeholder="<%= _t(\'Description\') %>"></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Price\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <select class="control-full" id="listing_form_currency">\n                <%_.each(data.currency_options, function (option) {%>\n                <option value="<%=option.currency_id%>" <%if (option.is_default == \'1\') {%>selected="selected"<%}%>><%=option.name%></option>\n                <%});%>\n            </select>\n            <input type="text" class="control-full" id="listing_form_price" placeholder="<%= _t(\'Price\') %>" value="0.00" />\n        </div>\n\n        <%if (data.perms.bCanSell) {%>\n        <div class="form-title">\n            <%= _t(\'Enable Instant Payment\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_sell">\n                <option value="1"><%=_t(\'Yes\')%></option>\n                <option value="0" selected="selected"><%=_t(\'No\')%></option>\n            </select>\n        </div>\n        <%}%>\n\n        <div class="form-title">\n            <%= _t(\'Location\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_country">\n                <option value=""><%= _t(\'Select Location\') %></option>\n                <%_.each(data.country_options, function (option) {%>\n                <option value="<%=option.country_iso%>"><%=option.name%></option>\n                <%});%>\n            </select>\n            <div id="listing_form_country_childs_holder"></div>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'City\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_city" placeholder="<%= _t(\'City\') %>" value="" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Zip / Postal Code\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_zipcode" placeholder="<%= _t(\'Zip / Postal Code\') %>" value="" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Listing Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_privacy">\n                <%_.each(data.view_options, function (option) {%>\n    \t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n    \t\t\t<%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Comment Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_privacy_comment">\n                <%_.each(data.comment_options, function (option) {%>\n    \t\t\t<option value="<%=option.sValue%>"><%=option.sPhrase%></option>\n    \t\t\t<%});%>\n            </select>\n        </div>\n    </div>\n</div>';});


define('text!marketplace/tpl/listing-add.html',[],function () { return '<!-- marketplace/tpl/listing-add.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top" rel="back">\r\n\t\t\t<%= _t(\'Cancel\') %>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top disabled" id="save_btn"><%= _t(\'Save\') %></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title">\r\n\t\t\t<%= _t(\'Add New Listing\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content with-header swiper-container" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="listing_add_form_holder">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});

define('marketplace/view/listing-add',[
    'text!marketplace/tpl/country-childs.html',
    'text!marketplace/tpl/listing-add-form.html',
    'text!marketplace/tpl/listing-add.html'
], function(textCountryChilds, textForm, text) {

    return Backbone.View.extend({
        className: 'listing-add',
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#listing_add_form_holder'
        },
        template: _.template(text),
        templateCountryChilds: _.template(textCountryChilds),
        templateForm: _.template(textForm),
        render: function(context) {

            this.context = $.extend({
                iItemId: null,
                sModule: null
            }, context);

            this.$el.attr('id', 'listing_add');

            this.$el.html(this.template(this.context));

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');

            this.aCategoryId = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {
            utils.api.get('marketplace/formadd', {}, {
                context: this
            }).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;
            this.updateView();
        },
        updateView: function(data) {

            this.$form_holder.html(this.templateForm({
                data: this.formData
            }));

            this.$form_title = this.$el.find('#listing_form_title');
            this.$form_mini_description = this.$el.find('#listing_form_mini_description');
            this.$form_description = this.$el.find('#listing_form_description');
            this.$form_currency = this.$el.find('#listing_form_currency');
            this.$form_price = this.$el.find('#listing_form_price');
            this.$form_sell = this.$el.find('#listing_form_sell');
            this.$form_country = this.$el.find('#listing_form_country');
            this.$form_country_childs_holder = this.$el.find('#listing_form_country_childs_holder');
            this.$form_city = this.$el.find('#listing_form_city');
            this.$form_zipcode = this.$el.find('#listing_form_zipcode');
            this.$form_privacy = this.$el.find('#listing_form_privacy');
            this.$form_privacy_comment = this.$el.find('#listing_form_privacy_comment');

            // bind input edit, paste events
            var self = this;
            this.$el.find('input').bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
			this.$scroller.trigger('refresh');
        },
        fetchDataFail: function() {
            utils.debug.warn('FAIL: marketplace/formadd', arguments);
            utils.history.back();
        },
        events: {
            'change #listing_form_country': 'onChangeCountry',
            'change .listing-form-category': 'onChangeCategory',
            'click #save_btn': 'saveListing'
        },
        onChangeCountry: function(evt) {

            this.toggleSaveBtn();

            this.$form_country_childs_holder.empty();

            if (this.$form_country.val()) {
                this.fetchChilds();
            }
        },
        fetchChilds: function() {

            var postData = {
                sCountryIso: this.$form_country.val()
            };
            var settings = {
                context: this
            };

            this.ajaxChilds && this.ajaxChilds.abort();

            this.ajaxChilds = utils.api.get('core/getchilds', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load country childs'));
                }

                this.updateChilds(data);
            }).fail(function() {
                utils.debug.warn('FAIL: core/getchilds', arguments);
            });
        },
        updateChilds: function(data) {

            if (data.length > 0) {
                this.$form_country_childs_holder.html(this.templateCountryChilds({
                    data: data,
                    selected: 0
                }));
            }
        },
        onChangeCategory: function(evt) {

            var $target = $(evt.currentTarget);

            var $subs_holder = $target.parent().children('.listing-form-category-subs-holder');

            $subs_holder.empty();

            this.updateCategories();

            this.toggleSaveBtn();

            if ($target.val()) {
                this.appendSubCategories($target);
            }
        },
        updateCategories: function() {

            this.aCategoryId = [];

            var $form_category = this.$el.find('.listing-form-category');

            _.each($form_category, function(item) {
                if ($(item).val()) {
                    this.aCategoryId.push($(item).val());
                }
            }, this);
        },
        appendSubCategories: function($target, aSelected) {

            var subCategoriesHtml = utils.helper.getSubCategoriesHtml(this.formData.category_options, $target.val(), aSelected);

            var $subs_holder = $target.parent().children('.listing-form-category-subs-holder');

            $subs_holder.html(subCategoriesHtml);
        },
        saveListing: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            if (!this.validateData(true)) {
                return;
            }

            var $form_country_childs = this.$el.find('#listing_form_country_childs');

            var postData = {
                aCategoryId: this.aCategoryId,
                sTitle: this.$form_title.val(),
                sCountryIso: this.$form_country.val(),
                sPrice: this.$form_price.val(),
                sMiniDescription: this.$form_mini_description.val(),
                sDescription: this.$form_description.val(),
                sCurrencyId: this.$form_currency.val(),
                iIsSell: this.$form_sell.val(),
                iAutoSell: 0,
                iCountryChildId: $form_country_childs.length > 0 ? $form_country_childs.val() : 0,
                sCity: this.$form_city.val(),
                sPostalCode: this.$form_zipcode.val(),
                iPrivacy: this.$form_privacy.val(),
                iPrivacyComment: this.$form_privacy_comment.val(),
                sEmails: '',
                sPersonalMessage: '',
            };

            var settings = {
                context: this
            };

            this.$save_btn.addClass('processing');

            utils.api.post('marketplace/create', postData, settings).done(this.saveDone).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            utils.modal.toast(data.message || _t('Listing successfully added.'));

            window.location.href = '#listing/' + data.iListingId + '/edit/photo';
        },
        validateData: function(bAlert) {

            if (this.aCategoryId.length == 0) {
                bAlert && utils.modal.alert(_t('Provide a category this listing will belong to.'));
                return false;
            }

            if (!this.$form_title.val().trim()) {
                bAlert && utils.modal.alert(_t('Provide a name for this listing.'));
                return false;
            }

            if (!this.$form_price.val().trim()) {
                bAlert && utils.modal.alert(_t('Provide a valid price.'));
                return false;
            }

            if (!this.$form_country.val()) {
                bAlert && utils.modal.alert(_t('Provide a location for this listing.'));
                return false;
            }

            return true;
        },
        toggleSaveBtn: function(evt) {

            var bDisable = !this.validateData();

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('marketplace/controller/listing-add',[
    'marketplace/view/listing-add'
], function(AddView) {

    var AddController = function(module, item) {

        utils.observer.trigger('router:changed');

        new AddView().render({
            iItemId: item,
            sModule: module || 'listing'
        }).inject();
    }

    utils.router.route('listings/add(/:module/:item)', AddController);
});
define('marketplace/model/listing',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'iListingId',
        defaults: {
            sModelType: 'marketplace',
            bCanView: true,
            bCanLike: true,
            bIsAllowBuyInApp: true
        },
        getCurrencySymbol: function() {
            return this.get('sSymbol') || '';
        },
        getCurrencyId: function() {
            return this.get('sCurrencyId') || '';
        },
        getPrice: function() {
            return this.get('sPrice') || 0;
        },
        getImageSrc: function() {
            return this.get('sMarketplaceImage') || '';
        },
        getCountry: function() {
            return this.get('sCountry') || '';
        },
        getCity: function() {
            return this.get('sCity') || '';
        },
        hasCity: function() {
            return this.getCity() ? true : false;
        },
        getLocation: function() {
            return this.getCountry() + (this.hasCity() ? (' » ' + this.getCity()) : '');
        },
        hasLocation: function() {
            return this.getLocation() ? true : false;
        },
        getMiniDescription: function() {
            return this.get('sMiniDescription') || '';
        },
        hasMiniDescription: function() {
            return this.getMiniDescription() ? true : false;
        },
        isFeatured: function() {
            return this.get('bIsFeatured') || false;
        },
        getCountryIso: function() {
            return this.get('sCountryIso') || '';
        },
        getCountryChildId: function() {
            return this.get('iCountryChildId') || 0;
        },
        getCategoryIds: function() {
            return this.get('aCategoriesId') || [];
        },
        isSell: function() {
            return this.get('bIsSell') || false;
        },
        getZipCode: function() {
            return this.get('sPostalCode') || '';
        },
        hasZipCode: function() {
            return this.getZipCode() ? true : false;
        },
        getPrivacyId: function() {
            return parseInt(this.get('iPrivacy')) || 0;
        },
        getPrivacyCommentId: function() {
            return parseInt(this.get('iPrivacyComment')) || 0;
        },
        getPhotos: function() {
            return this.get('aImages') || [];
        },
        hasPhotos: function() {
            return this.getPhotos().length > 0;
        },
        isPending: function() {
            return this.get('bIsPending') || false;
        },
        getCategory: function() {

            var sCategories = '';

            var aCategories = this.get('aCategoriesData') || [];

            _.each(aCategories, function(item, index) {
                sCategories += (index > 0 ? ' » ' + item[0] : item[0]);
            });

            return sCategories;
        },
        getTimeFormatted: function() {
            return utils.moment(this.getTimestamp() * 1e3).format('LL');
        },
        getText: function() {

            var sText = this.get('sDescription') || '';

            return utils.helper.parseExternalLink(sText);
        },
        getStoreKitPurchaseId: function() {
            return this.get('aStoreKitPurchaseId')[constants.device] || '';
        },
        canBuyInApp: function() {
            return this.get('bIsAllowBuyInApp');
        },
        showBuyInFullSite: function() {
            return this.get('bIsShowBuyInFullSite') || false;
        },
        getFullSiteUrl: function() {
            return this.get('sFullSiteUrl') || '';
        },
        hasFullSiteUrl: function() {
            return this.getFullSiteUrl() ? true : false;
        },
        getActionCount: function() {

            var cnt = 1;

            if (this.isSell() && this.getPrice() != 0) {
                if (this.canBuyInApp()) {
                    cnt++;
                }
                if (this.showBuyInFullSite() && this.hasFullSiteUrl()) {
                    cnt++;
                }
            }

            return cnt;
        },
        canSendMessage: function() {
            return this.get('bCanSendMessage') || false;
        },
        getSocialShareUrl: function() {
            
            if(this.getType() == 'marketplace')
                return constants.siteUrl + 'index.php?do=/marketplace/'+ this.getId();
                
            return constants.siteUrl + 'index.php?do=/advancedmarketplace/detail/'+ this.getId();
        }
    });
});
define('marketplace/model/listing-photo',[],function() {

    return Backbone.Model.extend({
        idAttribute: 'iImageId',
        defaults: {
            sModelType: 'image'
        },
        getPhotoUrl: function() {
            return this.get('sImagePath') || '';
        }
    });
});

define('text!marketplace/tpl/listing-setting.html',[],function () { return '<div class="setting-list">\n\t<a class="setting-item" href="#listing/<%=item.getId()%>/edit">\n\t\t<%= _t(\'Edit Listing\') %>\n\t</a>\n\t<a class="setting-item" href="#listing/<%=item.getId()%>/edit/photo">\n\t\t<%= _t(\'Edit Photos\') %>\n\t</a>\n\t<a class="setting-item" href="#listing/<%=item.getId()%>/invite">\n\t\t<%= _t(\'Invite\') %>\n\t</a>\n\t<div class="setting-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'Delete Listing\') %>\n\t</div>\n</div>';});

define('marketplace/view/listing-setting',[
    'text!marketplace/tpl/listing-setting.html'
], function(text) {
    return Backbone.PopupView.extend({
        template: _.template(text)
    });
});

define('text!marketplace/tpl/listing-item.html',[],function () { return '<!-- marketplace/tpl/listing-item -->\n<div class="item-wrapper">\n    <div class="item-image" style="background-image: url(<%=item.getImageSrc()%>)" rel="link" data-url="<%=item.getUrl()%>">\n        <div class="item-mask"></div>\n\t\t<%if (item.isFeatured()) {%>\n\t\t<div class="item-featured">\n\t\t</div>\n\t\t<%}%>\n        <%if (context.sView != \'my\') {%>\n\t\t<div class="item-title">\n\t\t\t<a href="<%=item.getPosterUrl()%>" class="cover-img" style="background-image:url(<%=item.getPosterImageSrc()%>)"></a>\n            <a href="<%=item.getPosterUrl()%>" class="user_name"><%=utils.str.shorten(item.getPosterTitle(), 32)%></a>\n        </div>\n        <%}%>\n\t\t<div class="item-headline">\n            <a href="<%=item.getUrl()%>"><%=item.getTitle()%></a>\n        </div>\n\t\t<%if (context.sView == \'my\') {%>\n            <div class="item-setting prevent" id="<%=item.getDataId(\'setting\')%>" rel="delegate">\n                <i class="icon icon-setting"></i>\n            </div>\n        <%}%>\n    </div>\n    <div class="item-info">\n        <div class="item-info-content">\n            <div class="item-subline">\n                <div class="item-price">\n                    <%if (item.getPrice() == 0) {%>\n                    <span><%=_t(\'Free\')%></span>\n                    <%} else {%>\n                    <span class="item-currency-symbol"><%=item.getCurrencySymbol()%></span>\n                    <span><%=item.getPrice()%></span>\n                    <%}%>\n                </div>\n\n                <div class="att-item-text">\n                    <i class="icon icon-location-arrow"></i>\n                    <span><%=utils.str.shorten(item.getLocation(), 24)%></span>\n                </div>\t\t\t\t\n            </div>\n            \n            <%if (item.hasMiniDescription()) {%>\n            <div class="item-description">\n                <%=utils.str.shorten(item.getMiniDescription(), 80)%>\n            </div>\n            <%}%>\n        </div>\n    </div>\n</div>\n';});

define('marketplace/view/listing-item',[
    'marketplace/view/listing-setting',
    'text!marketplace/tpl/listing-item.html'
], function(SettingView, text) {

    return Backbone.ItemView.extend({
        settingView: SettingView,
        className: 'listing-item',
        template: _.template(text),
        render: function(context) {

            this.context = $.extend({
                sModule: null,
                iItemId: null
            }, context);

            this.$el.attr('id', this.model.getDataId());

            this.$el.html(this.template({
                context: this.context,
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {

            inject(this.$el);

            return this;
        },
        doDeleteConfirm: function(evt, data) {

            var self = this;

            utils.modal.confirm(_t('Are you sure?'), function(selected) {

                if (selected == 1) {

                    utils.observer.trigger('blockui');

                    utils.api.post('marketplace/delete', {
                        iListingId: self.model.getId()
                    }).done(function(data) {
                        if (data.error_code && data.error_code > 0) {
                            return utils.modal.alert(data.error_message || _t('Can not load data from server'));
                        }

                        self.deleteSuccess(data);
                    }).always(function() {
                        utils.observer.trigger('releaseui');
                        utils.popup.close();
                    });
                }
            }, _t('Confirm'), [_t('Delete'), _t('Cancel')]);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Listing successfully deleted.'));

            this.$el.remove();
        }
    });
});
define('marketplace/view/listing-photo-item',[
    'attachment/view/attachment-photo-item'
], function(AttachmentPhotoItemView, text) {

    return AttachmentPhotoItemView.extend({
        className: 'attachment-photo-item swiper-slide'
    });
});

define('text!marketplace/tpl/listing-topmenu.html',[],function () { return '<div class="setting-list">\n    <%if (item.isOwner()) {%>\n\t<a class="menu-item" href="#listing/<%=item.getId()%>/edit">\n\t\t<%= _t(\'Edit Listing\') %>\n\t</a>\n\t<a class="menu-item" href="#listing/<%=item.getId()%>/edit/photo">\n\t\t<%= _t(\'Edit Photos\') %>\n\t</a>\n\t<a class="menu-item" href="#listing/<%=item.getId()%>/invite">\n\t\t<%= _t(\'Invite\') %>\n\t</a>\n\t<div class="menu-item" id="<%=item.getDataId(\'delete\')%>" rel="delegate">\n\t\t<%= _t(\'Delete Listing\') %>\n\t</div>\n\t<%} else {%>\n    <div class="menu-item" id="<%=item.getDataId(\'share\')%>" rel="delegate">\n        <%= _t(\'Share\') %>\n    </div>\n    <div class="menu-item" id="<%=item.getDataId(\'report\')%>" rel="delegate">\n        <%= _t(\'Report\') %>\n    </div>\n    <%}%>\n</div>';});

define('marketplace/view/listing-topmenu',[
    'text!marketplace/tpl/listing-topmenu.html'
], function(text) {
    return Backbone.TopMenuView.extend({
        template: _.template(text),
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function() {

            utils.popup.open(this.$el);

            return this;
        },
        hide: function() {

            utils.popup.close();

            return this;
        }
    });
});

define('text!marketplace/tpl/listing-detail.html',[],function () { return '<!-- marketplace/tpl/listing-detail.html -->\r\n<div class="header">\r\n\t<div class="header-left">\r\n\t\t<div class="btn-top btn-back" rel="back">\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="header-right">\r\n\t\t<div class="btn-top btn-more hide" id="top_menu_toggle"></div>\r\n\t</div>\r\n\t<div class="header-center">\r\n\t\t<div class="title" id="page_title">\r\n\t\t\t<%= _t(\'Loading...\') %>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="content content-background with-header swiper-container marketplace-detail" id="content">\r\n\t<div class="swiper-wrapper">\r\n\t\t<div class="swiper-slide">\r\n\t\t\t<div id="listing_detail_holder" class="listing-detail-content">\r\n\t\t\t\t<div class="loading-initiator">\r\n\t\t\t\t\t<!-- Loading -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id="activity_extra_holder" class="hide">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n';});


define('text!marketplace/tpl/listing-detail-update.html',[],function () { return '<%if (item.isPending()) {%>\r\n<div id="listing_message_holder">\r\n    <span class="warn-message"><%=_t(\'Listing is pending approval.\')%></span>\r\n</div>\r\n<%}%>\r\n\r\n<div class="listing-detail-item">\r\n\t<div class="item-image" style="background-image:url(<%=item.getImageSrc()%>);">\r\n\t\t<%if (item.isFeatured()) {%>\r\n\t\t<div class="item-featured">\r\n\t\t</div>\r\n\t\t<%}%>\r\n    </div>\r\n\r\n\t<%if (item.hasPhotos()) {%>\r\n\t<div class="wrap-swipper">\r\n\t\t<div class="swiper-container" id="listing_photos_container">\r\n\t\t\t<div class="swiper-wrapper clearfix" id="listing_photos_holder">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n    <%}%>\r\n\r\n\t<%if (!item.isOwner()) {%>\r\n\t<div class="item-action">\r\n\t\t<div class="" id="contact_seller_btn"><%=_t(\'Contact Seller\')%></div>\r\n\t\t<%if (item.isSell() && item.getPrice() != 0) {%>\r\n    \t\t<%if (item.showBuyInFullSite() && item.hasFullSiteUrl()) {%>\r\n            <div class="" rel="externallink" data-url="<%=item.getFullSiteUrl()%>"><%=_t(\'Full Site\')%></div>\r\n            <%}%>\r\n\t\t<%}%>\r\n\t</div>\r\n\t<%}%>\r\n\r\n    <div class="item-content">\r\n        <div class="item-table">\r\n            <div class="table-row item-price">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Price\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <%if (item.getPrice() == 0) {%>\r\n\t\t\t\t\t<span><%=_t(\'Free\')%></span>\r\n\t\t\t\t\t<%} else {%>\r\n\t\t\t\t\t<span class="item-currency-symbol"><%=item.getCurrencySymbol()%></span>\r\n\t\t\t\t\t<span><%=item.getPrice()%></span>\r\n\t\t\t\t\t<%}%>\r\n                </div>\r\n            </div>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Created\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <a href="<%=item.getPosterUrl()%>"><%=item.getPosterTitle()%></a>\r\n                </div>\r\n            </div>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Category\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <span><%=item.getCategory()%></span>\r\n                </div>\r\n            </div>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Location\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <span><%=item.getCountry()%></span>\r\n                </div>\r\n            </div>\r\n            <%if (item.hasCity()) {%>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'City\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <span><%=item.getCity()%></span>\r\n                </div>\r\n            </div>\r\n            <%}%>\r\n            <%if (item.hasZipCode()) {%>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Zip Code\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <span><%=item.getZipCode()%></span>\r\n                </div>\r\n            </div>\r\n            <%}%>\r\n            <div class="table-row">\r\n                <div class="table-left">\r\n                    <span><%=_t(\'Posted on\')%></span>\r\n                </div>\r\n                <div class="table-right">\r\n                    <span><%=item.getTimeFormatted()%></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\t<div class="item-info">\r\n\t\t<div class="item-title">\r\n\t\t\t<a href="javascript:void(0);"><%=item.getTitle()%></a>\r\n\t\t</div>\r\n\t\t<div class="item-description">\r\n\t\t\t<%=utils.str.shorten(item.getText(), 250, true)%>\r\n\t\t</div>\r\n\t</div>\r\n\r\n    <%if (!item.isPending()) {%>\r\n    <div id="listing_action_bar">\r\n        <div class="actions-justify gray">\r\n            <%if (item.canLike()) {%>\r\n            <div class="action-item <%= item.isLiked() ? \' liked\' : \'\' %>" id="<%= item.getDataId(\'like\') %>" rel="delegate">\r\n                <span class="text-info"><%= item.getLikeCount() %></span>\r\n                <i class="icon icon-activity-like"></i>\r\n            </div>\r\n            <%}%>\r\n            <%if (item.canComment()) {%>\r\n            <div class="action-item" id="<%= item.getDataId(\'comment\') %>" rel="delegate" data-display="focus">\r\n                <span class="text-anchor"><%= item.getCommentCount() %></span>\r\n                <i class="icon icon-activity-comment"></i>\r\n            </div>\r\n            <%}%>\r\n        </div>\r\n    </div>\r\n    <%}%>\r\n</div>\r\n\r\n';});

define('marketplace/view/listing-detail',[
    'marketplace/model/listing-photo',
    'marketplace/view/listing-item',
    'marketplace/view/listing-photo-item',
    'marketplace/view/listing-topmenu',
    'text!marketplace/tpl/listing-detail.html',
    'text!marketplace/tpl/listing-detail-update.html'
], function(ListingPhotoModel, ItemView, AttachmentPhotoItemView, TopMenuView, text, textUpdate) {

    return ItemView.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            update_holder: '#listing_detail_holder',
            activity_extra_holder: '#activity_extra_holder'
        },
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        topMenuView: TopMenuView,
        render: function() {

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$update_holder = this.$el.find(this.region.update_holder);
            this.$activity_extra_holder = this.$el.find(this.region.activity_extra_holder);
            this.$page_title = this.$el.find('#page_title');
            this.$topmenu_btn = this.$el.find('#top_menu_toggle');

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            utils.helper.addActivityExtraBlock(this.model, this.$activity_extra_holder, this.$scroller);

            return this;
        },
        fetchData: function() {

            var postData = {
                iListingId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('marketplace/detail', postData, settings).done(this.fetchDataDone).fail(this.fetchDataFail);
        },
        fetchDataDone: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.updateView();
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        updateView: function() {

            this.$page_title.html(this.model.getTitle());

            this.$topmenu_btn.removeClass('hide');

            this.$update_holder.html(this.templateUpdate({
                item: this.model
            }));

            this.$listing_photos_container = this.$el.find('#listing_photos_container');
            this.$listing_photos_holder = this.$el.find('#listing_photos_holder');
            this.$contact_seller_btn = this.$el.find('#contact_seller_btn');

            this.appendPhotos();

            if (!this.model.isPending()) {
                this.$activity_extra_holder.removeClass('hide');
            }
        },
        appendPhotos: function() {

            var self = this;

            var injectPhoto = function(dom) {
                self.$listing_photos_holder.append(dom);
            };

            var aPhoto = this.model.getPhotos().map(function(oPhoto) {
                return new ListingPhotoModel(oPhoto);
            });

            _.each(aPhoto, function(oPhoto) {
                new AttachmentPhotoItemView({
                    model: oPhoto
                }).render().inject(injectPhoto);
            }, this);

            this.$listing_photos_container.swiper({
                mode: 'horizontal',
                slidesPerView: 'auto'
            });
        },
        events: {
            'click #contact_seller_btn': 'contactSeller',
            'click #top_menu_toggle': 'toggleTopMenu'
        },
        contactSeller: function() {

            if (!this.model.canSendMessage()) {
                return utils.modal.alert(_t('Unable to send a private message to this user at the moment.'));
            }

            window.location.href = '#messages/compose/' + this.model.getPosterId();
        },
        toggleTopMenu: function() {

            this.topMenuIsShown(false);

            utils.topMenu.toggle(this, this.model);
        },
        deleteSuccess: function(data) {

            utils.modal.toast(data.message || _t('Listing successfully deleted.'));

            utils.history.back();
        }
    });
});
define('marketplace/controller/listing-detail',[
    'marketplace/model/listing',
    'marketplace/view/listing-detail'
], function(Model, DetailView) {

    var DetailController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iListingId: id
            })
        }).render().inject();
    }

    var AdvancedDetailController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new DetailView({
            model: new Model({
                iListingId: id,
                sModelType: 'advancedmarketplace'
            })
        }).render().inject();
    }

    utils.router.route('listing/:id', DetailController);
    utils.router.route('marketplace/:id', DetailController);
    utils.router.route('advancedmarketplace/:id', AdvancedDetailController);
});
define('marketplace/view/listing-add-photo-item',[
    'attachment/view/attachment-add-photo-item'
], function(AttachmentAddPhotoItem) {

    return AttachmentAddPhotoItem.extend({
        apiDelete: 'marketplace/photodelete',
        getPostDataDelete: function() {

            return {
                iImageId: this.model.getId()
            };
        }
    });
});

define('text!marketplace/tpl/listing-edit-form.html',[],function () { return '<div class="listing-edit-form <%if (context.sView != \'info\') {%>hide<%}%>" id="listing_edit_info_holder">\n    <div class="form-general">\n        <!-- form content -->\n        <div class="form-title">\n            <%= _t(\'Category\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full listing-form-category">\n                <option value=""><%= _t(\'Select Category\') %></option>\n                <%_.each(data.category_options, function (option) {%>\n                <option value="<%=option.category_id%>" <%if (option.category_id == item.getCategoryIds()[0]) {%>selected="selected"<%}%>><%=option.name%></option>\n                <%});%>\n            </select>\n            <div class="listing-form-category-subs-holder"></div>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'What are you selling?\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_title" placeholder="<%= _t(\'Title\') %>" value="<%=item.getTitle()%>" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Short Description\') %>\n        </div>\n        <div class="form-group">\n            <textarea id="listing_form_mini_description" class="control-full textarea" placeholder="<%= _t(\'Short Description\') %>"><%=item.getMiniDescription()%></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Description\') %>\n        </div>\n        <div class="form-group">\n            <textarea id="listing_form_description" class="control-full textarea" placeholder="<%= _t(\'Description\') %>"><%=item.getDescription()%></textarea>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Price\') %>\n        </div>\n        <div class="form-group form-group-flex">\n            <select class="control-full" id="listing_form_currency">\n                <%_.each(data.currency_options, function (option) {%>\n                <option value="<%=option.currency_id%>" <%if (option.currency_id == item.getCurrencyId()) {%>selected="selected"<%}%>><%=option.name%></option>\n                <%});%>\n            </select>\n            <input type="text" class="control-full" id="listing_form_price" placeholder="<%= _t(\'Price\') %>" value="<%=item.getPrice() || 0.00%>" />\n        </div>\n\n        <%if (data.perms.bCanSell) {%>\n        <div class="form-title">\n            <%= _t(\'Enable Instant Payment\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_sell">\n                <option value="1" <%if (item.isSell()) {%>selected="selected"<%}%>><%=_t(\'Yes\')%></option>\n                <option value="0" <%if (!item.isSell()) {%>selected="selected"<%}%>><%=_t(\'No\')%></option>\n            </select>\n        </div>\n        <%}%>\n\n        <div class="form-title">\n            <%= _t(\'Location\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_country">\n                <option value=""><%= _t(\'Select Location\') %></option>\n                <%_.each(data.country_options, function (option) {%>\n                <option value="<%=option.country_iso%>" <%if (item.getCountryIso() == option.country_iso) {%>selected="selected"<%}%>><%=option.name%></option>\n                <%});%>\n            </select>\n            <div id="listing_form_country_childs_holder"></div>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'City\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_city" placeholder="<%= _t(\'City\') %>" value="<%=item.getCity()%>" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Zip / Postal Code\') %>\n        </div>\n        <div class="form-group">\n            <input type="text" class="control-full" id="listing_form_zipcode" placeholder="<%= _t(\'Zip / Postal Code\') %>" value="<%=item.getZipCode()%>" />\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'View Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_privacy">\n                <%_.each(data.view_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getPrivacyId()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n\n        <div class="form-title">\n            <%= _t(\'Comment Privacy\') %>\n        </div>\n        <div class="form-group">\n            <select class="control-full" id="listing_form_privacy_comment">\n                <%_.each(data.comment_options, function (option) {%>\n                <option value="<%=option.sValue%>" <%if (option.sValue == item.getPrivacyCommentId()) {%>selected="selected"<%}%>><%=option.sPhrase%></option>\n                <%});%>\n            </select>\n        </div>\n    </div>\n</div>\n<div class="listing-edit-form <%if (context.sView != \'photo\') {%>hide<%}%>" id="listing_edit_photo_holder">\n    <div class="clearfix" id="attachment_photo_holder"></div>\n    <div id="photo_add_btn" class="btn-form-photo"></div>\n</div>';});


define('text!marketplace/tpl/listing-edit.html',[],function () { return '<!-- marketplace/tpl/listing-edit.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="save_btn"><%= _t(\'Save\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title">\n\t\t\t<%=(sView == \'photo\') ? _t(\'Add Photos\') : _t(\'Edit Listing\')%>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="listing_edit_form_holder">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <div class="menu-item <%if (sView == \'info\') {%>current<%}%>" id="edit_info_btn">\n        \t<div class=""><%= _t(\'Info\') %></div>\n        </div>\n        <div class="menu-item <%if (sView == \'photo\') {%>current<%}%>" id="edit_photo_btn">\n        \t<div class="sibling"><%= _t(\'Photos\') %></div>\n        </div>\n    </div>\n</div>';});

define('marketplace/view/listing-edit',[
    'marketplace/model/listing-photo',
    'marketplace/view/listing-add-photo-item',
    'photo/view/photo-add-actions',
    'text!marketplace/tpl/country-childs.html',
    'text!marketplace/tpl/listing-edit-form.html',
    'text!marketplace/tpl/listing-edit.html'
], function(ListingPhotoModel, AttachmentAddPhotoItem, PhotoAddActionsView, textCountryChilds, textForm, text) {

    return Backbone.View.extend({
        className: 'listing-edit',
        region: {
            holder: '#main',
            scroller: '#content',
            formHolder: '#listing_edit_form_holder'
        },
        template: _.template(text),
        templateCountryChilds: _.template(textCountryChilds),
        templateForm: _.template(textForm),
        render: function(context) {

            this.context = $.extend({
                iItemId: null,
                sModule: null
            }, context);

            this.$el.attr('id', 'listing_edit');

            this.$el.html(this.template(this.context));

            this.$form_holder = this.$el.find(this.region.formHolder);
            this.$save_btn = this.$el.find('#save_btn');
            this.$edit_info_btn = this.$el.find('#edit_info_btn');
            this.$edit_photo_btn = this.$el.find('#edit_photo_btn');

            this.aCategoryId = [];
            this.aPhotoUpload = [];

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iListingId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('marketplace/formedit', postData, settings).done(this.fetchDataComplete).fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.formData = data;
            this.model.set(data);
            this.updateView();
        },
        updateView: function(data) {

            this.aCategoryId = this.model.getCategoryIds();

            this.$form_holder.html(this.templateForm({
                context: this.context,
                data: this.formData,
                item: this.model
            }));

            this.$attachment_photo_holder = this.$el.find('#attachment_photo_holder');
            this.$edit_info_holder = this.$el.find('#listing_edit_info_holder');
            this.$edit_photo_holder = this.$el.find('#listing_edit_photo_holder');
            this.$form_city = this.$el.find('#listing_form_city');
            this.$form_country = this.$el.find('#listing_form_country');
            this.$form_country_childs_holder = this.$el.find('#listing_form_country_childs_holder');
            this.$form_currency = this.$el.find('#listing_form_currency');
            this.$form_description = this.$el.find('#listing_form_description');
            this.$form_mini_description = this.$el.find('#listing_form_mini_description');
            this.$form_price = this.$el.find('#listing_form_price');
            this.$form_privacy = this.$el.find('#listing_form_privacy');
            this.$form_privacy_comment = this.$el.find('#listing_form_privacy_comment');
            this.$form_sell = this.$el.find('#listing_form_sell');
            this.$form_title = this.$el.find('#listing_form_title');
            this.$form_zipcode = this.$el.find('#listing_form_zipcode');
            this.$photo_add_btn = this.$el.find('#photo_add_btn');

            // update sub categories
            if (this.model.getCategoryIds()[0]) {
                var $form_category = this.$el.find('.listing-form-category');
                this.appendSubCategories($form_category, this.model.getCategoryIds());
            }

            // update country childs
            if (this.$form_country.val()) {
                this.fetchChilds(this.model.getCountryChildId());
            }

            // append photos
            if (this.model.hasPhotos()) {
                this.appendPhotos();
            }

            // bind input edit, paste events
            var self = this;
            this.$el.find('input').bind('input propertychange', function() {
                self.toggleSaveBtn();
            });
			this.$scroller.trigger('refresh');
        },
        appendPhotos: function() {

            var aPhoto = this.model.getPhotos();

            _.each(aPhoto, function(photo) {
                this.getPictureSuccess(photo.sImagePath, photo.iImageId);
            }, this);
        },
        fetchDataFail: function() {
            utils.debug.warn('FAIL: marketplace/formedit', arguments);
            utils.history.back();
        },
        events: {
            'change #listing_form_country': 'onChangeCountry',
            'change .listing-form-category': 'onChangeCategory',
            'click #edit_info_btn': 'onInfoBtnClick',
            'click #edit_photo_btn': 'onPhotoBtnClick',
            'click #photo_add_btn': 'onAddPhotoClick',
            'click #save_btn': 'onSaveClick',
            'onCamera': 'capturePhoto',
            'onGallery': 'browsePhoto'
        },
        onChangeCountry: function(evt) {

            this.toggleSaveBtn();

            this.$form_country_childs_holder.empty();

            if (this.$form_country.val()) {
                this.fetchChilds();
            }
        },
        fetchChilds: function(selected) {

            var postData = {
                sCountryIso: this.$form_country.val()
            };
            var settings = {
                context: this
            };

            this.ajaxChilds && this.ajaxChilds.abort();

            this.ajaxChilds = utils.api.get('core/getchilds', postData, settings).done(function(data) {
                if (data.error_code && data.error_code > 0) {
                    return utils.modal.alert(data.error_message || _t('Can not load country childs'));
                }

                this.updateChilds(data, selected);
            }).fail(function() {
                utils.debug.warn('FAIL: core/getchilds', arguments);
            });
        },
        updateChilds: function(data, selected) {

            if (data.length > 0) {
                this.$form_country_childs_holder.html(this.templateCountryChilds({
                    data: data,
                    selected: selected || 0
                }));
            }
        },
        onChangeCategory: function(evt) {

            var $target = $(evt.currentTarget);

            var $subs_holder = $target.parent().children('.listing-form-category-subs-holder');

            $subs_holder.empty();

            this.updateCategories();

            this.toggleSaveBtn();

            if ($target.val()) {
                this.appendSubCategories($target);
            }
        },
        updateCategories: function() {

            this.aCategoryId = [];

            var $form_category = this.$el.find('.listing-form-category');

            _.each($form_category, function(item) {
                if ($(item).val()) {
                    this.aCategoryId.push($(item).val());
                }
            }, this);
        },
        appendSubCategories: function($target, aSelected) {

            var subCategoriesHtml = utils.helper.getSubCategoriesHtml(this.formData.category_options, $target.val(), aSelected);

            var $subs_holder = $target.parent().children('.listing-form-category-subs-holder');

            $subs_holder.html(subCategoriesHtml);
        },
        onInfoBtnClick: function(evt) {

            this.$edit_photo_btn.removeClass('current');
            this.$edit_info_btn.addClass('current');
            this.$edit_photo_holder.addClass('hide');
            this.$edit_info_holder.removeClass('hide');
        },
        onPhotoBtnClick: function(evt) {

            this.$edit_info_btn.removeClass('current');
            this.$edit_photo_btn.addClass('current');
            this.$edit_info_holder.addClass('hide');
            this.$edit_photo_holder.removeClass('hide');
        },
        onAddPhotoClick: function(evt) {

            new PhotoAddActionsView().render({
                delegateId: this.$el.attr('id')
            }).inject();
        },
        capturePhoto: function(evt) {
            var self = this;

            navigator.device.capture.captureImage(captureImageSuccess, captureImageFail, {
                limit: 1
            });

            function captureImageSuccess(mediaFiles) {
                var sImgSrc = mediaFiles[0].fullPath;
                self.getPictureSuccess(sImgSrc);
            }

            function captureImageFail(error) {
                utils.debug.log(error);
            }
        },
        browsePhoto: function(evt) {
            var self = this;

            navigator.camera.getPicture(getPictureSuccess, getPictureFail, {
                quality: 10,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                correctOrientation: true
            });

            function getPictureSuccess(imageURI) {
                self.getPictureSuccess(imageURI);
            }

            function getPictureFail(msg) {
                utils.debug.log(msg);
            }
        },
        getPictureSuccess: function(fileURI, id) {

            var item = new ListingPhotoModel({
                iImageId: id || 0,
                sImagePath: fileURI
            });

            this.appendAttachmentItem(item, AttachmentAddPhotoItem, this.$attachment_photo_holder);
        },
        appendAttachmentItem: function(item, View, $holder) {

            if (!item.getId()) {
                this.aPhotoUpload.push(item.getPhotoUrl());
            }

            var attachmentItem = new View({
                model: item
            });

            var context = {
                postDelete: item.getId() > 0 ? true : false
            };

            var inject = function(dom) {
                $holder.append(dom);
            };

            attachmentItem.render(context).inject(inject);

            attachmentItem.on('removesuccess', this.removeAttachmentItem, this);
        },
        removeAttachmentItem: function(item) {

            var index = this.aPhotoUpload.indexOf(item.getPhotoUrl());
            if (index > -1) {
                this.aPhotoUpload.splice(index, 1);
            }
        },
        onSaveClick: function(evt) {

            (this.aPhotoUpload.length > 0) ? this.uploadPhotos(evt) : this.saveListing(evt);
        },
        uploadPhotos: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            if (!this.validateData(true)) {
                return;
            }

            this.uploadPhotoData = {
                success_count: 0,
                error_message: _t('Can not upload photo(s). Please try again later.'),
                postData: {
                    iListingId: this.model.getId()
                }
            };

            this.uploadPhoto(0);
        },
        uploadPhoto: function(index) {

            var self = this;

            utils.api.uploadImage('marketplace/photoupload', this.aPhotoUpload[index], this.uploadPhotoData.postData).done(function(data) {
                self.uploadPhotoDone(data, index);
            }).fail(function() {
                self.uploadPhotoFail(arguments, index);
            });
        },
        uploadPhotoDone: function(data, index) {

            if (data.error_code && data.error_code > 0) {
                this.uploadPhotoData.error_message = data.error_message || this.uploadPhotoData.error_message;
            } else {
                this.uploadPhotoData.success_count++; // will ignore errors if have any success photos
            }

            this.uploadPhotoComplete(index);
        },
        uploadPhotoFail: function(arguments, index) {

            utils.debug.warn('FAIL: marketplace/photoupload ' + index, arguments);

            this.uploadPhotoComplete(index);
        },
        uploadPhotoComplete: function(index) {

            if (index >= this.aPhotoUpload.length - 1) {
                (this.uploadPhotoData.success_count > 0) ? this.saveListing() : utils.modal.alert(this.uploadPhotoData.error_message);
            } else {
                this.uploadPhoto(index + 1);
            }
        },
        saveListing: function(evt) {

            if (this.$save_btn.hasClass('processing')) {
                return;
            }

            if (!this.validateData(true)) {
                return;
            }

            var $form_country_childs = this.$el.find('#listing_form_country_childs');

            var postData = {
                iListingId: this.model.getId(),
                aCategoryId: this.aCategoryId,
                sTitle: this.$form_title.val(),
                sCountryIso: this.$form_country.val(),
                sPrice: this.$form_price.val(),
                sMiniDescription: this.$form_mini_description.val(),
                sDescription: this.$form_description.val(),
                sCurrencyId: this.$form_currency.val(),
                iIsSell: this.$form_sell.val(),
                iAutoSell: 0,
                iCountryChildId: $form_country_childs.length > 0 ? $form_country_childs.val() : 0,
                sCity: this.$form_city.val(),
                sPostalCode: this.$form_zipcode.val(),
                iPrivacy: this.$form_privacy.val(),
                iPrivacyComment: this.$form_privacy_comment.val(),
                sEmails: '',
                sPersonalMessage: '',
            };

            var settings = {
                context: this
            };

            this.$save_btn.addClass('processing');

            utils.api.post('marketplace/edit', postData, settings).done(this.saveDone).always(function() {
                this.$save_btn.removeClass('processing');
            });
        },
        saveDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            var message = this.$edit_info_btn.hasClass('current') ? _t('Listing successfully updated.') : _t('Successfully uploaded images.');
            utils.modal.toast(message);

            window.location.href = '#listing/' + data.iListingId;
        },
        validateData: function(bAlert) {

            if (this.aCategoryId.length == 0) {
                bAlert && utils.modal.alert(_t('Provide a category this listing will belong to.'));
                return false;
            }

            if (!this.$form_title.val().trim()) {
                bAlert && utils.modal.alert(_t('Provide a name for this listing.'));
                return false;
            }

            if (!this.$form_price.val().trim()) {
                bAlert && utils.modal.alert(_t('Provide a valid price.'));
                return false;
            }

            if (!this.$form_country.val()) {
                bAlert && utils.modal.alert(_t('Provide a location for this listing.'));
                return false;
            }

            return true;
        },
        toggleSaveBtn: function(evt) {

            var bDisable = !this.validateData();

            this.$save_btn.toggleClass('disabled', bDisable);
        }
    });
});
define('marketplace/controller/listing-edit',[
    'marketplace/model/listing',
    'marketplace/view/listing-edit'
], function(Model, EditView) {

    var EditController = function(id, view) {

        utils.observer.trigger('router:changed');

        new EditView({
            model: new Model({
                iListingId: id
            })
        }).render({
            sView: view || 'info'
        }).inject();
    }

    utils.router.route('listing/:id/edit(/:view)', EditController);
});

define('text!marketplace/tpl/listing-index.html',[],function () { return '<!-- marketplace/tpl/listing-index.html-->\n<div class="header">\n\t<div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n\t\t<i class="icon icon-sidebar"></i>\n\t</div>\n\t<div class="header-right">\n\t\t<a class="btn-top btn-add hide" href="#listings/add" id="add_btn"></a>\n\t</div>\n\t<div class="header-center">\n\t\t<%=utils.helper.updater()%>\n\t</div>\n</div>\n\n<div id="search_view_holder" class="marketplace"></div>\n\n<div class="content with-header-footer body-bg with-search swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'No listings found.\') %></div>\n\t\t\t<div class="swiper-list vertical marketplace-landing" id="listing_list_holder">\n\t\t\t</div>\n\t\t\t<%= utils.helper.loadmore() %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a class="menu-item <%if (sView == \'all\') {%>current<%}%>" href="#listings">\n        \t<div class=""><%= _t(\'All Listings\') %></div>\n        </a>\n        <a class="menu-item <%if (sView == \'my\') {%>current<%}%>" href="#listings/my">\n        \t<div class="sibling"><%= _t(\'My Listings\') %></div>\n        </a>\n    </div>\n</div>';});


define('text!marketplace/tpl/listing-list.html',[],function () { return '<div class="loading-initiator">\r\n\t<!-- loading ... -->\r\n</div>\r\n';});

define('marketplace/view/listing-list',[
    'marketplace/model/listing',
    'marketplace/view/listing-item',
    'text!marketplace/tpl/listing-list.html',
], function(Model, ItemView, text) {

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfMarketplace: 10,
            sSearch: ""
        },
        followById: false,
        api: 'marketplace/fetch',
        phraseNotFound: _t('No listings found.'),
        phraseNotMore: _t('No more listings.'),
        className: 'listing-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('text!marketplace/tpl/listing-search.html',[],function () { return '<div class="search-simple">\n\t<div id="adv_search_toggle_btn" class="btn-advance-search"></div>\n\t<div class="form-search-group">\n\t\t<span id="search_icon" class="icon-search"></span>\n\t\t<input type="text" class="input-search control-full" id="search_keywords" placeholder="<%= _t(\'Search listings\') %>" value="" />\n\t</div>\n</div>\n<div id="adv_search_holder" class="search-advanced hide">\n\t<div class="form-search-group inline">\n\t\t<div class="form-group">\n\t\t\t<select class="control-full" id="search_category">\n                <option value=""><%= _t(\'All Categories\') %></option>\n            </select>\n        </div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_location">\n                <option value=""><%= _t(\'Anywhere\') %></option>\n            </select>\n        </div>\n\t</div>\n        <div class="form-group">\n\t\t\t<select class="control-full" id="search_order">\n                <option value="latest"><%= _t(\'Latest\') %></option>\n                <option value="most_liked"><%= _t(\'Most Liked\') %></option>\n                <option value="most_disscussed"><%= _t(\'Most Discussed\') %></option>\n            </select>\n        </div>\n\t<div class="form-search-submit">\n\t\t<input type="button" class="btn btn-primary btn-small-fluid" id="search_btn" value="<%= _t(\'Search\') %>" />\n\t</div>\n</div>\n';});

define('marketplace/view/listing-search',[
    'text!marketplace/tpl/listing-search.html'
], function(text) {

    return Backbone.View.extend({
        region: {
            holder: '#search_view_holder'
        },
        className: 'search-area',
        template: _.template(text),
        render: function(query) {

            this.$el.html(this.template($.extend({}, query)));

            this.$categoryInput = this.$el.find('#search_category');
            this.$locationInput = this.$el.find('#search_location');
            this.$orderInput = this.$el.find('#search_order');
            this.$keywordInput = this.$el.find('#search_keywords');
            this.$advSearchHolder = this.$el.find('#adv_search_holder');

            return this;
        },
        inject: function() {

            $(this.region.holder).html(this.$el);

            this.fetchData();

            return this;
        },
        fetchData: function() {
            utils.api.get('marketplace/formsearch', {}, {
                context: this
            }).done(this.updateView);
        },
        updateView: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            }

            if (!data.aCategory || !data.aLocation) {
                return utils.modal.alert(_t('Can not load data from server.'));
            }

            // append category
            _.each(data.aCategory, function(option) {
                this.$categoryInput.append(new Option(option.name, option.category_id));
            }, this);

            // append location
            _.each(data.aLocation, function(option) {
                this.$locationInput.append(new Option(option.name, option.country_iso));
            }, this);
        },
        events: {
            "click #adv_search_toggle_btn": "toggleAdvSearch",
            "click #search_icon": "submitSearch",
            "click #search_btn": "submitSearch"
        },
        toggleAdvSearch: function(evt) {
            this.$advSearchHolder.toggleClass("hide");
        },
        submitSearch: function() {

            this.$advSearchHolder.addClass('hide');

            this.trigger('submit', {
                sSearch: this.$keywordInput.val() || '',
                iCategoryId: this.$categoryInput.val() || '0',
                sCountryIso: this.$locationInput.val() || '',
                sOrder: this.$orderInput.val() || 'latest'
            });
        }
    });

});
define('marketplace/view/listing-index',[
    'text!marketplace/tpl/listing-index.html',
    'marketplace/view/listing-list',
    'marketplace/view/listing-search'
], function(text, ListingListView, SearchView) {

    return Backbone.PolyplatformView.extend({
        moduleId: 'marketplace/view/listing-index',
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function() {},
        render: function(query) {

            this.query = $.extend({}, query);

            this.$el.html(this.template(this.query));

            this.$add_btn = this.$el.find('#add_btn');
            this.$listHolder = this.$el.find('#listing_list_holder');

            return this;
        },
        inject: function() {

            this.$holder = $(this.region.holder);

            this.$holder.html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.fetchData(); // fetch permissions

            this.listView = new ListingListView({}, this.$listHolder, this.$scroller);

            this.listView.render(this.query).inject();

            this.searchView = new SearchView();

            this.searchView.render(this.query).inject();

            var self = this;

            this.searchView.on('submit', function(data) {
                self.listView.resetQuery($.extend({}, self.query, data));
            });

            return this;
        },
        fetchData: function() {

            var settings = {
                context: this
            };

            utils.api.post('marketplace/perms', {}, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            if (data.bCanCreateListing) {
                this.$add_btn.removeClass('hide');
            }
        },
        fetchFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('[FAIL] marketplace/perms', arguments);
        }
    });
});
define('marketplace/controller/listing-index',[
    'marketplace/view/listing-index'
], function(IndexView) {

    var IndexController = function() {

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'all'
        }).inject();
    }

    var MyController = function() {

        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render({
            sView: 'my',
            iUserId: Backbone.iUserId
        }).inject();
    }

    utils.router.route('listings', IndexController);

    utils.router.route('listings/my', MyController);
});

define('text!marketplace/tpl/listing-invite-item.html',[],function () { return '<div class="item-image" style="background-image:url(\'<%=item.getImageSrc()%>\')"></div>\n<div class="item-title"><%=item.getTitle()%></div>\n<div class="item-mark"><input type="checkbox" class="item-checkbox" data-id="<%=item.getId()%>" /></div>';});

define('marketplace/view/listing-invite-item',[
    'text!marketplace/tpl/listing-invite-item.html'
], function(text) {

    return Backbone.View.extend({
        region: {},
        className: 'listing-invite-item',
        template: _.template(text),
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            return this;
        },
        inject: function(inject) {
            inject(this.el);
        }
    });
});

define('text!marketplace/tpl/listing-invite-list.html',[],function () { return '<div class="loading-initiator"></div>';});

define('marketplace/view/listing-invite-list',[
    'marketplace/view/listing-invite-item',
    'text!marketplace/tpl/listing-invite-list.html',
    'user/model/user',
], function(ItemView, text, Model) {

    return Backbone.ListView.extend({
        defaults: {
            iListingId: 0
        },
        followById: false,
        api: 'marketplace/getinvitepeople',
        phraseNotFound: 'No friends found.',
        phraseNotMore: 'No more friends.',
        className: 'friend-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('text!marketplace/tpl/listing-invite.html',[],function () { return '<!-- marketplace/tpl/listing-invite.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top" rel="back">\n\t\t\t<%= _t(\'Cancel\') %>\n\t\t</div>\n\t</div>\n\t<div class="header-right">\n\t\t<div class="btn-top" id="invite_btn"><%= _t(\'Invite\') %></div>\n\t</div>\n\t<div class="header-center">\n\t\t<div id="page_title" class="title">\n\t\t\t<%= _t(\'Invite Friends\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header-footer swiper-container" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div class="not-found hide" id="not_found"><%= _t(\'You have no friends you can invite.\') %></div>\n\t\t\t<div id="listing-invite-list">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading\t\t\t\t -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="footer">\n\t<div class="clearfix menu-justify grid-2 fobos">\n        <a id="markall_btn" class="menu-item" href="javascript:void(0)">\n        \t<div class=""><%= _t(\'Mark All\') %></div>\n        </a>\n        <a id="unmarkall_btn" class="menu-item" href="javascript:void(0)">\n        \t<div class="sibling"><%= _t(\'Unmark All\') %></div>\n        </a>\n    </div>\n</div>';});

define('marketplace/view/listing-invite',[
    'marketplace/view/listing-invite-list',
    'text!marketplace/tpl/listing-invite.html',
    'user/collection/user'
], function(ListView, text, UserCollection) {

    return Backbone.View.extend({
        region: {
            wrapper: '#main',
            scroller: '#content',
            listViewHolder: '#listing-invite-list'
        },
        initialize: function() {
            this.invitePeople = new UserCollection();
        },
        template: _.template(text),
        render: function() {

            this.$el.html(this.template());

            this.$scroller = this.$el.find(this.region.scroller);
            this.$listViewHolder = this.$el.find(this.region.listViewHolder);
            this.$inviteBtn = this.$el.find('#invite_btn');

            return this;
        },
        inject: function() {

            $(this.region.wrapper).html(this.$el);

            this.$scroller.ensureVerticalScroll();

            // get user list
            this.listView = new ListView({}, this.$listViewHolder, this.$scroller, {
                loadmore: false,
                loadnew: false
            });

            this.listView.render({
                iListingId: this.model.getId()
            }).inject();

            return this;
        },
        events: {
            "click .listing-invite-item": "clickItem",
            "click #markall_btn": "markAll",
            "click #unmarkall_btn": "unmarkAll",
            "click #invite_btn": "invite"
        },
        clickItem: function(evt) {

            if (!$(evt.target).is(':checkbox')) {
                var checkbox = $(evt.currentTarget).find(':checkbox');

                if (checkbox.is(':checked')) {
                    checkbox.prop('checked', false);
                } else {
                    checkbox.prop('checked', true);
                }
            }
        },
        markAll: function(evt) {
            $(':checkbox').prop('checked', true);
        },
        unmarkAll: function(evt) {
            $(':checkbox').prop('checked', false);
        },
        invite: function(evt) {
            if (this.$inviteBtn.isProcessing()) {
                return false;
            }

            var aUserId = new Array();
            $(":checkbox:checked").each(function() {
                aUserId.push($(this).data('id'));
            });

            if (aUserId.length == 0) {
                utils.modal.alert(_t('Please select friend to invite.'));
                return false;
            }

            var postData = {
                iListingId: this.model.getId(),
                sUserId: aUserId.join(',')
            };
            var settings = {
                context: this,
                timeout: 0
            };

            this.$inviteBtn.isProcessing(true);

            // post invite
            utils.api.post('marketplace/invite', postData, settings).done(this.doInviteComplete).fail(this.doInviteFail).always(this.doInviteAlways);
        },
        doInviteComplete: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server.'));
            }

            utils.modal.toast('Invited member(s) successfully!');
            utils.history.back();
        },
        doInviteFail: function() {

            utils.debug.warn('FAIL: marketplace/invite', arguments);
        },
        doInviteAlways: function() {

            this.$inviteBtn.isProcessing(false);
        }
    });
});
define('marketplace/controller/listing-invite',[
    'marketplace/model/listing',
    'marketplace/view/listing-invite'
], function(ListingModel, ListingInviteView) {

    function ListingInviteController(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new ListingInviteView({
            model: new ListingModel({
                iListingId: id
            })
        }).render().inject();
    }

    utils.router.route('listing/:id/invite', ListingInviteController);
});
define('core/plugin/purchase',[], function() {
    

    var IAP = {
        list: [],
        products: {}
    };

    var localStorage = window.localStorage || {};

    IAP.initialize = function(list, loadCallback, purchaseCallback, errorCallback) {

        utils.debug.log('IAP.initialize', JSON.stringify(arguments));

        IAP.list = _.union(IAP.list, list);
        IAP.loadCallback = loadCallback;
        IAP.purchaseCallback = purchaseCallback;
        IAP.errorCallback = errorCallback;

        // Check availability of the storekit plugin
        if (!window.storekit) {
            var errorMessage = _t('In-App Purchases is not available.');
            IAP.errorCallback && IAP.errorCallback(1, errorMessage);
            return utils.debug.warn('FAIL: IAP.initialize', errorMessage);
        }

        // Initialize
        storekit.init({
            ready: IAP.onReady,
            purchase: IAP.onPurchase,
            restore: IAP.onRestore,
            error: IAP.onError
        });
    };

    IAP.onReady = function() {
        // Once setup is done, load all product data.
        storekit.load(IAP.list, function(products, invalidIds) {

            utils.debug.log('DONE: storekit.load', JSON.stringify(arguments));

            IAP.loaded = true;

            IAP.loadCallback && IAP.loadCallback(products, invalidIds);
        });
    };

    IAP.onPurchase = function(transactionId, productId /*, receipt*/ ) {

        utils.debug.log('IAP.onPurchase', JSON.stringify(arguments));

        var n = (localStorage['storekit.' + productId] | 0) + 1;
        localStorage['storekit.' + productId] = n;

        IAP.purchaseCallback && IAP.purchaseCallback(transactionId, productId);
    };

    IAP.onError = function(errorCode, errorMessage) {

        utils.debug.warn('IAP.onError', JSON.stringify(arguments));

        IAP.errorCallback && IAP.errorCallback(errorCode, errorMessage);
    };

    IAP.onRestore = function(transactionId, productId /*, transactionReceipt*/ ) {
        var n = (localStorage['storekit.' + productId] | 0) + 1;
        localStorage['storekit.' + productId] = n;
    };

    IAP.buy = function(productId, quantity) {

        utils.debug.log('IAP.buy', JSON.stringify(arguments));

        storekit.purchase(productId, quantity);
    };

    IAP.restore = function() {
        storekit.restore();
    };

    return IAP;
});

define('text!marketplace/tpl/listing-purchase-update.html',[],function () { return '<div class="item-wrapper">\n    <div class="item-table">\n        <div class="table-row">\n            <div class="table-left">\n                <span><%=_t(\'Item\')%></span>\n            </div>\n            <div class="table-right">\n                <span><%=item.getTitle()%></span>\n            </div>\n        </div>\n        <div class="table-row price">\n            <div class="table-left">\n                <span><%=_t(\'Price\')%></span>\n            </div>\n            <div class="table-right">\n                <span class="item-currency-symbol"><%=item.getCurrencySymbol()%></span>\n                <span><%=item.getPrice()%></span>\n            </div>\n        </div>\n    </div>\n    <div class="item-content">\n        <div class="message">\n            <span><%=_t(\'By clicking on the button below, you commit to buy this item from the seller.\')%></span>\n        </div>\n        <div class="" id="commit_btn">\n            <span><%=_t(\'Commit to Buy\')%></span>\n        </div>\n    </div>\n</div>';});


define('text!marketplace/tpl/listing-purchase.html',[],function () { return '<!-- marketplace/tpl/listing-purchase.html -->\n<div class="header">\n\t<div class="header-left">\n\t\t<div class="btn-top btn-back" rel="back">\n\t\t</div>\n\t</div>\n\t<div class="header-center">\n\t\t<div class="title" id="page_title">\n\t\t\t<%= _t(\'Confirm Purchase\') %>\n\t\t</div>\n\t</div>\n</div>\n\n<div class="content with-header swiper-container marketplace-purchase" id="content">\n\t<div class="swiper-wrapper">\n\t\t<div class="swiper-slide">\n\t\t\t<div id="listing_purchase_holder" class="listing-purchase-content">\n\t\t\t\t<div class="loading-initiator">\n\t\t\t\t\t<!-- Loading -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('marketplace/view/listing-purchase',[
    'core/plugin/purchase',
    'text!marketplace/tpl/listing-purchase-update.html',
    'text!marketplace/tpl/listing-purchase.html'
], function(IAP, textUpdate, text) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content',
            update_holder: '#listing_purchase_holder'
        },
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        render: function() {

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $(this.region.holder);
            this.$scroller = this.$el.find(this.region.scroller);
            this.$update_holder = this.$el.find(this.region.update_holder);

            return this;
        },
        inject: function() {

            this.$holder.html(this.$el);

            this.$scroller.ensureVerticalScroll();

            this.fetchData();

            return this;
        },
        fetchData: function() {

            var postData = {
                iListingId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.get('marketplace/detail', postData, settings).done(this.fetchDataDone).fail(this.fetchDataFail);
        },
        fetchDataDone: function(data) {
            if (data.error_code && data.error_code > 0) {
                utils.modal.alert(data.error_message || _t('Can not load data from server'));
                return utils.history.back();
            }

            this.model.set(data);
            this.initIAP();
        },
        fetchDataFail: function() {
            utils.debug.log(arguments);
            utils.history.back();
        },
        initIAP: function() {

            if (!this.model.getStoreKitPurchaseId()) {
                utils.modal.alert(_t('In-App Purchases is not available.'));
                return utils.history.back();
            }

            var self = this;

            var IAPLoad = function(products, invalidIds) {
                self.initIAPDone(products, invalidIds);
            };

            var IAPDone = function(transactionId, productId) {
                self.purchaseDone(transactionId, productId);
            };

            var IAPError = function(errorCode, errorMessage) {
                self.iInvoiceId ? self.purchaseFail(errorCode, errorMessage) : self.initIAPFail(errorMessage);
            };

            IAP.initialize([this.model.getStoreKitPurchaseId()], IAPLoad, IAPDone, IAPError);
        },
        initIAPDone: function(products, invalidIds) {

            this.storeKitPurchase = {};

            for (var i in products) {
                if (products[i].id == this.model.getStoreKitPurchaseId()) {
                    this.storeKitPurchase = $.extend({}, products[i], {
                        price: products[i].price.substr(1)
                    });
                }
            }

            if (!this.storeKitPurchase.id || invalidIds.indexOf(this.model.getStoreKitPurchaseId()) > -1) {
                utils.debug.warn('In-App Purchases Id is invalid.');
                utils.modal.alert(_t('In-App Purchases is not available.'));
                return utils.history.back();
            }

            this.updateView();
        },
        initIAPFail: function(errorMessage) {

            utils.modal.alert(errorMessage);
            return utils.history.back();
        },
        updateView: function() {

            this.$update_holder.html(this.templateUpdate({
                item: this.model
            }));

            this.$commit_btn = this.$el.find('#commit_btn');
        },
        events: {
            'click #commit_btn': 'onCommitClick'
        },
        onCommitClick: function() {

            if (this.$commit_btn.hasClass('processing')) {
                return;
            }

            utils.debug.log('this.storeKitPurchase', JSON.stringify(this.storeKitPurchase));

            if (!IAP.loaded || !this.storeKitPurchase.id) {
                return utils.modal.alert(_t('In-App Purchases is not available.'));
            }

            if (this.model.getCurrencyId() != 'USD') {
                return utils.modal.alert(_t('In-App Purchases does not support this currency. Please purchase in full site.'));
            }

            this.startProcess();

            this.addTransaction();
        },
        addTransaction: function() {

            var postData = {
                iListingId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('marketplace/transactionadd', postData, settings).done(this.addTransactionDone).fail(this.addTransactionFail);
        },
        addTransactionDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                this.stopProcess();
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            this.iInvoiceId = data.iInvoiceId;
            this.purchase();
        },
        addTransactionFail: function() {

            utils.debug.warn('FAIL: marketplace/transactionadd', arguments);
            this.stopProcess();
        },
        purchase: function() {

            var quantity = (this.storeKitPurchase.price == 0) ? 1 : Math.ceil(this.model.getPrice() / this.storeKitPurchase.price);

            IAP.buy(this.storeKitPurchase.id, quantity);
        },
        purchaseDone: function(transactionId, productId) {

            this.stopProcess();

            this.updateTransaction('success', transactionId);
            utils.modal.alert('Your payment is completed.');

            window.location.href = '#listings';
        },
        purchaseFail: function(errorCode, errorMessage) {

            this.stopProcess();

            this.updateTransaction('fail');
            utils.modal.alert(errorMessage || _t('Your payment is cancelled.'));
        },
        updateTransaction: function(sStatus, transactionId) {

            var postData = {
                iInvoiceId: this.iInvoiceId,
                sStoreKidTransactionId: transactionId,
                sStatus: sStatus,
                sDevice: constants.device
            };
            var settings = {
                context: this
            };

            utils.api.post('marketplace/transactionupdate', postData, settings).done(this.updateTransactionDone).fail(this.updateTransactionFail).always(function() {
                this.iInvoiceId = null;
            });
        },
        updateTransactionDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.debug.warn('FAIL: marketplace/transactionupdate', data);
            }

            utils.debug.log('SUCCESS: marketplace/transactionupdate', data);
        },
        updateTransactionFail: function() {

            utils.debug.warn('FAIL: marketplace/transactionupdate', arguments);
        },
        startProcess: function() {

            this.$commit_btn.addClass('processing');
            this.$commit_btn.find('span').html(_t('Processing...'));
        },
        stopProcess: function() {

            this.$commit_btn.removeClass('processing');
            this.$commit_btn.find('span').html(_t('Commit to Buy'));
        }
    });
});
define('marketplace/controller/listing-purchase',[
    'marketplace/model/listing',
    'marketplace/view/listing-purchase'
], function(Model, PurchaseView) {

    var PurchaseController = function(id) {

        utils.history.push();

        utils.observer.trigger('router:changed');

        new PurchaseView({
            model: new Model({
                iListingId: id
            })
        }).render().inject();
    }

    utils.router.route('listing/:id/purchase', PurchaseController);
});

define('text!marketplace/tpl/attachment-listing.html',[],function () { return '<div class="att-item-wrapper">\n\t<a href="<%=item.getUrl()%>" class="att-item-image"><img src="<%=item.getImageSrc()%>"/></a>\n\t<div class="att-item-detail">\n\t\t<a href="<%=item.getUrl()%>" class="item-title"><%=item.getTitle()%></a>\n\t\t<div class="att-item-price">\n\t\t    <%if (item.getPrice() == 0) {%>\n\t\t    <span><%=_t(\'Free\')%></span>\n\t\t    <%} else {%>\n\t\t    <span class="item-currency-symbol"><%=item.getCurrencySymbol()%></span>\n\t\t    <span><%=item.getPrice()%></span>\n\t\t    <%}%>\n\t\t</div>\n\t\t<div class="att-item-text">\n\t\t\t<i class="icon icon-folder-close"></i>\n\t\t\t<span><%=item.getCategory()%></span>\n\t\t</div>\n\t\t<div class="att-item-text">\n\t\t\t<i class="icon icon-location-arrow"></i>\n\t\t\t<span><%=item.getLocation()%></span>\n\t\t</div>\n\t</div>\n</div>';});

define('marketplace/view/attachment-listing',[
    'marketplace/model/listing',
    'text!marketplace/tpl/attachment-listing.html'
], function(Model, text) {

    return Backbone.View.extend({
        region: {},
        className: 'attachment-listing',
        template: _.template(text),
        render: function() {

            var feed = this.model;
            var oAtt = feed.getAttachments()[0];

            var item = new Model($.extend(oAtt, {
                iListingId: oAtt.iId,
                sMarketplaceImage: oAtt.sPhoto_Url
            }));

            this.$el.html(this.template({
                item: item
            }));

            return this;
        },
        inject: function(dom) {
            dom.html(this.el);
        }
    });
});
define('marketplace/plugin/activity',[
    'marketplace/view/attachment-listing'
], function(ListingAttachmentView) {

    utils.headline.add([
        'advancedmarketplace',
        'marketplace'
    ], function(item) {
        return _t('created a listing.');
    });

    utils.attachment.add(['advancedmarketplace', 'marketplace'], ListingAttachmentView);
});
define('marketplace/main',[
    'core',
    'marketplace/controller/listing-add',
    'marketplace/controller/listing-detail',
    'marketplace/controller/listing-edit',
    'marketplace/controller/listing-index',
    'marketplace/controller/listing-invite',
    'marketplace/controller/listing-purchase',
    'marketplace/plugin/activity'
], function(core) {

    core.sidebar.configs.set('marketplace', {
        icon: 'icon-sidebar-marketplace',
        label: 'Marketplace',
        url: '#listings'
    });
});
define('marketplace', ['marketplace/main'], function (main) { return main; });


define('text!subscribe/tpl/subscription-index.html',[],function () { return '<!-- subscribe/tpl/subscription-index.html-->\n<div class="header">\n    <div class="header-left">\n        <div class="btn-top btn-back" rel="back">\n        </div>\n    </div>\n    <div class="header-right">\n    </div>\n    <div class="header-center">\n        <div class="title">\n            <%= _t(\'Memberships\') %>\n        </div>\n    </div>\n</div>\n\n\n<div class="content with-header swiper-container subscription-index" id="content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div class="swiper-list vertical-align" id="subscription_list_holder">\n            </div>\n            <%= utils.helper.loadmore() %>\n        </div>\n    </div>\n</div>\n\n\n';});

define('subscribe/model/package',[], function() {

    var Model = Backbone.Model.extend({
        idAttribute: 'iPackageId',
        defaults: {
            sModelType: 'subscribe'
        }
    });

    Model.prototype.getPackageImageSrc = function() {

        return this.get('sSubscriptionPackageImage') || '';
    };

    Model.prototype.getDefaultCost = function() {

        return this.get('sDefaultCost') || '';
    };

    Model.prototype.getCurrencySymbol = function() {

        return this.get('sCurrencySymbol') || '';
    };

    Model.prototype.getDefaultRecurringCost = function() {

        return this.get('sDefaultRecurringCost') || '';
    };

    Model.prototype.getRecurringPeriod = function() {

        return this.get('sRecurringPeriod').toLowerCase() || '';
    };

    Model.prototype.getStoreKitPurchaseId = function() {
        return this.get('aStoreKitPurchaseId')[constants.device] || '';
    }

    Model.prototype.getCurrencyId = function() {
        return this.get('sDefaultCurrencyId') || '';
    }

    Model.prototype.getSignupPurchaseId = function() {
        return this.get('iSignupPurchaseId') || 0;
    }

    Model.prototype.getPlayStoreProductId = function() {
        return this.get('sPlayStoreProductId') || '';
    }

    return Model;
});

define('text!subscribe/tpl/subscription-item.html',[],function () { return '<div class="clearfix item-wrapper">\n\t<div class="item-image">\n        <img src="<%=item.getPackageImageSrc()%>" />\n    </div>\n    <div class="item-content">\n       <div class="item-headline">\n\t\t\t<%=item.getTitle()%>\n\t\t</div>\n        <div class="item-stats">\n           <span><%= item.getCurrencySymbol() %><%= item.getDefaultCost() %></span> one time\n            <% if (item.getDefaultRecurringCost()) {%> and then <span><%= item.getCurrencySymbol() %><%= item.getDefaultRecurringCost() %></span> <%= item.getRecurringPeriod() %>\n            <%}%>\n        </div>\n    </div>\n    <div class="item-description">\n        <%= utils.str.shorten(item.getDescription(), 150, true) %>\n    </div>\n</div>\n';});

define('subscribe/view/subscription-item',[
    'text!subscribe/tpl/subscription-item.html'
],function(text) {

    return Backbone.ItemView.extend({
        className: 'subscription-item',
        template: _.template(text),
        events: {
        },

        render: function (context) {

            this.$el.html(this.template({item: this.model}));

            this.$el.attr('id', this.model.getDataId());

            return this;
        },

        inject: function (inject) {
            inject(this.$el);
            return this;
        }
    });
});


define('text!subscribe/tpl/subscription-list.html',[],function () { return '<div id="subscription_list_holder">\n    <div class="loading-initiator"></div>\n</div>\n\n';});

define('subscribe/view/subscription-list',[
    'subscribe/model/package',
    'subscribe/view/subscription-item',
    'text!subscribe/tpl/subscription-list.html'
],function(Model, ItemView, text){

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfSubscribe: 20
        },
        followById: false,
        api: 'subscribe/fetch',
        phraseNotFound: 'No subscription plans found.',
        phraseNotMore: 'No more subscription plans.',
        className: 'subscription-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});


define('subscribe/view/subscription-index',[
    'text!subscribe/tpl/subscription-index.html',
    'subscribe/view/subscription-list'
],function(text, ListView){

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function(){

        },
        render: function(){

            this.$el.html(this.template());

            return this;
        },
        inject: function(params){

            var $holder = $(this.region.holder).html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.listView  = new ListView({},
                this.$el.find('#subscription_list_holder'),
                this.$scroller,
                {
                    loadmore: false,
                    loadnew: false
                });


            // render list view
            this.listView.render().inject();

            return this;
        }
    });
});


define('subscribe/controller/subscription-index',[
    'subscribe/view/subscription-index'
], function (IndexView) {

    function subscriptionIndex()
    {
//        utils.history.push();

        utils.observer.trigger('router:changed');

        new IndexView().render().inject();
    }

    utils.router.route('subscriptions', subscriptionIndex);
});


define('text!subscribe/tpl/subscription-upgrade.html',[],function () { return '<!-- subscribe/tpl/subscription-upgrade.html-->\n<div class="header">\n    <div href="#" clickable="true" data-click="sidebar:toggle" class="header-left">\n        <i class="icon icon-sidebar"></i>\n    </div>\n    <div class="header-right">\n\n    </div>\n    <div class="header-center">\n        <div class="title">\n        <%= _t(\'Memberships\') %>\n        </div>\n    </div>\n</div>\n\n<div class="content with-header swiper-container subscription-index" id="content">\n    <div class="swiper-wrapper">\n        <div class="swiper-slide">\n            <div class="member-status">\n                Your membership status: <strong><span id="user_title"></span></strong>\n            </div>\n            <div class="swiper-list vertical-align" id="subscription_list_holder">\n            </div>\n            <%= utils.helper.loadmore() %>\n        </div>\n    </div>\n</div>\n\n\n';});

define('subscribe/view/subscription-upgrade-item',[
    'text!subscribe/tpl/subscription-item.html'
],function(text) {

    return Backbone.ItemView.extend({
        className: 'subscription-item',
        template: _.template(text),
        events: {
        },

        render: function (context) {

            this.$el.html(this.template({item: this.model}));

            this.$el.attr({
                'id': this.model.getDataId(),
                'rel': 'link',
                'data-url': this.model.getUrl()
            });

            return this;
        },

        inject: function (inject) {
            inject(this.$el);
            return this;
        }
    });
});

define('subscribe/view/subscription-upgrade-list',[
    'subscribe/model/package',
    'subscribe/view/subscription-upgrade-item',
    'text!subscribe/tpl/subscription-list.html'
],function(Model, ItemView, text){

    return Backbone.ListView.extend({
        defaults: {
            iPage: 1,
            iAmountOfSubscribe: 20
        },
        followById: false,
        api: 'subscribe/fetch',
        phraseNotFound: 'No subscription plans found.',
        phraseNotMore: 'No more subscription plans.',
        className: 'subscription-list',
        template: _.template(text),
        itemModel: Model,
        itemView: ItemView
    });
});

define('subscribe/view/subscription-upgrade',[
    'text!subscribe/tpl/subscription-upgrade.html',
    'subscribe/view/subscription-upgrade-list'
],function(text, ListView){

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        template: _.template(text),
        initialize: function(){

        },
        render: function(){

            this.$el.html(this.template());

            return this;
        },
        inject: function(params){

            var $holder = $(this.region.holder).html(this.$el);

            this.$scroller = $(this.region.scroller);

            this.$scroller.ensureVerticalScroll(); // enable scrollable

            this.$userTitle = this.$el.find('#user_title');

            this.fetchData(); // get user level

            this.listView  = new ListView({},
                this.$el.find('#subscription_list_holder'),
                this.$scroller,
                {
                    loadmore: false,
                    loadnew: false
                });


            // render list view
            this.listView.render({sView: 'upgrade'}).inject();

            return this;
        },
        fetchData: function() {

            var settings = {
                context: this
            };

            utils.api.post('user/getusergroupinfo', {}, settings).done(this.fetchDone).fail(this.fetchFail);
        },
        fetchDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }
            // change user title
            this.$userTitle.html(data.sTitle);

        },
        fetchFail: function(jqXHR, textStatus, errorThrown) {

            utils.debug.warn('user/getusergroupinfo', arguments);
        }
    });
});


define('subscribe/controller/subscription-upgrade',[
    'subscribe/view/subscription-upgrade'
], function (IndexView) {

    function subscriptionUpgrade()
    {
        utils.history.push(true);

        utils.observer.trigger('router:changed');

        new IndexView().render().inject();
    }

    utils.router.route('subscriptions/upgrade', subscriptionUpgrade);
});


define('text!subscribe/tpl/subscription-confirm.html',[],function () { return '<!-- subscribe/tpl/subscription-subscribe.html -->\n<div class="header">\n    <div class="header-left">\n        <div class="btn-top" id="back_btn">\n\n        </div>\n    </div>\n    <div class="header-right">\n    </div>\n    <div class="header-center">\n        <div class="title" id="page_title">\n            <%= _t(\'Confirm Payment\') %>\n        </div>\n    </div>\n</div>\n\n<div class="content with-header" id="content">\n    <div id="subscription_confirm_detail">\n\n    </div>\n</div>';});


define('text!subscribe/tpl/subscription-confirm-update.html',[],function () { return '<!-- subscribe/tpl/subscription-confirm-upgrade.html -->\n<div class="subscription-confirm-detail">\n    <div class="yn-title">Confirm your In-app purchase</div>\n    <div class="yn-desc">\n        Do you want to buy membership <strong class="gold"><%=item.getTitle()%></strong> for <strong class="money"><%= item.getCurrencySymbol() %><%= item.getDefaultCost() %></strong> one time\n        <% if (item.getDefaultRecurringCost()) {%>  and then <%= item.getCurrencySymbol() %><%= item.getDefaultRecurringCost() %> <%= item.getRecurringPeriod() %>\n        <%}%>\n    </div>\n    <a href="#" id="buy_btn" class="btn btn-primary btn-small-fluid"><%=_t(\'Buy\')%></a>\n</div>\n</div>';});

define('subscribe/view/subscription-confirm',[
    'core/plugin/purchase',
    'text!subscribe/tpl/subscription-confirm.html',
    'text!subscribe/tpl/subscription-confirm-update.html'
], function(IAP, text, textUpdate) {

    return Backbone.View.extend({
        region: {
            holder: '#main',
            scroller: '#content'
        },
        className: 'subscription-subscribe-page',
        template: _.template(text),
        templateUpdate: _.template(textUpdate),
        moduleId: 'subscribe/view/subscription-subscribe',
        render: function() {

            this.$el.html(this.template({
                item: this.model
            }));

            this.$holder = $('#main');

            this.$el.attr({
                id: this.model.getDataId()
            });

            this.$detailHolder = this.$el.find('#subscription_confirm_detail');

            return this;

        },
        inject: function() {

            this.$holder.html(this.$el);

            this.fetchData();

            // parallel these task
            return this;
        },
        fetchData: function() {
            // get data

            var sendData = {
                    iPackageId: this.model.getId()
                },
                settings = {
                    context: this
                };

            utils.api.get('subscribe/detail', sendData, settings)
                .done(this.fetchDataComplete)
                .fail(this.fetchDataFail);
        },
        fetchDataComplete: function(data) {

            if (data.error_code && data.error_code > 0) {

                utils.modal.alert(data.error_message);

                utils.history.back();
            } else {

                this.model.set(data);

                this.updateView();
            }
        },
        fetchDataFail: function(error, msg) {

            msg = msg || _t('Could not fetch data');

            utils.modal.alert(msg);
        },
        updateView: function() {

            this.$detailHolder.html(this.templateUpdate({
                item: this.model
            }));

            this.$commit_btn = this.$el.find('#buy_btn');

            var $back_btn = $('#back_btn');

            if (this.model.getSignupPurchaseId()) {
                $back_btn.html(_t('Log out'));
            } else {
                $back_btn.html(_t('Cancel'));
            }
        },
        events: {
            'click #buy_btn': 'onBuyClick',
            'click #back_btn': 'onBackClick'
        },
        onBuyClick: function() {

            if (this.$commit_btn.hasClass('processing')) {
                return;
            }

            this.startProcess();

            (constants.platform == 'ios') ? this.initIAP() : this.initIAB();
        },
        initIAP: function() {

            if (!this.model.getStoreKitPurchaseId()) {
                this.stopProcess();
                return utils.modal.alert(_t('In-App Purchases is not available.'));
            }

            if (this.model.getCurrencyId() != 'USD') {
                this.stopProcess();
                return utils.modal.alert(_t('In-App Purchases does not support this currency. Please purchase in web site.'));
            }

            var self = this;

            var IAPLoad = function(products, invalidIds) {
                self.initIAPDone(products, invalidIds);
            };

            var IAPDone = function(transactionId, productId) {
                self.purchaseWithIAPDone(transactionId, productId);
            };

            var IAPError = function(errorCode, errorMessage) {
                self.iPurchaseId ? self.purchaseWithIAPFail(errorCode, errorMessage) : self.initIAPFail(errorMessage);
            };

            IAP.initialize([this.model.getStoreKitPurchaseId()], IAPLoad, IAPDone, IAPError);
        },
        initIAPDone: function(products, invalidIds) {

            this.storeKitPurchase = {};

            for (var i in products) {
                if (products[i].id == this.model.getStoreKitPurchaseId()) {
                    this.storeKitPurchase = $.extend({}, products[i], {
                        price: products[i].price.substr(1)
                    });
                }
            }

            if (!this.storeKitPurchase.id || invalidIds.indexOf(this.model.getStoreKitPurchaseId()) > -1) {
                utils.debug.warn('In-App Purchases Id is invalid.');
                utils.modal.alert(_t('In-App Purchases is not available.'));
                this.stopProcess();
                return;
            }

            this.initPurchase();
        },
        initIAPFail: function(errorMessage) {

            this.stopProcess();

            return utils.modal.alert(errorMessage);
        },
        initIAB: function() {

            if (!window.inappbilling || !this.model.getPlayStoreProductId()) {
                this.stopProcess();
                return utils.modal.alert(_t('In-App Billing is not available.'));
            }

            var self = this;

            var successCb = function() {
                utils.debug.log('SUCCESS: initIAB', arguments);
                self.initPurchase();
            };

            var errorCb = function() {
                utils.debug.warn('ERROR: initIAB', arguments);
                self.stopProcess();
                return utils.modal.alert(_t('In-App Billing is not available.'));
            };

            var options = {
                showLog: true
            };

            var skus = this.model.getPlayStoreProductId();

            inappbilling.init(successCb, errorCb, options); //, skus);
        },
        initPurchase: function() {

            // skip add transaction if user is just sign up because transaction is done automatically on server side
            if (this.model.getSignupPurchaseId()) {
                this.iPurchaseId = this.model.getSignupPurchaseId();
                (constants.platform == 'ios') ? this.purchaseWithIAP() : this.purchaseWithIAB();
            } else {
                this.addTransaction();
            }
        },
        addTransaction: function() {

            var postData = {
                iPackageId: this.model.getId()
            };
            var settings = {
                context: this
            };

            utils.api.post('subscribe/transactionadd', postData, settings).done(this.addTransactionDone).fail(this.addTransactionFail);
        },
        addTransactionDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                this.stopProcess();
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            this.iPurchaseId = data.iPurchaseId;
            (constants.platform == 'ios') ? this.purchaseWithIAP() : this.purchaseWithIAB();
        },
        addTransactionFail: function() {

            utils.debug.warn('FAIL: subscribe/transactionadd', arguments);
            this.stopProcess();
        },
        purchaseWithIAP: function() {

            var quantity = (this.storeKitPurchase.price == 0) ? 1 : Math.ceil(this.model.getDefaultCost() / this.storeKitPurchase.price);

            IAP.buy(this.storeKitPurchase.id, quantity);
        },
        purchaseWithIAPDone: function(transactionId, productId) {

            this.stopProcess();

            this.updateTransaction('success', transactionId);

            utils.modal.alert('Your payment is completed.');

            if (this.model.getSignupPurchaseId()) { // login or back
                utils.modal.toast('Signup sucessfully');
                window.location.href = constants.home;
            } else {
                utils.history.back();
            }
        },
        purchaseWithIAPFail: function(errorCode, errorMessage) {

            this.stopProcess();

            this.updateTransaction('fail');

            utils.modal.alert(errorMessage || _t('Your payment is cancelled.'));
        },
        purchaseWithIAB: function() {

            var self = this;

            var successCb = function(data) {
                utils.debug.log('SUCCESS: purchaseWithIAB', arguments);
                self.purchaseWithIABSuccess(data);
            };

            var errorCb = function(error) {
                utils.debug.warn('ERROR: purchaseWithIAB', arguments);
                self.purchaseWithIABError(error);
            };

            inappbilling.buy(successCb, errorCb, this.model.getPlayStoreProductId());
        },
        purchaseWithIABSuccess: function(data) {

            this.stopProcess();

            this.updateTransaction('success', null, data.orderId);

            utils.modal.alert('Your payment is completed.');

            if (this.model.getSignupPurchaseId()) { // login or back
                utils.modal.toast('Signup sucessfully');
                window.location.href = constants.home;
            } else {
                utils.history.back();
            }
        },
        purchaseWithIABError: function(error) {

            this.stopProcess();

            this.updateTransaction('fail');

            utils.modal.toast(error.match(/\d+:([^\)]+)/)[1] || _t('Your payment is not completed.'));
        },
        updateTransaction: function(sStatus, transactionId, orderId) {

            var postData = {
                iPurchaseId: this.iPurchaseId,
                sStoreKidTransactionId: transactionId,
                sPlayStoreOrderId: orderId,
                sStatus: sStatus,
                sDevice: constants.device
            };
            var settings = {
                context: this
            };

            utils.api.post('subscribe/transactionupdate', postData, settings).done(this.updateTransactionDone).fail(this.updateTransactionFail).always(function() {
                this.iPurchaseId = null;
            });
        },
        updateTransactionDone: function(data) {

            if (data.error_code && data.error_code > 0) {
                return utils.modal.alert(data.error_message || _t('Can not load data from server'));
            }

            utils.debug.log('SUCCESS: subscribe/transactionupdate', data);
        },
        updateTransactionFail: function() {

            utils.debug.warn('FAIL: subscribe/transactionupdate', arguments);

            this.stopProcess();
        },
        startProcess: function() {

            this.$commit_btn.addClass('processing');
            this.$commit_btn.html(_t('Processing...'));
        },
        stopProcess: function() {

            this.$commit_btn.removeClass('processing');
            this.$commit_btn.html(_t('Buy'));
        },
        onBackClick: function() {
            if (this.model.getSignupPurchaseId()) {
                window.location.href = '#logout';
            } else {
                utils.history.back();
            }
        }
    });

});
define('subscribe/controller/subscription-confirm',[
    'subscribe/model/package',
    'subscribe/view/subscription-confirm'
], function (Model, SubscribeView) {

    function subscriptionSubscribe(id, purchaseid)
    {
//        utils.history.push();

        utils.observer.trigger('router:changed');

        new SubscribeView({
            model: new Model({
                iPackageId: id,
                iSignupPurchaseId: purchaseid
            })
        }).render().inject();
    }

    utils.router.route('subscribe/:id', subscriptionSubscribe);
    utils.router.route('subscribe/:id(/:purchaseid)', subscriptionSubscribe);
});

define('subscribe/main',[
    'core',
    'subscribe/controller/subscription-index',
    'subscribe/controller/subscription-upgrade',
    'subscribe/controller/subscription-confirm'
], function(core) {

    core.sidebar.configs.set('subscribe', {
        icon: 'icon-sidebar-subscription',
        label: 'Memberships',
        url: '#subscriptions/upgrade'
    });
});
define('subscribe', ['subscribe/main'], function (main) { return main; });

require.config({
    baseUrl: './',
    packages: [{
        name: 'language',
        location: './app/language'
    }, {
        name: 'utils',
        location: './app/module/utils'
    }, {
        name: 'core',
        location: './app/module/core'
    }, {
        name: 'like',
        location: './app/module/like'
    }, {
        name: 'dislike',
        location: './app/module/dislike'
    }, {
        name: 'comment',
        location: './app/module/comment'
    }, {
        name: 'search',
        location: './app/module/search'
    }, {
        name: 'share',
        location: './app/module/share'
    }, {
        name: 'rate',
        location: './app/module/rate'
    }, {
        name: 'report',
        location: './app/module/report'
    }, {
        name: 'activity',
        location: './app/module/activity'
    }, {
        name: 'request',
        location: './app/module/request'
    }, {
        name: 'message',
        location: './app/module/message'
    }, {
        name: 'notification',
        location: './app/module/notification'
    }, {
        name: 'activity',
        location: './app/module/activity'
    }, {
        name: 'link',
        location: './app/module/link'
    }, {
        name: 'user',
        location: './app/module/user'
    }, {
        name: 'friend',
        location: './app/module/friend'
    }, {
        name: 'photo',
        location: './app/module/photo'
    }, {
        name: 'video',
        location: './app/module/video'
    }, {
        name: 'music',
        location: './app/module/music'
    }, {
        name: 'template',
        location: './app/template'
    }, {
        name: 'event',
        location: './app/module/event'
    }, {
        name: 'forum',
        location: './app/module/forum'
    }, {
        name: 'chat',
        location: './app/module/chat'
    }, {
        name: 'comet',
        location: './app/module/comet'
    }, {
        name: 'attachment',
        location: './app/module/attachment'
    }, {
        name: 'blog',
        location: './app/module/blog'
    }, {
        name: 'page',
        location: './app/module/page'
    }, {
        name: 'quiz',
        location: './app/module/quiz'
    }, {
        name: 'forum',
        location: './app/module/forum'
    }, {
        name: 'poll',
        location: './app/module/poll'
    }, {
        name: 'marketplace',
        location: './app/module/marketplace'
    }, {
        name: 'subscribe',
        location: './app/module/subscribe'
    }],
    paths: {
        /// backbone.
        backbone: './app/vendor/backbone/backbone',
        text: './app/vendor/requirejs-text/text',
        json: './app/vendor/requirejs-json/json',
        jquery: './app/vendor/jquery/dist/jquery.js',
        underscore: './app/vendor/underscore/underscore',
        fastclick: './app/vendor/fastclick/lib/fastclick',
        bpopup: './app/vendor/bpopup/jquery.bpopup',
        swiper: './app/vendor/swiper/dist/idangerous.swiper',
        SocialConnect: './app/vendor/socialconnect/socialconnect',
        // weinre : 'http://localhost:8080/target/target-script-min.js#anonymous',
        beeber_box: './app/vendor/jquery.plugin/jquery.beeber_box',
        // pullToRefresh: './app/vendor/jquery.plugin.pullup',
        // supported html player, required for module music.
        CONTROLLER_PLAYER: './app/vendor/htmlplayer/controller_player',
        MediaElelementPlayer: './app/vendor/htmlplayer/mediaelement-and-player',
        // jcrop library
        jcrop: './app/vendor/jcrop/js/jquery.Jcrop',
        jcolor: './app/vendor/jcrop/js/jquery.color',
        'jquery.i18n': './app/vendor/jquery-i18n/jquery.i18n',
        'moment': './app/vendor/momentjs/moment',
        'numeral': './app/vendor/numeral/numeral',
        'underscore.string': './app/vendor/underscore.string/underscore.string',
        'cutstring': './app/vendor/htmlcut/cutstring',
        'iScroll': './app/vendor/iscroll/iscroll',

        //image cache library << Nay 
        'imgcache': './app/vendor/imgcache.js/js/imgcache'
    },
    config: {
        text: {
            template: 'android'
        }
    },
    // prevent timeout error
    waitSeconds: 10,
    map: {},
    shim: {
        fastclick: {
            exports: 'Fastclick'
        },
        beeber_box: {},
        CONTROLLER_PLAYER: {
            deps: ['MediaElelementPlayer'],
            exports: 'CONTROLLER_PLAYER'
        },
        jcrop: {
            exports: 'jcrop'
        },
        jcolor: {
            exports: 'jcolor'
        },
        SocialConnect: {
            exports: 'SocialConnect'
        }
        // 'backbone' : {
        // deps : ['underscore', 'jquery'],
        // exports : 'Backbone'
        // },
        // 'underscore' : {
        // exports : '_'
        // }
    }
});

// treat this code for reactive webview after inject an iframe.
require([
    'utils',
    'core',
    'like',
    'dislike',
    'comment',
    'share',
    'rate',
    'report',
    'user',
    'activity',
    'request',
    'friend',
    'message',
    'link',
    'notification',
    // extends plugins
    'video',
    'photo',
    'music',
    'event',
    'chat',
    'forum',
    // 'comet',
    'blog',
    'page',
    'poll',
    'quiz',
    'marketplace',
    'subscribe'
], function() {

    // trigger app init
    utils.observer.trigger('app:init');

    Backbone.history.start();

    // trigger app started
    utils.observer.trigger('app:run');

});
define("app", function(){});

